' Gambas class file

''controls
Private aWebFrame As New Object[50]
Private aWebPanel As New Object[50]
Private aIndexLabel As New Object[50]
Private aNameLabel As New Object[50]
Private aAbnormCheck As New Object[50]
Private aContLeft As New Object[50]
Private aMidLine As New Object[50]
Private aContRight As New Object[50]

Private aHTMLTextR As New Object[50]
Private aLineTextR As New Object[50]
Private aUnitTextR As New Object[50]
Private aValueBoxR As New Object[50]
' Private aQuantiBoxR As New Object[50]
' Private aQuantiMaxR As New Object[50]
' Private aQuantiMinR As New Object[50]
Private aClinBoxR As New Object[50]
Private aDateBoxR As New Object[50]
Private aBSDateR As New Object[50]
Private aComboBoxR As New Object[50]
Private aTextAreaR As New Object[50]
Private aDichoValueR As New Object[50]
Private aGenTextAreaR As New Object[50]
Private aButtonBoxR As New Object[50]
Private aHelpButtonR As New Object[50]

Private aHTMLTextL As New Object[50]
Private aLineTextL As New Object[50]
Private aUnitTextL As New Object[50]
Private aValueBoxL As New Object[50]
' Private aQuantiBoxL As New Object[50]
' Private aQuantiMaxL As New Object[50]
' Private aQuantiMinL As New Object[50]
Private aClinBoxL As New Object[50]
Private aDateBoxL As New Object[50]
Private aBSDateL As New Object[50]
Private aComboBoxL As New Object[50]
Private aTextAreaL As New Object[50]
Private aDichoValueL As New Object[50]
Private aGenTextAreaL As New Object[50]
Private aButtonBoxL As New Object[50]
Private aHelpButtonL As New Object[50]

Private aBlankBox As New Object[50]
Private aWebSpace As New Object[50]
''other variables
Private $encid As String
Private $sTable As String
Private $idList As String[]
Private $sCategory As String
''Arrays
Private $xCode As String[]
Private $xType As String[]
Private $xOption As String[]
Private $xitem As String[]
Private $xExam As String[]
Private $xOpList As String[]
Private $xSysCons As String[]
Private $xSource As String[]
Private $xHelpList As String[]
Private $xUniqList As Integer[]
Private $xDefaultLst As String[]

Private AppFactor As Float
Private $FocusTag As Integer
Private $FocusSide As String

''----------------------------------------- create controls -----------------------------------------
Public Sub _new(sPrompt As String, encid As String, sTable As String, idList As String[], sCategory As String)

  Dim idx As String
  Dim i As Integer
  Dim ht As String

  Dim rsn As Result
  Dim res As Result

  Dim xcode As String
  Dim xType As String
  Dim xOption As String
  Dim xitem As String
  Dim xexam As String
  Dim xopList As String[]
  Dim xSysCons As String
  Dim xsource As String
  Dim xhelp As String
  Dim xuniq As Integer
  Dim xdefVal As String

  $encid = encid
  $sTable = sTable
  $idList = idList
  $sCategory = sCategory
  lblitem.Text = sPrompt

  AppFactor = modBasic.$AppScaleFactor
  ht = modSettings.ShowSettingFromFIle("MultipleTextBox/Height")
  If ht Then
    Slider1.Value = CInt(ht)
  Else
    Slider1.Value = 3
  Endif

  $xCode = New String[]
  $xType = New String[]
  $xOption = New String[]
  $xitem = New String[]
  $xExam = New String[]
  $xOpList = New String[]
  $xSysCons = New String[]
  $xSource = New String[]
  $xHelpList = New String[]
  $xUniqList = New Integer[]
  $xDefaultLst = New String[]

  For Each idx In $idList
    rsn = modDatabase.$myConn.Exec("select fldheadcode,fldhead,fldtesttype,fldtanswertype,fldsysconst,fldclininfo,fldunique,flddefault from tblstructexam where fldheadcode=&1 and fldtesttype=&2 ORDER BY fldheadid", idx, "Qualitative")
    If rsn.Available Then
      xcode = rsn["fldheadcode"]
      xitem = rsn["fldhead"]
      xType = rsn["fldtesttype"]
      xOption = rsn["fldtanswertype"]
      xSysCons = rsn["fldsysconst"]
      xhelp = rsn["fldclininfo"]
      If rsn["fldunique"] = True Then
        xuniq = 1
      Else
        xuniq = 0
      Endif
      xdefVal = rsn["flddefault"]
      xsource = "Free"

      ''get parameters
      If rsn["fldtanswertype"] = "Sys Constant" And If rsn["fldsysconst"] Then
        If modBasic.$sysExamDualList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select fldexamid,fldtype,fldoption from tblexam where fldsysconst=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldtype"]
            xOption = res["fldoption"]
            xexam = res["fldexamid"]
            If res["fldoption"] = "Clinical Scale" Then
              xopList = modAllExam.GetCLinicalScaleOptions("Exam", xexam)
            Else
              xopList = modAllExam.SelectExamOptionList("Exam", xexam)
            Endif
            xsource = "Exam"
          Endif
        Else If modBasic.$sysTestDualList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select fldtestid,fldtype,fldoption from tbltest where fldsysconst=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldtype"]
            xOption = res["fldoption"]
            xexam = res["fldtestid"]
            If res["fldoption"] = "Clinical Scale" Then
              xopList = modAllExam.GetCLinicalScaleOptions("Test", xexam)
            Else
              xopList = modAllExam.SelectExamOptionList("Test", xexam)
            Endif
            xsource = "Test"
          Endif
        Else If modBasic.$sysRadioList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select fldexamid,fldtype,fldoption from tblradio where fldsysconst=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldtype"]
            xOption = res["fldoption"]
            xexam = res["fldexamid"]
            If res["fldoption"] = "Clinical Scale" Then
              xopList = modAllExam.GetCLinicalScaleOptions("Radio", xexam)
            Else
              xopList = modAllExam.SelectExamOptionList("Radio", xexam)
            Endif
            xsource = "Radio"
          Endif
        Else If modBasic.$DemogList.Exist(rsn["fldsysconst"]) = True Then
          res = modDatabase.$myConn.Exec("select flddemoid,fldoption from tbldemographic where flddemoid=&1", rsn["fldsysconst"])
          If res.Available Then
            xType = res["fldoption"]
            xOption = res["fldoption"]
            xexam = res["flddemoid"]
            xopList = modAllExam.SelectExamOptionList("Demog", xexam)
            xsource = "Demog"
          Endif
        Endif

      Else If rsn["fldtanswertype"] = "CopyValue" And If rsn["fldsysconst"] Then
        If modBasic.$sysExamDualList.Exist(rsn["fldsysconst"]) = True Then
          xexam = modFixClinic.GetExamIDFromSysConst(rsn["fldsysconst"])
          xsource = "Exam"
        Else If modBasic.$sysTestDualList.Exist(rsn["fldsysconst"]) = True Then
          xexam = modFixLab.GetLabTestIDFromSysConst(rsn["fldsysconst"])
          xsource = "Test"
        Else If modBasic.$sysRadioList.Exist(rsn["fldsysconst"]) = True Then
          xexam = modFixRadio.GetRadioTestIDFromSysConst(rsn["fldsysconst"])
          xsource = "Radio"
        Endif

      Else If rsn["fldtanswertype"] = "Calculated" And If rsn["fldsysconst"] Then
        xexam = "Expression"

      Else
        xopList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldanswer from tblstructexamoption where fldheadcode=&1 ORDER BY fldindex", idx))                         ''
        xexam = "Structured"
      Endif

      $xCode.Add(xcode)
      $xitem.Add(xitem)
      If xexam Then
        $xExam.Add(xexam)
      Else
        $xExam.Add("__")
      Endif
      If xType Then
        $xType.Add(xType)
      Else
        $xType.Add("__")
      Endif
      If xOption Then
        $xOption.Add(xOption)
      Else
        $xOption.Add("__")
      Endif
      If xopList And If xopList.Count Then
        $xOpList.Add(xopList.Join("|"))
      Else
        $xOpList.Add("__")
      Endif
      If xSysCons Then
        $xSysCons.Add(xSysCons)
      Else
        $xSysCons.Add("__")
      Endif
      If xsource Then
        $xSource.Add(xsource)
      Else
        $xSource.Add("__")
      Endif
      If xhelp Then
        $xHelpList.Add(xhelp)
      Else
        $xHelpList.Add("Null")
      Endif
      $xUniqList.Add(xuniq)
      If xdefVal Then
        $xDefaultLst.Add(xdefVal)
      Else
        $xDefaultLst.Add("__")
      Endif

    Endif
  Next

  For i = 0 To $xitem.Count - 1
    If i < 49 Then
      ''Create controls
      aWebFrame[i] = New WebHBox(Frame1)
      aIndexLabel[i] = New WebLabel(aWebFrame[i]) As "IndexLabel"
      aNameLabel[i] = New WebHtml(aWebFrame[i]) As "NameLabel"

      aWebPanel[i] = New WebHBox(Frame1)
      aAbnormCheck[i] = New WebCheckBox(aWebPanel[i]) As "CheckBoxgroup"

      aContRight[i] = New WebHBox(aWebPanel[i])
      aMidLine[i] = New WebLabel(aWebPanel[i])
      aContLeft[i] = New WebHBox(aWebPanel[i])
      If $xType[i] = "Quantitative" Then
        ' ''Right
        ' aQuantiBoxR[i] = New ValueBox(aContRight[i]) As "QuantiGroupR"
        ' aQuantiMaxR[i] = New ValueBox(aContRight[i]) As "QuantiGroupMaxR"
        ' aQuantiMinR[i] = New ValueBox(aContRight[i]) As "QuantiGroupMinR"
        ' ''Left
        ' aQuantiBoxL[i] = New ValueBox(aContLeft[i]) As "QuantiGroupL"
        ' aQuantiMaxL[i] = New ValueBox(aContLeft[i]) As "QuantiGroupMaxL"
        ' aQuantiMinL[i] = New ValueBox(aContLeft[i]) As "QuantiGroupMinL"
      Else
        Select $xOption[i]
          Case "Sys Constant"
            ''Right
            aGenTextAreaR[i] = New WebTextArea(aContRight[i]) As "GenAreaGroupR"
            ''Left
            aGenTextAreaL[i] = New WebTextArea(aContLeft[i]) As "GenAreaGroupL"
          Case "Date Time", "BS Date"
            ''Right
            aDateBoxR[i] = New WebDateBox(aContRight[i]) As "DateGroupR"
            aBSDateR[i] = New WebButton(aContRight[i]) As "BSButtonR"
            ''Left
            aDateBoxL[i] = New WebDateBox(aContLeft[i]) As "DateGroupL"
            aBSDateL[i] = New WebButton(aContLeft[i]) As "BSButtonL"
          Case "User Profile"
            ''Right
            aLineTextR[i] = New WebTextBox(aContRight[i]) As "TextLineGroupR"
            ''Left
            aLineTextL[i] = New WebTextBox(aContLeft[i]) As "TextLineGroupL"
          Case "ImageValue"
            ''Right
            aButtonBoxR[i] = New WebButtonBox(aContRight[i]) As "ImageBoxGroupR"
            ''Left
            aButtonBoxL[i] = New WebButtonBox(aContLeft[i]) As "ImageBoxGroupL"
          Case "Single Selection"
            ''Right
            aComboBoxR[i] = New WebComboBox(aContRight[i]) As "ComboGroupR"
            ''Left
            aComboBoxL[i] = New WebComboBox(aContLeft[i]) As "ComboGroupL"
          Case "Dichotomous"
            ''Right
            aDichoValueR[i] = New DichotomousValue(aContRight[i]) As "DichoTextR"
            ''Left
            aDichoValueL[i] = New DichotomousValue(aContLeft[i]) As "DichoTextL"
          Case "Quantitative"
            ''Right
            aValueBoxR[i] = New WebValueBox(aContRight[i]) As "ValueGroupR"
            aUnitTextR[i] = New WebTextBox(aContRight[i]) As "UnitGroupR"
            ''Left
            aValueBoxL[i] = New WebValueBox(aContLeft[i]) As "ValueGroupL"
            aUnitTextL[i] = New WebTextBox(aContLeft[i]) As "UnitGroupL"
          Case "Qualitative"
            ''Right
            aLineTextR[i] = New WebTextBox(aContRight[i]) As "TextLineGroupR"
            ''Left
            aLineTextL[i] = New WebTextBox(aContLeft[i]) As "TextLineGroupL"
          Case "Clinical Scale"
            ''Right
            aTextAreaR[i] = New WebTextArea(aContRight[i]) As "TextAreaGroupR"
            aClinBoxR[i] = New WebValueBox(aContRight[i]) As "ClinGroupR"
            ''Left
            aTextAreaL[i] = New WebTextArea(aContLeft[i]) As "TextAreaGroupL"
            aClinBoxL[i] = New WebValueBox(aContLeft[i]) As "ClinGroupL"
          Case "RichText Area"
            ''Right
            aHTMLTextR[i] = New WebTextHTML(aContRight[i]) As "TextHTMLgroupR"
            ''Left
            aHTMLTextL[i] = New WebTextHTML(aContLeft[i]) As "TextHTMLgroupL"
          Case Else
            ''Right
            aGenTextAreaR[i] = New WebTextArea(aContRight[i]) As "GenAreaGroupR"
            ''Left
            aGenTextAreaL[i] = New WebTextArea(aContLeft[i]) As "GenAreaGroupL"
        End Select
      Endif
      aHelpButtonR[i] = New WebButton(aContRight[i]) As "ButtonBoxgroupR"
      aHelpButtonL[i] = New WebButton(aContLeft[i]) As "ButtonBoxgroupL"
      aBlankBox[i] = New WebLabel(aWebPanel[i])
      aWebSpace[i] = New WebSeparator(Frame1)
    Endif
  Next
  DIsplayTextForm()

End

''------------------------ General form
Private Sub DIsplayTextForm()

  Dim i As Integer

  For i = 0 To $xitem.Count - 1
    If i < 49 Then

      ''create index label
      With aIndexLabel[i]
        .Width = "2.5%"
        .Height = "2em"
        .Text = i + 1
        .Visible = False
        .Tag = i
      End With

      ''create Name Label
      With aNameLabel[i]
        .Expand = True
        .Font = "bold"
        .Text = "<p>" & $xitem[i] & "</p>"
        .Font = "bold"
        .Tag = i
        If $xHelpList[i] = "Null" Then
          .Tooltip = ""
        Else
          .Tooltip = $xHelpList[i]
        Endif
      End With

      With aWebPanel[i]
        .Class = "less-container-margin"
      End With

      ''create abnormal checkbox
      With aAbnormCheck[i]
        .Width = "5em"
        .Height = "2em"
        .Text = "Flag"
        .Tag = i

        If modBasic.$ClinFlagAbnormExam = "Disable" Then
          .Visible = False
        Else
          .Visible = True
        Endif
      End With

      With aContRight[i]
        .Expand = True
        .Margin = True
      End With

      With aMidLine[i]
        .Width = "4em"
      End With

      With aContLeft[i]
        .Expand = True
        .Margin = True
      End With

      ''create observation entry
      If $xType[i] = "Quantitative" Then
        ' xlimit = modClinic.GetBothQuantiExamVal($xExam[i], $encid)
        ' ''Right
        ' With aQuantiBoxR[i]
        '   .Width = 100 * AppFactor
        '   .Height = 25 * AppFactor
        '   .Tag = i
        ' End With
        ' 'min value
        ' With aQuantiMinR[i]
        '   .Width = 75 * AppFactor
        '   .Height = 25 * AppFactor
        '   .Enabled = False
        '   .Value = xlimit[0]
        '   .Tag = i
        ' End With
        ' ''max value
        ' With aQuantiMaxR[i]
        '   .Width = 75 * AppFactor
        '   .Height = 25 * AppFactor
        '   .Enabled = False
        '   .Value = xlimit[1]
        '   .Tag = i
        ' End With
        ' ''Left
        ' With aQuantiBoxL[i]
        '   .Width = 100 * AppFactor
        '   .Height = 25 * AppFactor
        '   .Tag = i
        ' End With
        ' 'min value
        ' With aQuantiMinL[i]
        '   .Width = 75 * AppFactor
        '   .Height = 25 * AppFactor
        '   .Enabled = False
        '   .Value = xlimit[0]
        '   .Tag = i
        ' End With
        ' ''max value
        ' With aQuantiMaxL[i]
        '   .Width = 75 * AppFactor
        '   .Height = 25 * AppFactor
        '   .Enabled = False
        '   .Value = xlimit[1]
        '   .Tag = i
        ' End With

      Else
        If $xOption[i] = "Single Selection" Then
          ''Right
          With aComboBoxR[i]
            .Expand = True
            .Height = "2em"
            .ReadOnly = False
            .List = Split($xOpList[i], "|")
            .Tag = i
          End With
          ''Left
          With aComboBoxL[i]
            .Expand = True
            .Height = "2em"
            .ReadOnly = False
            .List = Split($xOpList[i], "|")
            .Tag = i
          End With

        Else If $xOption[i] = "Dichotomous" Then
          ''Right
          With aDichoValueR[i]
            .Expand = True
            .Height = "2em"
            .List = Split($xOpList[i], "|")
            .Tag = i
          End With
          ''Left
          With aDichoValueL[i]
            .Expand = True
            .Height = "2em"
            .List = Split($xOpList[i], "|")
            .Tag = i
          End With

        Else If $xOption[i] = "Date Time" Then
          ''Right
          With aDateBoxR[i]
            .Width = "12em"
            .Height = "2em"
            .DateTime = True
            .Tag = i
          End With
          With aBSDateR[i]
            .Width = "2em"
            .Height = "2em"
            .Image = "icon:/small/calendar"
            .Tag = i
          End With
          ''Left
          With aDateBoxL[i]
            .Width = "12em"
            .Height = "2em"
            .DateTime = True
            .Tag = i
          End With
          With aBSDateL[i]
            .Width = "2em"
            .Height = "2em"
            .Image = "icon:/small/calendar"
            .Tag = i
          End With

        Else If $xOption[i] = "BS Date" Then
          ''Right
          With aDateBoxR[i]
            .Width = "12em"
            .Height = "2em"
            .DateTime = True
            .Tag = i
          End With
          With aBSDateR[i]
            .Width = "2em"
            .Height = "2em"
            .Image = "icon:/small/calendar"
            .Tag = i
          End With
          ''Left
          With aDateBoxL[i]
            .Width = "12em"
            .Height = "2em"
            .DateTime = True
            .Tag = i
          End With
          With aBSDateL[i]
            .Width = "2em"
            .Height = "2em"
            .Image = "icon:/small/calendar"
            .Tag = i
          End With

        Else If $xOption[i] = "User Profile" Then
          ''Right
          With aLineTextR[i]
            .Expand = True
            .Height = "2em"
            .Tag = i
          End With
          ''Left
          With aLineTextL[i]
            .Expand = True
            .Height = "2em"
            .Tag = i
          End With

        Else If $xOption[i] = "ImageValue" Then
          ''Right
          With aButtonBoxR[i]
            .Expand = True
            .Height = "2em"
            .Text = ""
            .Tag = i
          End With
          ''Left
          With aButtonBoxL[i]
            .Expand = True
            .Height = "2em"
            .Text = ""
            .Tag = i
          End With

        Else If $xOption[i] = "Clinical Scale" Then
          ''Right
          With aTextAreaR[i]
            .Expand = True
            .Height = CStr(2 * Slider1.Value) & "em"
            .Wrap = True
            .Tag = i
          End With
          With aClinBoxR[i]
            .Width = "6em"
            .Height = "2em"
            .Tag = i
          End With
          ''Left
          With aTextAreaL[i]
            .Expand = True
            .Height = CStr(2 * Slider1.Value) & "em"
            .Wrap = True
            .Tag = i
          End With
          With aClinBoxL[i]
            .Width = "6em"
            .Height = "2em"
            .Tag = i
          End With

        Else If $xOption[i] = "Quantitative" Then
          ''Right
          With aValueBoxR[i]
            .Width = "6em"
            .Height = "2em"
            .Tag = i
          End With
          With aUnitTextR[i]
            .Expand = True
            .Height = "2em"
            .Tag = i
          End With
          ''Left
          With aValueBoxL[i]
            .Width = "6em"
            .Height = "2em"
            .Tag = i
          End With
          With aUnitTextL[i]
            .Expand = True
            .Height = "2em"
            .Tag = i
          End With

        Else If $xOption[i] = "Qualitative" Then
          ''Right
          With aLineTextR[i]
            .Expand = True
            .Height = "2em"
            .Tag = i
          End With
          ''Left
          With aLineTextL[i]
            .Expand = True
            .Height = "2em"
            .Tag = i
          End With

        Else If $xOption[i] = "RichText Area" Then
          ''Right
          With aHTMLTextR[i]
            .Expand = True
            .Height = CStr(2 * Slider1.Value) & "em"
            ' .DictionaryPath = modBasic.$dictPathList
            .Tag = i
          End With
          ''Left
          With aHTMLTextL[i]
            .Expand = True
            .Height = CStr(2 * Slider1.Value) & "em"
            ' .DictionaryPath = modBasic.$dictPathList
            .Tag = i
          End With

        Else
          ''Right
          With aGenTextAreaR[i]
            .Expand = True
            .Height = CStr(2 * Slider1.Value) & "em"
            .Wrap = True
            ' .DictionaryPath = modBasic.$dictPathList
            .Tag = i
          End With
          ''Left
          With aGenTextAreaL[i]
            .Expand = True
            .Height = CStr(2 * Slider1.Value) & "em"
            .Wrap = True
            ' .DictionaryPath = modBasic.$dictPathList
            .Tag = i
          End With

        Endif
      Endif

      ''create help button
      ''Right
      With aHelpButtonR[i]
        .Class = "toolButton"
        .Width = "2em"
        .Height = "2em"
        .Text = ""
        .Image = "icon:/small/info"
        .Tag = i
        .Tooltip = "[Ctrl+O] to display Options"
      End With
      ''Left
      With aHelpButtonL[i]
        .Class = "toolButton"
        .Width = "2em"
        .Height = "2em"
        .Text = ""
        .Image = "icon:/small/info"
        .Tag = i
        .Tooltip = "[Ctrl+O] to display Options"
      End With

      With aBlankBox[i]
        .Height = "2em"
        .Width = "1em"
      End With

      With aWebSpace[i]
        .Height = "1em"
      End With

    Endif
  Next

End

''Right
Public Sub BSButtonR_Click()

  Dim j As Integer
  Dim xx As String

  j = Last.Tag
  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(aDateBoxR[j].Value))
  If xx Then
    aDateBoxR[j].Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

''Left
Public Sub BSButtonL_Click()

  Dim j As Integer
  Dim xx As String

  j = Last.Tag
  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(aDateBoxL[j].Value))
  If xx Then
    aDateBoxL[j].Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub btntemplsumm_Click()

  ' Dim j As Integer
  '
  ' Try j = Application.ActiveControl.Tag
  ' If aHTMLTextR[j] Then
  '   aHTMLTextR[j].RichText = aHTMLTextR[j].RichText & DictionaryVIew(modBasic.$dictadvPath)
  ' Else If aGenTextAreaR[j] Then
  '   aGenTextAreaR[j].Text = aGenTextAreaR[j].Text & DictionaryVIew(modBasic.$dictadvPath)
  ' Else If aHTMLTextL[j] Then
  '   aHTMLTextL[j].RichText = aHTMLTextL[j].RichText & DictionaryVIew(modBasic.$dictadvPath)
  ' Else If aGenTextAreaL[j] Then
  '   aGenTextAreaL[j].Text = aGenTextAreaL[j].Text & DictionaryVIew(modBasic.$dictadvPath)
  ' Endif

End

Public Sub btnrefresh_Click()

  modSettings.SaveSettingsToFile("MultipleTextBox/Height", Slider1.Value)
  DIsplayTextForm()

End

Public Sub btnBrChange_Click()

  Me.Close()

End

Public Sub btnBrOK_Click()

  FillExamSubExam()
  btnBrOK.Enabled = False
  Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))

End

' Private Sub SetAbnormCheckBox()
'
'   Dim j As Integer
'
'   j = Last.Tag
'   aAbnormCheck[j].Value = False
'   ''Right
'   If aQuantiBoxR[j].Value Then
'     If aQuantiMinR[j].Value <> aQuantiMaxR[j].Value Then
'       If aQuantiBoxR[j].Value < aQuantiMinR[j].Value Or If aQuantiBoxR[j].Value > aQuantiMaxR[j].Value Then
'         aAbnormCheck[j].Value = True
'       Endif
'     Endif
'   Endif
'   ''Left
'   If aQuantiBoxL[j].Value Then
'     If aQuantiMinL[j].Value <> aQuantiMaxL[j].Value Then
'       If aQuantiBoxL[j].Value < aQuantiMinL[j].Value Or If aQuantiBoxL[j].Value > aQuantiMaxL[j].Value Then
'         aAbnormCheck[j].Value = True
'       Endif
'     Endif
'   Endif
'
'   If aAbnormCheck[j].Value = True Then
'     aAbnormCheck[j].Foreground = Color.Red
'   Else
'     aAbnormCheck[j].Foreground = Color.Default
'   Endif
'
' End
'
' ''Right
' Public Sub QuantiGroupR_Change()
'
'   SetAbnormCheckBox()
'
' End
'
' ''Left
' Public Sub QuantiGroupL_Change()
'
'   SetAbnormCheckBox()
'
' End

Private Function GetJsonTwin(sRight As String, sLeft As String) As String

  Dim xx As String

  xx = modString.GetLefRightJSON(sLeft, sRight)
  Return xx

End

Private Sub FillExamSubExam()

  Dim i As Integer
  Dim xval As Variant
  Dim xOptionTyp As String = "Left/Right Components"

  For i = 0 To $xitem.Count - 1
    If i < 49 Then

      If $xOption[i] = "Single Selection" Then
        If aComboBoxR[i].Text Or If aComboBoxL[i].Text Then
          xval = GetJsonTwin(aComboBoxR[i].Text, aComboBoxL[i].Text)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "Dichotomous" Then
        If aDichoValueR[i].Value Or If aDichoValueL[i].Value Then
          xval = GetJsonTwin(aDichoValueR[i].Value, aDichoValueL[i].Value)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "Date Time" Then
        If aDateBoxR[i].Value Or If aDateBoxL[i].Value Then
          xval = GetJsonTwin(modDate.DateStringForExam(aDateBoxR[i].Value), modDate.DateStringForExam(aDateBoxL[i].Value))
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "BS Date" Then
        If aDateBoxR[i].Value Or If aDateBoxL[i].Value Then
          xval = GetJsonTwin(modDate.ConvertToLocaldate(aDateBoxR[i].Value), modDate.ConvertToLocaldate(aDateBoxL[i].Value))
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "User Profile" Then
        If aLineTextR[i].Text Or If aLineTextL[i].Text Then
          xval = GetJsonTwin(aLineTextR[i].Text, aLineTextL[i].Text)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "ImageValue" Then
        If aButtonBoxR[i].Text Or If aButtonBoxL[i].Text Then
          xval = GetJsonTwin(aButtonBoxR[i].Text, aButtonBoxL[i].Text)
          modClinSub.AddQualiImageData($encid, $idList[i], $xitem[i], xOptionTyp, $sTable, $xSysCons[i], xval, $sCategory)
        Endif
      Else If $xOption[i] = "Quantitative" Then
        If aValueBoxR[i].Value Or If aValueBoxL[i].Value Then
          xval = GetJsonTwin(CStr(aValueBoxR[i].Value) & Space(1) & aUnitTextR[i].Text, CStr(aValueBoxL[i].Value) & Space(1) & aUnitTextL[i].Text)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "Qualitative" Then
        If aLineTextR[i].Text Or If aLineTextL[i].Text Then
          xval = GetJsonTwin(aLineTextR[i].Text, aLineTextL[i].Text)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else If $xOption[i] = "Clinical Scale" Then
        If aTextAreaR[i].Text Or If aTextAreaL[i].Text Then
          xval = GetJsonTwin(CStr(aClinBoxR[i].Value), CStr(aClinBoxL[i].Value))
          modClinSub.AddClinicExam($encid, $idList[i], $xitem[i], xOptionTyp, xval, 0, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory)
        Endif
      Else If $xOption[i] = "RichText Area" Then
        If aHTMLTextR[i].Text Or If aHTMLTextL[i].Text Then
          xval = GetJsonTwin(aHTMLTextR[i].RichText, aHTMLTextL[i].RichText)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Else
        If aGenTextAreaR[i].Text Or If aGenTextAreaL[i].Text Then
          xval = GetJsonTwin(aGenTextAreaR[i].Text, aGenTextAreaL[i].Text)
          modClinSub.AddQualiDataUniq($encid, $idList[i], $xitem[i], xOptionTyp, xval, aAbnormCheck[i].Value, $sTable, $xSysCons[i], $sCategory, $xUniqList[i])
        Endif
      Endif

    Endif
  Next

End

''-----------------------------help options  --------------------------------------
''Right
Public Sub ButtonBoxgroupR_Click()

  Dim j As Integer

  j = Last.Tag
  $FocusTag = j
  $FocusSide = "R"

  OpenOptionR(j)

End

''Left
Public Sub ButtonBoxgroupL_Click()

  Dim j As Integer

  j = Last.Tag
  $FocusTag = j
  $FocusSide = "L"

  OpenOptionL(j)

End

''Right
Private Sub OpenOptionR(j As Integer)

  Dim sVal As String[]
  Dim sPath As String
  Dim xval As String
  Dim xopt As String[]
  Dim acalc As Variant

  If $xType[j] = "Quantitative" Then
    ' If $xOption[j] = "Calculated" Then
    '   If $xExam[j] = "Expression" Then
    '     acalc = GetCalculateFloatR($xSysCons[j], $encid)
    '   Else If $xExam[j] = "Structured" Then
    '     acalc = GetCalculateFloatR($xSysCons[j], $encid)
    '   Else
    '     xval = modAllExam.GetExamDefaultValue("Exam", $xExam[j])
    '     If xval Then
    '       acalc = GetCalculateFloatR(xval, $encid)
    '     Endif
    '   Endif
    '   If acalc Then
    '     aQuantiBoxR[j].Value = acalc
    '   Else
    '     aQuantiBoxR[j].Value = 0
    '   Endif
    '
    ' Else If $xOption[j] = "CopyValue" Then
    '   acalc = modReportVar.GetLastQuantiParamValue($xSource[j], $xExam[j], $encid)
    '   If acalc Then
    '     aQuantiBoxR[j].Value = acalc
    '   Else
    '     aQuantiBoxR[j].Value = 0
    '   Endif
    '
    ' Else
    '   xflot = GetQuantiValues("Exam", $encid, $xitem[j], 0, 0, aQuantiBoxR[j].Value)
    '   If xflot Then
    '     acalc = xflot[0]
    '     If acalc Then
    '       aQuantiBoxR[j].Value = acalc
    '     Else
    '       aQuantiBoxR[j].Value = 0
    '     Endif
    '   Endif
    '
    ' Endif

  Else
    If $xOpList[j] Then
      xopt = Split($xOpList[j], "|")
    Endif

    If $xOption[j] = "No Selection" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aGenTextAreaR[j].Text = $xDefaultLst[j]
        Endif
      Endif
    Else If $xOption[j] = "RichText Area" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aHTMLTextR[j].RichText = $xDefaultLst[j]
        Endif
      Endif
    Else If $xOption[j] = "Qualitative" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aLineTextR[j].Text = $xDefaultLst[j]
        Endif
      Endif

    Else If $xOption[j] = "Single Selection" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Single Selection", $xitem[j])
        If sVal Then
          aComboBoxR[j].Text = sVal.Join(";")
        Endif
      Endif

    Else If $xOption[j] = "Dichotomous" Then

    Else If $xOption[j] = "Clinical Scale" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Clinical Scale", $xExam[j])
        If sVal Then
          aClinBoxR[j].Value = sVal[0]
          aTextAreaR[j].Text = sVal[1]
        Endif
      Endif

    Else If $xOption[j] = "Date Time" Then
      If $xExam[j] = "Expression" Then
        acalc = GetCalculateVariantR($xSysCons[j], $encid)
        If IsDate(acalc) Then
          aDateBoxR[j].Value = CDate(acalc)
        Endif
      Else If $xExam[j] = "Structured" Then
        acalc = GetCalculateVariantR($xSysCons[j], $encid)
        If IsDate(acalc) Then
          aDateBoxR[j].Value = CDate(acalc)
        Endif
      Else
        aDateBoxR[j].Value = Now()
      Endif

    Else If $xOption[j] = "BS Date" Then
      aDateBoxR[j].Value = Now()

    Else If $xOption[j] = "User Profile" Then
      sVal = MedicalSelectedValue(("Select Physisican User"), modBasic.$IPConsultUserList)
      If sVal Then
        aLineTextR[j].Text = sVal[1]
      Endif

    Else If $xOption[j] = "ImageValue" Then
      sPath = modImage.DisplayVisualData($sCategory, $idList[j], "", $xOption[j])
      sVal = CustomDraw(sPath)
      If sVal Then
        aButtonBoxR[j].Text = sVal[0]
      Endif

    Else If $xOption[j] = "Visual Input" Then
      sPath = modImage.DisplayVisualData($sCategory, $idList[j], "", $xOption[j])
      If sPath Then
        xval = CVisualValue(lblitem.Text, sPath, aGenTextAreaR[j].Text)
        If xval Then
          aGenTextAreaR[j].Text = xval
        Endif
      Endif

    Else If $xOption[j] = "CopyValue" Then
      aGenTextAreaR[j].Text = modReportVar.GetLastQualiParamValue($xSource[j], $xExam[j], $encid)

    Else If $xOption[j] = "Calculated" Then
      If $xExam[j] = "Expression" Then
        aGenTextAreaR[j].Text = GetCalculateVariantR($xSysCons[j], $encid)
      Else If $xExam[j] = "Structured" Then
        aGenTextAreaR[j].Text = GetCalculateVariantR($xSysCons[j], $encid)
      Else
        xval = modAllExam.GetExamDefaultValue("Exam", $xExam[j])
        If xval Then
          aGenTextAreaR[j].Text = GetCalculateVariantR(xval, $encid)
        Else
          aGenTextAreaR[j].Text = ""
        Endif
      Endif

    Endif

  Endif

End

''Left
Private Sub OpenOptionL(j As Integer)

  Dim sVal As String[]
  Dim sPath As String
  Dim xval As String
  Dim xopt As String[]
  Dim acalc As Variant

  If $xType[j] = "Quantitative" Then
    ' If $xOption[j] = "Calculated" Then
    '   If $xExam[j] = "Expression" Then
    '     acalc = GetCalculateFloatL($xSysCons[j], $encid)
    '   Else If $xExam[j] = "Structured" Then
    '     acalc = GetCalculateFloatL($xSysCons[j], $encid)
    '   Else
    '     xval = modAllExam.GetExamDefaultValue("Exam", $xExam[j])
    '     If xval Then
    '       acalc = GetCalculateFloatL(xval, $encid)
    '     Endif
    '   Endif
    '   If acalc Then
    '     aQuantiBoxL[j].Value = acalc
    '   Else
    '     aQuantiBoxL[j].Value = 0
    '   Endif
    '
    ' Else If $xOption[j] = "CopyValue" Then
    '   acalc = modReportVar.GetLastQuantiParamValue($xSource[j], $xExam[j], $encid)
    '   If acalc Then
    '     aQuantiBoxL[j].Value = acalc
    '   Else
    '     aQuantiBoxL[j].Value = 0
    '   Endif
    '
    ' Else
    '   xflot = GetQuantiValues("Exam", $encid, $xitem[j], 0, 0, aQuantiBoxL[j].Value)
    '   If xflot Then
    '     acalc = xflot[0]
    '     If acalc Then
    '       aQuantiBoxL[j].Value = acalc
    '     Else
    '       aQuantiBoxL[j].Value = 0
    '     Endif
    '   Endif
    '
    ' Endif

  Else
    If $xOpList[j] Then
      xopt = Split($xOpList[j], "|")
    Endif

    If $xOption[j] = "No Selection" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aGenTextAreaL[j].Text = $xDefaultLst[j]
        Endif
      Endif
    Else If $xOption[j] = "RichText Area" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aHTMLTextL[j].RichText = $xDefaultLst[j]
        Endif
      Endif
    Else If $xOption[j] = "Qualitative" Then
      If $xDefaultLst[j] Then
        If $xDefaultLst[j] = "__" Then
        Else
          aLineTextL[j].Text = $xDefaultLst[j]
        Endif
      Endif

    Else If $xOption[j] = "Single Selection" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Single Selection", $xitem[j])
        If sVal Then
          aComboBoxL[j].Text = sVal.Join(";")
        Endif
      Endif

    Else If $xOption[j] = "Dichotomous" Then

    Else If $xOption[j] = "Clinical Scale" Then
      If xopt.Count Then
        sVal = SubChoose(xopt, "Clinical Scale", $xExam[j])
        If sVal Then
          aClinBoxL[j].Value = sVal[0]
          aTextAreaL[j].Text = sVal[1]
        Endif
      Endif

    Else If $xOption[j] = "Date Time" Then
      If $xExam[j] = "Expression" Then
        acalc = GetCalculateVariantL($xSysCons[j], $encid)
        If IsDate(acalc) Then
          aDateBoxL[j].Value = CDate(acalc)
        Endif
      Else If $xExam[j] = "Structured" Then
        acalc = GetCalculateVariantL($xSysCons[j], $encid)
        If IsDate(acalc) Then
          aDateBoxL[j].Value = CDate(acalc)
        Endif
      Else
        aDateBoxL[j].Value = Now()
      Endif

    Else If $xOption[j] = "BS Date" Then
      aDateBoxL[j].Value = Now()

    Else If $xOption[j] = "User Profile" Then
      sVal = MedicalSelectedValue(("Select Physisican User"), modBasic.$IPConsultUserList)
      If sVal Then
        aLineTextL[j].Text = sVal[1]
      Endif

    Else If $xOption[j] = "ImageValue" Then
      sPath = modImage.DisplayVisualData($sCategory, $idList[j], "", $xOption[j])
      sVal = CustomDraw(sPath)
      If sVal Then
        aButtonBoxL[j].Text = sVal[0]
      Endif

    Else If $xOption[j] = "Visual Input" Then
      sPath = modImage.DisplayVisualData($sCategory, $idList[j], "", $xOption[j])
      If sPath Then
        xval = CVisualValue(lblitem.Text, sPath, aGenTextAreaL[j].Text)
        If xval Then
          aGenTextAreaL[j].Text = xval
        Endif
      Endif

    Else If $xOption[j] = "CopyValue" Then
      aGenTextAreaL[j].Text = modReportVar.GetLastQualiParamValue($xSource[j], $xExam[j], $encid)

    Else If $xOption[j] = "Calculated" Then
      If $xExam[j] = "Expression" Then
        aGenTextAreaL[j].Text = GetCalculateVariantL($xSysCons[j], $encid)
      Else If $xExam[j] = "Structured" Then
        aGenTextAreaL[j].Text = GetCalculateVariantL($xSysCons[j], $encid)
      Else
        xval = modAllExam.GetExamDefaultValue("Exam", $xExam[j])
        If xval Then
          aGenTextAreaL[j].Text = GetCalculateVariantL(xval, $encid)
        Else
          aGenTextAreaL[j].Text = ""
        Endif
      Endif

    Endif

  Endif

End

''Right
Private Function GetCalculateVariantR(sFormula As String, encid As String) As Variant

  Dim i As Integer
  Dim xval As Variant

  If sFormula Then
    For i = 0 To $xCode.Count - 1
      If aGenTextAreaR[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", aGenTextAreaR[i].Text)
        Endif
      Else If aDateBoxR[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", Str(aDateBoxR[i].Value))
        Endif
        ' Else If aQuantiBoxR[i] Then
        '   If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
        '     sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", CStr(aQuantiBoxR[i].Value))
        '   Endif
      Endif
    Next
    If (String.InStr(sFormula, "$Calc[") > 0) Then
      sFormula = modReportVar.GetCalcValueVariant(sFormula, encid)
    Endif
    xval = sFormula

  Else
    xval = ""
  Endif

  Return xval

End

''Left
Private Function GetCalculateVariantL(sFormula As String, encid As String) As Variant

  Dim i As Integer
  Dim xval As Variant

  If sFormula Then
    For i = 0 To $xCode.Count - 1
      If aGenTextAreaL[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", aGenTextAreaL[i].Text)
        Endif
      Else If aDateBoxL[i] Then
        If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
          sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", Str(aDateBoxL[i].Value))
        Endif
        ' Else If aQuantiBoxL[i] Then
        '   If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
        '     sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", CStr(aQuantiBoxL[i].Value))
        '   Endif
      Endif
    Next
    If (String.InStr(sFormula, "$Calc[") > 0) Then
      sFormula = modReportVar.GetCalcValueVariant(sFormula, encid)
    Endif
    xval = sFormula

  Else
    xval = ""
  Endif

  Return xval

End

' ''Right
' Private Function GetCalculateFloatR(sFormula As String, encid As String) As Float
'
'   Dim i As Integer
'   Dim xval As Float
'
'   If sFormula Then
'     For i = 0 To $xCode.Count - 1
'       If aGenTextAreaR[i] Then
'         If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
'           sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", aGenTextAreaR[i].Text)
'         Endif
'       Else If aDateBoxR[i] Then
'         If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
'           sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", Str(aDateBoxR[i].Value))
'         Endif
'         ' Else If aQuantiBoxR[i] Then
'         '   If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
'         '     sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", CStr(aQuantiBoxR[i].Value))
'         '   Endif
'       Endif
'     Next
'     If (String.InStr(sFormula, "$Calc[") > 0) Then
'       sFormula = modReportVar.GetCalcValueFloat(sFormula, encid)
'     Endif
'     xval = CFloat(sFormula)
'
'   Else
'     xval = 0
'   Endif
'
'   Return xval
'
' End

''Left
' Private Function GetCalculateFloatL(sFormula As String, encid As String) As Float
'
'   Dim i As Integer
'   Dim xval As Float
'
'   If sFormula Then
'     For i = 0 To $xCode.Count - 1
'       If aGenTextAreaL[i] Then
'         If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
'           sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", aGenTextAreaL[i].Text)
'         Endif
'       Else If aDateBoxL[i] Then
'         If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
'           sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", Str(aDateBoxL[i].Value))
'         Endif
'         ' Else If aQuantiBoxL[i] Then
'         '   If (String.InStr(sFormula, $xCode[i]) > 0) Then                                   ''
'         '     sFormula = Replace(sFormula, "{$Struct_Exam:" & $xCode[i] & "$}", CStr(aQuantiBoxL[i].Value))
'         '   Endif
'       Endif
'     Next
'     If (String.InStr(sFormula, "$Calc[") > 0) Then
'       sFormula = modReportVar.GetCalcValueFloat(sFormula, encid)
'     Endif
'     xval = CFloat(sFormula)
'
'   Else
'     xval = 0
'   Endif
'
'   Return xval
'
' End

''Right
Public Sub ImageBoxGroupR_Click()

End

''Left
Public Sub ImageBoxGroupL_Click()

End

'' supporting
Public Sub btnpanexam_Click()

  Dim j As Integer

  Try j = $FocusTag
  ''Right
  If $FocusSide = "R" Then
    If aHTMLTextR[j] Then
      aHTMLTextR[j].RichText = aHTMLTextR[j].RichText & Space(1) & modFillContainer.GetExtraTextArea($xitem[j], aHTMLTextR[j].Text)
    Else If aGenTextAreaR[j] Then
      aGenTextAreaR[j].Text = aGenTextAreaR[j].Text & Space(1) & GetTextArea($xitem[j], aGenTextAreaR[j].Text)
    Endif

    ''Left
  Else If $FocusSide = "L" Then
    If aHTMLTextL[j] Then
      aHTMLTextL[j].RichText = aHTMLTextL[j].RichText & Space(1) & modFillContainer.GetExtraTextArea($xitem[j], aHTMLTextL[j].Text)
    Else If aGenTextAreaL[j] Then
      aGenTextAreaL[j].Text = aGenTextAreaL[j].Text & Space(1) & GetTextArea($xitem[j], aGenTextAreaL[j].Text)
    Endif
  Endif

End

Public Sub btnexecexam_Click()

  Dim j As Integer

  Try j = $FocusTag
  ''Right
  If $FocusSide = "R" Then
    If aHTMLTextR[j] Then
      aHTMLTextR[j].RichText = aHTMLTextR[j].RichText & modCloudAI.GetPatCloudAIResponse($encid, aHTMLTextR[j].Text)
    Else If aGenTextAreaR[j] Then
      aGenTextAreaR[j].Text = aGenTextAreaR[j].Text & modCloudAI.GetPatCloudAIResponse($encid, aGenTextAreaR[j].Text)
    Endif

    ''Left
  Else If $FocusSide = "L" Then
    If aHTMLTextL[j] Then
      aHTMLTextL[j].RichText = aHTMLTextL[j].RichText & modCloudAI.GetPatCloudAIResponse($encid, aHTMLTextL[j].Text)
    Else If aGenTextAreaL[j] Then
      aGenTextAreaL[j].Text = aGenTextAreaL[j].Text & modCloudAI.GetPatCloudAIResponse($encid, aGenTextAreaL[j].Text)
    Endif
  Endif

End

Public Sub btnattexam_Click()

  Dim j As Integer

  Try j = $FocusTag
  ''Right
  If $FocusSide = "R" Then
    If aHTMLTextR[j] Then
      aHTMLTextR[j].RichText = aHTMLTextR[j].RichText & DictionaryVIew(modBasic.$dictadvPath)
    Else If aGenTextAreaR[j] Then
      aGenTextAreaR[j].Text = aGenTextAreaR[j].Text & DictionaryVIew(modBasic.$dictadvPath)
    Endif

    ''Left
  Else If $FocusSide = "L" Then
    If aHTMLTextL[j] Then
      aHTMLTextL[j].RichText = aHTMLTextL[j].RichText & DictionaryVIew(modBasic.$dictadvPath)
    Else If aGenTextAreaL[j] Then
      aGenTextAreaL[j].Text = aGenTextAreaL[j].Text & DictionaryVIew(modBasic.$dictadvPath)
    Endif
  Endif

End

' Gambas module file

Public Function GetApplicationType() As String

  Dim xterm As String
  Dim xappmode As String

  xterm = modSettings.ShowSettingFromFIle("TermsOfUse/Package")
  If xterm Then
    If xterm = "Retail" Then
      xappmode = "PHM"
    Else If xterm = "Laboratory" Then
      xappmode = "LAB"
    Else
      xappmode = xterm
    Endif
  Else
    xappmode = "HIS"
  Endif
  Return xappmode

End

Public Function CompIDList() As String[]

  Dim xx As String[]
  Dim xcom As String
  Dim i As Integer

  xx = New String[]
  For i = 1 To 100
    xcom = CStr(i)
    If Len(xcom) = 1 Then
      xcom = "0" & xcom
    Endif
    xx.Add("comp" & xcom)
  Next
  Return xx

End

Public Function PACSList() As String[]

  Dim xx As String[]
  Dim i As Integer

  xx = New String[]
  For i = 1 To 5
    xx.Add("PACS" & CStr(i))
  Next
  Return xx

End

Public Function CheckRestrictedKey(sText As String) As Integer

  Dim xbool As Integer
  Dim i As Integer
  Dim scheck As String = "~!#$^|"

  xbool = 0
  For i = 1 To Len(scheck)
    If InStr(sText, Mid(scheck, i, 1)) > 0 Then
      xbool = xbool + 1
    Endif
  Next
  Return xbool

End

Public Function CheckRestrictedKeyStrict(sText As String) As Integer

  Dim xbool As Integer
  Dim i As Integer
  Dim scheck As String = "~!#$^*|"

  xbool = 0
  For i = 1 To Len(scheck)
    If InStr(sText, Mid(scheck, i, 1)) > 0 Then
      xbool = xbool + 1
    Endif
  Next
  Return xbool

End

''--------------- GNUPG Key ------------------------------
Public Function GetGNUPGKeyList() As String[]

  Dim xx As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldkeyid from tblgnupg")
  xx = modControlSub.GetDirectFillresult(res)
  Return xx

End

'NOTE: -------------------------------- SPINBOX RECORD ---------------------------------------------
Public Function RecordNumberLabel(startno As Long, diffno As Integer, totno As Long) As String

  Dim xx As String

  If totno = 0 Then
    xx = "0 out of 0"
  Else If totno > startno + diffno Then
    xx = CStr(startno + 1) & " - " & CStr(startno + diffno) & " out of " & CStr(totno)
  Else If totno <= startno + diffno Then
    xx = CStr(startno + 1) & " - " & CStr(totno) & " out of " & CStr(totno)
  Endif
  Return xx

Catch
  modBasic.DebugString(Error.Text)

End

Public Function BlobTarget(sType As String) As String

  Dim xx As String
  Dim xauto As String

  If MMain.$WebEntry = True Then
    xx = "FTP"
  Else
    xauto = modGlobalSetting.ShowSettingFromDB("GeneralSettings/Upload_" & sType)
    If xauto Then
      xx = xauto
    Else
      xx = "DB"
    Endif
  Endif
  Return xx

End

Public Function CustomReportList() As String[]

  Dim xx As String[]

  xx = New String[]
  If modSettings.ShowSettingFromFIle("ExtraReport1/Name") Then
    xx.Add("ExtraReport1")
  Endif

  If modSettings.ShowSettingFromFIle("ExtraReport2/Name") Then
    xx.Add("ExtraReport2")
  Endif

  If modSettings.ShowSettingFromFIle("ExtraReport3/Name") Then
    xx.Add("ExtraReport3")
  Endif

  If modSettings.ShowSettingFromFIle("ExtraReport4/Name") Then
    xx.Add("ExtraReport4")
  Endif

  If modSettings.ShowSettingFromFIle("CustomReport5/Name") Then
    xx.Add("ExtraReport5")
  Endif

  Return xx

End

''For Departmental string containing ..:1234
Public Function GetStringWithoutIndex(sExam As String) As String

  Dim asx As String[]
  Dim xx As String

  asx = Split(sExam, ":")
  xx = Trim(asx[0])
  Return xx

End

Public Function GetReportOptionList() As String[]

  Dim xx As String[]
  Dim i As Integer

  xx = New String[]
  For i = 10 To 99
    xx.Add("&" & CStr(i))
  Next
  Return xx

End

Public Function LockBoolean(sText As String) As Boolean

  Dim xx As Boolean

  If sText = "No" Then
    xx = True
  Else
    xx = False
  Endif
  Return xx

End

Public Function GetColorValSymbol(sColor As Integer) As String

  Dim xx As String

  If sColor = Color.Red Then
    xx = "R"
  Else If sColor = Color.Blue Then
    xx = "B"
  Else If sColor = Color.Green Then
    xx = "G"
  Else If sColor = Color.Yellow Then
    xx = "Y"
  Else If sColor = Color.Black Then
    xx = "#"
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetColorCode(sColor As String) As Integer

  Dim xx As Integer

  If sColor = "Red" Then
    xx = Color.Red
  Else If sColor = "Yellow" Then
    xx = Color.Yellow
  Else If sColor = "Green" Then
    xx = Color.Green
  Else If sColor = "Blue" Then
    xx = Color.Blue
  Else If sColor = "Black" Then
    xx = Color.Black
  Else If sColor = "Default" Then
    xx = Color.Default
  Endif
  Return xx

End

'''------------------------------------------- ICON IN GRID ---------------------------------------------------------------
Public Function GetWebIconPath(sPath As String) As String

  Dim xval As String

  xval = "/" &/ Application.Root &/ sPath
  Return xval

End

Public Function SetGridCheckIcon(abn As Boolean) As String

  Dim xx As String

  If abn = True Then
    xx = GetWebIconPath("icons/checked.png")
  Else
    xx = GetWebIconPath("icons/unchecked.png")
  Endif
  Return xx

End

Public Function GetGridIcon(txtboolean As Boolean) As String

  Dim xx As String

  If txtboolean = True Then
    xx = GetWebIconPath("icons/true.svg")
  Else
    xx = GetWebIconPath("icons/false.svg")
  Endif

  Return xx

End

Public Function GetIconValue(sPicture As Boolean) As String

  Dim xbool As String

  If sPicture = True Then
    xbool = "Abnormal"
  Else
    xbool = "Normal"
  Endif
  Return xbool

End

Public Function GetDenominationValue(sText As String, Optional xconversion As Float) As Float

  Dim xval As Float
  Dim xconv As Float

  If xconversion Then
    xconv = xconversion
  Else
    xconv = 1.6
  Endif

  If sText = "Note: 2000" Then
    xval = 2000
  Else If sText = "Note: 1000" Then
    xval = 1000
  Else If sText = "Note: 500" Then
    xval = 500
  Else If sText = "Note: 250" Then
    xval = 250
  Else If sText = "Note: 100" Then
    xval = 100
  Else If sText = "Note: 50" Then
    xval = 50
  Else If sText = "Note: 25" Then
    xval = 25
  Else If sText = "Note: 20" Then
    xval = 20
  Else If sText = "Note: 10" Then
    xval = 10
  Else If sText = "Note: 5" Then
    xval = 5
  Else If sText = "Note: 2" Then
    xval = 2
  Else If sText = "Note: 1" Then
    xval = 1
  Else If sText = "Coin: 10" Then
    xval = 10
  Else If sText = "Coin: 5" Then
    xval = 5
  Else If sText = "Coin: 2" Then
    xval = 2
  Else If sText = "Coin: 1" Then
    xval = 1
  Else If sText = "Coin: 0.5" Then
    xval = 0.5

  Else If sText = "IC: 2000" Then
    xval = xconv * 2000
  Else If sText = "IC: 1000" Then
    xval = xconv * 1000
  Else If sText = "IC: 500" Then
    xval = xconv * 500
  Else If sText = "IC: 200" Then
    xval = xconv * 200
  Else If sText = "IC: 100" Then
    xval = xconv * 100
  Else If sText = "IC: 50" Then
    xval = xconv * 50
  Else If sText = "IC: 20" Then
    xval = xconv * 20
  Else If sText = "IC: 10" Then
    xval = xconv * 10
  Else If sText = "IC: 5" Then
    xval = xconv * 5
  Else If sText = "IC: 2" Then
    xval = xconv * 2
  Else If sText = "IC: 1" Then
    xval = xconv * 1

  Endif

  Return xval

End

Public Function GetDenominationString(sDenomin As String, xconversion As Float) As String

  Dim xColl As Collection
  Dim xstr As String
  Dim xxx As String

  xxx = ""
  Try xColl = JSON.Decode(sDenomin)
  If xColl Then
    For Each xstr In xColl
      xxx = xxx & gb.NewLine & xColl.Key & " x " & xstr & " = " & CStr(GetDenominationValue(xColl.Key, xconversion) * xstr)
    Next
  Endif

  Return xxx

End

Public Function GetDuplicationAllow(sList As String[], sItem As String) As Boolean

  Dim xbool As Boolean

  If sItem Then
    If sList.Exist(sItem) = True Then
      Select modBasic.$BillDuplication
        Case "Inform"
          xbool = True
          WebForm.Exec("Toastify({text: 'Item already punched', duration: 3000}).showToast()")
        Case "Warn"
          xbool = True
          Message.Warning("Duplicate Entry", ("OK"))
        Case "Disable"
          xbool = False
          Message.Warning("Duplicate Entry not allowed", ("OK"))
        Case Else
          xbool = True
      End Select
    Else
      xbool = True
    Endif
  Else
    xbool = True
  Endif

  Return xbool

End

Public Function GetEthnicStringCode(sType As String) As String

  Dim xval As String

  If sType = "Dalit" Then
    xval = "01"
  Else If sType = "Janajati" Then
    xval = "02"
  Else If sType = "Madhesi" Then
    xval = "03"
  Else If sType = "Muslim" Then
    xval = "04"
  Else If sType = "Brahmin/Chettri" Then
    xval = "05"
  Else If sType = "Other" Then
    xval = "06"
  Endif

  Return xval

End

Public Function GetEthnicCodeString(sCode As String) As String

  Dim sType As String

  If sCode = "01" Then
    sType = "Dalit"
  Else If sCode = "1" Then
    sType = "Dalit"

  Else If sCode = "02" Then
    sType = "Janajati"
  Else If sCode = "2" Then
    sType = "Janajati"

  Else If sCode = "03" Then
    sType = "Madhesi"
  Else If sCode = "3" Then
    sType = "Madhesi"

  Else If sCode = "04" Then
    sType = "Muslim"
  Else If sCode = "4" Then
    sType = "Muslim"

  Else If sCode = "05" Then
    sType = "Brahmin/Chettri"
  Else If sCode = "5" Then
    sType = "Brahmin/Chettri"

  Else If sCode = "06" Then
    sType = "Other"
  Else If sCode = "6" Then
    sType = "Other"

  Endif

  Return sType

End

Public Function GetWebIndexStr(xIntVal As String) As String

  Dim xx As String

  xx = modApplication.GetMD5SumString(xIntVal & ":" & Session.Id)
  Return xx

End

Public Function GetFirstLetterInteger(sName As String) As Integer

  Dim xlet As String
  Dim xval As Integer

  xlet = UCase(Left(sName, 1))
  xval = modLongVar.$Letters.Find(xlet)
  If Not xval Then
    xval = 30
  Endif
  Return xval

End

Public Function GetFirstLetterOrder(sName As String) As Integer

  Dim xval As Integer
  Dim xorder As Integer

  xval = GetFirstLetterInteger(sName)
  If Frac(xval / 2) = 0 Then
    xorder = gb.Ascent
  Else
    xorder = gb.Descent
  Endif
  Return xorder

End

Public Function CompListExcept(sList As String[]) As String[]

  Dim xlst As String[]
  Dim aPos As Integer

  xlst = sList
  aPos = xlst.Find(modBasic.$compID)
  If aPos >= 0 Then
    xlst.Remove(aPos)
  Endif

  Return xlst

End

Public Function GetPacsServerList() As String[]

  Dim i As Integer
  Dim xxx As String[]

  xxx = New String[]
  For i = 1 To 20
    If modSettings.ShowSettingFromFIle("PACS" & CStr(i) & "/" & "HostName") Then
      xxx.Add("PACS" & CStr(i))
    Endif
  Next
  Return xxx

End

Public Function AllowDiagnoBilling(encid As String) As Boolean

  Dim xallow As Boolean

  xallow = True
  If modBasic.$BillAddDiagnosis = "ForceAll" Then
    If modPatient.PatientDiagnoCurrentCount(encid) = 0 Then
      xallow = False
    Endif
  Endif
  Return xallow

End

Public Function GetExpiryMonth(sName As String) As Integer

  Dim xx As Integer

  If sName = "1 Month" Then
    xx = 1
  Else If sName = "2 Month" Then
    xx = 2
  Else If sName = "3 Month" Then
    xx = 3
  Else If sName = "6 Month" Then
    xx = 6
  Else If sName = "9 Month" Then
    xx = 9
  Else If sName = "12 Month" Then
    xx = 12
  Else If sName = "15 Month" Then
    xx = 15
  Else
    xx = 3
  Endif

  Return xx

End

Public Function GetDBAgeFormatList() As Variant[]

  Dim xVar As Variant[]
  Dim res As Result

  xVar = New Variant[]
  res = modDatabase.$myConn.Exec("select fldgroup,fldlower,fldhigher from tblagegroups")
  If res.Available Then
    For Each res
      xVar.Add([res["fldgroup"], CStr(res["fldlower"]), CStr(res["fldhigher"])])
    Next
  Endif

  Return xVar

End

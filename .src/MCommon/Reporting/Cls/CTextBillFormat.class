' Gambas class file

Private $encid As String
Private Columns As String[]
Private $sType As String
Private $Data As String
Private Template As String
Private $sBillNo As String
Private UserData As New Collection
Private SPecData As New Collection

Private ReportPath As String

Public Sub _new(encid As String, sColumns As String[], sType As String, sData As String, TempletePath As String, sBillNo As String, sUserData As Collection, xpecData As Collection)

  $encid = encid
  $sType = sType
  $Data = sData
  Columns = sColumns
  Template = TempletePath
  $sBillNo = sBillNo
  UserData = sUserData
  SPecData = xpecData

  MakeHTMLFile()

End

Public Function GetHTMLFile() As String

  Return ReportPath

End

Private Function HTMLGenerate() As String[]

  Dim $Report As String[]
  Dim newReport As String[]
  Dim i As Integer
  Dim maxht As Integer
  Dim xHt As Integer
  Dim sInt As Integer

  Dim xpgmaxht As String
  Dim xblinebef As String
  Dim xbltithead As String
  Dim xblheadbody As String
  Dim xblbodfoot As String
  Dim xblaftfoot As String
  Dim xpgoutform As String
  Dim xblbetweenpg As String

  newReport = New String[]
  xpgmaxht = modSettings.ShowSettingFromFIle("Invoice/LinePrint_PageMaxHeight")
  If xpgmaxht Then
    maxht = CInt(xpgmaxht)
  Else
    maxht = 0
  Endif

  ''main page
  $Report = New String[]

  xblinebef = modSettings.ShowSettingFromFIle("Invoice/LinePrint_BlankLine_BeforeTitle")
  If xblinebef Then
    $Report.Insert(modString.BlankLines(CInt(xblinebef)))
  Endif
  $Report.Insert(BillTitle())
  $Report.Add(GetBillTypeString())

  xbltithead = modSettings.ShowSettingFromFIle("Invoice/LinePrint_BlankLine_Title_Head")
  If xbltithead Then
    $Report.Insert(modString.BlankLines(CInt(xbltithead)))
  Endif
  $Report.Insert(BillHeader())

  xblheadbody = modSettings.ShowSettingFromFIle("Invoice/LinePrint_BlankLine_Head_Body")
  If xblheadbody Then
    $Report.Insert(modString.BlankLines(CInt(xblheadbody)))
  Endif
  $Report.Insert(BillBody())

  xblbodfoot = modSettings.ShowSettingFromFIle("Invoice/LinePrint_BlankLine_Body_Footer")
  If xblbodfoot Then
    $Report.Insert(modString.BlankLines(CInt(xblbodfoot)))
  Endif

  xblaftfoot = modSettings.ShowSettingFromFIle("Invoice/LinePrint_BlankLine_AfterFooter")
  $Report.Insert(BillFooter())
  If xblaftfoot Then
    $Report.Insert(modString.BlankLinesLast(CInt(xblaftfoot)))
  Endif

  ''formatting for line print
  xblbetweenpg = modSettings.ShowSettingFromFIle("Invoice/LinePrint_BlankLine_BetweenPages")
  xpgoutform = modSettings.ShowSettingFromFIle("Invoice/LinePrint_PageOutputFormat")
  If xpgoutform And If xpgoutform = "Discrete" Then
    If maxht Then

      sInt = CInt(Floor($Report.Count / maxht))
      For i = 0 To sInt - 1
        If i = 0 Then
          newReport.Insert($Report.Copy(i * maxht, maxht))
        Else
          newReport.Add("---- Page: " & CStr(i) & " ----")
          If xblbetweenpg Then
            newReport.Insert(modString.BlankLines(CInt(xblbetweenpg)))
          Endif
          newReport.Insert($Report.Copy(i * maxht, maxht))
        Endif
      Next

      xHt = sInt * maxht
      If xHt < $Report.Count Then
        If sInt > 0 Then
          newReport.Add("     Page: " & CStr(sInt) & " ----")
        Endif
        If xblbetweenpg Then
          newReport.Insert(modString.BlankLines(CInt(xblbetweenpg)))
        Endif
        newReport.Insert($Report.Copy(xHt, -1))
        newReport.Insert(modString.BlankLinesLast(maxht - ($Report.Count - xHt)))
        If sInt > 0 Then
          newReport.Add("     Page: " & CStr(sInt + 1) & " ----")
        Endif
      Endif

    Else    ''if max page height not defined
      newReport.Insert($Report)
    Endif
  Else   ''for continuous output format
    newReport.Insert($Report)
  Endif

  Return newReport

End

Private Function BillTitle() As String[]

  Dim sLine As String
  Dim repo As String[]
  Dim hFile As File
  Dim sPath As String
  Dim xdeftitle As String

  xdeftitle = modSettings.ShowSettingFromFIle("Invoice/Default_Title")
  If xdeftitle And If xdeftitle = "BuiltIn" Then
    sPath = modRepoTemplete.LineTitleTemplete()
  Else
    sPath = Template &/ "title"
  Endif

  repo = New String[]
  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      repo.Add(Replace(modReportVar.GetReportVarTitle(sLine), "<br>", gb.NewLine))
    Next
    hFile.Close()
  Endif
  Return repo

End

Private Function GetBillTypeString() As String

  Dim xx As String

  xx = t_replace("{InvoiceType}")
  Return xx

End

Private Function BillHeader() As String[]

  Dim repo As String[]
  Dim sPath As String
  Dim hFile As File
  Dim sLine As String
  Dim spLine As String[]
  Dim head As Integer
  Dim bethead As Integer
  Dim newxx As String[]
  Dim i As Integer

  Dim xdefhead As String
  Dim xwidheadhead As String
  Dim xwidheadcol As String

  xdefhead = modSettings.ShowSettingFromFIle("Invoice/Default_Header")
  If xdefhead And If xdefhead = "BuiltIn" Then
    sPath = modRepoTemplete.LineHeaderTemplete()
  Else
    sPath = Template &/ "bill_header"
  Endif

  repo = New String[]
  xwidheadhead = modSettings.ShowSettingFromFIle("Invoice/LinePrint_WidthHead-Head")
  If xwidheadhead Then
    bethead = CInt(xwidheadhead)
  Endif

  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(sLine) Then
        If InStr(sLine, ";") > 0 Then
          spLine = Split(sLine, ";")
          newxx = New String[]
          For i = 0 To spLine.Count - 1
            xwidheadcol = modSettings.ShowSettingFromFIle("Invoice/LinePrint_WidthHeadCol" & CStr(i + 1))
            If xwidheadcol Then
              head = CInt(xwidheadcol)
              newxx.Add(modString.GetFormattedText(t_replace(spLine[i]), head, modSettings.ShowSettingFromFIle("Invoice/LinePrint_AlignHeadCol" & CStr(i + 1))))
            Else
              newxx.Add(modString.GetFormattedText(t_replace(spLine[i]), 0))
            Endif
          Next
          repo.Add(newxx.Join(Space(bethead)))
        Else
          repo.Add(t_replace(sLine))
        Endif
      Endif
    Next
    hFile.Close()
  Endif

  Return repo

End

Private Function BillFooter() As String[]

  Dim repo As String[]
  Dim hFile As File
  Dim sLine As String
  Dim spLine As String[]
  Dim sPath As String
  Dim foot As Integer
  Dim betfoot As Integer
  Dim newxx As String[]
  Dim i As Integer

  Dim xdeffoot As String
  Dim xwidfootfoot As String
  Dim xwidfootcol As String

  xdeffoot = modSettings.ShowSettingFromFIle("Invoice/Default_Footer")
  If xdeffoot And If xdeffoot = "BuiltIn" Then
    If Left($sBillNo, 3) = "DEP" Or If Left($sBillNo, 3) = "DET" Then
      sPath = modRepoTemplete.LineFooterCashTemplete()
    Else
      sPath = modRepoTemplete.LineFooterCreditTemplete()
    Endif
  Else
    If Left($sBillNo, 3) = "DEP" Or If Left($sBillNo, 3) = "DET" Then
      sPath = Template &/ "deposit_footer"
    Else
      sPath = Template &/ "bill_footer"
    Endif
  Endif

  repo = New String[]
  xwidfootfoot = modSettings.ShowSettingFromFIle("Invoice/LinePrint_WidthFoot-Foot")
  If xwidfootfoot Then
    betfoot = CInt(xwidfootfoot)
  Endif

  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(sLine) Then
        If InStr(sLine, ";") > 0 Then
          spLine = Split(sLine, ";")
          newxx = New String[]
          For i = 0 To spLine.Count - 1
            xwidfootcol = modSettings.ShowSettingFromFIle("Invoice/LinePrint_WidthFootCol" & CStr(i + 1))
            If xwidfootcol Then
              foot = CInt(xwidfootcol)
              newxx.Add(modString.GetFormattedText(t_replace(spLine[i]), foot, modSettings.ShowSettingFromFIle("Invoice/LinePrint_AlignFootCol" & CStr(i + 1))))
            Else
              newxx.Add(modString.GetFormattedText(t_replace(spLine[i]), 0))
            Endif
          Next
          repo.Add(newxx.Join(Space(betfoot)))
        Else
          repo.Add(t_replace(sLine))
        Endif
      Endif
    Next
    hFile.Close()
  Endif

  Return repo

End

Private Function BillBody() As String[]

  Dim counter As Integer = 0
  Dim repo As String[]
  Dim colStr As String
  Dim sInt As Integer
  Dim sLen As Integer
  Dim sHt As Integer

  Dim xtablewid As String
  Dim xtableout As String
  Dim xtabcollabel As String
  Dim xcolwid As String
  Dim xtablecolm As String
  Dim xtablein As String
  Dim xtableht As String

  repo = New String[]
  xtablewid = modSettings.ShowSettingFromFIle("Invoice/LinePrintTable_Width")
  If xtablewid Then
    sLen = CInt(xtablewid)
  Endif

  'boundry
  xtableout = modSettings.ShowSettingFromFIle("Invoice/LinePrintTable_Out")
  If xtableout Then
    repo.Add(modString.TableBoundry(xtableout, sLen))
  Endif

  'headings
  xtabcollabel = modSettings.ShowSettingFromFIle("Invoice/LinePrintTable_ColumnLabel")
  If xtabcollabel And If xtabcollabel = "No" Then
  Else
    colStr = ""
    For counter = 0 To Columns.Count - 1
      xcolwid = modSettings.ShowSettingFromFIle("Invoice/LinePrint_WidthCol" & CStr(counter + 1))
      If xcolwid Then
        sInt = CInt(xcolwid)
        colStr = colStr & modString.GetFormattedText(Columns[counter], sInt, modSettings.ShowSettingFromFIle("Invoice/LinePrint_AlignCol" & CStr(counter + 1)))
      Else
        colStr = colStr & Columns[counter]
      Endif

      'add column separator
      xtablecolm = modSettings.ShowSettingFromFIle("Invoice/LinePrintTable_Col")
      If xtablecolm Then
        If counter = 0 Then
          colStr = xtablecolm & colStr & xtablecolm
        Else
          colStr = colStr & xtablecolm
        Endif
      Else
        colStr = colStr & " "
      Endif
    Next
    repo.Add(colStr)
  Endif

  'inner boundry
  xtablein = modSettings.ShowSettingFromFIle("Invoice/LinePrintTable_In")
  If xtablein Then
    repo.Add(modString.TableBoundry(xtablein, sLen))
  Endif

  'text
  repo.Insert(TableContent())

  'remaining blank lines in table
  xtableht = modSettings.ShowSettingFromFIle("Invoice/LinePrintTable_Height")
  If xtableht Then
    sHt = CInt(xtableht)
    If sHt > TableContent().Count Then
      repo.Insert(modString.BlankLines(sHt - TableContent().Count))
    Endif
  Endif

  'outer boundry
  If xtableout Then
    repo.Add(modString.TableBoundry(xtableout, sLen))
  Endif

  Return repo

End

Private Function TableContent() As String[]

  Dim xx As String[]
  Dim hFile As File
  Dim sLine As String

  hFile = Open $Data
  modBasic.DebugString("Open File " & $Data)
  xx = New String[]
  For Each sLine In hFile.Lines
    xx.Add(sLine)
  Next
  hFile.Close()
  Return xx

End

Private Function t_replace(sLine As String) As String

  Dim KeyValue As String
  Dim KeySpec As String

  sLine = modReportVar.GetReportVarTitle(sLine)
  If $encid Then
    sLine = modReportVar.GetReportVarPatient($encid, sLine)
    sLine = modReportVar.GetReportVarEncounter($encid, sLine)
    sLine = modReportVar.GetReportLastConsult($encid, sLine)
    sLine = modReportVar.GetPatientSMSVAr($encid, sLine)
  Endif
  If modBasic.$CustomDemog = "Yes" Then
    While (String.InStr(sLine, "$Last_Demog:") > 0)
      sLine = modReportVar.GetReporDemogLastVal($encid, sLine)
    Wend
  Endif

  For Each KeyValue In UserData
    If (String.InStr(sLine, UserData.Key) > 0) Then
      sLine = Replace(sLine, "{" & UserData.Key & "}", KeyValue)
    Endif
  Next

  For Each KeySpec In SPecData
    If (String.InStr(sLine, SPecData.Key) > 0) Then
      sLine = Replace(sLine, SPecData.Key, KeySpec)
    Endif
  Next

  Return sLine

End

Private Sub MakeHTMLFile()

  Dim xstr As String

  xstr = HTMLGenerate().Join(gb.NewLine)
  ReportPath = Temp() & ".txt"
  File.Save(ReportPath, xstr)

End

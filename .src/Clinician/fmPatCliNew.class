' Gambas class file

Private $sClinIndex As Long
Private $sClinMode As String

''PATIENT PROFILE
Private $UserRestrictPat As String[]
Private $structExamList As String[]

''MAIN FORM
Private $sTatus As String
Private $UserRestrict As String[]
Private $dateReg As Date
Private $ExamLst As String[]
Private $PatientNum As String

Private $rExamRes As Result
Private $aExamFields As String[]
Private $rSympRes As Result
Private $aSympFields As String[]
Private $vidRoom As String
Private $VidIndex As String
' ' Private $rFludRes As Result
' ' Private $aFludFields As String[]
' ' Private $rRateRes As Result
' ' Private $aRateFields As String[]

Private $billModeTest As String
Private $billModeRadio As String
Private $billModePharmacy As String
Private $billModeProcedure As String
Private $billModeEquipment As String
Private $billModeService As String
Private $billModeOthers As String

Public Sub _new(encid As String, sIndex As Long, sMode As String)

  If encid Then
    txtencid.Text = encid
    $sClinIndex = sIndex
    $sClinMode = sMode
    txtencid.ReadOnly = True
  Endif

  $structExamList = modMedicine.FillClinicalSubClass("Physician Examinations")
  FillExamMenu()

  ''PATIENT PROFILE
  cmbpatheightunit.List = ["cm", "inch", "foot"]
  $UserRestrictPat = modBasic.$ClinicDisableCompo
  If MMain.$SISHAppMode = "HIS" Then
    txtbedno.ReadOnly = True
  Endif

  ''MAIN FORM
  Select modBasic.$ClinicTelemed
    Case "Enable", "Partial", "Complete"
      pnltelemed.Visible = True
    Case Else
      pnltelemed.Visible = False
  End Select
  $ExamLst = modMedicine.FillClinicalSubClass("OutPatient")
  cmbsympunit.List = ["Hours", "Days", "Weeks", "Months", "Years", "Episodes"]
  cmbsymdura.List = ["Both Side", "Left Side", "Right Side", "On/Off"]
  cmburgency.List = ["Urgent", "Normal"]
  $UserRestrict = modBasic.$ClinicDisableCompo
  modLabSub.DisplayDefaultTestUnit(rbsi, rbmetric)
  cmbrefer.List = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldlocation as col from tblreferlist"))

  FillCustomFormMenu()
  FillCustomMenu()
  SHowALgorithmList()
  If modBasic.$ClinConsultTelemed = "Remote" Then
    btnshowexpert.Visible = True
  Else
    btnshowexpert.Visible = False
  Endif

  ' modGeneralMain.SetEncIDPrefix(txtencid)
  If $UserRestrictPat Then
    RestrictUserAccessPat()
  Endif
  If $UserRestrict Then
    RestrictUserAccess()
  Endif

  SetHtmlTextOption(txtgencomplaint)
  SetHtmlTextOption(txthistory)
  SetHtmlTextOption(txtplan)
  SetHtmlTextOption(txtplanfinal)
  SetHtmlTextOption(txtquery)
  SetHtmlTextOption(txtfeedback)
  If modBasic.$TabletModeEnable = "Yes" Then
  Else
    txtencid.SetFocus
  Endif

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

Private Sub SetHtmlTextOption(TextHTML1 As WebTextHTML)

  TextHTML1.UserList = modBasic.$IPConsultUserList
  ' TextHTML1.DictionaryPath = modBasic.$dictPathList

End

''====================== PATIENT PROFILE =================================
Public Sub txtencid_Activate()

  GetEncounterValue()

End

Public Sub btnencidsearch_Click()

  If Not txtencid.Text Then
    txtencid.Text = PatSearch("Encounter")
  Endif

End

Public Sub mnusearmulti_Click()

  If Not txtencid.Text Then
    txtencid.Text = GetEncid()
  Endif

End

Public Sub btnwebcam_Click()

  If txtencid.Text Then
    GetEncounterValue()
  Else
    txtencid.Text = QRScanValue("")
  Endif

End

Private Sub EnableContainers()

  WebContainer4.Enabled = True
  WebContainer5.Enabled = True
  WebContainer65.Enabled = True
  pnltelemed.Enabled = True

End

Private Sub GetEncounterValue()

  Dim res As Result
  Dim xallow As Boolean

  If Not txtpatientname.Text Then
    If Not txtencid.Text Then Return
    If modBasic.$EncIdPrefix And If txtencid.Text = modBasic.$EncIdPrefix Then
      txtencid.SetFocus
      Return
    Endif

    ' If modPatientSub.LockEncounterDesk(Trim(txtencid.Text)) = False Then
    '   txtencid.Text = ""
    '   Message.Warning(("Encounter Locked"), ("OK"))
    '   ' Balloon.Delay = modBasic.$BalloonDelay
    '   txtencid.SetFocus
    ' Endif

    dtdob.Tag = ""
    If txtencid.Text Then
      If txtencid.Text = modBasic.$EncIdPrefix Then
      Else
        modSettings.SaveValuesToLog("LastValue/Encounter", Trim(txtencid.Text))
      Endif
      res = modDatabase.$myConn.Exec("select fldpatientval,flduserid from tblencounter where fldencounterval=&1", Trim(txtencid.Text))
      If res.Available = False Then
        modLinkDB.CheckEncDataRemote(Trim(txtencid.Text))
        txtencid.SetFocus
      Else
        If modBasic.$LockToOwnConsultant = "Yes" Then
          If res["flduserid"] = modBasic.$lbluser Then
            xallow = True
          Else
            xallow = False
          Endif
        Else
          xallow = True
        Endif
        If xallow = True Then
          txtpatientname.Text = modPatient.GetPatientNameByEnc(Trim(txtencid.Text))
          If txtpatientname.Text Then
            EnableContainers()
            txtgender.Text = modPatient.GetPatientSex(Trim(txtencid.Text))
            txtpatientaddress.Text = modPatient.GetPatientAddressByEnc(Trim(txtencid.Text))
            dtdob.Tag = modPatient.GetPatientBirthDay(Trim(txtencid.Text))
            modDateSub.GetAgeControlFromDate(dtdob.Tag, txtpatage, cmbpatageunit)

            $PatientNum = modPatient.GetPatientNoByEnc(Trim(txtencid.Text))
            $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
            txtnow.Text = $sTatus
            txtbedno.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
            txtpatdoa.Text = modReportVar.GetDateTimeReport(modPatient.GetRecordDate(Trim(txtencid.Text)), gb.GeneralDate)
            txtpatweight.Value = modClinic.GetBodyWeight(Trim(txtencid.Text))
            btnconsult.Tag = modPatient.GetAttendingConsultant(Trim(txtencid.Text))
            btnconsult.Text = modGeneral.GetUserFullName(btnconsult.Tag)
            modClinSub.GetPatientHeight(Trim(txtencid.Text), txtpatheight, cmbpatheightunit)
            modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
            UpdateTriage()
            $vidRoom = LCase(Trim(txtencid.Text) & Format(Now(), "yymmdd"))
            $VidIndex = modApplication.GetMD5SumString($vidRoom)
            Wait
            If modPatientSub.AllowEncIDHistory(Trim(txtencid.Text), modDatabase.$myConn) = True Then
              BlockDCButton()
              modImage.ShowPhotoSplash("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)))
              ''MAIN FORM
              BasicInfoPatient()
              txtencid.ReadOnly = True
            Else
              Me.Enabled = False
            Endif
          Else
            Message.Warning(("Encounter ID not found"), ("OK"))
            ' Balloon.Delay = modBasic.$BalloonDelay
            txtencid.SetFocus
          Endif
        Else
          Message.Warning("Not authorized", ("OK"))
        Endif
      Endif
    Endif
  Endif

End

Public Sub UpdateTriage()

  txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))

End

Private Sub BlockDCButton()

  Dim xx As Boolean

  xx = modPatient.EnableClinicForm(txtnow.Text)
  tlbtnaddheight.Enabled = xx
  tlbtnaddbed.Enabled = xx
  tlbtnadwt.Enabled = xx
  dtdob.Enabled = xx
  btnpic.Enabled = xx
  btnselectuser.Enabled = xx

End

Private Sub RestrictUserAccessPat()

  If $UserRestrictPat.Exist("Bed Assignment") Then
    tlbtnaddbed.Visible = False
  Endif
  If $UserRestrictPat.Exist("Body Weight") Then
    tlbtnadwt.Visible = False
  Endif
  If $UserRestrictPat.Exist("Body Height") Then
    tlbtnaddheight.Visible = False
  Endif

End

''------- Basic Parameters
Public Sub btnpic_Click()

  Dim hForm As FmPersonImage

  If txtencid.Text Then
    hForm = New FmPersonImage("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)), False)
    hForm.ShowModal
  Endif

End

Public Sub tlbtnaddheight_Click()

  If txtencid.Text Then
    If txtpatheight.Value Then
      If cmbpatheightunit.Text Then
        modClinSub.UpdatePatientHeight(Trim(txtencid.Text), txtpatheight.Value, cmbpatheightunit.Text)
        tlbtnaddheight.Enabled = False
        Me.Exec("Toastify({text: 'Information updated', duration: 3000}).showToast()")
        ' Balloon.Delay = modBasic.$BalloonDelay
      Endif
    Endif
  Endif

End

Public Sub tlbtnadwt_Click()

  If txtencid.Text Then
    If txtpatweight.Value Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", txtpatweight.Value)
      tlbtnadwt.Enabled = False
      Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
      ' Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub dtdob_Click()

  Dim dtdate As Date

  If txtencid.Text Then
    dtdate = GetDateValue("Date of Birth of " & txtpatientname.Text, "DOBirth", dtdob.Tag)
    If dtdate Then
      modPatientSub.UpdatePatDOB(Trim(txtencid.Text), dtdate)
      modDateSub.GetAgeControlFromDate(dtdate, txtpatage, cmbpatageunit)
      dtdob.Tag = dtdate
      Me.Exec("Toastify({text: 'Information updated', duration: 3000}).showToast()")
      ' Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

''------------Hospital related parameters
Public Sub btnselectuser_Click()

  Dim xMedUser As String[]

  If txtencid.Text Then
    xMedUser = MedicalSelectedValue(("Select Consultant"), modBasic.$IPConsultUserList)
    If xMedUser And If xMedUser.Count Then
      btnconsult.Tag = xMedUser[0]
      btnconsult.Text = xMedUser[1]
    Else
      btnconsult.Tag = ""
      btnconsult.Text = ""
    Endif
    If btnconsult.Tag Then
      modPatientSub.UpdateAttendingConsultant(Trim(txtencid.Text), btnconsult.Tag)
      Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
      ' Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub btnsms_Click()

  Dim xval As String

  If btnconsult.Tag Then
    xval = modDevice.SendSMSToInpatDoc(Trim(txtencid.Text), modGeneral.GetUserContact(btnconsult.Tag))
    If xval Then
      Message.Info(xval, ("OK"))
    Endif
  Endif

End

Public Sub tlbtnaddbed_Click()

  If txtencid.Text Then
    If MMain.$SISHAppMode = "HIS" Then
      If modHelpVariable.$LogInCategory = "Clinician" Then
        If txtnow.Text = "Admitted" Then
          txtbedno.Text = GetBedNumber(Trim(txtencid.Text))
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnconsult_Change()

  If btnconsult.Text = "" Then
    btnconsult.Tag = ""
  Endif

End

Public Sub tlbtnpayment_Click()

  If txtencid.Text Then
    modNonMedical.CurrentPayStatusMsg(Trim(txtencid.Text))
  Endif

End

Public Sub btnprofile_Click()

  Dim hForm As FmMinProfile

  hForm = New FmMinProfile(Trim(txtencid.Text))
  hForm.ShowModal()

End

''============================== MAIN FORM ================================
Private Sub BasicInfoPatient()

  Dim hPtForm As FmClinHistory
  Dim hDigForm As FmDiagnosticTab

  If txtencid.Text Then
    modRepository.$RepoDataStatus = False
    cmbsympunit.ReadOnly = True
    modJavaScript.SetSelect2Combo(cmbsympunit)
    modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
    GetDefaultBillingmodes()
    ButtonControl()
    $dateReg = modPatient.GetRecordDate(Trim(txtencid.Text))
    Timer1.Enabled = True
    GetConsultParam()
    txthistory.RichText = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "History of Illness")
    modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
    ShowSymptomData()
    ShowEssentialExam()
    FillExamtable()
    ShowPlanningsBoth()
    ShowTelemedSaved()
    dtfollow.Value = modPatient.GetFollowUpDate(Trim(txtencid.Text))
    cmbrefer.Text = modPatient.GetReferLocation(Trim(txtencid.Text))
    pnldiagnostic.Visible = True
    hDigForm = New FmDiagnosticTab(Trim(txtencid.Text), "height-tablet", pnldiagnostic)
    pnlhistory.Visible = True
    hPtForm = New FmClinHistory($PatientNum, "PatientID", "height-tablet", pnlhistory)
    modPatientSub.PopUpPatientForm(Trim(txtencid.Text), Me.Tag)
    If modSettings.ShowSettingFromFIle("OPDForm/Complaints") = "General" Then
      TabPanel2.Index = 1
    Endif
  Endif

End

Private Sub GetDefaultBillingmodes()

  Dim xpackage As String

  Select $sTatus
    Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
      $billModeTest = modNonMedical.GetAutoIPBillingPack("Test", Trim(txtencid.Text))
      $billModeRadio = modNonMedical.GetAutoIPBillingPack("Radio", Trim(txtencid.Text))
      $billModePharmacy = modNonMedical.GetAutoIPBillingPack("Pharmacy", Trim(txtencid.Text))
      $billModeEquipment = modNonMedical.GetAutoIPBillingPack("Equipment", Trim(txtencid.Text))
      $billModeProcedure = modNonMedical.GetAutoIPBillingPack("Procedure", Trim(txtencid.Text))
      $billModeService = modNonMedical.GetAutoIPBillingPack("Service", Trim(txtencid.Text))
      $billModeOthers = modNonMedical.GetAutoIPBillingPack("Others", Trim(txtencid.Text))
    Case Else
      xpackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
      $billModeTest = xpackage
      $billModeRadio = xpackage
      $billModePharmacy = xpackage
      $billModeEquipment = xpackage
      $billModeProcedure = xpackage
      $billModeService = xpackage
      $billModeOthers = xpackage
  End Select

End

Private Sub GetConsultParam()

  Dim res1 As Result
  Dim res2 As Result
  Dim aIndex As Long[]
  Dim aType As String[]

  If $sClinIndex And If $sClinMode Then
  Else
    aIndex = New Long[]
    aType = New String[]
    res1 = modDatabase.$myConn.Exec("select fldid from tblconsult where fldencounterval=&1", Trim(txtencid.Text))
    If res1.Available Then
      For Each res1
        aIndex.Add(res1["fldid"])
        aType.Add("Consultation")
      Next
    Endif

    res2 = modDatabase.$myConn.Exec("select fldid from tblopvisit where fldencounterval=&1", Trim(txtencid.Text))
    If res2.Available Then
      For Each res2
        aIndex.Add(res2["fldid"])
        aType.Add("OP Visit")
      Next
    Endif

    If aIndex.Count = 1 Then
      $sClinIndex = aIndex[0]
      $sClinMode = aType[0]
    Endif

  Endif

End

Private Sub ShowPlanningsBoth()

  Dim xplanAr As String[]
  Dim xexptAr As String[]

  xplanAr = modPatPatho.ShowSelectedNoteUser(Trim(txtencid.Text), "Initial Planning")
  If xplanAr And If xplanAr.Count Then
    txtplan.RichText = xplanAr[0]
    lblinitialuser.Text = xplanAr[1]
  Endif
  xexptAr = modPatPatho.ShowSelectedNoteUser(Trim(txtencid.Text), "Final Planning")
  If xexptAr And If xexptAr.Count Then
    txtplanfinal.RichText = xexptAr[0]
    lblfinaluser.Text = xexptAr[1]
  Endif

End

Private Sub ShowTelemedSaved()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldteleuser,fldsms,fldurgency,fldrequest,fldcoment,flduserid,fldtime,fldvidroom,fldvidpass,fldvidserver from tbltelemedtalk where fldtalkid=&1", $VidIndex)
  If res.Available Then
    res.MoveLast
    cmbexpert.Tag = res["fldteleuser"]
    If cmbexpert.Tag Then
      cmbexpert.Text = modGeneral.GetTeleMedUserName(cmbexpert.Tag)
    Endif
    chkquerysms.Value = res["fldsms"]
    cmburgency.Text = res["fldurgency"]
    txtquery.RichText = res["fldrequest"]

    If Not res["fldcoment"] Then
      txtcamus.Text = res["fldvidserver"] &/ "room" &/ res["fldvidroom"]
      txtpassword.Text = res["fldvidpass"]
      If txtcamus.Text Then
        pnlvideocall.Visible = True
      Endif
    Endif
  Endif

End

Private Sub ButtonControl()

  Dim xx As Boolean
  Dim xval As String

  xx = modPatient.EnableClinicForm($sTatus)
  ''complaints
  btnsympadd.Enabled = xx
  btnaddsymplist.Enabled = xx
  btnsympunit.Enabled = xx
  btnsympdura.Enabled = xx
  btnsympedit.Enabled = xx
  btnsympdel.Enabled = xx
  btngencompln.Enabled = xx
  ''history
  btnhistory.Enabled = xx
  btnplan.Enabled = xx
  btnplanfinal.Enabled = xx
  ''findings
  btnfinadd.Enabled = xx
  btnfindcomponent.Enabled = xx
  btnfindflag.Enabled = xx
  btnfindelete.Enabled = xx
  btnaddexamlist.Enabled = xx
  btnaddexamlistall.Enabled = xx
  btnaddscales.Enabled = xx
  ''diagnosis
  tlbtndeldises.Enabled = xx
  btndismanual.Enabled = xx
  tbnsyndro.Enabled = xx
  tbndisease.Enabled = xx
  tnfinaldiagno.Enabled = xx
  ''lab
  btnlab.Enabled = xx
  ''radio
  btnradio.Enabled = xx
  ''blood
  mnumedproduct.Enabled = xx
  ''alergy
  tlbtndelallergy.Enabled = xx
  btnallergy.Enabled = xx
  btnallergymanual.Enabled = xx
  ''demographics
  mnudemo.Enabled = xx
  ''images
  btnaddchart.Enabled = xx
  ''triage
  mnutriage.Enabled = xx
  btntriage.Enabled = xx
  ''vitals
  mnuvital.Enabled = xx
  btnsavevitals.Enabled = xx
  ''minor procedure
  mnuminorproc.Enabled = xx
  ''equipments
  mnuequip.Enabled = xx
  mnudeviceuse.Enabled = xx
  ''vaccines
  mnuvaccine.Enabled = xx
  ''dosing
  mnupatdosing.Enabled = xx
  ''consultation
  mnuconsultplan.Enabled = xx
  ''major procedure
  mnumajor.Enabled = xx
  ''extra procedure
  mnuextprocedure.Enabled = xx
  ''monitoring
  mnumonitor.Enabled = xx
  ''outcome
  mnuoutcome.Enabled = xx
  ''iv fluids
  mnuivinfusion.Enabled = xx
  ''gen service
  mnugenservice.Enabled = xx
  ''telemedicine
  btnquery.Enabled = xx
  btnrepoupload.Enabled = xx
  btnfeedback.Enabled = xx
  btngetfeed.Enabled = xx
  ''menu
  mnurequests.Enabled = xx
  mnuentry.Enabled = xx
  mnucustform.Enabled = xx
  mnustruct.Enabled = xx

  xval = modBasic.$LockDiagnosisList
  If xval = "No" Then
  Else
    btndismanual.Enabled = False
  Endif

End

Public Sub TabPanel2_Click()

  If TabPanel2.Index = 0 Then
    If modBasic.$TabletModeEnable = "Yes" Then
    Else
      cmbsymptom.SetFocus
    Endif
  Else If TabPanel2.Index = 1 Then
    txtgencomplaint.RichText = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "General Complaints")
    If modBasic.$TabletModeEnable = "Yes" Then
    Else
      txtgencomplaint.SetFocus
    Endif
  Endif

End

Public Sub Timer1_Timer()

  Dim xdely As Integer

  If $dateReg Then
    xdely = DateDiff($dateReg, Now(), gb.Second)
    LCDLabel1.Text = modDate.GetSecondToTimeForm(xdely)
  Endif

  If modBasic.$AutoRefreshEnable = "Yes" Then
    If txtencid.Text Then
      UpdateTriage()
      modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
      ShowEssentialExam()
      If TabPanel2.Index = 0 Then
        ShowSymptomData()
      Else If TabPanel2.Index = 1 Then
        txtgencomplaint.RichText = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "General Complaints")
      Endif
      FillExamtable()
      txthistory.RichText = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "History of Illness")
      ShowPlanningsBoth()
      ShowTelemedSaved()
    Endif
  Endif

End

Public Sub rbsi_Click()

  modSettings.SaveSettingsToFile("TestUnit/Default", "SI")

End

Public Sub rbmetric_Click()

  modSettings.SaveSettingsToFile("TestUnit/Default", "Metric")

End

Public Sub mnuscanfile_Click()

  Dim hForm As FmScanForm

  If txtencid.Text Then
    hForm = New FmScanForm(Trim(txtencid.Text), "Past Documents", "")
    hForm.ShowModal
  Endif

End

Public Sub mnuregister_Click()

  If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
    If modBasic.$regF1Clinic = "Yes" Or If modBasic.$regF1Clinic = "Partial" Then
      txtencid.Text = RegistrationNewForm()
    Else If modBasic.$regF1Clinic = "Full" Then
      txtencid.Text = RegistrationForm(False)
    Endif
  Endif

End

Public Sub mnuwaitconsult_Click()

  Dim sOutstr As String

  If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
    If modGlobalSetting.ShowSettingFromDB("GeneralSettings/OnlineAccess_ClinicForm") = "Yes" Then
      sOutstr = RemoteRequest("Clinic")
      If sOutstr Then
        txtencid.Text = Split(sOutstr, "@")[0]
      Endif
    Endif
  Endif

End

Public Sub mnulastEncID_Click()

  txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")

End

Public Sub mnupatlock_Click()

  If txtencid.Text Then
    modPatientSub.LockPatientActivity(Me.Name, Trim(txtencid.Text))
  Endif

End

''--------------------------------------------- icd disease --------------------------------------------------
Public Sub tlbtndeldises_Click()

  Dim res As Result

  If txtencid.Text Then
    If lsticdisease.Current.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lsticdisease.Current.Text, Trim(txtencid.Text), "Provisional Diagnosis", True)
        If res.Available Then
          res["fldsave"] = False
          res["xyz"] = False
          res.Update
          modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
          ' Message.Warning(("Information deleted"), ("OK"))
          ' Balloon.Delay = modBasic.$BalloonDelay
        Endif
      Endif
    Endif
  Endif

End

Public Sub tbndisease_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If MMain.$Ayurveda = "Yes" Then
      sName = AyurvedicDiagnosis(modAyurv.$AyurvedicDiagnosis)
    Else
      If modBasic.$ClinICDPunchFormat = "GridView" Then
        sName = ICDGridView("Select Diseases")
      Else
        sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoChapterGrouped, modBasic.$FixDiagnoGroupOPD, modBasic.$FixDiagnoGroupER, modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup)
      Endif
    Endif
    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[2])
        modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
      Endif
    Endif
  Endif

End

Public Sub tbnsyndro_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If modBasic.$ProvDiagnosisRule = "Obstetrics" Then
      sName = DiagnoObstetrics(Trim(txtencid.Text), True)
    Else
      sName = GetSyndromes()
    Endif

    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[1])

        If sName.Count > 2 And If sName[2] Then
          If modBasic.$ProvDiagnosisRule = "Obstetrics" Then
            If modSettings.ShowSettingFromFIle("ClinicalRule/ObstetricsParam_History") = "Yes" Then
              txthistory.Text = txthistory.Text & gb.NewLine & sName[2]
            Endif
          Endif
        Endif

        modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
      Endif
    Endif
  Endif

End

Public Sub btndismanual_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Provisional Diagnosis"), ("Provisional Diagnosis"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), xx, "Other", "Other")
      modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
    Endif
  Endif

End

Public Sub btnregimen_Click()

  Dim hForm As FmDrugDose

  If lsticdisease.Current.Text Then
    hForm = New FmDrugDose(Trim(txtencid.Text), lsticdisease.Current.Text)
    hForm.ShowModal
  Endif

End

''final diagnosis
Public Sub tnfinaldiagno_Click()

  Dim sName As String[]
  Dim xList As String[]

  If txtencid.Text Then
    xList = modPathoSub.GetProvisionalDiagnosisList(Trim(txtencid.Text))
    If xList.Count Then
      If MMain.$Ayurveda = "Yes" Then
        sName = AyurvedicDiagnosis(modAyurv.$AyurvedicDiagnosis)
      Else
        If modBasic.$ClinICDPunchFormat = "GridView" Then
          sName = ICDGridView("Select Diseases")
        Else
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoChapterGrouped, modBasic.$FixDiagnoGroupOPD, modBasic.$FixDiagnoGroupER, modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup)
        Endif
      Endif
      If sName Then
        If sName[1] And If sName[0] Then
          modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[2])
          modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
        Endif
      Endif
    Endif
  Endif

End

''------------------------------------------- Allergy --------------------------------------------------------------
Public Sub tlbtndelallergy_Click()

  Dim res As Result

  If txtencid.Text Then
    If lsticdisease.Current.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lsticdisease.Current.Text, Trim(txtencid.Text), "Allergic Drugs", True)
        If res.Available Then
          res["fldsave"] = False
          res["xyz"] = False
          res.Update
          modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
          ' Message.Warning(("Information deleted"), ("OK"))
          ' Balloon.Delay = modBasic.$BalloonDelay
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnallergymanual_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Drug Allergy"), ("Drug Allergy"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Allergic Drugs", Trim(txtencid.Text), xx, "", "")
      modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
    Endif
  Endif

End

Public Sub btnallergy_Click()

  Dim curLst As String[]
  Dim sName As String[]
  Dim sText As String
  Dim druglist As String[]

  If txtencid.Text Then
    curLst = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), True)
    druglist = modString.GetRemainingArray(modBasic.$GenericMedName, curLst)
    sName = GridListView(("Select Drugs"), druglist)
    If sName And If sName.Count Then
      For Each sText In sName
        modPatientGeneral.AddPatientFindings("Allergic Drugs", Trim(txtencid.Text), sText, "", "")
      Next
    Endif
    modPatientGeneral.SetPatientFindingTree(Trim(txtencid.Text), lsticdisease)
  Endif

End

''------------------------------- exam ---------------------------------------------
Public Sub cmbfinding_Activate()  ''from got focus

  If cmbfinding.Text Then
    GetSelectedFindingControl()
  Else
    btnfindList_Click()
  Endif

End

Public Sub cmbfinding_Completion(Text As String)

  Dim xallLst As String[]
  Dim xList As String[]

  xallLst = modBasic.$ClinFindingComp
  If xallLst And If xallLst.Count Then
    xList = modString.SelectStringArrayToText(Text, xallLst, False)
    cmbfinding.CompleteWith(xList)
  Endif

End

Public Sub btnfindList_Click()

  Dim xlist As String[]

  If modBasic.$ClinCategoryGrid = "Yes" Then
    xlist = modBasic.$ClinFindingCompGrouped
    If xlist.Count Then
      cmbfinding.Text = GridViewGroup("Select Clinical Findings", xlist, modMisc.LockBoolean(modBasic.$LockExamList))
      GetSelectedFindingControl()
    Endif
  Else
    xlist = modBasic.$ClinFindingComp
    If xlist.Count Then
      cmbfinding.Text = GridViewNew("Select Clinical Findings", xlist, modMisc.LockBoolean(modBasic.$LockExamList))
      GetSelectedFindingControl()
    Endif
  Endif

End

Private Sub GetSelectedFindingControl()

  Dim sType As String
  Dim xlimit As Float[]

  txtfindmax.Value = 0
  txtfindmin.Value = 0
  If cmbfinding.Text Then
    sType = modFixClinic.GetExaminationType(cmbfinding.Text)
    If sType = "Quantitative" Then
      xlimit = modClinic.GetBothQuantiExamVal(cmbfinding.Text, Trim(txtencid.Text))
      txtfindmin.Value = xlimit[0]
      txtfindmax.Value = xlimit[1]

      txtfinding.Enabled = False
      btnselquali.Enabled = False
      txtfinval.Enabled = True
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtfinval.SetFocus
        Me.Exec("$_(" & JS(txtfinval.Name & ":entry") & ").select()")
      Endif

    Else    ''is it good to allow items not in list?
      txtfinding.Enabled = True
      txtfinding.Tag = modFixClinic.GetExamtOptionType(cmbfinding.Text)
      If modBasic.$DisplayExamOption = "No" Then
      Else
        If txtfinding.Tag = "Single Selection" Or If txtfinding.Tag = "Dichotomous" Then
          txtfinding.List = modAllExam.SelectExamOptionList("Exam", cmbfinding.Text)
        Else
          btnselquali.Enabled = True
        Endif
      Endif
      txtfinval.Enabled = False
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtfinding.SetFocus
      Endif

    Endif
  Endif

End

Public Sub btnselquali_Click()

  Dim xType As String
  Dim xscle As String[]
  Dim yqualival As Variant[]

  If cmbfinding.Text Then
    If modBasic.$DisplayExamOption = "No" Then
    Else

      xType = txtfinding.Tag
      If xType = "Clinical Scale" Then
        xscle = modExamOption.GetClinScalePopUp("Exam", cmbfinding.Text)
        If xscle Then
          txtfinval.Value = CFloat(xscle[0])
          txtfinding.Text = xscle[1]
          txtfinding.Enabled = False
        Endif
      Else If xType = "Left and Right" Then
        yqualival = CLeftRight(cmbfinding.Text, "", modFixClinic.GetLeftRightMainHeader("Exam", cmbfinding.Text))
        If yqualival Then
          txtfinding.Text = yqualival[0]
          txtfinding.Enabled = False
        Endif
      Else If xType = "Visual Input" Then
        txtfinding.Text = modExamOption.GetVisualDataExamVal(cmbfinding.Text)
      Else If xType = "Date Time" Then
        txtfinding.Text = modDate.DateStringForExam(GetDateValue(cmbfinding.Text, "Date Value", Now()))
        txtfinding.Enabled = False
      Else If xType = "BS Date" Then
        txtfinding.Text = modDate.ConvertToLocaldate(GetDateValue(cmbfinding.Text, "Date Value", Now()))
        txtfinding.Enabled = False
      Endif

    Endif
  Endif

End

Public Sub txtfinding_Activate() ''''from got focus

  If txtfinding.Text Then
    btnfinadd_Click()
  Else
    btnselquali_Click()
  Endif

End

Public Sub txtfinval_Activate()

  If txtfinval.Value Then
    btnfinadd_Click()
  Endif

End

Public Sub btnaddexamlist_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "Group")
    hForm.ShowModal
    FillExamtable()
    ShowEssentialExam()
  Endif

End

Public Sub btnaddexamlistall_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "All")
    hForm.ShowModal
    FillExamtable()
    ShowEssentialExam()
  Endif

End

Public Sub btnaddscales_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "Scales")
    hForm.ShowModal
    FillExamtable()
    ShowEssentialExam()
  Endif

End

Public Sub btntriage_Click()

  Dim xcol As String

  If txtencid.Text Then
    xcol = InputColor("Triage", CStr(txtcolor.Background))
    If xcol Then
      txtcolor.Background = CInt(xcol)
      modPatient.SetPatientColor(Trim(txtencid.Text), xcol)
    Endif
  Endif

End

Public Sub btnfinadd_Click()

  Dim sType As String
  Dim abn As Boolean
  Dim xsys As String
  Dim OptionType As String
  Dim hForm As CGetExamParam

  If txtencid.Text Then
    If cmbfinding.Text Then
      hForm = New CGetExamParam(cmbfinding.Text, "Exam")
      sType = hForm.GetExamDataType()
      xsys = hForm.GetExamConstant()
      OptionType = hForm.GetExamOption()

      If sType = "Quantitative" Then
        If txtfindmin.Value > txtfinval.Value Or If txtfindmax.Value < txtfinval.Value Then
          abn = True
        Else
          abn = False
        Endif
        modClinSub.AddQuantiData(Trim(txtencid.Text), "", cmbfinding.Text, OptionType, txtfinval.Value, abn, "Physician Examinations", xsys)
      Else
        modClinSub.AddClinicExam(Trim(txtencid.Text), "", cmbfinding.Text, OptionType, txtfinding.Text, txtfinval.Value, False, "Physician Examinations", xsys, "Regular")
      Endif
      FillExamtable()
      ShowEssentialExam()

      cmbfinding.Text = ""
      txtfinding.Text = ""
      txtfinding.Tag = ""
      txtfinding.Enabled = True
      If txtfinding.List.Count Then
        txtfinding.Clear()
      Endif
      btnselquali.Enabled = True
      txtfinval.Enabled = True
      txtfinval.Value = 0
      txtfinval.Tag = ""
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        cmbfinding.SetFocus
      Endif
    Endif
  Endif

End

Public Sub FillExamtable()

  $rExamRes = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldrepquali,fldtime,fldsave,fldencounterval from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), "Physician Examinations", True)
  $aExamFields = New String[]
  modGridView.ReadSmallData(GridView1, $rExamRes, $aExamFields)

  With GridView1
    .Columns[0].Hidden = True
    .Columns[1].Hidden = True
    .Columns[2].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(25 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(200 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Hidden = True
    .Columns[6].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Hidden = True
    .Columns[8].Hidden = True
    .Columns[2].Text = "Examination"
    .Columns[4].Text = "Observation"
    .Columns[6].Text = "ReportTime"
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rExamRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 3 Then
    Data.Html = modString.GetImageForHTMLGrid(modMisc.GetGridIcon($rExamRes[$aExamFields[Column]]), "75%", "75%")
    Data.Text = ""
  Else If Column = 4 Then
    Data.Html = modClinic.GetExamValueString(Trim(txtencid.Text), $rExamRes[$aExamFields[Column]], False)
  Else If Column = 6 Then
    Data.Text = modReportVar.GetDateTimeReport($rExamRes[$aExamFields[Column]], gb.GeneralDate)
  Else If Column = 2 Then
    Data.Text = $rExamRes[$aExamFields[Column]]
  Else
    Data.Text = $rExamRes[$aExamFields[Column]]
  Endif

End

Public Sub btnfindcomponent_Click()

  Dim hForm2 As FmEnterMultiple
  Dim hFormTwo As FmEnterMultipleTwo
  Dim res As Result
  Dim xData As Variant[]

  Dim yyy As String[]
  Dim xquantival As Variant[]
  Dim yqualival As Variant[]
  Dim xlimit As Float[]
  Dim xType As String
  Dim xdate As Date

  If GridView1.Selection.Count Then
    $rExamRes.MoveTo(GridView1.Selection[0])

    If $rExamRes["fldtype"] = "Qualitative" Then
      xType = modFixClinic.GetExamtOptionType($rExamRes["fldhead"])
      If modClinic.GetSubExamBool($rExamRes["fldid"], Trim(txtencid.Text)) = False Then
        If xType = "Fixed Components" Or If xType = "Left/Right Components" Then
          yyy = modFixClinic.GetSubExamArray($rExamRes["fldhead"])
          If yyy.Count Then
            modClinSub.InsertExamSubExam($rExamRes["fldencounterval"], $rExamRes["fldid"], $rExamRes["fldhead"], yyy)
          Endif
        Endif
      Endif

      res = modDatabase.$myConn.Exec("select fldid,fldsubtexam,fldreport,fldtanswertype,fldabnormal,fldindex from tblpatientsubexam where fldheadid=&1", $rExamRes["fldid"])
      If res.Available = False Then
        If xType = "Clinical Scale" Then
          yqualival = modExamOption.GetClinScalePopUp("Exam", $rExamRes["fldhead"])
          If yqualival Then
            modClinSub.UpdateQualiQuantiData($rExamRes["fldid"], yqualival[1], CFloat(yqualival[0]), False)
          Endif
        Else If xType = "Left and Right" Then
          yqualival = CLeftRight($rExamRes["fldhead"], modClinic.GetExamValueString($rExamRes["fldencounterval"], $rExamRes["fldid"], False), modFixClinic.GetLeftRightMainHeader("Exam", $rExamRes["fldhead"]))
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1], "")
          Endif
        Else If xType = "Date Time" Then
          xdate = GetDateValue($rExamRes["fldhead"], ("Select Date Time"), Val($rExamRes["fldrepquali"]))
          If xdate Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], modDate.DateStringForExam(xdate), False, "")
          Endif
        Else If xType = "BS Date" Then
          xdate = GetDateValue($rExamRes["fldhead"], ("Select Date Time"), modDate.ConvertToEnglishdate($rExamRes["fldrepquali"]))
          If xdate Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], modDate.ConvertToLocaldate(xdate), False, "")
          Endif
        Else If xType = "Qualitative" Then
          yqualival = GetQualiString($rExamRes["fldhead"], $rExamRes["fldrepquali"], "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1])
          Endif
        Else If xType = "RichText Area" Then
          yqualival = GetQualiRich($rExamRes["fldhead"], $rExamRes["fldrepquali"], "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1], yqualival[2])
          Endif
        Else
          yqualival = GetQualiValues($rExamRes["fldhead"], $rExamRes["fldrepquali"], "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1], yqualival[2])
          Endif
        Endif

      Else If res.Available = True Then
        xData = New Variant[]
        For Each res
          xData.Add([res["fldsubtexam"], res["fldreport"], res["fldid"], res["fldtanswertype"], res["fldabnormal"], res["fldindex"]])
        Next
        xData.Add(["Final Impression", $rExamRes["fldrepquali"], 0, "RichText Area", False, ""])
        If xType = "Left/Right Components" Then
          hFormTwo = New FmEnterMultipleTwo($rExamRes["fldid"], "Exam", $rExamRes["fldhead"], xData, "", "Current")
          hFormTwo.ShowModal
        Else
          hForm2 = New FmEnterMultiple($rExamRes["fldid"], "Exam", $rExamRes["fldhead"], xData, "", "Current")
          hForm2.ShowModal
        Endif
      Endif

    Else If $rExamRes["fldtype"] = "Quantitative" Then
      xlimit = modClinic.GetBothQuantiExamVal($rExamRes["fldhead"], $rExamRes["fldencounterval"])
      xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), $rExamRes["fldhead"], xlimit[0], xlimit[1], modClinic.GetExamValueByID($rExamRes["fldid"]))                                       '
      If xquantival Then
        modClinSub.UpdateQuantiData($rExamRes["fldid"], xquantival[0], xquantival[1])
      Endif

    Endif
    FillExamtable()

  Endif

End

Public Sub btnfindflag_Click()

  Dim xx As String

  If GridView1.Selection.Count Then
    $rExamRes.MoveTo(GridView1.Selection[0])
    xx = InputCombo("Select Flag for the observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue($rExamRes["fldabnormal"]), True)
    If xx Then
      modClinSub.UpdateExamFlag($rExamRes["fldid"], xx)
      FillExamtable()
    Endif
  Endif

End

Public Sub btnfindelete_Click()

  Dim res As Result

  If GridView1.Selection.Count Then
    $rExamRes.MoveTo(GridView1.Selection[0])
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", $rExamRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

''------------------------------------- chief symptom ------------------------------------------------------
Public Sub btnaddsymplist_Click()

  Dim xlist As String[]
  Dim aList As String[]
  Dim xitem As String
  Dim hForm As FmMultiComplaints

  If modBasic.$SelectMultiSymptoms = "Yes" Then
    xlist = modBasic.$ClinComplaintComp
    If xlist.Count Then
      aList = GridListView("Select Presenting Complaints", xlist)
      If aList And If aList.Count Then
        For Each xitem In aList
          modPatientGeneral.AddPatComplaintsData(Trim(txtencid.Text), "Presenting Symptoms", xitem, "", 0, "")
        Next
        ShowSymptomData()
      Endif
    Endif

  Else
    hForm = New FmMultiComplaints(Trim(txtencid.Text))
    hForm.ShowModal()
    ShowSymptomData()
  Endif

End

Public Sub cmbsymptom_Activate() '''from got focus

  If cmbsymptom.Text Then
    txtsympval.SetFocus()
    Me.Exec("$_(" & JS(txtsympval.Name & ":entry") & ").select()")
  Else
    btncompList_Click()
  Endif

End

Public Sub cmbsymptom_Completion(Text As String)

  Dim xallLst As String[]
  Dim xList As String[]

  xallLst = modBasic.$ClinComplaintComp
  If xallLst And If xallLst.Count Then
    xList = modString.SelectStringArrayToText(Text, xallLst, False)
    cmbsymptom.CompleteWith(xList)
  Endif

End

Public Sub btncompList_Click()

  Dim xlist As String[]

  If modBasic.$ClinCategoryGrid = "Yes" Then
    xlist = modBasic.$ClinComplaintCompGrouped
    If xlist.Count Then
      cmbsymptom.Text = GridViewGroup("Select Presenting Complaints", xlist, modMisc.LockBoolean(modBasic.$LockSymptomList))
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtsympval.SetFocus
      Endif
    Endif
  Else
    xlist = modBasic.$ClinComplaintComp
    If xlist.Count Then
      cmbsymptom.Text = GridViewNew("Select Presenting Complaints", xlist, modMisc.LockBoolean(modBasic.$LockSymptomList))
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtsympval.SetFocus
      Endif
    Endif
  Endif

End

Public Sub txtsympval_Activate()

  If txtsympval.Value Then
    modJavaScript.PopUpSelect2Combo(cmbsympunit)
    cmbsympunit.SetFocus
  Endif

End

Public Sub cmbsympunit_Click()

  If cmbsympunit.Text Then
    cmbsymdura.SetFocus
  Endif

End

Public Sub cmbsymdura_Activate()

  btnsympadd_Click()

End

' Public Sub cmbsympunit_KeyRelease()
'
'   modFillContainer.AutoFillComboBox(cmbsympunit)
'   modFillContainer.RestrictComboToContent(cmbsympunit)
'
' End

' Public Sub cmbsymdura_KeyRelease()
'
'   modFillContainer.AutoFillComboBox(cmbsymdura)
'   ' modFillContainer.RestrictComboToContent(cmbsymdura)
'
' End

Public Sub btnsympadd_Click()

  If txtencid.Text Then
    If cmbsymptom.Text Then
      modPatientGeneral.AddPatComplaintsData(Trim(txtencid.Text), "Presenting Symptoms", cmbsymptom.Text, cmbsymdura.Text, txtsympval.Value, cmbsympunit.Text)
      ShowSymptomData()
      cmbsymptom.Text = ""
      cmbsymdura.Text = ""
      modJavaScript.TriggerSelect2Combo(cmbsympunit)
      cmbsympunit.Text = ""
      txtsympval.Value = 0
      txtsympval.Tag = ""
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        cmbsymptom.SetFocus
      Endif
    Endif
  Endif

End

Public Sub ShowSymptomData()

  Dim sql As String

  sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldreportquali,fldid,fldid,fldtime,flddetail from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3"
  $rSympRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Presenting Symptoms", True)
  $aSympFields = New String[]
  modGridView.ReadSmallData(grdchiefsymptom, $rSympRes, $aSympFields)

  With grdchiefsymptom
    .Columns[0].Hidden = True
    .Columns[1].Hidden = True
    .Columns[2].Hidden = True
    .Columns[3].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Hidden = True
    .Columns[7].Hidden = True
    .Columns[8].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"

    .Columns[3].Text = "Symptom"
    .Columns[4].Text = "Dura"
    .Columns[5].Text = "Unit"
    .Columns[8].Text = "DateTime"
    .Columns[9].Text = "Description"
  End With

End

Public Sub grdchiefsymptom_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rSympRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 8 Then
    Data.Text = modReportVar.GetDateTimeReport($rSympRes[$aSympFields[Column]], gb.GeneralDate)
  Else
    Data.Text = $rSympRes[$aSympFields[Column]]
  Endif

End

Public Sub btnsympunit_Click()

  Dim xval As String
  Dim res As Result

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    xval = InputCombo("Update Unit of Symptom Duration", $rSympRes["flditem"], ["Hours", "Days", "Weeks", "Months", "Years", "Episodes"], $rSympRes["fldreportquali"], True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldreportquali"] = xval
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub btnsympdura_Click()

  Dim yval As Float
  Dim res As Result

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    yval = InputValue("Update duration of Symptom", $rSympRes["flditem"], $rSympRes["fldreportquanti"])
    If yval Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldreportquanti"] = yval
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub btnsympedit_Click()

  Dim res As Result
  Dim yqualival As Variant[]

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    yqualival = GetQualiValues($rSympRes["flditem"], $rSympRes["flddetail"], "")
    If yqualival Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])                            ''"
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["flddetail"] = yqualival[0]
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub btnsympdel_Click()

  Dim res As Result

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        ShowSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

''------------------------------ Essential exam -----------------------------
Private Sub ShowEssentialExam()

  Dim xsystolic As Variant
  Dim xdiastolic As Variant
  Dim xpulse As Variant
  Dim xtemp As Variant
  Dim xresprate As Variant
  Dim xoxysat As Variant

  xsystolic = modClinic.GetCurrExamValueFromID("Last", Trim(txtencid.Text), modFixClinic.GetExamIDFromSysConst("BloodPressure_Systolic"))
  xdiastolic = modClinic.GetCurrExamValueFromID("Last", Trim(txtencid.Text), modFixClinic.GetExamIDFromSysConst("BloodPressure_Diastolic"))
  xpulse = modClinic.GetCurrExamValueFromID("Last", Trim(txtencid.Text), modFixClinic.GetExamIDFromSysConst("Pulse_Rate"))
  xtemp = modClinic.GetCurrExamValueFromID("Last", Trim(txtencid.Text), modFixClinic.GetExamIDFromSysConst("Temperature_System"))
  xresprate = modClinic.GetCurrExamValueFromID("Last", Trim(txtencid.Text), modFixClinic.GetExamIDFromSysConst("Respiration_Rate"))
  xoxysat = modClinic.GetCurrExamValueFromID("Last", Trim(txtencid.Text), modFixClinic.GetExamIDFromSysConst("Oxygen_Saturation"))

  If xsystolic Then
    txtsystolicbp.Value = xsystolic
  Else
    txtsystolicbp.Value = 0
  Endif
  If xdiastolic Then
    txtdiastolicbp.Value = xdiastolic
  Else
    txtdiastolicbp.Value = 0
  Endif
  If xpulse Then
    txtpulse.Value = xpulse
  Else
    txtpulse.Value = 0
  Endif
  If xtemp Then
    txttemp.Value = xtemp
  Else
    txttemp.Value = 0
  Endif
  If xresprate Then
    txtresprate.Value = xresprate
  Else
    txtresprate.Value = 0
  Endif
  If xoxysat Then
    txtoxysat.Value = xoxysat
  Else
    txtoxysat.Value = 0
  Endif

End

Public Sub btnsavevitals_Click()

  Dim xsysbp As String
  Dim xdiastobp As String
  Dim xpulse As String
  Dim xresprate As String
  Dim xtemp As String
  Dim xoxysat As String

  If txtencid.Text Then
    xsysbp = modFixClinic.GetExamIDFromSysConst("BloodPressure_Systolic")
    If xsysbp Then
      If txtsystolicbp.Value Then
        modClinSub.AddQuantiDataCheck(Trim(txtencid.Text), "", xsysbp, "", txtsystolicbp.Value, "Essential Examinations")
      Endif
    Endif

    xdiastobp = modFixClinic.GetExamIDFromSysConst("BloodPressure_Diastolic")
    If xdiastobp Then
      If txtdiastolicbp.Value Then
        modClinSub.AddQuantiDataCheck(Trim(txtencid.Text), "", xdiastobp, "", txtdiastolicbp.Value, "Essential Examinations")
      Endif
    Endif

    xpulse = modFixClinic.GetExamIDFromSysConst("Pulse_Rate")
    If xpulse Then
      If txtpulse.Value Then
        modClinSub.AddQuantiDataCheck(Trim(txtencid.Text), "", xpulse, "", txtpulse.Value, "Essential Examinations")
      Endif
    Endif

    xresprate = modFixClinic.GetExamIDFromSysConst("Respiration_Rate")
    If xresprate Then
      If txtresprate.Value Then
        modClinSub.AddQuantiDataCheck(Trim(txtencid.Text), "", xresprate, "", txtresprate.Value, "Essential Examinations")
      Endif
    Endif

    xtemp = modFixClinic.GetExamIDFromSysConst("Temperature_System")
    If xtemp Then
      If txttemp.Value Then
        modClinSub.AddQuantiDataCheck(Trim(txtencid.Text), "", xtemp, "", txttemp.Value, "Essential Examinations")
      Endif
    Endif

    xoxysat = modFixClinic.GetExamIDFromSysConst("Oxygen_Saturation")
    If xoxysat Then
      If txtoxysat.Value Then
        modClinSub.AddQuantiDataCheck(Trim(txtencid.Text), "", xoxysat, "", txtoxysat.Value, "Essential Examinations")
      Endif
    Endif

    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  Endif

End

Public Sub txtpulse_Activate()

  txtsystolicbp.SetFocus

End

Public Sub txtsystolicbp_Activate()

  txtdiastolicbp.SetFocus

End

Public Sub txtdiastolicbp_Activate()

  txtresprate.SetFocus

End

Public Sub txtresprate_Activate()

  txtoxysat.SetFocus

End

Public Sub txtoxysat_Activate()

  txttemp.SetFocus

End

Public Sub txttemp_Activate()

  btnsavevitals_Click()

End

''--------------------- History and planning ---------------------------
Public Sub btnhistory_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txthistory.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "History", "History of Illness", txthistory.KeyList.Join(";"), txthistory.RichText, xboolean)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnplan_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtplan.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", "Initial Planning", txtplan.KeyList.Join(";"), txtplan.RichText, xboolean)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnplanfinal_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtplanfinal.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", "Final Planning", txtplanfinal.KeyList.Join(";"), txtplanfinal.RichText, xboolean)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btngencompln_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtgencomplaint.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "History", "General Complaints", txtgencomplaint.KeyList.Join(";"), txtgencomplaint.RichText, xboolean)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif
  modSettings.SaveSettingsToFile("OPDForm/Complaints", "General")

End

''------------------------------------- Menu -------------------------------------------------
Public Sub mnupatimage_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("IMAGE", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub mnudicom_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("DICOM", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub mnupacsimage_Click()

  Dim hForm As FmPacsShow

  If txtencid.Text Then
    hForm = New FmPacsShow(Trim(txtencid.Text), "Visit")
    hForm.ShowModal
  Endif

End

Public Sub mnupacshist_Click()

  Dim hForm As FmPacsShow

  If txtencid.Text Then
    hForm = New FmPacsShow(Trim(txtencid.Text), "History")
    hForm.ShowModal
  Endif

End

Public Sub mnuvideodata_Click()

  Dim hForm8 As FmPatVideo

  If txtencid.Text Then
    hForm8 = New FmPatVideo("VIDEO", Trim(txtencid.Text), "")
    hForm8.ShowModal
  Endif

End

Public Sub btnopreport_Click()

  mnuopd_Click()

End

Public Sub btnaddchart_Click()

  Dim sPath As String
  Dim xval As String

  If txtencid.Text Then
    sPath = CustomDraw()
    If sPath Then
      xval = modImage.SaveClinicScreenDraw(Trim(txtencid.Text), modString.GetDateString(Now()), sPath)
    Endif
  Endif

End

' Public Sub btnaddscan_Click()
'
'   Dim sPath As String
'   Dim sTitle As String
'
'   If txtencid.Text Then
'     sTitle = "Scan-" & modString.GetDateString(Now())
'     sPath = ScannedFile()
'     If sPath And If Exist(sPath) Then
'      xval = modImage.SaveClinicScreenDraw(Trim(txtencid.Text), sTitle, sPath)
'     Endif
'   Endif
'
' End

' Public Sub btnaddcibf_Click()
'
'   Dim sPath As String
'   Dim sTitle As String
'
'   If txtencid.Text Then
'     sTitle = "Webcam-" & modString.GetDateString(Now())
'     sPath = modImage.GetWebCamValue(modDevice.WebCamDevice())
'     If sPath And If Exist(sPath) Then
'      xval = modImage.SaveClinicScreenDraw(Trim(txtencid.Text), sTitle, sPath)
'     Endif
'   Endif
'
' End

Public Sub btnfollownep_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfollow.Value))
  If xx Then
    dtfollow.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub btnsavefollow_Click()

  Dim res As Result

  If txtencid.Text Then
    res = modDatabase.$myConn.Edit("tblencounter", "fldencounterval=&1", Trim(txtencid.Text))
    If dtfollow.Value Then
      res["fldfollowdate"] = dtfollow.Value
    Endif
    If cmbrefer.Text Then
      res["fldreferto"] = cmbrefer.Text
    Endif
    res["xyz"] = False
    res.Update

    If Message.Question("Upload Data to Repository now?", ("No"), ("Yes")) = 2 Then
      modDataRepo.GetRepoUploadEncounterData(Trim(txtencid.Text))
    Endif
  Endif

End

Public Sub mnufollow_Click()

  dtfollow.SetFocus

End

Public Sub mnurefer_Click()

  cmbrefer.SetFocus

End

Public Sub mnucomplete_Click()

  Dim hForm As FmOPOutcome
  Dim hForm1 As FmConsultPlay
  Dim xdept As String

  If modPathoSub.AllowOPOutcomeDiagno(Trim(txtencid.Text)) = True Then
    If $sClinIndex And If $sClinMode Then
      hForm = New FmOPOutcome($sClinMode, Trim(txtencid.Text), $sClinIndex)
      hForm.ShowModal

    Else
      If modBasic.$FixedDepartment Then
        xdept = modBasic.$FixedDepartment
      Else
        xdept = ""
      Endif
      hForm1 = New FmConsultPlay(Trim(txtencid.Text), xdept)
      hForm1.ShowModal

    Endif
    mnublank_Click()
  Endif

End

''================== Request ========================
Public Sub btnlab_Click()

  Dim hForm As FmTestList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Test") = True Then
      hForm = New FmTestList(Trim(txtencid.Text), $billModeTest)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnradio_Click()

  Dim hForm As FmRadioList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Radio") = True Then
      hForm = New FmRadioList(Trim(txtencid.Text), $billModeRadio)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btnpharm_Click()

  Dim hForm As FmMedOrder

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Pharmacy") = True Then
      If modBasic.$MedRequestForm = "Separate" Then
      Else
        hForm = New FmMedOrder(Trim(txtencid.Text), $sTatus, $billModePharmacy)
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub mnumedproduct_Click()

  Dim hForm As FmMedItemList

  If txtencid.Text Then
    hForm = New FmMedItemList(Trim(txtencid.Text), "Blood")
    hForm.ShowModal
  Endif

End

Public Sub mnucloudai_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = PatCloudAI(Trim(txtencid.Text), "", "")
  Endif

End

Public Sub btnblankform_Click()

  Me.Parent.DeleteChildren()
  modGeneralMain.LoadOPDClinicForm()

End

Public Sub mnumajor_Click()

  Dim hForm As FmMajorProced

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMajorProced(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuextprocedure_Click()

  ' Dim hForm As FmAddExtraProced
  '
  ' If txtencid.Text Then
  '   hForm = New FmAddExtraProced(Trim(txtencid.Text), $billModeProcedure)
  '   hForm.ShowModal
  ' Endif

End

Public Sub mnuconsultplan_Click()

  Dim hForm As FmMiniConsult

  If txtencid.Text Then
    hForm = New FmMiniConsult(Trim(txtencid.Text), $billModeService)
    hForm.ShowModal
  Endif

End

Public Sub mnumonitor_Click()

  Dim hForm As FmReqVital

  If txtencid.Text Then
    hForm = New FmReqVital(Trim(txtencid.Text), $sTatus)
    hForm.ShowModal
  Endif

End

Public Sub mnudeviceuse_Click()

  Dim hForm As FmDeviceUse

  If txtencid.Text Then
    hForm = New FmDeviceUse(Trim(txtencid.Text), "Devices")
    hForm.ShowModal
  Endif

End

Public Sub mnuminorproc_Click()

  Dim hForm As FmMiniProcedure

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMiniProcedure(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnugenservice_Click()

  Dim hForm As FmMiniService

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Service") = True Then
      hForm = New FmMiniService(Trim(txtencid.Text), $billModeService, $billModeProcedure, $billModeOthers)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuequip_Click()

  Dim hForm As FmEquipment

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Equipment") = True Then
      hForm = New FmEquipment(Trim(txtencid.Text), $billModeEquipment)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuvaccine_Click()

  Dim hForm As FmVaccine

  If txtencid.Text Then
    hForm = New FmVaccine(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnugenviol_Click()

  Dim hForm As FmGenViolence

  If txtencid.Text Then
    hForm = New FmGenViolence(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnupatdosing_Click()

  Dim hForm As FmDosecount

  If txtencid.Text Then
    hForm = New FmDosecount(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnuivinfusion_Click()

  Dim hForm As FmIVInfusion

  If txtencid.Text Then
    hForm = New FmIVInfusion(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub btnnotes_Click()

  Dim hForm As FmNoteMobile

  If txtencid.Text
    hForm = New FmNoteMobile(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnuvital_Click()

  Dim hForm As FmVital

  If txtencid.Text
    hForm = New FmVital(Trim(txtencid.Text))
    hForm.ShowModal
    UpdateTriage()
  Endif

End

Public Sub mnutriage_Click()

  Dim hForm As FmTriage

  If txtencid.Text
    hForm = New FmTriage("Triage Examinations", Trim(txtencid.Text))
    hForm.ShowModal
    UpdateTriage()
  Endif

End

Public Sub mnuopd_Click()

  Dim hCls As CReportCustom
  Dim xPath As String

  If txtencid.Text Then
    If modPathoSub.AllowOPOutcomeDiagno(Trim(txtencid.Text)) = True Then
      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then

        If modSettings.ShowSettingFromFIle("OPD Sheet/Name") Then
          If $sClinIndex And If $sClinMode Then
            If $sClinMode = "Consultation" Then
              hCls = New CReportCustom(Trim(txtencid.Text), "OPD Sheet", "ReportSize", LabUnitForm(), "Consultation|" & CStr($sClinIndex))
            Else If $sClinMode = "OP Visit" Then
              hCls = New CReportCustom(Trim(txtencid.Text), "OPD Sheet", "ReportSize", LabUnitForm(), "OPVisit|" & CStr($sClinIndex))
            Endif
          Else
            hCls = New CReportCustom(Trim(txtencid.Text), "OPD Sheet", "ReportSize", LabUnitForm())
          Endif
          hCls.Preview()
        Else
          xPath = modPatReports.ShowOPatSummary(Trim(txtencid.Text))
          modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
        Endif

      Endif
    Endif
  Endif

End

Public Sub mnublank_Click()

  ' btnblankform_Click()

End

Public Sub mnucurarchive_Click()

  Dim xxx As String[]

  If txtencid.Text Then
    xxx = AddReports(Trim(txtencid.Text), False)
  Endif

End

Public Sub mnuexamrepo_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientExaminationgReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradio_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatRadioReportbyEncID(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudiagnorep_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientLaboratoryReport(Trim(txtencid.Text), LabUnitForm())
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuarchlab_Click()

  modPatReports.GetArchiveReportResult("Diagnostic Tests", $PatientNum)

End

Public Sub mnuarchlabrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Diagnostic Tests", $PatientNum)

End

Public Sub mnuarchradio_Click()

  modPatReports.GetArchiveReportResult("Radio Diagnostics", $PatientNum)

End

Public Sub mnuarchradiorepo_Click()

  modPatReports.GetRepoArchiveReportResult("Radio Diagnostics", $PatientNum)

End

Public Sub mnuarchgeneral_Click()

  modPatReports.GetArchiveReportResult("General Reports", $PatientNum)

End

Public Sub mnuarchgenerlrepo_Click()

  modPatReports.GetRepoArchiveReportResult("General Reports", $PatientNum)

End

Public Sub mnuscanimage_Click()

  modPatReports.GetArchiveReportResult("Scanned Images", $PatientNum)

End

Public Sub mnuscanimgrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Scanned Images", $PatientNum)

End

Public Sub mnupastdocs_Click()

  modPatReports.GetArchiveReportResult("Past Documents", $PatientNum)

End

Public Sub mnupastdocsrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Past Documents", $PatientNum)

End

Public Sub mnucompreport_Click()

  If txtencid.Text Then
    modPatReports.GetSelectedPatientValues(Trim(txtencid.Text), LabUnitForm())
  Endif

End

Public Sub mnureqexam_Click()

  ' Dim hForm As FmTPR

  ' hForm = New FmTPR(Trim(txtencid.Text), modPatPatho.GetMonitorList(Trim(txtencid.Text), "Exam", "Continue", "%"))
  ' hForm.ShowModal()

End

Public Sub mnucompexam_Click()

  ' Dim hForm As FmTPR

  ' hForm = New FmTPR(Trim(txtencid.Text), modBasic.$ClinEssentialComp)
  ' hForm.ShowModal()

End

Public Sub mnucomptest_Click()

  Dim res As Result
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    yy = New String[]

    res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and fldtest_type=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5", Trim(txtencid.Text), "Quantitative", "Reported", "Verified", "Visible")
    xx = modControlSub.GetDirectFillresult(res)
    If xx.Count Then
      xx.Sort()
      hForm = New FmMultiChart(Trim(txtencid.Text), yy, xx, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnudrugdosing_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowNursingDosing(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexamlocal_Click()

  modPatReports.GetPatHistoryLocalResult("Examination", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnulablocal_Click()

  modPatReports.GetPatHistoryLocalResult("Laboratory", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuraiolocal_Click()

  modPatReports.GetPatHistoryLocalResult("Radiology", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnumedicinelocal_Click()

  modPatReports.GetPatHistoryLocalResult("Medicines", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuexamallrepo_Click()

  modPatReports.GetRepoHistoryLocalResult("Examination", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnulabremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Laboratory", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuradioremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Radiology", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnudrugremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Medicines", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuhistrepo_Click()

  modPatReports.GetSelectHistoryResult(Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnureporemote_Click()

  modPatReports.GetRepoSelectHistoryResult(Trim(txtencid.Text), LabUnitForm())

End

Private Function LabUnitForm() As String

  Dim xx As String

  If rbsi.Value = True Then
    xx = "SI"
  Else
    xx = "Metric"
  Endif
  Return xx

End

Public Sub btnhistoryall_Menu()

  mnuhistoryall.Popup(btnhistoryall)

End

Public Sub btnarchiveall_Menu()

  mnuarchiveall.Popup(btnarchiveall)

End

Public Sub btnreportsall_Menu()

  mnureportall.Popup(btnreportsall)

End

Public Sub mnudemo_Click()

  Dim hForm As FmPatdemograph

  If txtencid.Text Then
    hForm = New FmPatdemograph(Trim(txtencid.Text), "Clinical")
    hForm.ShowModal
  Endif

End

Public Sub mnuadmission_Click()

  Dim hCls As CReportCustom
  Dim xPath As String

  If txtencid.Text Then
    If $sTatus = "Admitted" Then
      If modSettings.ShowSettingFromFIle("Admission Report/Name") Then
        hCls = New CReportCustom(Trim(txtencid.Text), "Admission Report", "ReportSize", LabUnitForm())
        hCls.Preview()
      Else
        xPath = modPatReports.ShowAdmissionSheet(Trim(txtencid.Text))
        modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
      Endif
    Endif
  Endif

End

' Public Sub txtpulse_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     btnesspulse_Click()
'   Endif
'
' End

' Public Sub txtresprate_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     btnresprate_Click()
'   Endif
'
' End

' Public Sub txtoxysat_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     btnoxysat_Click()
'   Endif
'
' End

' Public Sub txtsystolicbp_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     btnesssystolbp_Click()
'   Endif
'
' End

' Public Sub txtdiastolicbp_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     btnessdiastbp_Click()
'   Endif
'
' End

' Public Sub txttemp_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     btnesstemp_Click()
'   Endif
'
' End

Public Sub mnuhistory_Click()

  modPatReports.GetVisitHistoryResult($PatientNum)

End

Public Sub mnuvisiremote_Click()

  modPatReports.GetRepoVisitHistoryResult($PatientNum)

End

''------------------------------------ custom menus -----------------------------------
Private Sub FillCustomMenu()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingFromFIle("CustomReport1/Name")
  xform2 = modSettings.ShowSettingFromFIle("CustomReport2/Name")
  xform3 = modSettings.ShowSettingFromFIle("CustomReport3/Name")
  xform4 = modSettings.ShowSettingFromFIle("CustomReport4/Name")
  xform5 = modSettings.ShowSettingFromFIle("CustomReport5/Name")
  xform6 = modSettings.ShowSettingFromFIle("CustomReport6/Name")
  xform7 = modSettings.ShowSettingFromFIle("CustomReport7/Name")
  xform8 = modSettings.ShowSettingFromFIle("CustomReport8/Name")
  xform9 = modSettings.ShowSettingFromFIle("CustomReport9/Name")
  xform10 = modSettings.ShowSettingFromFIle("CustomReport10/Name")

  If xform1 Then
    mnucust1.Title = xform1
    mnucust1.Tag = "CustomReport1"
    mnucust1.Visible = True
  Endif

  If xform2 Then
    mnucust2.Title = xform2
    mnucust2.Tag = "CustomReport2"
    mnucust2.Visible = True
  Endif

  If xform3 Then
    mnucust3.Title = xform3
    mnucust3.Tag = "CustomReport3"
    mnucust3.Visible = True
  Endif

  If xform4 Then
    mnucust4.Title = xform4
    mnucust4.Tag = "CustomReport4"
    mnucust4.Visible = True
  Endif

  If xform5 Then
    mnucust5.Title = xform5
    mnucust5.Tag = "CustomReport5"
    mnucust5.Visible = True
  Endif

  If xform6 Then
    mnucust6.Title = xform6
    mnucust6.Tag = "CustomReport6"
    mnucust6.Visible = True
  Endif

  If xform7 Then
    mnucust7.Title = xform7
    mnucust7.Tag = "CustomReport7"
    mnucust7.Visible = True
  Endif

  If xform8 Then
    mnucust8.Text = xform8
    mnucust8.Tag = "CustomReport8"
    mnucust8.Visible = True
  Endif

  If xform9 Then
    mnucust9.Title = xform9
    mnucust9.Tag = "CustomReport9"
    mnucust9.Visible = True
  Endif

  If xform10 Then
    mnucust10.Title = xform10
    mnucust10.Tag = "CustomReport10"
    mnucust10.Visible = True
  Endif

End

Private Sub FillCustomFormMenu()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingForReport("CustomForm1/Form_Name")
  xform2 = modSettings.ShowSettingForReport("CustomForm2/Form_Name")
  xform3 = modSettings.ShowSettingForReport("CustomForm3/Form_Name")
  xform4 = modSettings.ShowSettingForReport("CustomForm4/Form_Name")
  xform5 = modSettings.ShowSettingForReport("CustomForm5/Form_Name")
  xform6 = modSettings.ShowSettingForReport("CustomForm6/Form_Name")
  xform7 = modSettings.ShowSettingForReport("CustomForm7/Form_Name")
  xform8 = modSettings.ShowSettingForReport("CustomForm8/Form_Name")
  xform9 = modSettings.ShowSettingForReport("CustomForm9/Form_Name")
  xform10 = modSettings.ShowSettingForReport("CustomForm10/Form_Name")

  If xform1 Then
    mnucustform1.Title = xform1
    mnucustform1.Tag = "CustomForm1"
    mnucustform1.Visible = True
  Endif

  If xform2 Then
    mnucustform2.Title = xform2
    mnucustform2.Tag = "CustomForm2"
    mnucustform2.Visible = True
  Endif

  If xform3 Then
    mnucustform3.Title = xform3
    mnucustform3.Tag = "CustomForm3"
    mnucustform3.Visible = True
  Endif

  If xform4 Then
    mnucustform4.Title = xform4
    mnucustform4.Tag = "CustomForm4"
    mnucustform4.Visible = True
  Endif

  If xform5 Then
    mnucustform5.Title = xform5
    mnucustform5.Tag = "CustomForm5"
    mnucustform5.Visible = True
  Endif

  If xform6 Then
    mnucustform6.Title = xform6
    mnucustform6.Tag = "CustomForm6"
    mnucustform6.Visible = True
  Endif

  If xform7 Then
    mnucustform7.Title = xform7
    mnucustform7.Tag = "CustomForm7"
    mnucustform7.Visible = True
  Endif

  If xform8 Then
    mnucustform8.Title = xform8
    mnucustform8.Tag = "CustomForm8"
    mnucustform8.Visible = True
  Endif

  If xform9 Then
    mnucustform9.Title = xform9
    mnucustform9.Tag = "CustomForm9"
    mnucustform9.Visible = True
  Endif

  If xform10 Then
    mnucustform10.Title = xform10
    mnucustform10.Tag = "CustomForm10"
    mnucustform10.Visible = True
  Endif

End

''''------------------------------- custom report menu ---------------------------------------------------
Public Sub mnucust1_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust1.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust2_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust2.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust3_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust3.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust4_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust4.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust5_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust5.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust6_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust6.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust7_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust7.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust8_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust8.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust9_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust9.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust10_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust10.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnuessenexam_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = modClinic.GetFullVitalList(Trim(txtencid.Text))
    yy = New String[]
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform1_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform2_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform3_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform4_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform5_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform6_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform7_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform8_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform9_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform10_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

''------------------------ Algorithms ---------------------------------------------
Private Sub SHowALgorithmList()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingForReport("ClinAlgorithm1/AlgorithmName")
  xform2 = modSettings.ShowSettingForReport("ClinAlgorithm2/AlgorithmName")
  xform3 = modSettings.ShowSettingForReport("ClinAlgorithm3/AlgorithmName")
  xform4 = modSettings.ShowSettingForReport("ClinAlgorithm4/AlgorithmName")
  xform5 = modSettings.ShowSettingForReport("ClinAlgorithm5/AlgorithmName")
  xform6 = modSettings.ShowSettingForReport("ClinAlgorithm6/AlgorithmName")
  xform7 = modSettings.ShowSettingForReport("ClinAlgorithm7/AlgorithmName")
  xform8 = modSettings.ShowSettingForReport("ClinAlgorithm8/AlgorithmName")
  xform9 = modSettings.ShowSettingForReport("ClinAlgorithm9/AlgorithmName")
  xform10 = modSettings.ShowSettingForReport("ClinAlgorithm10/AlgorithmName")

  If xform1 Then
    mnualgo1.Title = xform1
    mnualgo1.Tag = "ClinAlgorithm1"
    mnualgo1.Visible = True
  Endif

  If xform2 Then
    mnualgo2.Title = xform2
    mnualgo2.Tag = "ClinAlgorithm2"
    mnualgo2.Visible = True
  Endif

  If xform3 Then
    mnualgo3.Title = xform3
    mnualgo3.Tag = "ClinAlgorithm3"
    mnualgo3.Visible = True
  Endif

  If xform4 Then
    mnualgo4.Title = xform4
    mnualgo4.Tag = "ClinAlgorithm4"
    mnualgo4.Visible = True
  Endif

  If xform5 Then
    mnualgo5.Title = xform5
    mnualgo5.Tag = "ClinAlgorithm5"
    mnualgo5.Visible = True
  Endif

  If xform6 Then
    mnualgo6.Title = xform6
    mnualgo6.Tag = "ClinAlgorithm6"
    mnualgo6.Visible = True
  Endif

  If xform7 Then
    mnualgo7.Title = xform7
    mnualgo7.Tag = "ClinAlgorithm7"
    mnualgo7.Visible = True
  Endif

  If xform8 Then
    mnualgo8.Title = xform8
    mnualgo8.Tag = "ClinAlgorithm8"
    mnualgo8.Visible = True
  Endif

  If xform9 Then
    mnualgo9.Title = xform9
    mnualgo9.Tag = "ClinAlgorithm9"
    mnualgo9.Visible = True
  Endif

  If xform10 Then
    mnualgo10.Title = xform10
    mnualgo10.Tag = "ClinAlgorithm10"
    mnualgo10.Visible = True
  Endif

End

Public Sub mnualgo1_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo1.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo2_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo2.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo3_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo3.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo4_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo4.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo5_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo5.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo6_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo6.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo7_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo7.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo8_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo8.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo9_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo9.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo10_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo10.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

'===================== Structured exams==========================
Private Sub FillExamMenu()

  If $structExamList.Count > 0 Then
    mnurec1.Text = $structExamList[0]
    mnurec1.Visible = True
  Endif

  If $structExamList.Count > 1 Then
    mnurec2.Text = $structExamList[1]
    mnurec2.Visible = True
  Endif

  If $structExamList.Count > 2 Then
    mnurec3.Text = $structExamList[2]
    mnurec3.Visible = True
  Endif

  If $structExamList.Count > 3 Then
    mnurec4.Text = $structExamList[3]
    mnurec4.Visible = True
  Endif

  If $structExamList.Count > 4 Then
    mnurec5.Text = $structExamList[4]
    mnurec5.Visible = True
  Endif

  If $structExamList.Count > 5 Then
    mnurec6.Text = $structExamList[5]
    mnurec6.Visible = True
  Endif

  If $structExamList.Count > 6 Then
    mnurec7.Text = $structExamList[6]
    mnurec7.Visible = True
  Endif

  If $structExamList.Count > 7 Then
    mnurec8.Text = $structExamList[7]
    mnurec8.Visible = True
  Endif

  If $structExamList.Count > 8 Then
    mnurec9.Text = $structExamList[8]
    mnurec9.Visible = True
  Endif

  If $structExamList.Count > 9 Then
    mnurec10.Text = $structExamList[9]
    mnurec10.Visible = True
  Endif

End

Public Sub mnurec1_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec1.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec2_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec2.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec3_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec3.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec4_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec4.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec5_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec5.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec6_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec6.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec7_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec7.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec8_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec8.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec9_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec9.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec10_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec10.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Private Sub RestrictUserAccess()

  If $UserRestrict.Exist("Presenting Complaints") Then
    btnsympadd.Visible = False
    btnaddsymplist.Visible = False
    btnsympunit.Visible = False
    btnsympdura.Visible = False
    btnsympedit.Visible = False
    btnsympdel.Visible = False
  Endif
  If $UserRestrict.Exist("General Complaints") Then
    btngencompln.Visible = False
  Endif
  If $UserRestrict.Exist("Patient History") Then
    btnhistory.Visible = False
    btnplan.Visible = False
  Endif
  If $UserRestrict.Exist("Clinical Findings") Then
    btnfinadd.Visible = False
    btnfindcomponent.Visible = False
    btnfindflag.Visible = False
    btnfindelete.Visible = False
    btnaddexamlist.Visible = False
    btnaddexamlistall.Visible = False
    btnaddscales.Visible = False
  Endif
  If $UserRestrict.Exist("Initial Planning") Then
    btnplan.Visible = False
  Endif
  If $UserRestrict.Exist("Final Planning") Then
    btnplanfinal.Visible = False
  Endif
  If $UserRestrict.Exist("Clinical Notes") Then
    btnnotes.Visible = False
  Endif

  If $UserRestrict.Exist("Provisional Diagnosis") Then
    tlbtndeldises.Visible = False
    btndismanual.Visible = False
    tbnsyndro.Visible = False
    tbndisease.Visible = False
  Endif
  If $UserRestrict.Exist("Final Diagnosis") Then
    tnfinaldiagno.Enabled = False
  Endif
  If $UserRestrict.Exist("Drug Allergy") Then
    tlbtndelallergy.Visible = False
    btnallergy.Visible = False
    btnallergymanual.Visible = False
  Endif

  If $UserRestrict.Exist("Laboratory Request") Then
    btnlab.Visible = False
  Endif
  If $UserRestrict.Exist("Radiology Request") Then
    btnradio.Visible = False
  Endif
  If $UserRestrict.Exist("Pharmacy Request") Then
    btnpharm.Visible = False
  Endif
  If $UserRestrict.Exist("Products Request") Then
    mnumedproduct.Visible = False
  Endif

  If $UserRestrict.Exist("Demographics") Then
    mnudemo.Visible = False
  Endif
  If $UserRestrict.Exist("General Images") Then
    mnupatimage.Visible = False
    btnaddchart.Visible = False
  Endif
  If $UserRestrict.Exist("Video Data") Then
    mnuvideodata.Visible = False
  Endif
  If $UserRestrict.Exist("DICOM Images") Then
    mnudicom.Visible = False
  Endif
  If $UserRestrict.Exist("PACS Images") Then
    mnupacsimage.Visible = False
  Endif
  If $UserRestrict.Exist("Triage Examinations") Then
    mnutriage.Visible = False
    btntriage.Visible = False
  Endif
  If $UserRestrict.Exist("Essential Examinations") Then
    mnuvital.Visible = False
    btnsavevitals.Visible = False
  Endif
  If $UserRestrict.Exist("Vaccination Form") Then
    mnuvaccine.Visible = False
  Endif
  If $UserRestrict.Exist("Procedure Plan") Then
    mnumajor.Visible = False
  Endif
  If $UserRestrict.Exist("Extra Procedure Plan") Then
    mnuextprocedure.Visible = False
  Endif
  If $UserRestrict.Exist("Consultation Plan") Then
    mnuconsultplan.Visible = False
  Endif
  If $UserRestrict.Exist("Monitoring Plan") Then
    mnumonitor.Visible = False
  Endif
  If $UserRestrict.Exist("Equipments Used") Then
    mnuequip.Visible = False
  Endif
  If $UserRestrict.Exist("Devices Used") Then
    mnudeviceuse.Visible = False
  Endif
  If $UserRestrict.Exist("Minor Procedure") Then
    mnuminorproc.Visible = False
  Endif
  If $UserRestrict.Exist("General Services") Then
    mnugenservice.Visible = False
  Endif
  If $UserRestrict.Exist("Medicine Dosing") Then
    mnupatdosing.Visible = False
  Endif
  If $UserRestrict.Exist("IV Infusion") Then
    mnuivinfusion.Visible = False
  Endif

End

Public Sub mnucharttest_Click()

  Dim xValues As Integer[] = [50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150]
  Dim yValues As Integer[] = [7, 8, 8, 9, 9, 9, 10, 11, 14, 14, 15]

  modControlSub.OpenChartView("horizontalBar", "test", xValues, yValues)

End

''--------------------------- Telemedicine -------------------
Public Sub btnrepoupload_Click()

  Dim xapp As String
  Dim arcmd1 As String[]
  Dim arcmd2 As String[]
  Dim arcmd3 As String[]

  If txtencid.Text Then
    xapp = modSettings.ShowSettingFromFIle("Application/RepoUploader")
    Select modBasic.$ClinicTelemed
      Case "Enable", "Partial"
        If xapp Then
          arcmd1 = [xapp, "--upload-repo-one", "tblencounter", Trim(txtencid.Text)]
          arcmd2 = [xapp, "--upload-repo-one", "tblpatientinfo", $PatientNum]
          arcmd3 = [xapp, "--upload-repo-one", "tbltelemedtalk", $VidIndex]
          modBasic.DebugAPIString("Execute " & arcmd1.Join(Space(1)))
          Exec arcmd1 Wait
          modBasic.DebugAPIString("Execute " & arcmd2.Join(Space(1)))
          Exec arcmd2 Wait
          modBasic.DebugAPIString("Execute " & arcmd3.Join(Space(1)))
          Exec arcmd3 Wait
        Else
          modRepository.UploadSingleToRepository("tbltelemedtalk", $VidIndex)
          modRepository.UploadSingleToRepository("tblencounter", Trim(txtencid.Text))
          modRepository.UploadSingleToRepository("tblpatientinfo", $PatientNum)
        Endif
        Me.Exec("Toastify({text: 'Information uploaded', duration: 3000}).showToast()")

      Case "Complete"
        modDataRepo.GetRepoUploadEncounterData(Trim(txtencid.Text))
        Me.Exec("Toastify({text: 'Information uploaded', duration: 3000}).showToast()")

    End Select
  Endif

End

Public Sub btnquery_Click()

  Dim rsx As Result
  Dim res As Result
  Dim xURL As String
  Dim xPass As String

  If modBasic.$HospCode Then
    xURL = modBasic.$ClinVideoServer
    If xURL Then
      If modBasic.$ClinVideoPass = "Disable" Then
        xPass = "NA"
      Else
        xPass = Left(modPassword.GetRandomPassword(), 6)
      Endif
      btnquery.Tag = xPass
      rsx = modDatabase.$myConn.Exec("select fldtalkid from tbltelemedtalk where fldtalkid=&1", $VidIndex)

      If rsx.Available Then
        res = modDatabase.$myConn.Edit("tbltelemedtalk", "fldtalkid=&1", $VidIndex)
        res["fldteleuser"] = cmbexpert.Tag
        res["fldsms"] = chkquerysms.Value
        res["fldurgency"] = cmburgency.Text
        res["fldvidroom"] = $vidRoom
        res["fldvidpass"] = xPass
        res["fldrequest"] = txtquery.RichText

        res["fldorduserid"] = modBasic.$lbluser
        res["fldordtime"] = Now()
        res["fldordcomp"] = modBasic.$compID
        res["fldresponse"] = ""
        res["xyz"] = False

      Else
        res = modDatabase.$myConn.Create("tbltelemedtalk")
        res["fldtalkid"] = $VidIndex
        res["fldencounterval"] = Trim(txtencid.Text)
        res["fldpatientval"] = $PatientNum
        res["fldhospital"] = modBasic.$HospCode

        res["fldteleuser"] = cmbexpert.Tag
        res["fldsms"] = chkquerysms.Value
        If cmburgency.Text Then
          res["fldurgency"] = cmburgency.Text
        Else
          res["fldurgency"] = "Normal"
        Endif
        res["fldvidroom"] = $vidRoom
        res["fldvidpass"] = xPass
        res["fldvidserver"] = ""

        res["fldrequest"] = txtquery.RichText
        res["fldorduserid"] = modBasic.$lbluser
        res["fldordtime"] = Now()
        res["fldordcomp"] = modBasic.$compID
        res["fldresponse"] = ""

        res["flduserid"] = ""
        res["fldtime"] = ""
        res["fldcomp"] = ""
        res["fldcoment"] = ""
        res["fldupuser"] = ""
        res["flduptime"] = ""
        res["xyz"] = False
        If MMain.$WebEntry = True Then
          res["fldrepodate"] = Now()
          res["fldrepomac"] = CGI["REMOTE_ADDR"] & ":" & CGI["REMOTE_PORT"]
          res["fldhospcode"] = modBasic.$HospCode
        Endif
      Endif
      res.Update
      Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")

      If chkquerysms.Value = True Then
        btnsendsms_Click()
      Endif

    Else
      Message.Warning("Camus server not specified.", "OK")
    Endif
  Else
    Message.Warning("Hospital Code not defined.", "OK")
  Endif

End

Public Sub btnvideocall_Click()

  Dim res As Result
  Dim xURL As String
  Dim xroom As String
  Dim xPass As String
  Dim xuser As String
  Dim hForm As CCamusAPI
  Dim xval As String
  Dim hForm1 As FmTeleURL

  xURL = modBasic.$ClinVideoServer
  If xURL Then

    res = modDatabase.$myConn.Edit("tbltelemedtalk", "fldtalkid=&1", $VidIndex)
    If res.Available Then
      res.MoveLast
      xuser = res["fldteleuser"]
      xroom = res["fldvidroom"]
      xPass = res["fldvidpass"]
      If xroom And If xPass Then
        If Not res["fldvidserver"] Then
          hForm = New CCamusAPI(xURL, xroom, xPass, "No", "5")
          xval = hForm.GetCamusResponse()
          res["fldvidserver"] = xURL
          res["xyz"] = False
          res.Update
        Else
          xval = "Room already created"
        Endif
        Wait
        hForm1 = New FmTeleURL(xURL &/ "room" &/ xroom, xPass, xval, xuser)
        hForm1.Show

        txtcamus.Text = xURL &/ "room" &/ xroom
        txtpassword.Text = xPass
        If txtcamus.Text Then
          pnlvideocall.Visible = True
        Endif

      Endif
    Endif

  Else
    Message.Warning("Camus server not specified.", "OK")
  Endif

End

Public Sub btncamus_Click()

  Dim hForm As FmOpenLink

  If txtcamus.Text Then
    hForm = New FmOpenLink(txtcamus.Text)
    hForm.ShowModal
  Endif

End

Public Sub btncleanchat_Click()

  Dim res As Result

  If Message.Question("Are you sure to delete Video Chat Request ?", ("No"), ("Yes")) = 2 Then
    res = modDatabase.$myConn.Edit("tbltelemedtalk", "fldtalkid=&1", $VidIndex)
    res["fldvidserver"] = ""
    res["xyz"] = False
    res.Update
  Endif

End

Public Sub btnexpert_Click()

  Dim xMedUser As String[]
  Dim res As Result
  Dim xPath As String

  res = modDatabase.$myConn.Exec("select fldcategory,fldhospital,fldteleuser,fldusername from tbltelemeduser where fldstatus=&1", "Active")
  xPath = modTextDB.ConvertResultToCSV(res, ";", False)
  If Exist(xPath) Then
    xMedUser = TreeViewCode(xPath, ";", 3, True)
    If xMedUser And If xMedUser.Count Then
      cmbexpert.Tag = xMedUser[1]
      cmbexpert.Text = modGeneral.GetTeleMedUserName(cmbexpert.Tag)
    Endif
  Endif

End

Public Sub btnshowexpert_Click()

  modDatabase.$myConn.Delete("tbltelemeduser")
  Wait
  modRepoSync.ReadSyncConfig()
  modRepoSync.GetAPISyncTwoSource(modDatabase.$myConn, "tbltelemeduser", True)

End

Public Sub btnsendsms_Click()

  Dim xsms As String
  Dim sphno As String

  If chkquerysms.Value = True And If cmbexpert.Tag Then
    xsms = "ENC: " & Trim(txtencid.Text) & gb.NewLine
    xsms = xsms & "Age/Sex:" & txtpatage.Value & Space(1) & cmbpatageunit.Text & Space(1) & txtgender.Text & gb.NewLine
    xsms = xsms & "Status: " & cmburgency.Text
    sphno = modGeneral.GetTeleMedUserContact(cmbexpert.Tag)
    If sphno Then
      If modBasic.$SMSQueDisable = "No" Then
        modAppSupport.SaveSMSEntry(sphno, xsms, "Waiting", "")
      Else
        modAppSupport.SendSMSSingle(sphno, xsms)
      Endif
    Endif
  Endif

End

Public Sub btnfeedback_Click()

  Dim res As Result

  modRepository.TransferSelectRemoConn("fldtalkid", $VidIndex, "tbltelemedtalk")
  res = modRepository.$RepoCon.Exec("select fldresponse,flduserid from tbltelemedtalk where fldtalkid=&1", $VidIndex)
  If res.Available Then
    res.MoveLast
    txtfeedback.RichText = res["fldresponse"]
    lblexpert.Text = res["flduserid"]
  Endif

End

Public Sub btngetfeed_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtfeedback.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", "Final Planning", txtfeedback.KeyList.Join(";"), txtfeedback.RichText, xboolean)
    ShowPlanningsBoth()
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  Endif

End

''------------database
Public Sub btndatacompl_Click()

End

Public Sub btndatahistory_Click()

  txthistory.RichText = AddHistory("History", "History of Illness")

End

Public Sub btndataopd_Click()

  txtplan.RichText = AddHistory("Discharge", "Initial Planning")

End

Public Sub btndataexpert_Click()

  txtplanfinal.RichText = AddHistory("Discharge", "Final Planning")

End

''----------- pen
Public Sub btnpancompl_Click()

  txtgencomplaint.RichText = txtgencomplaint.RichText & Space(1) & modFillContainer.GetExtraTextArea("General Complaints", txtgencomplaint.Text)

End

Public Sub btnpanhistory_Click()

  txthistory.RichText = txthistory.RichText & Space(1) & modFillContainer.GetExtraTextArea("History of Illness", txthistory.Text)

End

Public Sub btnpanopd_Click()

  txtplan.RichText = txtplan.RichText & Space(1) & modFillContainer.GetExtraTextArea("Initial Planning", txtplan.Text)

End

Public Sub btnpanexpert_Click()

  txtplanfinal.RichText = txtplanfinal.RichText & Space(1) & modFillContainer.GetExtraTextArea("Final Planning", txtplanfinal.Text)

End

''--------------- exec
Public Sub btnexeccompl_Click()

  txtgencomplaint.RichText = txtgencomplaint.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txtgencomplaint.Text))

End

Public Sub btnexechistory_Click()

  txthistory.RichText = txthistory.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txthistory.Text))

End

Public Sub btnexecopd_Click()

  txtplan.RichText = txtplan.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txtplan.Text))

End

Public Sub btnexecexpert_Click()

  txtplanfinal.RichText = txtplanfinal.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txtplanfinal.Text))

End

''---------------- attach
Public Sub btnattcompl_Click()

  txtgencomplaint.RichText = txtgencomplaint.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnatthistory_Click()

  txthistory.RichText = txthistory.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnattopd_Click()

  txtplan.RichText = txtplan.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnattexpert_Click()

  txtplanfinal.RichText = txtplanfinal.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

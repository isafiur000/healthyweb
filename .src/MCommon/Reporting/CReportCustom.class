' Gambas class file

Private $encid As String
Private $size As String
Private $ReportTag As String
Private $sUnit As String
Private $varIndex As String
Private $HtmlFolder As String

Private ReportPath As String 'Path to report
Private $Body As New String[0]
Private $commentText As String

Private TextAlign As String
Private Width As Integer
Private $hash As String

Public Sub _new(encid As String, ReportTag As String, sMode As String, sUnit As String, Optional sIndex As String)

  $encid = encid
  $ReportTag = ReportTag
  If sMode Then
    $size = sMode
  Else
    $size = "ReportSize"
  Endif
  If sUnit Then
    $sUnit = sUnit
  Else
    $sUnit = MMain.$defUnit
  Endif
  $HtmlFolder = modHelpVariable.$htmlDirectory
  If sIndex Then
    $varIndex = sIndex
  Else
    $varIndex = ""
  Endif

  $commentText = ""
  modReportVar.$ReportHash = ""
  If $encid Then
    $hash = modPassword.GetRandomPassword()
    modReportVar.$ReportHash = $hash
  Endif

End

Private Sub MakeHTMLFile()

  Dim hForm As FmSigna
  Dim xBody As String[]
  Dim $Report As String[]

  If modBasic.$SignaPopUp = "Yes" Then
    hForm = New FmSigna
    hForm.ShowModal
  Endif
  xBody = ReportBody()

  $Report = New String[]
  $Report.Add(modRepoTemplete.TitleHTMLScript())
  $Report.Add(modReportVar.$HTMLStart)
  $Report.Add("<section id='printable@report' class='printable@report'>") '''used to locate printable text
  $Report.Add("     " & modReportVar.$CSSStart & "     ")
  $Report.Add(File.Load($HtmlFolder &/ "template.tpl"))
  $Report.Add("     " & modReportVar.$CSSEnd & "     ")
  $Report.Add("     " & modReportVar.$TitleStart & "     ")
  $Report.Insert(ReportTitle())
  $Report.Add("     " & modReportVar.$TitleEnd & "     ")
  $Report.Add("     " & modReportVar.$HeaderStart & "     ")
  $Report.Insert(ReportHeader())
  $Report.Add("     " & modReportVar.$HeaderEnd & "     ")
  $Report.Add("     " & modReportVar.$BodyStart & "     ")
  $Report.Insert(xBody)
  $Report.Add("     " & modReportVar.$BodyEnd & "     ")
  $Report.Add("     " & modReportVar.$FooterStart & "     ")
  $Report.Insert(ReportFooter())
  $Report.Add("     " & modReportVar.$FooterEnd & "     ")
  $Report.Add("     " & modReportVar.$FootImageStart & "     ")
  $Report.Add(modRepoTemplete.ReportFootImage())
  $Report.Add("     " & modReportVar.$FootImageEnd & "     ")
  $Report.Add("</section>")
  $Report.Add(modReportVar.$HTMLEnd)
  $Report.Add(modRepoTemplete.EndTemplete())

  ReportPath = Temp() & ".html"
  File.Save(ReportPath, $Report.Join(gb.NewLine))

End

Public Sub Add(col_content As String[])

  Dim counter As Integer
  Dim sDesign1 As String
  Dim sDesign2 As String
  Dim colcount As Integer

  Dim xcontfont As String
  Dim xcol1font As String
  Dim xcol2font As String

  sDesign1 = modString.GetDesignFormatString(, modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment_Column1"), modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment_Column1"))
  sDesign2 = modString.GetDesignFormatString(, modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment_Column2"), modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment_Column2"))
  xcontfont = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ContentFont")
  xcol1font = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_Font_Column1")
  xcol2font = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_Font_Column2")

  If modBasic.$MedRepoBody = "Paragraph" Then
    colcount = 1
  Else
    colcount = 2
  Endif

  $Body.Add("  <tr>")

  For counter = 0 To colcount - 1
    If modString.GetRichTextMode(col_content[counter]) = True Then
      $Body.Add("    <td>" & col_content[counter] & "</td>")
    Else

      If counter = 0 Then
        If xcol1font Then
          $Body.Add("    <td " & sDesign1 & ">" & modString.GetFormatTextFontString(col_content[counter], xcol1font) & "</td>")
        Else
          If xcontfont Then
            $Body.Add("    <td " & sDesign1 & ">" & modString.GetFormatTextFontString(col_content[counter], xcontfont) & "</td>")
          Else
            $Body.Add("    <td " & sDesign1 & ">" & modString.GetFormatTextFontString(col_content[counter]) & "</td>")
          Endif
        Endif
      Else
        If xcol2font Then
          $Body.Add("    <td " & sDesign2 & ">" & modString.GetFormatTextFontString(col_content[counter], xcol2font) & "</td>")
        Else
          If xcontfont Then
            $Body.Add("    <td " & sDesign2 & ">" & modString.GetFormatTextFontString(col_content[counter], xcontfont) & "</td>")
          Else
            $Body.Add("    <td " & sDesign2 & ">" & modString.GetFormatTextFontString(col_content[counter]) & "</td>")
          Endif
        Endif
      Endif

    Endif
  Next

  $Body.Add("  </tr>")

End

Private Function ReportTitle() As String[]

  Dim repo As String[]
  Dim xdeftitle As String

  repo = New String[]
  xdeftitle = modSettings.ShowSettingFromFIle("ReportFormat/Default_Title")
  If xdeftitle And If xdeftitle = "BuiltIn" Then
    repo.Add(t_replace(modRepoTemplete.GetReportTitleTemplete()))
  Else
    repo.Add(t_ReadPart($HtmlFolder &/ "report_title.tpl"))
  Endif

  Return repo

End

Private Function ReportHeader() As String[]

  Dim repo As String[]
  Dim xdefhead As String
  Dim xtypehead As String

  repo = New String[]
  repo.Add(modReportVar.BlankLinesAccSetting("ReportFormat/BlankLines_Department_Header"))
  xtypehead = modSettings.ShowSettingFromFIle($ReportTag & "/" & "HeaderType")
  If xtypehead And If xtypehead = "False" Then
    repo.Add(t_ReadPart(modSettings.ShowSettingFromFIle($ReportTag & "/" & "HeaderPath")))
  Else
    xdefhead = modSettings.ShowSettingFromFIle("ReportFormat/Default_Header")
    If xdefhead And If xdefhead = "BuiltIn" Then
      repo.Add(t_replace(modRepoTemplete.GetPatientHeaderTemplete()))
    Else
      repo.Add(t_ReadPart($HtmlFolder &/ "patient_header.tpl"))
    Endif
  Endif

  Return repo

End

Private Function ReportFooter() As String[]

  Dim repo As String[]
  Dim xtypefoot As String
  Dim xdeffoot As String

  repo = New String[]
  xtypefoot = modSettings.ShowSettingFromFIle($ReportTag & "/" & "FooterType")
  If xtypefoot And If xtypefoot = "False" Then
    repo.Add(t_ReadPart(modSettings.ShowSettingFromFIle($ReportTag & "/" & "FooterPath")))
  Else
    xdeffoot = modSettings.ShowSettingFromFIle("ReportFormat/Default_Footer")
    If xdeffoot And If xdeffoot = "BuiltIn" Then
      repo.Add(t_replace(modRepoTemplete.GetPatientFooterTemplete()))
    Else
      repo.Add(t_ReadPart($HtmlFolder &/ "patient_footer.tpl"))
    Endif
  Endif
  Return repo

End

Private Function ReportBody() As String[]

  Dim repo As String[]
  Dim xbodtype As String
  Dim xbodcss As String

  repo = New String[]
  repo.Add(modReportVar.BlankLinesAccSetting("ReportFormat/BlankLines_Header_Body"))
  xbodtype = modSettings.ShowSettingFromFIle($ReportTag & "/" & "BodyType")
  If xbodtype And If xbodtype = "False" Then
    repo.Add(t_ReadPart(modSettings.ShowSettingFromFIle($ReportTag & "/" & "BodyPath")))
  Else
    xbodcss = modSettings.ShowSettingFromFIle($ReportTag & "/" & "BodyCSS")
    If xbodcss Then
      repo.Add(t_ReadPart(xbodcss))
    Endif
    AddReportSelectContent()
    repo.Insert(GetRepoContents())
  Endif
  repo.Add(modReportVar.BlankLinesAccSetting("ReportFormat/BlankLines_Body_Footer"))

  Return repo

End

Private Function GetToAddContentList(RepTag As String) As String[]

  Dim i As Integer
  Dim xxx As String[]
  Dim xcont As String

  xxx = New String[]
  For i = 1 To 75
    xcont = modSettings.ShowSettingFromFIle(RepTag & "/content_" & CStr(i))
    If xcont Then
      xxx.Add(xcont)
    Endif
  Next

  Return xxx

End

Private Function GetVariableLabel(RepTag As String, sVar As String) As String

  Dim xxx As String
  Dim i As Integer

  xxx = ""
  For i = 1 To 75
    If modSettings.ShowSettingFromFIle(RepTag & "/content_" & CStr(i)) = sVar Then
      xxx = modSettings.ShowSettingFromFIle(RepTag & "/content_" & CStr(i) & "_Label")
      Break
    Endif
  Next
  Return xxx

End

Private Sub AddReportSelectContent()

  Dim xx As String
  Dim xlst As String[]

  xlst = GetToAddContentList($ReportTag)
  For Each xx In xlst
    If xx = "Selected Investigations" Then
      GetSelectedInvestigations()
    Else If xx = "Major Procedures Custom" Then
      Add(modPatReports.AddMajorProceduresCustom($ReportTag, $encid))
    Else
      Add(modReportVar.GetCustomReportValue(xx, $encid, GetVariableLabel($ReportTag, xx), $sUnit))
    Endif
  Next

End

Private Sub GetSelectedInvestigations()

  Dim xvarList As Variant[]

  xvarList = ListViewMulti($encid)
  If xvarList Then
    If xvarList[0].Count Then
      Add(modPatReports.AddSelectedExamination($encid, xvarList[0]))
    Endif
    If xvarList[1].Count Then
      Add(modPatReports.AddSelectedTest($encid, xvarList[1], $sUnit))
    Endif
    If xvarList[2].Count Then
      Add(modPatReports.AddSelectedRadio($encid, xvarList[2]))
    Endif
  Endif

End

Private Sub GetRepoContents() As String[]

  Dim counter As Integer = 0
  Dim colStr As String
  Dim xx As String
  Dim sLine As String
  Dim repo As String[]
  Dim Columns As String[]

  Dim xbackpic As String
  Dim xshowlabel As String
  Dim xcollabel As String
  Dim xcolwid As String
  Dim xcolwid_col As String

  If (TextAlign = "") Then
    TextAlign = "left"
  Endif

  If (Width = 0) Then
    Width = 100
  Endif

  xbackpic = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_BackgroundPicture")
  If xbackpic Then
    xx = " background=" & xbackpic
  Else
    xx = ""
  Endif

  If modBasic.$MedRepoBody = "Paragraph" Then
    Columns = ["Description"]
  Else
    Columns = ["Category", "Observations"]
  Endif

  repo = New String[]

  repo.Add("  <table " & xx & " class='report_table' style='text-align: " & TextAlign & "; width: " & Width & "%;' id='bodytable'>")
  repo.Add("    <thead>")
  repo.Add("    <tr>")

  xshowlabel = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ShowLabel")
  xcolwid = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ColWidth")
  For counter = 0 To Columns.Count - 1
    colStr = Columns[counter]

    xcollabel = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ShowLabel_Column" & CStr(counter + 1))
    If xcollabel And If xcollabel = "No" Then
      colStr = ""
    Else
      If xshowlabel And If xshowlabel = "No" Then
        colStr = ""
      Endif
    Endif

    xcolwid_col = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ColWidth_Column" & CStr(counter + 1))
    If xcolwid_col Then
      repo.Add("      <th class='report_table_h' style='width: " & CInt(xcolwid_col) & "%;'>" & colStr & "</th>")
    Else
      If xcolwid Then
        If counter = Columns.Count - 1 Then
          repo.Add("      <th class='report_table_h' style='width: " & CInt(100 - (Columns.Count - 1) * xcolwid) & "%;'>" & colStr & "</th>")
        Else
          repo.Add("      <th class='report_table_h' style='width: " & CInt(xcolwid) & "%;'>" & colStr & "</th>")
        Endif
      Else
        repo.Add("      <th class='report_table_h'>" & colStr & "</th>")
      Endif
    Endif

  Next

  repo.Add("    </tr>")
  repo.Add("    </thead>")

  repo.Add("    <tbody>")
  For Each sLine In $Body
    repo.Add(sLine)
  Next
  repo.Add("  </tbody>")
  repo.Add("  </table>")

  Return repo

End

Private Sub t_ReadPart(T_File As String) As String

  Dim sLine As String
  Dim repo As String

  If Exist(T_File) Then
    sLine = File.Load(T_File)
    repo = t_replace(sLine)
  Endif

  Return repo

End

Private Function t_replace(sLine As String) As String

  sLine = modReportVar.GetReportVarTitle(sLine)

  If $encid Then
    ''basic
    sLine = modReportVar.GetReportVarImages($encid, sLine)
    sLine = modReportVar.GetReportVarPatient($encid, sLine)
    sLine = modReportVar.GetReportVarEncounter($encid, sLine)

    'custom but needs to be enabled
    If modBasic.$CustomConsult = "Yes" Then
      sLine = modReportVar.GetReportLastConsult($encid, sLine)
      If $varIndex Then
        If Split($varIndex, "|")[0] = "Consultation" Then
          sLine = modReportVar.GetReportCurrConsult($encid, sLine, CLong(Split($varIndex, "|")[1]))
        Else If Split($varIndex, "|")[0] = "OPVisit" Then
          sLine = modReportVar.GetReportCurrOPVisit($encid, sLine, CLong(Split($varIndex, "|")[1]))
        Endif
      Endif
    Endif
    If modBasic.$CustomBirth = "Yes" Then
      sLine = modReportVar.GetReportBirthDetail($encid, sLine)
    Endif
    If modBasic.$CustomHistory = "Yes" Then
      sLine = modReportVar.GetReportVarHistory($encid, sLine)
    Endif
    If modBasic.$CustomSelExam = "Yes" Then
      sLine = modReportVar.GetReportVarExam($encid, sLine)
    Endif
    If modBasic.$CustomProcedure = "Yes" Then
      If $varIndex Then
        If Split($varIndex, "|")[0] = "Procedure" Then
          sLine = modReportVar.GetReportProcedureDetail($encid, sLine, CLong(Split($varIndex, "|")[1]))
        Endif
      Endif
    Endif

    ''use of loop
    If modBasic.$CustomTest = "Yes" Then
      While (String.InStr(sLine, "$Last_Test:") > 0)
        sLine = modReportVar.GetReportTestLastVal($encid, sLine)
      Wend
    Endif
    If modBasic.$CustomExam = "Yes" Then
      While (String.InStr(sLine, "$Last_Exam:") > 0)
        sLine = modReportVar.GetReporExamLastVal($encid, sLine)
      Wend
    Endif
    If modBasic.$CustomDemog = "Yes" Then
      While (String.InStr(sLine, "$Last_Demog:") > 0)
        sLine = modReportVar.GetReporDemogLastVal($encid, sLine)
      Wend
    Endif
    If modBasic.$CustomParagraph = "Yes" Then
      While (String.InStr(sLine, "$Last_History:") > 0)
        sLine = modReportVar.GetReporHistoryLastVal($encid, sLine)
      Wend
      While (String.InStr(sLine, "$Last_Discharge:") > 0)
        sLine = modReportVar.GetReporDischargeLastVal($encid, sLine)
      Wend
      While (String.InStr(sLine, "$ColumnTable:") > 0)
        sLine = modReportVar.GetColumnTableLastVal($encid, sLine)
      Wend
    Endif

    If modBasic.$CustomDataQR = "Yes" Then
      sLine = modReportVar.GetRemoteScanQRCode($encid, sLine)
    Endif
    If $hash Then
      sLine = modReportVar.GetRemoteScanHashCode($encid, $hash, sLine)
    Endif

  Endif

  ''to be done at last
  If modBasic.$CustomSQLQuery = "Yes" Then
    While (String.InStr(sLine, "$SQLValue[") > 0)
      sLine = modReportVar.GetReporQueryCustom(sLine)
    Wend
    While (String.InStr(sLine, "$SQLArray[") > 0)
      sLine = modReportVar.GetReporQueryArrayCustom(sLine)
    Wend
    While (String.InStr(sLine, "$SQLTable[") > 0)
      sLine = modReportVar.GetReporQueryTableCustom(sLine)
    Wend
    While (String.InStr(sLine, "$SQLAutoTable[") > 0)
      sLine = modReportVar.GetReporQuerySerialTableCustom(sLine)
    Wend
  Endif
  If (String.InStr(sLine, "$InvoiceData[") > 0) Then
    sLine = modReportVar.GetInvoiceDetailSpcificPrint(sLine)
  Endif

  If modBasic.$CustomExec = "Yes" Then
    While (String.InStr(sLine, "$Exec[") > 0)
      sLine = modReportVar.GetReportExecArgs(sLine)
    Wend
    While (String.InStr(sLine, "$Format[") > 0)
      sLine = modReportVar.GetCustFormatValue(sLine)
    Wend
  Endif

  If modBasic.$CustomScript = "Yes" Then
    sLine = modReportVar.GetReportScript(sLine)
  Endif

  If modBasic.$CustomCalc = "Yes" Then
    While (String.InStr(sLine, "$Calc[") > 0)
      sLine = modReportVar.GetReportCalculation(sLine)
    Wend
  Endif

  If modBasic.$CustomImage = "Yes" Then
    While (String.InStr(sLine, "$BarCode[") > 0)
      sLine = modReportVar.GetBarCodeCustom(sLine)
    Wend
    While (String.InStr(sLine, "$QRCode[") > 0)
      sLine = modReportVar.GetQRCodeCustom(sLine)
    Wend
    While (String.InStr(sLine, "$PatImage[") > 0)
      sLine = modReportVar.GetPatImageCustom(sLine)
    Wend
  Endif

  If modBasic.$CustomUser = "Yes" Then
    While (String.InStr(sLine, "$UserProfile[") > 0)
      sLine = modReportVar.GetUserProfileCustom(sLine)
    Wend
  Endif

  sLine = Replace(sLine, "{" & "PARAM1" & "}", modSettings.ShowSettingFromFIle($ReportTag & "/" & "Name"))
  sLine = Replace(sLine, "{" & "Report" & "}", "REPORT")

  If (String.InStr(sLine, "barcodelink") > 0) Then                    ''
    sLine = Replace(sLine, "{barcodelink}", modReportVar.GetBarcodeImage($encid, $hash))
  Endif

  ''only for web
  While (String.InStr(sLine, "$WebPath[") > 0)
    sLine = modReportVar.GetImagePath(sLine)
  Wend

  ''Footer info
  sLine = modReportVar.GetReportFooterSetting(sLine, $commentText)
  sLine = modReportVar.ClearRemainingString(sLine)

  Return sLine

End

Public Function NewHTMLPath() As String

  If modHelpVariable.$ApplKey < 2 Then
    MakeHTMLFile()
    Return ReportPath

  Else
    Message.Warning(("HTML Report disabled. Please insert validation key"), ("OK"))
  Endif

End

Public Sub Preview()

  modControlSub.OpenHTMLPreview($encid, NewHTMLPath(), $size)

End

Public Function GetReportHash() As String

  Return $hash

End

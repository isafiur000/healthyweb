' Gambas module file

Public $MedicineUnitList As String[] = ["mg", "mcg", "gram", "Unit", "IU", "mL", "mg/Kg", "mcg/Kg", "gram/Kg", "Unit/Kg", "IU/Kg", "mL/Kg", "mg/sqm", "mcg/sqm", "gram/sqm", "Unit/sqm", "IU/sqm", "mL/sqm"]

'NOTE: -------------------------Medicines ---------------------------------------
Public Function GetFoodAllList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldfood from tblfoodlist")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetFoodSelectedType(sType As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldfoodid from tblfoodcontent where fldfoodtype like &1 and fldfoodcode like &2", sType, "Active")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetGenericMedList() As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select fldcodename from tblcode")
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetBrandList(drugid As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select fldbrand from tblmedbrand where flddrug=&1", drugid)
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetIVFluidList() As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select flddrug from tbldrug where fldroute=&1", "fluid")
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetMedCategoryList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select flclass from tblmedcategory")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetChemicalClassList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select flclass from tblchemclass")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetDosageFormsList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select flforms from tbldosageforms")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetManufacturerList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select flditem from tblmanufacturer")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetExtraDepartments() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select flddepart from tblextradepartment")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

'NOTE: -------------------------Diagnostics and exam ---------------------------------
Public Function GetEssentialExamList() As String[]

  Dim res As Result
  Dim xxx As String[]

  res = modDatabase.$medConn.Exec("select fldexamid from tblcompexam where fldcomp=&1 and fldcategory=&2", modBasic.$compID, "Essential Examinations")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

''Exam
Public Function FillExamQualiOrQuantiCombo(sType As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldexamid from tblexam where fldtype like &1 and fldstatus=&2", sType, "Active")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

'''Test
Public Function FillLabTestCombo(txttype As String) As String[]

  Dim xxx As String[]
  Dim res As Result
  Dim res1 As Result

  res = modDatabase.$medConn.Exec("select fldtestid from tbltest where fldtype like &1", txttype)
  If res.Available Then
    xxx = modControlSub.GetDirectFillresult(res)
  Else
    If txttype = "%" Then
      res1 = modDatabase.$medConn.Exec("select distinct(fldtestid) from tblpatlabtest")
      xxx = modControlSub.GetDirectFillresult(res1)
    Endif
  Endif
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function FillQualQuantiTestNameCombo(strCategory As String, strType As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldtestid from tbltest where fldcategory like &1 and fldtype like &2", strCategory, strType)
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

''radio
Public Function FillRadioTestCombo(txttype As String) As String[]

  Dim xxx As String[]
  Dim res As Result
  Dim res1 As Result

  res = modDatabase.$medConn.Exec("select fldexamid from tblradio where fldtype like &1", txttype)
  If res.Available Then
    xxx = modControlSub.GetDirectFillresult(res)
  Else
    If txttype = "%" Then
      res1 = modDatabase.$medConn.Exec("select distinct(fldtestid) from tblpatradiotest")
      xxx = modControlSub.GetDirectFillresult(res1)
    Endif
  Endif
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetLabSampleTypeList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldsampletype from tblsampletype")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetTestConditionList() As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldtestcondition from tbltestcondition")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function FillClinicalSubClass(sDept As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select distinct(fldsubclass) as col from tblstructexam where fldclass like &1", sDept)
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function FillClinicalReference(subClass As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select distinct(fldreferencee) as col from tblstructexam where fldsubclass=&1", subClass)
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

'NOTE: -------------------------Pathology ------------------------------------------
Public Function GetSymptomAllTypeList() As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select fldsymptom from tblsymptoms")
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetSymptomSelectedList(sType As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select fldsymptom as col from tblsymptoms where fldcategory like &1", sType)
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetAllSYndomeList() As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select fldsyndrome from tblsyndromes")
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

''syndromes
Public Function FillSyndromeList(txtCategory As String) As String[]

  Dim xx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldsyndrome from tblsyndromes where fldcategory like &1", txtCategory)
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetPathoCategoryList(sType As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select flclass from tblpathocategory where fldcategory like &1", sType)
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetBodyFluidList() As String[]

  Dim res As Result
  Dim xxx As String[]

  res = modDatabase.$medConn.Exec("select fldfluid from tblbodyfluid")
  xxx = modControlSub.GetDirectFillresult(res)
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

'Note: --------------------------- Patient Profile------------------
Public Function GetSurNameListFromDB() As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select distinct(flditem) as col from tblsurname")
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Function GetRelationListFromDB() As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select distinct(flditem) as col from tblrelations")
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

'''------------------------------------Variables added manually -----------------------------------------------------------------
Public Function RouteMedicine() As String[]

  Dim xxx As String[]

  xxx = ["oral", "liquid", "fluid", "injection", "resp", "topical", "eye/ear", "anal/vaginal"]
  Return xxx

End

Public Function RouteNonMedicine() As String[]

  Dim xxx As String[]

  xxx = ["suture", "msurg", "ortho", "extra"]
  Return xxx

End

Public Function InjSubRouteList() As String[]

  Dim xxx As String[]

  xxx = ["IVpush", "CIV", "IIV", "SC", "IM", "IT", "IDer", "ICar", "ISyn"]
  Return xxx

End

Public Function ComboRoute() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Insert(RouteMedicine())
  xxx.Insert(RouteNonMedicine())
  Return xxx

End

Public Function AllComboRoute() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("All")
  xxx.Insert(RouteMedicine())
  xxx.Insert(RouteNonMedicine())
  Return xxx

End

Public Function InpatientRoute(sGroup As Boolean) As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Insert(RouteMedicine())
  xxx.Insert(RouteNonMedicine())
  If sGroup = True Then
    xxx.Add("Group")
  Endif
  xxx.Insert(InjSubRouteList())
  Return xxx

End

Public Function ClinicalRoute() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Insert(RouteMedicine())
  xxx.Insert(InjSubRouteList())
  Return xxx

End

Public Function FrequencyCombo() As String[]

  Dim xxx As String[]

  xxx = ["1", "2", "3", "4", "5", "6", "8", "Two-hourly", "Hourly", "stat", "PRN", "SOS", "AM", "HS", "Pre", "Post", "Alt day", "Third day", "Fourth day", "Weekly", "Biweekly", "Triweekly", "Monthly", "Yearly", "Tapering"]                                                    ''
  Return xxx

End

Public Function FillLeftRightOptionCombo() As String[]

  Dim xxx As String[]

  xxx = ["No Selection", "Single Selection", "Dichotomous", "RichText Area", "Clinical Scale", "Qualitative", "Quantitative", "Percent Sum", "Visual Input", "ImageValue", "Date Time", "BS Date", "User Profile", "Calculated", "Label Only"]                               ''
  Return xxx

End

Public Function FillCLinicalOptionCombo() As String[]

  Dim xxx As String[]

  xxx = ["No Selection", "Single Selection", "Dichotomous", "Multiple Selection", "RichText Area", "Clinical Scale", "Single Column", "Dual Columns", "Triple Columns", "Left and Right", "Text Table", "Qualitative", "Quantitative", "Percent Sum", "Visual Input", "ImageValue", "Date Time", "BS Date", "User Profile", "Calculated", "Drug Sensitivity", "WHO Sensitivity", "Label Only"]                               ''
  Return xxx

End

Public Function FillCLinicalLessOptionCombo() As String[]

  Dim xxx As String[]

  xxx = ["No Selection", "Single Selection", "Dichotomous", "RichText Area", "Clinical Scale", "Left and Right", "Text Reference", "Qualitative", "Visual Input", "ImageValue", "Date Time", "BS Date", "User Profile", "Calculated", "Custom Components", "Fixed Components", "Left/Right Components"]                               ''
  Return xxx

End

Public Function FillClinSepOptionCombo() As String[]

  Dim xxx As String[]

  xxx = ["No Selection", "Single Selection", "Dichotomous", "Multiple Selection", "RichText Area", "Left and Right", "Text Table", "Qualitative", "Visual Input", "ImageValue", "Date Time", "BS Date", "User Profile", "CopyValue", "Calculated", "Sys Constant"]                               ''
  Return xxx

End

Public Function AgeGroupListShortAll() As String[]

  Dim xx As String[]
  Dim asx As String[]

  If modBasic.$PatDBAgeGroupList And If modBasic.$PatDBAgeGroupList.Count Then
    xx = New String[]
    For Each asx In modBasic.$PatDBAgeGroupList
      xx.Add(asx[0])
    Next
    xx.Add("All Age")
  Else
    xx = ["Neonate", "Infant", "Toddler", "Children", "Adolescent", "Adult", "Elderly", "All Age"]
  Endif
  Return xx

End

'''-------------------------------------- Functions -------------------------------------------------------------------------------
Public Function KidneyCondiToGFRFirst(condi As String) As Float

  Dim xx As Float

  If condi = "severely impaired" Then
    xx = 0
  Else If condi = "moderately impaired" Then
    xx = 10
  Else If condi = "mildly impaired" Then
    xx = 20
  Endif
  Return xx

End

Public Function KidneyCondiToGFRLast(condi As String) As Float

  Dim xx As Float

  If condi = "severely impaired" Then
    xx = 9.9
  Else If condi = "moderately impaired" Then
    xx = 19.9
  Else If condi = "mildly impaired" Then
    xx = 49.9
  Endif
  Return xx

End

Public Function GetSurgicalCategory(surgid As String) As String

  Dim categ As String
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldsurgcateg from tblsurgicals where fldsurgid=&1", surgid)
  If res.Available Then
    If res["fldsurgcateg"] Then
      categ = res["fldsurgcateg"]
    Else
      categ = ""
    Endif
  Else
    categ = ""
  Endif
  Return categ

End

Public Function GetRouteFromItem(flditem As String, strType As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String

  If strType = "Extra Items" Then
    xx = "extra"
  Else If strType = "Medicines" Then
    sql = "select fldroute from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1)"
    res = modDatabase.$medConn.Exec(sql, flditem)
    If res.Available Then
      If res["fldroute"] Then
        xx = res["fldroute"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Else If strType = "Surgicals" Then
    sql = "select fldsurgcateg from tblsurgicals where fldsurgid in(select fldsurgid from tblsurgbrand where fldbrandid=&1)"
    res = modDatabase.$medConn.Exec(sql, flditem)
    If res.Available Then
      If res["fldsurgcateg"] Then
        xx = res["fldsurgcateg"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif                   ''
  Endif

  Return xx

End

'NOTE: ----------------------- System related variables ------------------------------
Public Function FillExportType() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("Text File")
  If System.Exist("localc") = True Then
    xxx.Add("LibreOffice Calc")
  Endif
  If System.Exist("lowriter") = True Then
    xxx.Add("LibreOffice Writer")
  Endif

  Return xxx

End

Public Function GetFixedLRExaminations() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Insert(GetNeuroDualVarList())
  xxx.Insert(GetOptoDualVarList())
  Return xxx

End

Public Function GetNeuroDualVarList() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("Cranial Nerves")
  xxx.Add("Upper Proximal Motor Power")
  xxx.Add("Upper Distal Motor Power")
  xxx.Add("Sensory Function C5")
  xxx.Add("Sensory Function C6")
  xxx.Add("Sensory Function C7")
  xxx.Add("Sensory Function C8")
  xxx.Add("Finger-Nose Test")
  xxx.Add("Bicep Jerk")
  xxx.Add("Tricep Jerk")
  xxx.Add("Supinator Jerk")
  xxx.Add("FLAIR")
  xxx.Add("FABER")
  xxx.Add("Lower Proximal Motor Power")
  xxx.Add("Lower Distal Motor Power")
  xxx.Add("EHL")
  xxx.Add("FHL")
  xxx.Add("Sensory Function L2")
  xxx.Add("Sensory Function L3")
  xxx.Add("Sensory Function L4")
  xxx.Add("Sensory Function L5")
  xxx.Add("Sensory Function S1")
  xxx.Add("Sensory Function S2")
  xxx.Add("Heel-Shin Test")
  xxx.Add("Knee Jerk")
  xxx.Add("Ankle Jerk")
  xxx.Add("Straight Leg Raise Test")
  xxx.Add("Plantar Response")
  Return xxx

End

Public Function GetOptoDualVarList() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("VA")
  xxx.Add("PH VA")
  xxx.Add("PGP")
  xxx.Add("Acceptance")
  xxx.Add("Auto Refn")
  xxx.Add("ADD")
  xxx.Add("Cyclo Refn")
  xxx.Add("IOP-SA")
  xxx.Add("IOP-AT")
  xxx.Add("IOP-RT")
  xxx.Add("Schirmers test-Type I")
  xxx.Add("Schirmers test-Type II")
  xxx.Add("K Reading K1")
  xxx.Add("K Reading K2")
  xxx.Add("K Reading AXL")

  Return xxx

End

''=========================== Clinical Access List =================================
Public Function CompleteAccessList() As String[]

  Dim xx As String[]

  xx = New String[]
  xx.Add("Presenting Complaints")
  xx.Add("General Complaints")
  xx.Add("Cause of Admission")
  xx.Add("Patient History")
  xx.Add("Clinical Findings")
  xx.Add("Initial Planning")
  xx.Add("Final Planning")
  xx.Add("Body Weight")
  xx.Add("Body Height")
  xx.Add("Input Output")
  xx.Add("Progress Notes")
  xx.Add("Clinical Notes")
  xx.Add("Therapeutic Planning")
  xx.Add("Symptoms Addition")

  xx.Add("Provisional Diagnosis")
  xx.Add("Final Diagnosis")
  xx.Add("Drug Allergy")
  xx.Add("Hepatic Status")
  xx.Add("Pregnancy Status")

  xx.Add("Laboratory Request")
  xx.Add("Radiology Request")
  xx.Add("Pharmacy Request")
  xx.Add("Products Request")

  xx.Add("Equipments Used")
  xx.Add("Event Timings")
  xx.Add("Devices Used")
  xx.Add("Procedure Plan")
  xx.Add("Minor Procedure")
  xx.Add("Consultation Plan")
  xx.Add("General Services")
  xx.Add("PO Intake Plan")
  xx.Add("Monitoring Plan")
  xx.Add("Extra Procedure Plan")

  xx.Add("Demographics")
  xx.Add("General Images")
  xx.Add("DICOM Images")
  xx.Add("PACS Images")
  xx.Add("Video Data")
  xx.Add("Medicine Dosing")
  xx.Add("IV Infusion")
  xx.Add("Event Timing")
  xx.Add("Vaccination Form")

  xx.Add("Triage Examinations")
  xx.Add("Essential Examinations")
  xx.Add("Structured Examination")
  xx.Add("Complete Examination")

  xx.Add("Change Status")
  xx.Add("Bed Assignment")

  xx.Add("Procedure Addition")
  xx.Add("Procedure Components")
  xx.Add("Procedure Summary")

  xx.Add("PreOperative Discussion")
  xx.Add("Preoperative Examination")
  xx.Add("Preoperative Note")
  xx.Add("Preoperative Item Used")

  xx.Add("Procedure Parameters")
  xx.Add("Procedure Note")
  xx.Add("Procedure Item Used")
  xx.Add("Procedure Personnel")
  xx.Add("Procedure Instruments")

  xx.Add("Anesthesia Parameters")
  xx.Add("Anesthesia Note")
  xx.Add("Anesthesia Item Used")

  xx.Add("Postoperative Examination")
  xx.Add("Postoperative Note")
  xx.Add("Postoperative Item Used")

  xx.Add("Delivery Addition")
  xx.Add("Pre Delivery Examination")
  xx.Add("On Delivery Examination")
  xx.Add("Post Delivery Examination")
  xx.Add("Newborn Examination")
  xx.Add("Delivery Item Used")

  Return xx

End

Public Function GetDefaultClinHistories() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("Past History")
  xxx.Add("Treatment History")
  xxx.Add("Medication History")
  xxx.Add("Family History")
  xxx.Add("Personal History")
  xxx.Add("Surgical History")
  xxx.Add("Occupational History")
  xxx.Add("Social History")

  Return xxx

End

Public Function GetPatHistoryVar() As String[]

  Dim res1 As Result
  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("History of Illness")
  res1 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tblhistory")
  If res1.Available Then
    For Each res1
      xxx.Add("History@" & res1["flditem"])
    Next
  Else
    xxx.Insert(modMedicine.GetDefaultClinHistories())
  Endif

  Return xxx

End

Public Function GetDischargeVar() As String[]

  Dim xxx As String[]
  Dim res2 As Result

  xxx = New String[]
  res2 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tbldischarge")
  If res2.Available Then
    For Each res2
      xxx.Add("Discharge@" & res2["flditem"])
    Next
  Else
    xxx.Add("Condition at Discharge")
    xxx.Add("Advice on Discharge")
  Endif

  Return xxx

End

Public Function GetCustReportVariables(sSelect As Boolean) As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("Course of Treatment")
  xxx.Add("Bed Transitions")
  xxx.Add("Demographics")
  xxx.Add("Triage Examinations")
  xxx.Add("Cause of Admission")
  xxx.Add("Chief Complaints")
  ' xxx.Add("Presenting Complaints")
  ' xxx.Add("General Complaints")

  xxx.Insert(modMedicine.GetPatHistoryVar())

  xxx.Add("Provisional Diagnosis")
  xxx.Add("Final Diagnosis")
  xxx.Add("Drug Allergy")
  xxx.Add("Investigation Advised")
  xxx.Add("Treatment Advised")
  xxx.Add("Surgicals Requests")
  xxx.Add("Extra Items Requests")

  xxx.Add("Prominent Symptoms")
  xxx.Add("Consultations")
  xxx.Add("Initial Planning")
  xxx.Add("Final Planning")

  If sSelect = True Then
    xxx.Add("Selected Investigations")
  Else
    xxx.Add("Clinical Findings")
    xxx.Add("Essential Examinations")
    xxx.Add("Physician Examinations")
    xxx.Add("Nursing Examinations")
    xxx.Add("Physician Structured")
    xxx.Add("Department Structured")

    xxx.Add("Laboratory Tests")
    xxx.Add("Radiological Findings")
  Endif

  xxx.Add("Medicines Dispensed")
  xxx.Add("Surgicals Dispensed")
  xxx.Add("Extra Items Dispensed")
  xxx.Add("Nutrition Approved")

  xxx.Add("Major Procedures")
  xxx.Add("Major Procedures Custom")
  xxx.Add("Minor Procedures")

  xxx.Add("Equipments Used")
  xxx.Add("Event Timings")
  xxx.Add("Devices Used")
  xxx.Add("Medication Used")
  xxx.Add("Indoor Medication")
  xxx.Add("Nutrition Consumed")
  xxx.Add("Delivery Profile")
  xxx.Add("Extra Procedures")

  xxx.Add("Clinical Notes")
  xxx.Add("IP Monitoring")
  xxx.Add("Therapeutic Planning")
  xxx.Add("Planned Procedures")
  xxx.Add("Discharge Examinations")
  xxx.Add("Discharge Medication")
  xxx.Insert(modMedicine.GetDischargeVar())

  Return xxx

End

Public Function GetMedVariables() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Add("Course of Treatment")
  xxx.Add("Bed Transitions")
  xxx.Add("Demographics")
  xxx.Add("Chief Complaints")
  xxx.Add("Presenting Complaints")
  xxx.Add("Provisional Diagnosis")
  xxx.Add("Final Diagnosis")
  xxx.Add("Drug Allergy")
  xxx.Add("Investigation Advised")

  xxx.Add("Prominent Symptoms")
  xxx.Add("Consultations")
  xxx.Add("Treatment Advised")
  xxx.Add("Surgicals Requests")
  xxx.Add("Extra Items Requests")
  xxx.Add("Medicines Dispensed")
  xxx.Add("Surgicals Dispensed")
  xxx.Add("Extra Items Dispensed")
  xxx.Add("Nutrition Approved")

  xxx.Add("Cause of Admission")
  xxx.Add("General Complaints")
  xxx.Insert(modMedicine.GetPatHistoryVar())

  xxx.Add("OPD Advice")
  xxx.Add("Progress Note")
  xxx.Add("Clinicians Note")
  xxx.Add("Nurses Note")
  xxx.Add("Transfer Note")
  xxx.Insert(modMedicine.GetDischargeVar())

  xxx.Add("Equipments Used")
  xxx.Add("Event Timings")
  xxx.Add("Devices Used")
  xxx.Add("Delivery Profile")
  xxx.Add("Extra Procedures")

  xxx.Add("Major Procedures")
  xxx.Add("Minor Procedures")
  xxx.Add("Medication Used")
  xxx.Add("Indoor Medication")
  xxx.Add("Nutrition Consumed")
  xxx.Add("Discharge Medication")

  xxx.Add("Clinical Findings")
  xxx.Add("Physician Examinations")
  xxx.Add("Essential Examinations")
  xxx.Add("Triage Examinations")
  xxx.Add("Nursing Examinations")
  xxx.Add("Physician Structured")
  xxx.Add("Department Structured")
  xxx.Add("Discharge Examinations")

  Return xxx

End

Public Function GetCloudAIVariables() As String[]

  Dim xxx As String[]

  xxx = New String[]

  ' xxx.Add("Chief Complaints")
  xxx.Add("Presenting Complaints")
  xxx.Add("General Complaints")
  xxx.Add("Provisional Diagnosis")
  xxx.Add("Final Diagnosis")
  xxx.Add("Drug Allergy")

  xxx.Add("Cause of Admission")
  xxx.Insert(modMedicine.GetPatHistoryVar())

  xxx.Add("OPD Advice")
  xxx.Add("Expert Advice")

  xxx.Add("Essential Examinations")
  xxx.Add("Clinical Findings")

  xxx.Add("Progress Note")
  xxx.Add("Clinicians Note")
  xxx.Add("Nurses Note")
  xxx.Add("Transfer Note")

  xxx.Add("Discharge Examinations")
  xxx.Insert(modMedicine.GetDischargeVar())

  Return xxx

End

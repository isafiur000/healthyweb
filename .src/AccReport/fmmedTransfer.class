' Gambas class file

Private $rData As Result
Private $aMyFields As String[]
Private $SSQLFields As String[]
Private $RepoStr As String

Public Sub _new()

  Dim xhospfld As String

  cmbfromcomp.List = modBasic.$AllCompPerList
  cmbfromcomp.Text = "%"
  If MMain.$WebReport = "Multiple" Then
    If modBasic.$HospCode Then
      ' cmblocation.Text = "Hospital"
      cmblocation.Text = modDataRepo.$RepositoryMode
      cmbvalue.Text = modBasic.$HospCode
      pnlocat.Enabled = False
    Else
      cmblocation.List = ["Hospital", "Municipality", "Category", "District", "Province"]
    Endif
  Else
    pnlocat.Visible = False
  Endif

  cmbtocomp.Clear()
  cmbtocomp.List = modBasic.$AllCompPerList
  cmbtocomp.Text = "%"

  cmbcategory.List = ["Medicines", "Surgicals", "Extra Items", "%"]
  cmbcategory.Text = "%"

  rball.Value = True
  dtfir.Value = Now()
  dtlast.Value = Now()

  xhospfld = modDataRepo.HospitalField()
  $SSQLFields = ["fldid", "fldreference", "fldstockid", "fldqty", "fldnetcost", "fldfromcomp", "fldtocomp", "fldtoentrytime", "fldcategory"]
  If xhospfld Then
    $SSQLFields.Add(xhospfld)
  Endif

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

Public Sub cmblocation_Click()

  cmbvalue.Clear()
  If cmblocation.Text Then
    cmbvalue.List = modDataRepo.GetRepoValueListType(cmblocation.Text)
  Endif

End

Public Sub dtnepfir_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfir.Value))
  If xx Then
    dtfir.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub dtneplast_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtlast.Value))
  If xx Then
    dtlast.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub mnufiscal_Click()

  Dim res As Result
  Dim xyear As String

  xyear = InputCombo("Select Fiscal Year Range", "Select Year", modBasic.$FiscalYearList, "", True)
  If xyear Then
    res = modDatabase.$myConn.Exec("select fldfrom,fldend from tblfiscalid where fldlabel=&1", xyear)
    If res.Available Then
      res.MoveFirst
      dtfir.Value = res["fldfrom"]
      dtlast.Value = res["fldend"]
    Endif
  Endif

End

Public Sub btnload_Click()

  Dim sql As String
  Dim res As Result

  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If cmbcategory.Text Then
    sql = "select distinct(fldstockid) as col from tbltransfer where fldcategory like &1" & $RepoStr                                                                                                 ''
    res = modDatabase.$syConn.Exec(sql, cmbcategory.Text)
    lstitem.List = modControlSub.GetDirectFillresult(res)
    rball.Value = True
  Endif

End

Private Function ExecuteQuery(xFldList As String[], strItem As String, $con As Connection) As Result

  Dim sql As String
  Dim res As Result
  Dim xref As String

  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If txtrefno.Text Then
    xref = Trim(txtrefno.Text)
  Else
    xref = "%"
  Endif
  If txtcomment.Text Then
    sql = "select " & xFldList.Join(",") & " from tbltransfer where fldcategory like &1 and fldfromcomp like &2 and fldtocomp like &3 and fldtoentrytime>=&4 and fldtoentrytime<=&5 and fldsav=&6 and fldtosav=&7 and fldstockid like &8 and fldreference like &9 and fldcomment like &{10}" & $RepoStr
  Else
    sql = "select " & xFldList.Join(",") & " from tbltransfer where fldcategory like &1 and fldfromcomp like &2 and fldtocomp like &3 and fldtoentrytime>=&4 and fldtoentrytime<=&5 and fldsav=&6 and fldtosav=&7 and fldstockid like &8 and fldreference like &9" & $RepoStr                                                                                                ''
  Endif
  res = $con.Exec(sql, cmbcategory.Text, cmbfromcomp.Text, cmbtocomp.Text, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), True, True, strItem, xref, txtcomment.Text)
  Return res

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant

  If Column = 4 Then
    xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
  Else If Column = 3 Then
    xxx = modReportVar.GetLocaleNumberFormat(xVariable, -2)
  Else If Column = 7 Then
    xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
  Else If Column = 9 Then
    xxx = modDataRepo.GetHospitalTextLabel(xVariable)
  Else
    xxx = xVariable
  Endif
  Return xxx

End

Public Sub btnrefresh_Click()

  If rbsel.Value = True Then
    $rData = ExecuteQuery($SSQLFields.Copy(), lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    $rData = ExecuteQuery($SSQLFields.Copy(), "%", modDatabase.$syConn)
  Endif
  If $rData.Available Then
    lblrecordcount.Text = "Count: " & $rData.Count
  Else
    lblrecordcount.Text = "Count: 0"
  Endif
  FillTransferGrid()

End

Private Sub FillTransferGrid()

  Dim totamt As Float

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)

  With GridView1
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(275 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Hidden = True

    .Columns[1].Text = "Reference"
    .Columns[2].Text = "Particulars"
    .Columns[3].Text = "QTY"
    .Columns[4].Text = "NetCost"
    .Columns[5].Text = "Sender"
    .Columns[6].Text = "Receiver"
    .Columns[7].Text = "RecvDate"
  End With

  totamt = 0
  For Each $rData
    totamt = totamt + ($rData["fldqty"] * $rData["fldnetcost"])
  Next
  txtamt.Value = Round(totamt, -2)

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])

End

Public Sub btnfullrep_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer

  xHeader = New String[]
  xhide = New Integer[]
  For Column = 0 To GridView1.Columns.Count - 1
    xHeader.Add(GridView1.Columns[Column].Text)
    If GridView1.Columns[Column].Hidden = True Then
      xhide.Add(Column)
    Endif
  Next
  xparam1 = "Stock Transfer"
  xparam2 = cmbcategory.Text & " [" & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate) & "]"
  encColumn = 0
  $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

  For Each $rData
    xCollRow = New Collection
    For xColum = 0 To $SSQLFields.Count - 1
      xCollRow.Add(GetGridViewValue(xColum, $rData[$SSQLFields[xColum]]), CStr(xColum))
    Next
    $hGridExportTable.Add($rData.Index, xCollRow)
  Next
  modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())

End

Public Sub btnexpoexcel_Click()

  Me.Exec("ExportToExcel('" & GridView1.Name & "', 'xlsx')")

End

' Public Sub GridView1_Menu()
'
'   mnugrid.Popup
'
' End

Public Sub mnugridsumm_Click()

  Dim xx As String
  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String
  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal
  If Not modCustPatient.$SumGroupColumn Or If Not modCustPatient.$SumValueColumn Then Return

  xFieldList = New String[]
  If modCustPatient.$SumChapterColumn Then
    ChapCol = $SSQLFields[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = $SSQLFields[modCustPatient.$SumGroupColumn - 1]
  valCol = $SSQLFields[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  If rbsel.Value = True Then
    res = ExecuteQuery(xFieldList, lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery(xFieldList, "%", modDatabase.$syConn)
  Endif
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif

  xx = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Transfer Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Transfer Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Transfer Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Transfer Report Summary", xx, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

Public Sub mnunivar_Click()

  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim sOrder As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  hFile = New CUnivariate
  Column = modCustPatient.GetUnivariateColumn(1)
  xField = $SSQLFields[Column]
  If rbsel.Value = True Then
    res = ExecuteQuery([xField], lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery([xField], "%", modDatabase.$syConn)
  Endif

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Column, res[xField])
      If xval Then
        hFile.Add(xval)
      Endif
    Next
  Endif

  If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnubivar_Click()

  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hFile As CBivariate
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  hFile = New CBivariate
  Row = modCustPatient.GetCrossVarRow(1)
  xFieRow = $SSQLFields[Row]
  Column = modCustPatient.GetCrossVarColumn(1)
  xFieColm = $SSQLFields[Column]
  If rbsel.Value = True Then
    res = ExecuteQuery([xFieRow, xFieColm], lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery([xFieRow, xFieColm], "%", modDatabase.$syConn)
  Endif

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Row, res[xFieRow])
      yval = GetGridViewValue(Column, res[xFieColm])
      If xval And If yval Then
        hFile.Add([xval, yval])
      Endif
    Next
  Endif

  If modCustPatient.$CrossOutcomeType = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab

    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = $SSQLFields[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = $SSQLFields[Column]
    If rbsel.Value = True Then
      res = ExecuteQuery([xFieRow, xFieColm], lstitem.Text, modDatabase.$syConn)
    Else If rball.Value = True Then
      res = ExecuteQuery([xFieRow, xFieColm], "%", modDatabase.$syConn)
    Endif

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif
      Next
    Endif

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    'modExternal.$ExecValueColl.Clear()
  Endif

End

Public Sub mnuColumns_Click()

  If Message.Question(modGridView.GetColumnsListString(GridView1), ("OK"), ("Setting")) = 2 Then
    fmChartSetting.ShowModal
  Endif

End

Public Sub mnuexpocolumn_Click()

  Dim hForm As FmCustColumnSet

  hForm = New FmCustColumnSet(Me.Tag)
  hForm.ShowModal

End

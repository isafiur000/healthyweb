' Gambas module file

' Private $ProgressBar1 As WebProgressBar

''-================================= General Report ==============================================
Public Function CreateHTMLReportFromArray(sColumns As String[], xFinal As Variant[], Optional sParam1 As String, Optional sParam2 As String, Optional sSummary As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xPath As String

  Dim sColl As Collection
  Dim Row As Integer
  Dim Column As Integer

  $BillingReport = New CReportHTML(sColumns, "", "")
  If sParam1 Then
    $BillingReport.UserData.Add(sParam1, "PARAM1")
  Endif
  If sParam2 Then
    $BillingReport.UserData.Add(sParam2, "PARAM2")
  Endif

  For Row = 0 To xFinal.Count - 1
    sColl = xFinal[Row]
    With asx
      For Column = 0 To sColumns.Count - 1
        .Add(sColl[CStr(Column)])
      Next
    End With
    $BillingReport.Add(asx)
    asx.Clear()
  Next

  If sSummary Then
    $BillingReport.AddSummary(sSummary)
  Endif

  xPath = $BillingReport.NewHTMLPath()
  Return xPath

End

Public Function GeneralHTMLReport(res As Result, sHead As String[], param1 As String, param2 As String, Optional encid As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xPath As String
  Dim ref As ResultField

  If encid Then
    $BillingReport = New CReportHTML(sHead, "PatientReport", encid)
    $BillingReport.UserData.Add(param1, "PARAM1")
    $BillingReport.UserData.Add(param2, "Report")
  Else
    $BillingReport = New CReportHTML(sHead, "", "")
    $BillingReport.UserData.Add(param1, "PARAM1")
    $BillingReport.UserData.Add(param2, "PARAM2")
  Endif

  For Each res
    With asx
      For Each ref In res.Fields
        .Add(CStr(res[ref.Name]))
      Next
    End With
    $BillingReport.Add(asx)
    asx.Clear()
  Next

  xPath = $BillingReport.NewHTMLPath()
  Return xPath

End

Public Function SummaryGridReport(param1 As String, param2 As String, GroupList As String[], xFinList As Variant[]) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xname As String
  Dim xval As Float
  Dim i As Integer
  Dim xtot As Float
  Dim xcount As Integer
  Dim xcontot As Float

  Dim xSumType As String
  Dim aitmList As Variant[]
  Dim xRowVar As Variant[]

  If modCustPatient.$SummaryType Then
    xSumType = modCustPatient.$SummaryType
  Else
    xSumType = "Summation"
  Endif

  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Visible = True
  '   $ProgressBar1.Value = 0
  ' Endif

  $BillingReport = New CReportHTML([("Particulars"), ("Value")], "", "")
  $BillingReport.UserData.Add(param1, "PARAM1")
  $BillingReport.UserData.Add(param2, "PARAM2")

  i = 0
  xtot = 0
  If GroupList Then
    GroupList.Sort()
  Endif
  For Each xname In GroupList
    xval = 0
    xcount = 0
    xcontot = 0
    aitmList = New Variant[]

    For Each xRowVar In xFinList
      If xname = modCustPatient.FormatGroupSummation(xRowVar[0]) Then  'modExternal.GerScriptValue(xScript, xShell, GridView1[Row, TextCol].Text) Then
        If xRowVar[1] Then
          If xSumType = "Distinct" Then
            aitmList.Add(xRowVar[1])
          Else If xSumType = "Count" Then
            xval = xval + 1
          Else If xSumType = "Average" Then
            xcount = xcount + 1
            xcontot = xcontot + xRowVar[1]
          Else
            xval = xval + xRowVar[1]
          Endif
        Endif
      Endif
    Next

    If xSumType = "Distinct" Then
      xval = modString.BinaryDistinctStringArray(aitmList).Count
    Else If xSumType = "Average" Then
      If xcount Then
        xval = Round(xcontot / xcount, -3)
      Endif
    Else
      xtot = xtot + xval
    Endif

    If modCustPatient.$SumExcludeNull = "Yes" Then
      If xval Then
        With asx
          .Add(xname)
          .Add(modReportVar.GetLocaleNumberFormat(xval, -2))
        End With
        $BillingReport.Add(asx)
        asx.Clear()
      Endif
    Else
      With asx
        .Add(xname)
        .Add(modReportVar.GetLocaleNumberFormat(xval, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
    Endif

    ' If MMain.$IsGUIApp = True Then
    '   $ProgressBar1.Value = (i + 1) / GroupList.Count
    '   Wait
    ' Endif
    i = i + 1
  Next

  If xSumType = "Summation" Or If xSumType = "Count" Then
    With asx
      .Add("TOTAL")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()
  Endif

  modExternal.$ExecValueColl.Clear()

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryGridChapterReport(param1 As String, param2 As String, ChapterList As String[], GroupList As String[], xFinList As Variant[]) As String                                  ''

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xname As String
  Dim xval As Float
  Dim i As Integer
  Dim xtot As Float
  Dim atot As Float
  Dim xchap As String
  Dim xcount As Integer
  Dim xcontot As Float

  Dim xSumType As String
  Dim aitmList As Variant[]
  Dim xRowVar As Variant[]

  If modCustPatient.$SummaryType Then
    xSumType = modCustPatient.$SummaryType
  Else
    xSumType = "Summation"
  Endif

  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Visible = True
  '   $ProgressBar1.Value = 0
  ' Endif

  $BillingReport = New CReportHTML([("Particulars"), ("Value")], "", "")
  $BillingReport.UserData.Add(param1, "PARAM1")
  $BillingReport.UserData.Add(param2, "PARAM2")

  i = 0
  atot = 0
  If ChapterList Then
    ChapterList.Sort()
  Endif
  For Each xchap In ChapterList
    $BillingReport.AddSection(xchap, True)

    xtot = 0
    If GroupList Then
      GroupList.Sort()
    Endif
    For Each xname In GroupList
      xval = 0
      xcount = 0
      xcontot = 0
      aitmList = New Variant[]

      For Each xRowVar In xFinList
        If xchap = modCustPatient.FormatChapterSummation(xRowVar[0]) Then  'modExternal.GerScriptValue(chpscript, chpshell, GridView1[Row, ChapCol].Text) Then
          If xname = modCustPatient.FormatGroupSummation(xRowVar[1]) Then  ''modExternal.GerScriptValue(xScript, xShell, GridView1[Row, TextCol].Text) Then
            If xRowVar[2] Then
              If xSumType = "Distinct" Then
                aitmList.Add(xRowVar[2])
              Else If xSumType = "Count" Then
                xval = xval + 1
              Else If xSumType = "Average" Then
                xcount = xcount + 1
                xcontot = xcontot + xRowVar[2]
              Else
                xval = xval + xRowVar[2]
              Endif
            Endif
          Endif
        Endif
      Next

      If xSumType = "Distinct" Then
        xval = modString.BinaryDistinctStringArray(aitmList).Count
      Else If xSumType = "Average" Then
        If xcount Then
          xval = Round(xcontot / xcount, -3)
        Endif
      Else
        xtot = xtot + xval
      Endif

      If modCustPatient.$SumExcludeNull = "Yes" Then
        If xval Then
          With asx
            .Add(xname)
            .Add(modReportVar.GetLocaleNumberFormat(xval, -2))
          End With
          $BillingReport.Add(asx)
          asx.Clear()
        Endif
      Else
        With asx
          .Add(xname)
          .Add(modReportVar.GetLocaleNumberFormat(xval, -2))
        End With
        $BillingReport.Add(asx)
        asx.Clear()
      Endif

    Next

    If xSumType = "Summation" Or If xSumType = "Count" Then
      atot = atot + xtot
      With asx
        .Add("TOTAL : " & xchap)
        .Add(modReportVar.GetLocaleNumberFormat(xtot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
    Endif

    With asx
      .Add("****")
      .Add("****")
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    ' If MMain.$IsGUIApp = True Then
    '   $ProgressBar1.Value = (i + 1) / ChapterList.Count
    '   Wait
    ' Endif
    i = i + 1
  Next

  If xSumType = "Summation" Or If xSumType = "Count" Then
    With asx
      .Add("GRAND TOTAL")
      .Add(modReportVar.GetLocaleNumberFormat(atot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()
  Endif

  modExternal.$ExecValueColl.Clear()

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryGridChapCountTableReport(param1 As String, param2 As String, ChapterList As String[], GroupList As String[], xFinList As Variant[]) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xname As String

  Dim xchap As String
  Dim xRowVar As Variant[]

  Dim xhead As String[]
  Dim xItemList As String[]
  Dim xval As Float
  Dim xtot As Float
  Dim i As Integer

  xhead = New String[]
  xhead.Add("SNo")
  xhead.Add(("Particulars"))
  xhead.Insert(ChapterList)
  xhead.Add(("TOTAL"))

  $BillingReport = New CReportHTML(xhead, "", "")
  $BillingReport.UserData.Add(param1, "PARAM1")
  $BillingReport.UserData.Add(param2, "PARAM2")

  i = 1
  If GroupList Then
    xItemList = GroupList.Sort()
  Endif
  For Each xname In xItemList
    With asx
      .Add(CStr(i))
      .Add(xname)

      xtot = 0
      For Each xchap In ChapterList
        xval = 0
        For Each xRowVar In xFinList
          If xchap = modCustPatient.FormatChapterSummation(xRowVar[0]) Then
            If xname = modCustPatient.FormatGroupSummation(xRowVar[1]) Then
              xval = xval + 1
            Endif
          Endif
        Next
        xtot = xtot + xval
        .Add(modReportVar.GetLocaleNumberFormat(xval, -2))
      Next

      .Add(modReportVar.GetLocaleNumberFormat(xtot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    i = i + 1
  Next

  modExternal.$ExecValueColl.Clear()

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryGridChapterTableReport(param1 As String, param2 As String, ChapterList As String[], GroupList As String[], xFinList As Variant[]) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xname As String

  Dim xchap As String
  Dim xRowVar As Variant[]

  Dim xhead As String[]
  Dim xItemList As String[]
  Dim xval As Float
  Dim xtot As Float
  Dim atot As Float
  Dim i As Integer

  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Visible = True
  '   $ProgressBar1.Value = 0
  ' Endif

  xhead = New String[]
  xhead.Add("SNo")
  xhead.Add(("Particulars"))
  xhead.Insert(ChapterList)
  xhead.Add(("TOTAL"))

  $BillingReport = New CReportHTML(xhead, "", "")
  $BillingReport.UserData.Add(param1, "PARAM1")
  $BillingReport.UserData.Add(param2, "PARAM2")

  i = 1
  atot = 0
  If GroupList Then
    GroupList.Sort()
  Endif
  xItemList = GroupList
  For Each xname In xItemList
    With asx
      .Add(CStr(i))
      .Add(xname)

      xtot = 0
      For Each xchap In ChapterList
        xval = 0
        For Each xRowVar In xFinList
          If xchap = modCustPatient.FormatChapterSummation(xRowVar[0]) Then
            If xname = modCustPatient.FormatGroupSummation(xRowVar[1]) Then
              xtot = xtot + xRowVar[2]
              atot = atot + xRowVar[2]
              xval = xval + xRowVar[2]
            Endif
          Endif
        Next
        .Add(modReportVar.GetLocaleNumberFormat(xval, -2))
      Next

      .Add(modReportVar.GetLocaleNumberFormat(xtot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    ' If MMain.$IsGUIApp = True Then
    '   $ProgressBar1.Value = (i + 1) / xItemList.Count
    '   Wait
    ' Endif
    i = i + 1
  Next

  With asx
    .Add("")
    .Add("****")
    For Each xchap In ChapterList
      .Add("****")
    Next
    .Add("****")
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  With asx
    .Add("")
    .Add("GRAND TOTAL")
    For Each xchap In ChapterList
      .Add("****")
    Next
    .Add(modReportVar.GetLocaleNumberFormat(atot, -2))
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  modExternal.$ExecValueColl.Clear()

  Return $BillingReport.NewHTMLPath()

End

'''==================================== EXPORT =======================================================
Public Function HideColumnExport() As Integer[]

  Dim xcuscol As String
  Dim xcolmns As String[]
  Dim xcol As String
  Dim noCols As Integer[]

  xcuscol = modSettings.ShowSettingFromFIle("ReportColumnVisibility/ExcludeColumns")
  noCols = New Integer[]
  If xcuscol Then
    xcolmns = Split(xcuscol, ",")
    For Each xcol In xcolmns
      noCols.Add(CInt(xcol) - 1)
    Next
  Endif
  Return noCols

End

Public Sub ExportGridToHTML(GridView1 As WebTable, param1 As String, param2 As String, Optional summary As String[], Optional encid As String)

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]

  If encid Then
    $BillingReport = New CReportHTML(["EXPORTED"], "PatientReport", encid)
    $BillingReport.UserData.Add(param1, "PARAM1")
    $BillingReport.UserData.Add(param2, "Report")
  Else
    $BillingReport = New CReportHTML(["EXPORTED"], "", "")
    $BillingReport.UserData.Add(param1, "PARAM1")
    $BillingReport.UserData.Add(param2, "PARAM2")
  Endif

  GridView1.Display = -1
  With asx
    .Add(GridView1.ToHTML())
  End With
  $BillingReport.Add(asx)
  asx.Clear()
  GridView1.Display = 100

  modExternal.$ExecValueColl.Clear()
  modControlSub.DisplayReportExport($BillingReport.NewHTMLPath())

End

''========================================= Custom Report/Data Export =======================================
Private Function GetVarValue(xType As String, xValue As String) As Variant

  Dim xx As Variant

  If xType = "Number" Then
    If xValue Then
      xx = Val(xValue)
    Else
      xx = 0
    Endif

  Else If xType = "DateOnly" Then
    If xValue Then
      xx = Val(xValue)
    Else
      xx = ""
    Endif

  Else If xType = "DateTime" Then
    If xValue Then
      xx = Val(xValue)
    Else
      xx = ""
    Endif

  Else
    xx = xValue
  Endif
  Return xx

End

Private Function GetColumnData(sCon As Connection, ColType As String, ColText As String, colValue As Variant) As Variant

  Dim res As Result
  Dim sql As String
  Dim xvar As Variant
  Dim fircol As String

  If ColText Then
    If ColType = "Encounter" Then
      xvar = modReportVar.GetPatientVariableValue(ColText, colValue)
    Else If ColType = "SQL Select" Then
      sql = "SELECT " & modDBApp.GetSecureSQL(ColText)

      If modMisc.CheckRestrictedKey(sql) = 0 Then
        res = sCon.Exec(sql, colValue)
        fircol = modDBApp.FirstResultField(res)
        If res.Available Then
          res.MoveLast
          If res[fircol] Then
            xvar = res[fircol]
          Endif
        Else
          xvar = ""
        Endif
      Else
        xvar = ""
      Endif

    Endif

  Else
    xvar = colValue
  Endif

  Return xvar

End

Public Function CustomAccountReport(sCon As Connection, AccountReportName As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim sql As String
  Dim param1 As String
  Dim param2 As String
  Dim xoption1 As String
  Dim xoption2 As String
  Dim xoption3 As String
  Dim xoptype1 As String
  Dim xoptype2 As String
  Dim xoptype3 As String
  Dim xsumcol As String
  Dim xoptstr As String
  Dim xoptlist As String[]
  Dim sVal As String
  Dim titBool As Boolean

  Dim res As Result
  Dim ref As ResultField
  Dim xhead As String[]
  Dim i As Integer
  Dim sumcol As Integer
  Dim xtot As Float

  Dim xvar As Variant
  Dim colvalue As Variant
  Dim j As Integer
  Dim coltype As String[]
  Dim coltext As String[]

  Dim xserial As String
  Dim k As Integer
  Dim p As Integer

  coltype = New String[]
  coltext = New String[]
  For j = 0 To 2
    coltype.Add(modSettings.ShowSettingForReport(AccountReportName & "/" & "Column" & CStr(j + 1) & "_Type"))
    coltext.Add(modSettings.ShowSettingForReport(AccountReportName & "/" & "Column" & CStr(j + 1) & "_Text"))
  Next

  param1 = modSettings.ShowSettingForReport(AccountReportName & "/" & "PARAM1")
  param2 = modSettings.ShowSettingForReport(AccountReportName & "/" & "PARAM2")
  sql = modSettings.ShowSettingForReport(AccountReportName & "/" & "BodySQL")
  xserial = modSettings.ShowSettingForReport(AccountReportName & "/" & "ShowSerial")
  If xserial = "Yes" Then
    p = 1
  Else
    p = 0
  Endif

  xoptstr = modSettings.ShowSettingForReport(AccountReportName & "/" & "OptionList")
  If xoptstr Then
    xoptlist = Split(xoptstr, ";")
  Endif
  xoptype1 = modSettings.ShowSettingForReport(AccountReportName & "/" & "Option1_Type")
  xoptype2 = modSettings.ShowSettingForReport(AccountReportName & "/" & "Option2_Type")
  xoptype3 = modSettings.ShowSettingForReport(AccountReportName & "/" & "Option3_Type")

  xoption1 = modSettings.ShowSettingForReport(AccountReportName & "/" & "Option1")
  xoption2 = modSettings.ShowSettingForReport(AccountReportName & "/" & "Option2")
  xoption3 = modSettings.ShowSettingForReport(AccountReportName & "/" & "Option3")

  xsumcol = modSettings.ShowSettingForReport(AccountReportName & "/" & "Summary")
  If xsumcol Then
    sumcol = CInt(xsumcol)
  Endif

  If sql Then
    If modMisc.CheckRestrictedKey(sql) = 0 Then

      If xoptstr Then
        ''multiple option
        titBool = False
        xtot = 0
        K = 1
        For Each sVal In xoptlist
          res = sCon.Exec("SELECT " & modDBApp.GetSecureSQL(sql), sVal, GetVarValue(xoptype2, xoption2), GetVarValue(xoptype3, xoption3))                                      ''
          If res.Available Then
            If titBool = False Then
              xhead = New String[]
              If xserial = "Yes" Then
                xhead.Add("SNo")
              Endif
              For Each ref In res.Fields
                xhead.Add(ref.Name)
              Next
              $BillingReport = New CReportHTML(xhead, "", "")
              $BillingReport.UserData.Add(param1, "PARAM1")
              $BillingReport.UserData.Add(param2, "PARAM2")
              titBool = True
            Endif

            For Each res
              With asx
                If xserial = "Yes" Then
                  .Add(CStr(k))
                Endif

                For i = p To xhead.Count - 1
                  If sumcol Then
                    If i = sumcol - 1 Then
                      xtot = xtot + res[xhead[i]]
                    Endif
                  Endif

                  If i = 0 Or If i = 1 Or If i = 2 Then
                    xvar = GetColumnData(sCon, coltype[i], coltext[i], res[xhead[i]])
                    If xvar Then
                      colvalue = xvar
                    Else
                      colvalue = "" 'res[xhead[i]]
                    Endif
                  Else
                    colvalue = res[xhead[i]]
                  Endif

                  If TypeOf(colvalue) = gb.Date Then
                    .Add(modReportVar.GetDateTimeReport(colvalue, gb.GeneralDate))
                  Else If TypeOf(colvalue) = gb.Integer Or TypeOf(colvalue) = gb.Long Or If TypeOf(colvalue) = gb.Float Then
                    .Add(modReportVar.GetLocaleNumberFormat(colvalue, 0))
                  Else
                    .Add(colvalue)
                  Endif
                Next

              End With
              $BillingReport.Add(asx)
              asx.Clear()
              k = k + 1
            Next

          Endif
        Next

        If sumcol Then
          With asx
            For i = 0 To xhead.Count - 1
              If i = sumcol - 1 Then
                .Add(modReportVar.GetLocaleNumberFormat(xtot, -2))
              Else
                .Add("***")
              Endif
            Next
          End With
          $BillingReport.Add(asx)
          asx.Clear()
        Endif
        Return $BillingReport.NewHTMLPath()

      Else
        ''single option
        res = sCon.Exec("SELECT " & modDBApp.GetSecureSQL(sql), GetVarValue(xoptype1, xoption1), GetVarValue(xoptype2, xoption2), GetVarValue(xoptype3, xoption3))                                      ''
        If res.Available Then
          xhead = New String[]
          If xserial = "Yes" Then
            xhead.Add("SNo")
          Endif
          For Each ref In res.Fields
            xhead.Add(ref.Name)
          Next
          $BillingReport = New CReportHTML(xhead, "", "")
          $BillingReport.UserData.Add(param1, "PARAM1")
          $BillingReport.UserData.Add(param2, "PARAM2")

          xtot = 0
          K = 1
          For Each res
            With asx
              If xserial = "Yes" Then
                .Add(CStr(k))
              Endif

              For i = p To xhead.Count - 1
                If sumcol Then
                  If i = sumcol - 1 Then
                    xtot = xtot + res[xhead[i]]
                  Endif
                Endif

                If i = 0 Or If i = 1 Or If i = 2 Then
                  xvar = GetColumnData(sCon, coltype[i], coltext[i], res[xhead[i]])
                  If xvar Then
                    colvalue = xvar
                  Else
                    colvalue = "" 'res[xhead[i]]
                  Endif
                Else
                  colvalue = res[xhead[i]]
                Endif

                If TypeOf(colvalue) = gb.Date Then
                  .Add(modReportVar.GetDateTimeReport(colvalue, gb.GeneralDate))
                Else If TypeOf(colvalue) = gb.Integer Or TypeOf(colvalue) = gb.Long Or If TypeOf(colvalue) = gb.Float Then
                  .Add(modReportVar.GetLocaleNumberFormat(colvalue, 0))
                Else
                  .Add(colvalue)
                Endif
              Next

            End With
            $BillingReport.Add(asx)
            asx.Clear()
            k = k + 1
          Next

          If sumcol Then
            With asx
              For i = 0 To xhead.Count - 1
                If i = sumcol - 1 Then
                  .Add(modReportVar.GetLocaleNumberFormat(xtot, -2))
                Else
                  .Add("***")
                Endif
              Next
            End With
            $BillingReport.Add(asx)
            asx.Clear()
          Endif
          modExternal.$ExecValueColl.Clear()
          Return $BillingReport.NewHTMLPath()

        Else
          If MMain.$IsGUIApp = True Then
            Message.Warning("Query returned Nothing", ("OK"))
          Else
            Print "Query returned Nothing"
          Endif
        Endif

      Endif

    Endif
  Endif

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

Public Sub CustomExportData(sCon As Connection, sName As String)

  Dim xTitle As String
  Dim xformat As String
  Dim sql As String
  Dim res As Result
  Dim ref As ResultField
  Dim refLst As String[]
  Dim i As Integer

  Dim xtable As String
  Dim tableist As String[]
  Dim xtabname As String
  Dim rsx As Result
  Dim xvar As Variant
  Dim xerrout As String
  Dim colvalue As Variant
  Dim finvalue As Variant
  Dim coltype As String
  Dim coltext As String
  Dim colshell As String
  Dim colscript As String

  Dim xoption1 As String
  Dim xoption2 As String
  Dim xoption3 As String
  Dim xoptype1 As String
  Dim xoptype2 As String
  Dim xoptype3 As String

  Dim newcon As Connection
  Dim sHost As String
  Dim sDBase As String
  Dim sUser As String
  Dim sPass As String
  Dim sPort As String

  Dim xrow As String[]
  Dim xArray As String[]
  Dim xfilename As String
  Dim xcoll As JSONCollection

  xTitle = modSettings.ShowSettingForReport(sName & "/" & "Name")
  If xTitle Then
    If modBasic.$ExpoRepoUser = True Then
      ' If MMain.$IsGUIApp = True Then
      '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
      '   $ProgressBar1.Visible = True
      '   $ProgressBar1.Value = 0
      ' Endif

      xformat = modSettings.ShowSettingForReport(sName & "/" & "OutFormat")
      sql = modSettings.ShowSettingForReport(sName & "/" & "BodySQL")
      xoptype1 = modSettings.ShowSettingForReport(sName & "/" & "Option1_Type")
      xoptype2 = modSettings.ShowSettingForReport(sName & "/" & "Option2_Type")
      xoptype3 = modSettings.ShowSettingForReport(sName & "/" & "Option3_Type")

      xoption1 = modSettings.ShowSettingForReport(sName & "/" & "Option1")
      xoption2 = modSettings.ShowSettingForReport(sName & "/" & "Option2")
      xoption3 = modSettings.ShowSettingForReport(sName & "/" & "Option3")

      If sql Then
        If modMisc.CheckRestrictedKey(sql) = 0 Then
          res = sCon.Exec("SELECT " & modDBApp.GetSecureSQL(sql), GetVarValue(xoptype1, xoption1), GetVarValue(xoptype2, xoption2), GetVarValue(xoptype3, xoption3))                                      ''
          If res.Available Then
            refLst = New String[]
            For Each ref In res.Fields
              refLst.Add(ref.Name)
            Next

            ''get diffrerent table names
            tableist = New String[]
            For i = 1 To res.Fields.Count
              xtable = modSettings.ShowSettingForReport(sName & "/" & "TableName_Column" & CStr(i))
              If tableist.Count = 0 Then
                tableist.Add(xtable)
              Else
                If tableist.Exist(xtable) = False Then
                  tableist.Add(xtable)
                Endif
              Endif
            Next

            If xformat = "DBInsert" Then ''''export to database
              ''open new connection
              sHost = modSettings.ShowSettingForReport(sName & "/" & "HostName")
              sPort = modSettings.ShowSettingForReport(sName & "/" & "Port")
              sDBase = modSettings.ShowSettingForReport(sName & "/" & "DataBase")
              sUser = modSettings.ShowSettingForReport(sName & "/" & "UserName")
              sPass = UnBase64(modSettings.ShowSettingForReport(sName & "/" & "UserPass"))
              newcon = modDBApp.OpenConnection("mysql", sHost, sDBase, sUser, sPass, sPort)

              ''find values and add to database
              For Each res
                For Each xtabname In tableist
                  rsx = newcon.Create(xtabname)
                  For i = 1 To res.Fields.Count
                    If xtabname = modSettings.ShowSettingForReport(sName & "/" & "TableName_Column" & CStr(i)) Then
                      coltype = modSettings.ShowSettingForReport(sName & "/" & "ColumnType_Column" & CStr(i))
                      coltext = modSettings.ShowSettingForReport(sName & "/" & "ColumnText_Column" & CStr(i))
                      colshell = modSettings.ShowSettingForReport(sName & "/" & "ColumnShell_Column" & CStr(i))
                      colscript = modSettings.ShowSettingForReport(sName & "/" & "ColumnScript_Column" & CStr(i))
                      xvar = GetColumnData(sCon, coltype, coltext, res[refLst[i - 1]])
                      If xvar Then
                        colvalue = xvar
                      Else
                        colvalue = "" ''res[refLst[i - 1]]
                      Endif
                      finvalue = modExternal.GerScriptValue(colscript, colshell, colvalue)
                      rsx[modSettings.ShowSettingForReport(sName & "/" & "ColumnField_Column" & CStr(i))] = finvalue
                    Endif
                  Next
                  rsx.Update
                Next

                ' If MMain.$IsGUIApp = True Then
                '   $ProgressBar1.Value = (res.Index + 1) / res.Count
                '   Wait
                ' Endif
              Next

            Else If xformat = "HTTP" Then ''''HTTP Post
              xcoll = New JSONCollection
              sHost = modSettings.ShowSettingForReport(sName & "/" & "HostName")
              sPort = modSettings.ShowSettingForReport(sName & "/" & "Port")
              sUser = modSettings.ShowSettingForReport(sName & "/" & "UserName")
              sPass = UnBase64(modSettings.ShowSettingForReport(sName & "/" & "UserPass"))

              ''find values and add to database
              For Each res
                For i = 1 To res.Fields.Count
                  If xtabname = modSettings.ShowSettingForReport(sName & "/" & "TableName_Column" & CStr(i)) Then
                    coltype = modSettings.ShowSettingForReport(sName & "/" & "ColumnType_Column" & CStr(i))
                    coltext = modSettings.ShowSettingForReport(sName & "/" & "ColumnText_Column" & CStr(i))
                    colshell = modSettings.ShowSettingForReport(sName & "/" & "ColumnShell_Column" & CStr(i))
                    colscript = modSettings.ShowSettingForReport(sName & "/" & "ColumnScript_Column" & CStr(i))
                    xvar = GetColumnData(sCon, coltype, coltext, res[refLst[i - 1]])
                    If xvar Then
                      colvalue = xvar
                    Else
                      colvalue = "" ''res[refLst[i - 1]]
                    Endif
                    finvalue = modExternal.GerScriptValue(colscript, colshell, colvalue)
                    xcoll.Add(finvalue, modSettings.ShowSettingForReport(sName & "/" & "ColumnField_Column" & CStr(i)))
                  Endif
                Next
                xerrout = modDevAll.HTTPPOSTCollectionVal(sHost, sUser, sPass, xcoll)
                Print xerrout

                ' If MMain.$IsGUIApp = True Then
                '   $ProgressBar1.Value = (res.Index + 1) / res.Count
                '   Wait
                ' Endif
              Next

            Else  ''else for csv format
              xArray = New String[]

              ''add field names
              xrow = New String[]
              For i = 1 To res.Fields.Count
                xrow.Add(modSettings.ShowSettingForReport(sName & "/" & "ColumnField_Column" & CStr(i)))
              Next
              xArray.Add(xrow.Join(";"))

              ''add values
              For Each res
                xrow = New String[]
                For i = 1 To res.Fields.Count
                  coltype = modSettings.ShowSettingForReport(sName & "/" & "ColumnType_Column" & CStr(i))
                  coltext = modSettings.ShowSettingForReport(sName & "/" & "ColumnText_Column" & CStr(i))
                  colshell = modSettings.ShowSettingForReport(sName & "/" & "ColumnShell_Column" & CStr(i))
                  colscript = modSettings.ShowSettingForReport(sName & "/" & "ColumnScript_Column" & CStr(i))
                  xvar = GetColumnData(sCon, coltype, coltext, res[refLst[i - 1]])
                  If xvar Then
                    colvalue = xvar
                  Else
                    colvalue = "" ''res[refLst[i - 1]]
                  Endif
                  finvalue = modExternal.GerScriptValue(colscript, colshell, colvalue)
                  xrow.Add(finvalue)
                Next
                xArray.Add(xrow.Join(";"))

                ' If MMain.$IsGUIApp = True Then
                '   $ProgressBar1.Value = (res.Index + 1) / res.Count
                '   Wait
                ' Endif
              Next
              ''save to file
              xfilename = User.Home &/ "/html/docs" &/ xTitle & ".csv"
              File.Save(xfilename, xArray.Join(gb.NewLine))

            Endif    '''end of formats
            modExternal.$ExecValueColl.Clear()
            ' If MMain.$IsGUIApp = True Then
            '   $ProgressBar1.Value = 0
            ' Endif

          Else
            If MMain.$IsGUIApp = True Then
              Message.Warning("Query returned Nothing", ("OK"))
            Else
              Print "Query returned Nothing"
            Endif
          Endif
        Endif
      Endif

    Else
      If MMain.$IsGUIApp = True Then
        Message.Info(("Data Export Diabled"), ("OK"))
      Else
        Print "Data Export Diabled"
      Endif
    Endif
  Endif
  If MMain.$IsGUIApp = True Then
    Message.Info(("Data Export Complete"), ("OK"))
  Else
    Print "Data Export Complete"
  Endif

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

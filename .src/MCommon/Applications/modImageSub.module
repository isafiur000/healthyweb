' Gambas module file

Public Sub GetContentTypeFrom(Path As String) As String

  Select Case Lower(File.Ext(Path))
    Case "css"
      Return "text/css"
    Case "bmp"
      Return "image/bmp"
    Case "jpg", "jpeg", "jpe", "thumb"
      Return "image/jpeg"
    Case "png"
      Return "image/png"
    Case "gif"
      Return "image/gif"
    Case "svg"
      Return "image/svg+xml"
    Case "tiff", "tif"
      Return "image/tiff"
    Case "odt"
      Return "application/vnd.oasis.opendocument.text"
    Case "doc"
      Return "application/msword"
    Case "ods"
      Return "application/vnd.oasis.opendocument.spreadsheet"
    Case "xls"
      Return "application/msexcel"
    Case "pdf"
      Return "application/pdf"
    Case "zip"
      Return "application/zip"
    Case "html", "htm"
      Return "text/html"
    Case "txt"
      Return "text/plain"
    Case "avi"
      Return "video/x-msvideo"
    Case "mpg", "mpeg"
      Return "video/mpeg"
    Case "mp4"
      Return "video/mp4"
    Case "webm"
      Return "video/webm"
    Case "m4v"
      Return "video/x-m4v"
    Case "mov"
      Return "video/quicktime"
    Case "ps"
      Return "application/postscript"
    Case "dwg"
      Return "application/acad"
    Case "wav"
      Return "audio/x-wav"
    Case "mp3"
      Return "audio/mpeg"
    Case "ogg"
      Return "application/ogg"
    Case "jar"
      Return "application/x-jar"
    Case "json"
      Return "application/json;charset=utf-8"
    Case "kml"
      Return "application/vnd.google-earth.kml+xml"
    Case "kmz"
      Return "application/vnd.google-earth.kmz"
    Case Else
      Return "application/octet-stream"
  End Select

End

Public Function GetMimeFormat(sFormat As String) As String

  Select sFormat
    Case "text/css"
      Return "css"
    Case "image/bmp"
      Return "bmp"
    Case "image/jpeg"
      Return "jpeg"
    Case "image/png"
      Return "png"
    Case "image/gif"
      Return "gif"
    Case "image/svg+xml"
      Return "svg"
    Case "image/tiff"
      Return "tiff"
    Case "application/vnd.oasis.opendocument.text"
      Return "odt"
    Case "application/msword"
      Return "doc"
    Case "application/vnd.oasis.opendocument.spreadsheet"
      Return "ods"
    Case "application/msexcel"
      Return "xls"
    Case "application/pdf"
      Return "pdf"
    Case "application/zip"
      Return "zip"
    Case "text/html"
      Return "html"
    Case "text/plain"
      Return "txt"
    Case "video/x-msvideo"
      Return "avi"
    Case "video/mpeg"
      Return "mpeg"
    Case "video/mp4"
      Return "mp4"
    Case "video/webm"
      Return "webm"
    Case "video/x-m4v"
      Return "m4v"
    Case "video/quicktime"
      Return "mov"
    Case "application/postscript"
      Return "ps"
    Case "application/acad"
      Return "dwg"
    Case "audio/x-wav"
      Return "wav"
    Case "audio/mpeg"
      Return "mp3"
    Case "application/ogg"
      Return "ogg"
    Case "application/x-jar"
      Return "jar"
    Case "application/json;charset=utf-8"
      Return "json"
    Case "application/vnd.google-earth.kml+xml"
      Return "kml"
    Case "application/vnd.google-earth.kmz"
      Return "kmz"
  End Select

End

Public Function GetExtFromFile(sPath As String) As String

  Dim amime As String
  Dim xext As String

  amime = modapplication.GetMimeType(sPath)
  If amime Then
    xext = GetMimeFormat(amime)
  Endif
  Return xext

End

' Public Function GetPDFImage(sPDFPath As String, sPage As Integer) As Image
'
'   Dim hPDF As New PDFDocument
'   Dim ximg As Image
'
'   hPDF.Open(sPDFPath)
'   hPDF.Orientation = PdfDocument.Normal
'   hPDF.Zoom = 1
'   ximg = hPDF[sPage].Image
'
'   Return ximg
'
' End

Public Function GetHtmlImagePath(sJson As String) As String

  Dim ximg As String[]
  Dim xformat As String
  Dim xPath As String

  ximg = Split(sJson, ",")
  xformat = modString.GetSelectedTextBetween(ximg[0], ":", ";")
  If xformat Then
    xPath = Temp() & "." & GetMimeFormat(xformat)
    File.Save(xPath, UnBase64(ximg[1]))
  Endif

  Return xPath

End

''get PNG format
' ' Public Function GetPNGImage(sPath As String) As String
' '
' '   Return sPath
' '
' ' End

''resize image (used to resize signature)
' Public Function GetStretchedImage(sInput As String, sWidth As Integer, sHeight As Integer) As String
'
'   Dim img As Image
'   Dim img1 As Image
'   Dim sOutput As String
'
'   If sInput Then
'     sOutput = Temp() & ".png"
'     img = Image.Load(sInput)
'     img1 = img.Stretch(sWidth, sHeight)
'     img.Save(sOutput)
'   Endif
'   Return sOutput
'
' End

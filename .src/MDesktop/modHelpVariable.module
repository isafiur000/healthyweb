' Gambas module file

Public $appetcFolder As String
Public $appusrFolder As String
Public $appetcConfFile As String
Public $appetc7zFile As String
Public $appWebconfFile As String

Public AppName As String
Public AppDirectory As String
Public AppCacheDir As String
Public $htmlDirectory As String
Public $textDirectory As String
Public $docsDirectory As String
Public $localesDirectory As String
Public $mediaDirectory As String
Public $gnuDirectory As String
Public $scriptDirectory As String
Public $psppDirectory As String
Public $pythonDirectory As String

Public $FIrstTimeSetting As Boolean
Public $ExistFixSetting As Boolean
Public $LogInCategory As String
Public $LogInGroup As String
Public $headerImage As String
Public $AppCssPath As String

Public $MACAddress As String
Public $localIP As String
Public $GeoCoordinate As String
Public $LogInTime As Date
Public $ApplKey As Integer

''--------------------------
Public $CryptValue As String
Public $CryptDBVal As String
Public $CryptZip As String
Public $CryptPDF As String

Public $CryptRepo As String
Public $CryptRepoZip As String
Public $SaltValue As String
Public $SysConfigPath As String

Public $HospitalName As String
Public $HospitalAddress As String
Public $Department As String
Public $HospLogo As String
Public $IRDLevel As String
Public $VATBill As String
Public $AutoRepoUpload As String
Public $AutoImgRepoUpload As String
Public $RemoteCryptValue As String
Public $AllowInvoicePDF As String
Public $AllowInsecureDevice As String
Public $UploadLoginLog As String
Public $DownloadAdvertise As String

Public $SysDataBase As String
Public $SysDisableDate As String
Public $SysDisableCharset As String
Public $SysCollation As String
Public $SysInterface As String
Private $SysUseSSL As Boolean
Public $SysLockOnDC As String

Public $SysMainService As String
Private $SysExtService As String
Private $SysFallService As String

Public $SysMainHost As String
Public $SysExtHost As String
Public $SysFallHost As String

Public $SysMainUser As String
Private $SysExtUser As String
Private $SysFallUser As String

Public $SysMainPassword As String
Private $SysExtPass As String
Private $SysFallPass As String

Public $SysMainPort As String
Private $SysExtPort As String
Private $SysFallPort As String

Public $SysFTPHost As String
Public $SysFTPFolder As String
Public $SysFTPUser As String
Public $SysFTPPass As String
Public $SysFTPSSL As String
Public $SysFTPCert As String
''------------------ END ------------------

Private $DBType As String
Private $DBHost As String
Private $DBName As String
Private $UserName As String
Private $UserPassword As String
Private $sPort As String

Public $conTarget As String
Public $SessionCode As String
Public $HostPath As String

'NOTE:------------------------- Session Parameters ----------------
Public Sub GetSessionParam()

  ' Dim xtimeout As String
  '
  ' xtimeout = modSettings.ShowSettingFromFIle("Application/SessionTimeOut")
  ' If xtimeout Then
  '   Session.Timeout = CInt(xtimeout)
  ' Endif
  $HostPath = GetServerPath()

End

Public Function GetServerPath() As String

  Dim xmode As String
  Dim xpath As String

  xmode = modSettings.ShowSettingFromFIle("Application/ServerPath")
  If xmode Then
    xpath = Trim(xmode)
  Else
    xpath = CGI["HTTP_HOST"]
  Endif
  Return xpath

End

'NOTE: ------------------------------ File and Directory Functions -----------------------------
Public Sub MakeWorkingDir()

  AppName = Application.Name
  $appetcFolder = "/etc" &/ AppName
  $appusrFolder = "/usr/share" &/ AppName

  $appetcConfFile = $appetcFolder &/ AppName & ".conf"
  $appetc7zFile = $appetcFolder &/ AppName & ".conf.7z"
  $appWebconfFile = $appusrFolder &/ "web.conf"

  AppDirectory = "/etc" &/ AppName ''Desktop.ConfigDir &/ AppName
  If Exist($appetcFolder &/ "appsettings.conf") Then
    $ExistFixSetting = True
  Else
    $ExistFixSetting = False
  Endif
  modSecure.SetGeneralCredentials()

End

Public Sub SetLocalDirectories()

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "html") Then
    $htmlDirectory = $appetcFolder &/ modBasic.$compID &/ "html"
  Else
    $htmlDirectory = $appetcFolder &/ "html"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "text") Then
    $textDirectory = $appetcFolder &/ modBasic.$compID &/ "text"
  Else
    $textDirectory = $appetcFolder &/ "text"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "docs") Then
    $docsDirectory = $appetcFolder &/ modBasic.$compID &/ "docs"
  Else
    $docsDirectory = $appetcFolder &/ "docs"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "locales") Then
    $localesDirectory = $appetcFolder &/ modBasic.$compID &/ "locales"
  Else
    $localesDirectory = $appetcFolder &/ "locales"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "media") Then
    $mediaDirectory = $appetcFolder &/ modBasic.$compID &/ "media"
  Else
    $mediaDirectory = $appetcFolder &/ "media"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "gnu") Then
    $gnuDirectory = $appetcFolder &/ modBasic.$compID &/ "gnu"
  Else
    $gnuDirectory = $appetcFolder &/ "gnu"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "pspp") Then
    $psppDirectory = $appetcFolder &/ modBasic.$compID &/ "pspp"
  Else
    $psppDirectory = $appetcFolder &/ "pspp"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "scripts") Then
    $scriptDirectory = $appetcFolder &/ modBasic.$compID &/ "scripts"
  Else
    $scriptDirectory = $appetcFolder &/ "scripts"
  Endif

  If modBasic.$compID And If Exist($appetcFolder &/ modBasic.$compID &/ "python") Then
    $pythonDirectory = $appetcFolder &/ modBasic.$compID &/ "python"
  Else
    $pythonDirectory = $appetcFolder &/ "python"
  Endif

End

Public Sub CreateWorkingDir()

  ' ' If Not Exist(modHelpVariable.AppDirectory) Then
  ' '   Mkdir modHelpVariable.AppDirectory
  ' ' Endif
  If Not Exist("/tmp" &/ AppName) Then
    Mkdir "/tmp" &/ AppName
  Endif
  If Not Exist("/tmp" &/ AppName &/ "docs") Then
    Link "/var/www/html/docs" To "/tmp" &/ AppName &/ "docs"
  Endif
  If Not Exist("/var/www/html/docs" &/ "index.html") Then
    File.Save("/var/www/html/docs" &/ "index.html", "Unauthorized access")
  Endif

  ' ' If Not Exist(Desktop.CacheDir &/ modHelpVariable.AppName) Then
  ' '   Mkdir Desktop.CacheDir &/ modHelpVariable.AppName
  ' ' Endif
  ' '
  ' ' modExternal.CopyFromFolderToFolder(modHelpVariable.$appusrFolder, modHelpVariable.AppDirectory)
  ' ' If Not Exist(modHelpVariable.AppDirectory &/ "appsettings.conf") Then
  ' '   File.Save(modHelpVariable.AppDirectory &/ "appsettings.conf", "")
  ' ' Endif

End

Public Sub CreateSessionDir()

  SetLocalDirectories()
  $SessionCode = modString.GetDateString(modHelpVariable.$LogInTime) & ":" & Session.Id
  AppCacheDir = "/tmp" &/ AppName &/ $SessionCode
  If Exist(AppCacheDir) Then
    modExternal.DeleteFolderRecursive(AppCacheDir)
  Endif
  If Not Exist(AppCacheDir) Then
    Mkdir AppCacheDir
  Endif

  If Exist("/tmp" &/ AppName &/ "docs" &/ $SessionCode) Then
    modExternal.DeleteFolderRecursive("/tmp" &/ AppName &/ "docs" &/ $SessionCode)
  Endif
  If Not Exist("/tmp" &/ AppName &/ "docs" &/ $SessionCode) Then
    Mkdir "/tmp" &/ AppName &/ "docs" &/ $SessionCode
  Endif

End

Public Sub CreateUserCacheDir()

  Dim xPath As String

  CreateSessionDir()
  $headerImage = "header.jpg"

  xPath = modSettings.ShowSettingFromFIle("Application/CSSPath")
  If xPath Then
    $AppCssPath = xPath
  Else
    $AppCssPath = modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath & "/css/" & Application.Name & ".css"
  Endif
  ' If Not Exist("/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode &/ "header.jpg") Then
  '   Copy $appetcFolder &/ "header.jpg" To "/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode &/ "header.jpg"
  ' Endif
  ' $headerImage = modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath & "/docs" &/ modHelpVariable.$SessionCode &/ "header.jpg"

End

Public Sub SetAppConfigFile()

  Dim xdebug As String
  Dim xdebDB As String
  Dim xdebugAPI As String
  Dim xdebugmsg As String

  If Exist(modHelpVariable.$appetcConfFile) Then
    modHelpVariable.$SysConfigPath = modHelpVariable.$appetcConfFile
  Else
    modHelpVariable.$SysConfigPath = modHelpVariable.$appetc7zFile
  Endif
  WebForm.PrintLog("Configuration File is " & modHelpVariable.$SysConfigPath)
  ' If MMain.$IsGUIApp = True Then
  '   Print "Configuration File is " & modHelpVariable.$SysConfigPath
  ' Endif

  xdebug = modSettings.ShowSettingFromFIle("GeneralSettings/DebuggingMode_Enable")
  xdebDB = modSettings.ShowSettingFromFIle("GeneralSettings/DebuggingDB_Enable")
  xdebugAPI = modSettings.ShowSettingFromFIle("GeneralSettings/DebuggingAPI_Enable")
  xdebugmsg = modSettings.ShowSettingFromFIle("GeneralSettings/DebuggingMessage_Enable")
  If xdebug = "Yes" Then
    modBasic.$DebugMode = True
  Endif
  If xdebDB = "Yes" Then
    modBasic.$DebugDB = True
  Endif
  If xdebugAPI = "Yes" Then
    modBasic.$DebugAPI = True
  Endif
  If xdebugmsg = "Yes" Then
    modBasic.$DebugMsg = True
  Endif
  MMain.SetApplicationWideSettings()

End

Public Sub SetApplicationGUI()

  Dim sCon As Connection

  If modBasic.$DebugDB = True Then
    db.Debug = True
  Endif
  modHelpVariable.CalenderConnection()
  modHelpVariable.ICDTablesConnection()
  modBasic.LoadGeneralVariables()
  If Exist(modHelpVariable.$appetcFolder &/ "sishrepository.conf.7z") Then
    CreateRepositoryLocal()
  Endif
  CreateLatestLocalDB()

  modSettings.SaveValuesToLog("LogIn/User", modBasic.$lbluser)
  If modBasic.$PatRepoDBase = "mysql" Then
    If Not modDatabase.$myConn.Databases.Exist("repository") Then
      sCon = modDBApp.OpenConnection("mysql", modDatabase.$myConn.Host, "", modDatabase.$myConn.User, modDatabase.$myConn.Password)
      If sCon.Opened = True Then
        sCon.Databases.Add("repository")
        sCon.Close()
      Endif
      sCon = modDBApp.OpenConnection("mysql", modDatabase.$myConn.Host, "repository", modDatabase.$myConn.User, modDatabase.$myConn.Password)
      If sCon.Opened = True Then
        modDBTables.$DbFormat = "REP"
        modDBTables.$DbEngine = "HEAP"
        modDBGroup.CreateDatabaseForSish(sCon)
        modDBTables.$DbFormat = "HIS"
        sCon.Close()
      Endif
    Endif
    modDatabase.$repoConn = modDBApp.OpenConnection("mysql", modDatabase.$myConn.Host, "repository", modDatabase.$myConn.User, modDatabase.$myConn.Password)

  Else
    If Not Exist(modHelpVariable.AppCacheDir &/ "repository") Then
      Copy modHelpVariable.AppDirectory &/ "repository" To modHelpVariable.AppCacheDir &/ "repository"
    Endif
  Endif

  If Not Exist(modHelpVariable.AppCacheDir &/ "current") Then
    Copy modHelpVariable.AppDirectory &/ "current" To modHelpVariable.AppCacheDir &/ "current"
  Endif
  modGeneralMain.SetActiveForms()

  ''new
  modDevice.CamOnStart()
  modAppSupport.RecordSystemLog()
  SetLocalDirectories()
  modGeneralMain.SetAutoCompleteTextArea()
  modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory).Visible = False
  ' modAdvertise.ConnectAdLocalDB()
  If modHelpVariable.$UploadLoginLog = "No" Then
  Else
    modRepository.InsertLogToRemoteServer()
  Endif

End

'NOTE: -------------------------------- General Connection -------------------------------
Public Function GetConfigSettingFIle() As String

  Dim xfile As String
  Dim xCont As String

  xfile = Temp() & ".conf"
  If $SysConfigPath = modHelpVariable.$appetcConfFile Then
    xCont = File.Load(modHelpVariable.$appetcConfFile)
    File.Save(xfile, modReportVar.GetShellScriptValue(xCont))
  Else
    modDevAll.Get7ZExtraction(modHelpVariable.$appetc7zFile, $CryptZip, xfile)
  Endif
  Return xfile

End

Public Sub ReadConfigFile()

  Dim xlogo As String
  Dim xfile As String
  Dim xssl As String
  Dim alogo As String

  Dim xpolice As String
  Dim xformat As String
  Dim xdruginf As String

  xfile = GetConfigSettingFIle()
  $HospitalName = modControlSub.ShowSettingValue(xfile, "Hospital/Hospital")
  $HospitalAddress = modControlSub.ShowSettingValue(xfile, "Hospital/Address")
  $Department = modControlSub.ShowSettingValue(xfile, "Hospital/Department")
  modBasic.$compID = modControlSub.ShowSettingValue(xfile, "Hospital/ComputerID")
  $IRDLevel = modControlSub.ShowSettingValue(xfile, "Hospital/IRDCompliance")
  $VATBill = modControlSub.ShowSettingValue(xfile, "Hospital/VATRegistration")
  $AutoRepoUpload = modControlSub.ShowSettingValue(xfile, "Hospital/AutoRepositoryUpload")
  $AutoImgRepoUpload = modControlSub.ShowSettingValue(xfile, "Hospital/AutoImgRepositoryUpload")
  $RemoteCryptValue = modControlSub.ShowSettingValue(xfile, "Hospital/RepositoryCryptValue")

  $AllowInvoicePDF = modControlSub.ShowSettingValue(xfile, "Hospital/AllowInvoicePDF")
  $AllowInsecureDevice = modControlSub.ShowSettingValue(xfile, "Hospital/AllowInsecureDevice")
  $UploadLoginLog = modControlSub.ShowSettingValue(xfile, "Hospital/UploadLog")
  $DownloadAdvertise = modControlSub.ShowSettingValue(xfile, "Hospital/DownloadAds")

  If MMain.$GovtApp = "Yes" Then
    alogo = "./.public/Nepal.png"
    $HospLogo = CGI["HTTP_REFERER"] &/ "Nepal.png"
  Else
    xlogo = modControlSub.ShowSettingValue(xfile, "Hospital/Logo")
    If xlogo Then
      alogo = xlogo
    Else
      alogo = modHelpVariable.AppDirectory &/ "Logo.JPG"
    Endif
    If Not Exist("/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode &/ File.Name(alogo)) Then
      Copy alogo To "/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode &/ File.Name(alogo)
    Endif
    $HospLogo = modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath & "/docs" &/ modHelpVariable.$SessionCode &/ File.Name(alogo)
  Endif

  xpolice = modControlSub.ShowSettingValue(xfile, "Hospital/PoliceFormat")
  If xpolice = "Yes" Then
    MMain.$IsPolice = True
  Endif
  xformat = modControlSub.ShowSettingValue(xfile, "Hospital/CustomFormat")
  If xformat Then
    MMain.$CustomFormat = xformat
  Endif
  xdruginf = modControlSub.ShowSettingValue(xfile, "Hospital/DrugInformation")
  If xdruginf = "Yes" Then
    MMain.$IsDrugInfo = True
  Endif

  $SysDataBase = modControlSub.ShowSettingValue(xfile, "System/Database")
  $SysCollation = modControlSub.ShowSettingValue(xfile, "System/DBCollation")
  $SysInterface = modControlSub.ShowSettingValue(xfile, "System/NetInterface")
  $SysDisableDate = modControlSub.ShowSettingValue(xfile, "System/DisableDateCheck")
  $SysDisableCharset = modControlSub.ShowSettingValue(xfile, "System/DisableCharSet")
  xssl = modControlSub.ShowSettingValue(xfile, "System/UseOpenSSL")
  If xssl = "Yes" Then
    $SysUseSSL = True
  Else
    $SysUseSSL = False
  Endif
  $SysLockOnDC = modControlSub.ShowSettingValue(xfile, "System/LockOnDisconnect")

  $SysMainService = modControlSub.ShowSettingValue(xfile, "System/Service")
  $SysMainHost = modControlSub.ShowSettingValue(xfile, "System/Host")
  $SysMainUser = modControlSub.ShowSettingValue(xfile, "System/User")
  $SysMainPassword = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "System/Password"), $SysUseSSL)
  $SysMainPort = modControlSub.ShowSettingValue(xfile, "System/Port")

  $SysExtService = modControlSub.ShowSettingValue(xfile, "SystemExtra/Service")
  $SysExtHost = modControlSub.ShowSettingValue(xfile, "SystemExtra/Host")
  $SysExtUser = modControlSub.ShowSettingValue(xfile, "SystemExtra/User")
  $SysExtPass = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "SystemExtra/Password"), $SysUseSSL)
  $SysExtPort = modControlSub.ShowSettingValue(xfile, "SystemExtra/Port")

  $SysFallService = modControlSub.ShowSettingValue(xfile, "SystemFallback/Service")
  $SysFallHost = modControlSub.ShowSettingValue(xfile, "SystemFallback/Host")
  $SysFallUser = modControlSub.ShowSettingValue(xfile, "SystemFallback/User")
  $SysFallPass = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "SystemFallback/Password"), $SysUseSSL)
  $SysFallPort = modControlSub.ShowSettingValue(xfile, "SystemFallback/Port")

  $SysFTPHost = modControlSub.ShowSettingValue(xfile, "LocalFTP/Host")
  $SysFTPFolder = modControlSub.ShowSettingValue(xfile, "LocalFTP/Folder")
  $SysFTPUser = modControlSub.ShowSettingValue(xfile, "LocalFTP/User")
  $SysFTPPass = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "LocalFTP/Password"), $SysUseSSL)
  $SysFTPSSL = modControlSub.ShowSettingValue(xfile, "LocalFTP/EnableSSL")
  $SysFTPCert = modControlSub.ShowSettingValue(xfile, "LocalFTP/Certificate")

  ' Try Kill xfile

End

Public Sub CalenderConnection()

  modDatabase.$calConn = modDBApp.OpenConnection("sqlite3", modHelpVariable.$docsDirectory, "calender", "", "")
  If modDatabase.$calConn.Opened = True Then
    modBasic.DebugString("App connected to calendar sqlite database. Database Driver: " & CStr(modDatabase.$calConn.Version))
  Endif

End

Public Sub ICDTablesConnection()

  modDatabase.$icdConn = modDBApp.OpenConnection("sqlite3", modHelpVariable.$docsDirectory, "icdtables", "", "")
  If modDatabase.$icdConn.Opened = True Then
    modBasic.DebugString("App connected to ICD sqlite database. Database Driver: " & CStr(modDatabase.$icdConn.Version))
  Endif

End

Public Sub ConnectionMain()

  ReadConfigFile()
  $conTarget = modSettings.ShowSettingFromFIle("SISH_Connection/ConnectionType")
  If $conTarget = "Remote" Then
    $DBType = modSettings.ShowSettingFromFIle("SISH_Connection/RemoteService")
    $DBHost = modSettings.ShowSettingFromFIle("SISH_Connection/RemoteHost")
    $DBName = modSettings.ShowSettingFromFIle("SISH_Connection/RemoteDatabase")
    $UserName = UnBase64(modSettings.ShowSettingFromFIle("SISH_Connection/RemoteUser"))
    $UserPassword = UnBase64(modSettings.ShowSettingFromFIle("SISH_Connection/RemotePass"))
    $sPort = modSettings.ShowSettingFromFIle("SISH_Connection/RemotePort")
  Else
    $DBType = $SysMainService
    $DBHost = $SysMainHost
    $DBName = $SysDataBase
    $UserName = $SysMainUser
    $UserPassword = $SysMainPassword
    $sPort = $SysMainPort
  Endif

  If $sPort Then
    modDatabase.$myConn = modDBApp.OpenConnection($DBType, $DBHost, $DBName, $UserName, $UserPassword, $sPort)
  Else
    modDatabase.$myConn = modDBApp.OpenConnection($DBType, $DBHost, $DBName, $UserName, $UserPassword)
  Endif

  If modDatabase.$myConn.Opened = True Then
    modBasic.DebugString("App connected to " & $DBName & " on Main Server at " & $DBHost & " . Database Driver: " & CStr(modDatabase.$myConn.Version))
    ConnectionExtra()
  Else
    If $conTarget = "Remote" Then
    Else
      modBasic.DebugString("Unable to connect " & $DBName & " on Main Server at " & $DBHost & " . Attempting to connect Fallback Server.")
      ConnectionFallBack()
    Endif
  Endif
  ''medical connection
  modDatabase.$medConn = modDatabase.$myConn

End

Private Sub ConnectionFallBack()

  Dim UserName As String
  Dim UserPassword As String
  Dim DBName As String
  Dim DBType As String
  Dim DBHost As String
  Dim sPort As String

  DBName = $SysDataBase
  DBType = $SysFallService
  DBHost = $SysFallHost
  UserName = $SysFallUser
  UserPassword = $SysFallPass
  sPort = $SysFallPort

  If sPort Then
    modDatabase.$myConn = modDBApp.OpenConnection(DBType, DBHost, DBName, UserName, UserPassword, sPort)
  Else
    modDatabase.$myConn = modDBApp.OpenConnection(DBType, DBHost, DBName, UserName, UserPassword)
  Endif

  If modDatabase.$myConn.Opened = True Then
    modBasic.DebugString("App connected to " & DBName & " on Fallback Server at " & DBHost & " . Database Driver: " & CStr(modDatabase.$myConn.Version))
    ConnectionExtra()
  Else
    Message.Error(("Please check network connections") & "<br>" & ("1. Please check network cables.") & "<br>" & ("2. Ping To Server " & modHelpVariable.$SysMainHost), ("OK"))
  Endif

End

Private Sub ConnectionExtra()

  Dim UserName As String
  Dim UserPassword As String
  Dim DBName As String
  Dim DBType As String
  Dim DBHost As String
  Dim sPort As String

  If $conTarget = "Remote" Then
    DBName = $DBName
    DBType = $DBType
    DBHost = $DBHost
    UserName = $UserName
    UserPassword = $UserPassword
    sPort = $sPort
  Else
    DBName = $SysDataBase
    DBType = $SysExtService
    DBHost = $SysExtHost
    UserName = $SysExtUser
    UserPassword = $SysExtPass
    sPort = $SysExtPort
  Endif

  If sPort Then
    modDatabase.$syConn = modDBApp.OpenConnection(DBType, DBHost, DBName, UserName, UserPassword, sPort)
  Else
    modDatabase.$syConn = modDBApp.OpenConnection(DBType, DBHost, DBName, UserName, UserPassword)
  Endif
  If modDatabase.$syConn.Opened = False Then
    modDatabase.$syConn = modDatabase.$myConn
    modBasic.DebugString("Main/Fallback Server used as Read Server")
  Else
    modBasic.DebugString("App connected to " & DBName & " on Read Server at " & DBHost & " . Database Driver: " & CStr(modDatabase.$syConn.Version))
  Endif

End

Public Sub ConnectionDashboard()

  Dim UserName As String
  Dim UserPassword As String
  Dim DBName As String
  Dim DBType As String
  Dim DBHost As String
  Dim sPort As String

  ReadConfigFile()
  DBType = $SysExtService
  If DBType Then
    DBName = $SysDataBase
    DBHost = $SysExtHost
    UserName = $SysExtUser
    UserPassword = $SysExtPass
    sPort = $SysExtPort
  Else
    DBType = $SysMainService
    DBHost = $SysMainHost
    DBName = $SysDataBase
    UserName = $SysMainUser
    UserPassword = $SysMainPassword
    sPort = $SysMainPort
  Endif

  If sPort Then
    modDatabase.$syConn = modDBApp.OpenConnection(DBType, DBHost, DBName, UserName, UserPassword, sPort)
  Else
    modDatabase.$syConn = modDBApp.OpenConnection(DBType, DBHost, DBName, UserName, UserPassword)
  Endif
  If modDatabase.$syConn.Opened = False Then
    modDatabase.$myConn = modDatabase.$syConn
    modBasic.DebugString("Main/Fallback Server used as Read Server")
  Else
    modBasic.DebugString("App connected to " & DBName & " on Read Server at " & DBHost & " . Database Driver: " & CStr(modDatabase.$syConn.Version))
  Endif

End

Private Sub CreateRepositoryLocal()

  Dim sPath As String
  Dim qCon As Connection

  ' If modDatabase.$myConn.Type = "mysql" Then
  '   If Not modDatabase.$myConn.Databases.Exist("repo_" & modDatabase.$myConn.Name) Then
  '     modDatabase.$myConn.Databases.Add("repo_" & modDatabase.$myConn.Name)
  '     Message.Info(("<b>" & "Please wait...." & "</b><br>" & "Creating memory database for Data Repository"), ("OK"))
  '     qCon = modDBApp.OpenConnection("mysql", modDatabase.$myConn.Host, "repo_" & modDatabase.$myConn.Name, modDatabase.$myConn.User, modDatabase.$myConn.Password)
  '     modDBTables.$DbFormat = "REP"
  '     modDBTables.$DbEngine = "HEAP"
  '     modDBGroup.CreateDatabaseForSish(qCon)
  '     Try qCon.Close()
  '   Endif
  '
  ' Else
  sPath = modHelpVariable.AppDirectory &/ "repository"
  If Not Exist(sPath) Then
    modDBApp.CreateSQliteDB(sPath)
    Message.Info(("<b>" & "Please wait...." & "</b><br>" & "Creating local database for Data Repository at ") & sPath, ("OK"))
    qCon = modDBApp.OpenConnection("sqlite3", modHelpVariable.AppDirectory, "repository", "", "")
    modDBTables.$DbFormat = "REP"
    modDBGroup.CreateDatabaseForSish(qCon)
    Try qCon.Close()
  Endif

  ' Endif

End

Private Sub CreateLatestLocalDB()

  Dim sPath As String
  Dim qCon As Connection

  sPath = modHelpVariable.AppDirectory &/ "current"
  If Not Exist(sPath) Then
    modDBApp.CreateSQliteDB(sPath)
    Message.Info(("<b>" & "Please wait...." & "</b><br>" & "Creating local database for current schema ") & sPath, ("OK"))
    qCon = modDBApp.OpenConnection("sqlite3", modHelpVariable.AppDirectory, "current", "", "")
    modDBTables.$DbFormat = "HIS"
    modDBGroup.CreateDatabaseForSish(qCon)
    Try qCon.Close()
  Endif

End

Public Sub ConnectRemoteDiagnostic()

  Dim xfile As String
  Dim xdbname As String
  Dim xservice As String
  Dim xhost As String
  Dim xuser As String
  Dim xpass As String
  Dim xport As String

  xfile = modHelpVariable.GetConfigSettingFIle()
  xdbname = modControlSub.ShowSettingValue(xfile, "BillSource/Database")
  xservice = modControlSub.ShowSettingValue(xfile, "BillSource/Service")
  xhost = modControlSub.ShowSettingValue(xfile, "BillSource/Host")
  xuser = modControlSub.ShowSettingValue(xfile, "BillSource/User")
  xpass = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "BillSource/Password"), False)
  xport = modControlSub.ShowSettingValue(xfile, "BillSource/Port")
  modDatabase.$labConn = modDBApp.OpenConnection(xservice, xhost, xdbname, xuser, xpass, xport)

End

Public Sub ConnectRemotePharmacy()

  Dim xfile As String
  Dim xdbname As String
  Dim xservice As String
  Dim xhost As String
  Dim xuser As String
  Dim xpass As String
  Dim xport As String

  xfile = modHelpVariable.GetConfigSettingFIle()
  xdbname = modControlSub.ShowSettingValue(xfile, "PharmSource/Database")
  xservice = modControlSub.ShowSettingValue(xfile, "PharmSource/Service")
  xhost = modControlSub.ShowSettingValue(xfile, "PharmSource/Host")
  xuser = modControlSub.ShowSettingValue(xfile, "PharmSource/User")
  xpass = modPassword.DecryptDBPass(modControlSub.ShowSettingValue(xfile, "PharmSource/Password"), False)
  xport = modControlSub.ShowSettingValue(xfile, "PharmSource/Port")
  modDatabase.$pharmConn = modDBApp.OpenConnection(xservice, xhost, xdbname, xuser, xpass, xport)

End

'NOTE: ------------------------------------- Create error file -----------------------------------
Public Sub CreateErrorReport()

  Dim xmsg1 As String
  Dim xmsg2 As String

  If Error.Text Then
    xmsg1 = "TRANSACTION-ERROR: " & Error.Text & " [" & Error.Where & "]"
    modBasic.DebugString(xmsg1)
  Endif
  If db.Current Then
    If db.Error Then
      xmsg2 = "TRANSACTION-ERROR: Code-" & db.Error & " : " & Error.Text & " [" & Error.Where & "]"
      modBasic.DebugString(xmsg2)
    Endif
  Endif

  If modBasic.$DebugMsg = True Then
    If MMain.$IsGUIApp = True Then
      Message.Warning(xmsg1 & "<br>" & xmsg2)
    Endif
  Endif

End

Public Function GetCollectionValue(sColl As Collection, sKey As String, sParam As String) As Variant

  Dim xx As Variant

  If $conTarget = "Remote" Then
  Else
    If sParam = "Yes" Then
      If sColl Then
        If sColl.Count > 0 Then
          xx = sColl[sKey]
        Endif
      Endif
    Endif
  Endif
  Return xx

End

''ONLY FOR IRD COMPLIANCE
Public Sub RecordIRDActivity(sCon As Connection, sCategory As String, frm As String, sActivity As String, sComment As String)

  Dim res As Result
  Dim xusr As String

  If modBasic.$lbluser Then
    Try xusr = modBasic.$lbluser
  Else
    xusr = ""
  Endif

  res = sCon.Create("tblirdactivity")
  res["fldfrmname"] = frm
  res["fldcategory"] = sCategory
  res["fldactivity"] = sActivity
  res["fldcomment"] = sComment
  res["flduserid"] = xusr
  res["fldtime"] = Now()
  res["fldcomp"] = modBasic.$compID
  res["fldsave"] = True
  res["fldhostmac"] = CGI["REMOTE_ADDR"] & ":" & CGI["REMOTE_PORT"]
  res.Update

End

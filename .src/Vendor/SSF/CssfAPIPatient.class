' Gambas class file

Private $xAuthString As String
Private $HeadString As String

Private $PatUUID As String
Private $PatCode As String
Private $PatName As String
Private $PatSurName As String
Private $PatGender As String
Private $PatContact As String
Private $PatEmail As String
Private $PatDOB As Date
Private $PatDistrict As String
Private $ParWardNo As String
Private $PatMunicipal As String
Private $PatImagePath As String

Private Sub SetAuthentication()

  If modBasic.$SSFQuote = "Yes" Then
    $xAuthString = "'" & modBasic.$SSFUser & ":" & modBasic.$SSFPass & "'"
  Else
    $xAuthString = modBasic.$SSFUser & ":" & modBasic.$SSFPass
  Endif
  $HeadString = "remote-user:" & modBasic.$SSFRemoUser

End

Public Sub _new(sPatcode As String)

  $PatCode = sPatcode
  GetSSFPatientDetails()

End

''--------------------------- Patient URL ------------------------
Private Function GetPatientDetailSSF(sPatCode As String) As Variant

  Dim acmd As String
  Dim xurl As String
  Dim xpatout As String
  Dim xResColl As Collection
  Dim xVarPat As Variant[]
  Dim xhead As String

  SetAuthentication()
  xurl = modBasic.$SSFPatientURL &/ "?identifier=" & sPatCode

  xhead = Space(1)
  If modBasic.$SSFCACert = "Disable" Then
    xhead = xhead & "-k" & Space(1)
  Endif
  If modBasic.$SSFUserAgent Then
    xhead = xhead & "-A " & modBasic.$SSFUserAgent & Space(1)
  Endif

  acmd = "curl" & xhead & "-u " & $xAuthString & " -H " & Quote($HeadString) & " -X GET " & xurl
  modBasic.DebugAPIString(Replace("Execute " & acmd, $xAuthString, "****"))
  Shell acmd To xpatout
  modBasic.DebugAPIString("Response: " & xpatout)

  If xpatout Then
    Try xResColl = JSON.Decode(xpatout)
    If xResColl Then
      xVarPat = xResColl["entry"]
      Return xVarPat
    Else
      Message.Warning("Error in getting data", "OK")
    Endif
  Else
    Message.Warning("No Response from server", "OK")
  Endif

End

Private Sub GetSSFPatientDetails()

  Dim xVarPat As Variant[]
  Dim xPatNames As Variant[]
  Dim xPatConts As Variant[]
  Dim xcont As Variant
  Dim ximage As String
  Dim asx As String[]

  Dim xgender As String
  Dim xname As String
  Dim xsurname As String
  Dim xdateob As String
  Dim xaddall As String
  Dim aStr As String[]
  Dim bStr As String[]

  xVarPat = GetPatientDetailSSF($PatCode)
  If xVarPat Then
    $PatUUID = xVarPat[0]["resource"]["id"]

    xdateob = xVarPat[0]["resource"]["birthDate"]
    If xdateob Then
      $PatDOB = modDate.GetDateFromJSON(xdateob)
    Endif

    xgender = xVarPat[0]["resource"]["gender"]
    If xgender Then
      $PatGender = String.UCaseFirst(xgender)
    Endif

    xPatNames = xVarPat[0]["resource"]["name"]
    xname = xPatNames[0]["given"][0]
    If xname Then
      $PatName = String.UCaseFirst(xname)
    Endif
    xsurname = xPatNames[0]["family"]
    If xsurname Then
      $PatSurName = String.UCaseFirst(xsurname)
    Endif

    xPatConts = xVarPat[0]["resource"]["telecom"]
    If xPatConts Then
      For Each xcont In xPatConts
        If xcont["system"] = "phone" Then
          $PatContact = xcont["value"]
          Break
        Endif
        If xcont["system"] = "email" Then
          $PatEmail = xcont["value"]
          Break
        Endif
      Next
    Endif

    xaddall = xVarPat[0]["resource"]["address"][0]["text"]
    If xaddall Then
      aStr = Split(xaddall, ",")
      If aStr.Count > 2 Then
        $PatDistrict = Trim(aStr[2])
        bStr = Split(aStr[1], "-")
        If bStr.Count > 1 Then
          $ParWardNo = Trim(bStr[1])
          $PatMunicipal = Trim(Replace(bStr[0], "Municipality", ""))
        Endif
      Endif
    Endif

    Try ximage = xVarPat[0]["resource"]["photo"][0]["url"]
    If ximage Then
      asx = Split(ximage, "\\")
      If asx And If asx.Count > 2 Then
        $PatImagePath = asx[2]
      Endif
    Endif

  Else
    Message.Warning("Error in Decoding data", "OK")
  Endif

End

Public Function GetPatientUUID() As String

  Return $PatUUID

End

Public Function GetPatientName() As String

  Return $PatName

End

Public Function GetPatientSurName() As String

  Return $PatSurName

End

Public Function GetPatientGender() As String

  Return $PatGender

End

Public Function GetPatientContact() As String

  Return $PatContact

End

Public Function GetPatientEmail() As String

  Return $PatEmail

End

Public Function GetPatientDateBirth() As Date

  Return $PatDOB

End

Public Function GetPatientImagePath() As String

  Return $PatImagePath

End

Public Function GetPatientMunicipality() As String

  Return $PatMunicipal

End

Public Function GetPatientWardNo() As String

  Return $ParWardNo

End

Public Function GetPatientDistrict() As String

  Return $PatDistrict

End

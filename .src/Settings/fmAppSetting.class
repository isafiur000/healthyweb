' Gambas class file

Public Sub _new()

  ''userwise
  cmbmedview.List = ["ComboBox", "GridView"]
  GeneralSetting()

End

Public Sub IconPanel1_Click()

  If IconPanel1.Index = 0 Then
    GeneralSetting()
    cmbbothside.List = ["Yes", "No"]
    ShowOptionSettings()
  Else If IconPanel1.Index = 1 Then
    SetApplicationSettings()
  Else If IconPanel1.Index = 2 Then
    cmbarformat.List = BarCodeFormats()
    cmbartext.List = ["Yes", "No"]
    ShowBarcodeSetting()
  Else If IconPanel1.Index = 3 Then
    ShowFTPParameter()
    SHowSMTPClient()
  Else If IconPanel1.Index = 4 Then
    cmbpacname.List = modMisc.PACSList()
    cmbpacsfind.List = ["dcmtk", "Dicomweb", "Orthanc"]
    cmbpacsget.List = ["dcmtk", "Dicomweb", "Orthanc"]
    cmbpacsssl.List = ["Enable", "Disable"]
    ' cmbdicomdesk.List = ["aeskulap", "ginkgocadx", "/opt/weasis/bin/Weasis"]
    cmbdicomweb.List = ["osimis-viewer", "web-viewer", "dwv-plugin"]
    DicomViewSetting()
  Else If IconPanel1.Index = 5 Then
    cmbsmsmode.List = ["GSM Modem", "SMS API", "KDEConnect"]
    ShowDefaultModem()
  Else If IconPanel1.Index = 6 Then
    cmbimiscert.List = ["Enable", "Disable"]
    cmbimisquote.List = ["Yes", "No"]
    cmbclaimicdform.List = ["ICD10", "ICD11"]
    cmbautodoc.List = ["Enable", "AutoScan", "AutoDocs", "AddDocs", "Disable"]
    cmbautoclaim.List = ["Consultation", "None"]
    ShowClaimParam()
    ShowIMISParam()
  Else If IconPanel1.Index = 7 Then
    cmbssfcert.List = ["Enable", "Disable"]
    cmbssfquote.List = ["Yes", "No"]
    cmbssficdformat.List = ["ICD10", "ICD11"]
    cmbssflock.List = ["Enable", "Disable"]
    ShowSSFundParam()
  Endif

End

''------------------------------ User Wise ---------------------
Private Sub GeneralSetting()

  cmbmedview.Text = modSettings.ShowSettingFromVar("AppSetting/ItemView")

  If modSettings.ShowSettingFromVar("AppSetting_DataViewEvenRowBackColor/" & modBasic.$lbluser) Then
    txtevenbackcolor.Tag = CInt(modSettings.ShowSettingFromVar("AppSetting_DataViewEvenRowBackColor/" & modBasic.$lbluser))
  Endif
  If modSettings.ShowSettingFromVar("AppSetting_DataViewEvenRowForeColor/" & modBasic.$lbluser) Then
    txtevenforecolor.Tag = CInt(modSettings.ShowSettingFromVar("AppSetting_DataViewEvenRowForeColor/" & modBasic.$lbluser))
  Endif
  If modSettings.ShowSettingFromVar("AppSetting_DataViewOddRowBackColor/" & modBasic.$lbluser) Then
    txtoddbackcolor.Tag = CInt(modSettings.ShowSettingFromVar("AppSetting_DataViewOddRowBackColor/" & modBasic.$lbluser))
  Endif
  If modSettings.ShowSettingFromVar("AppSetting_DataViewOddRowForeColor/" & modBasic.$lbluser) Then
    txtoddforecolor.Tag = CInt(modSettings.ShowSettingFromVar("AppSetting_DataViewOddRowForeColor/" & modBasic.$lbluser))
  Endif

End

Public Sub btnmedview_Click()

  modSettings.SaveSettingsToVar("AppSetting/ItemView", cmbmedview.Text)
  modBasic.$ItemListFormat = cmbmedview.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnevenbackcolor_Click()

  modSettings.SaveSettingsToVar("AppSetting_DataViewEvenRowBackColor/" & modBasic.$lbluser, txtevenbackcolor.Tag)
  modBasic.$DataEvenBackColor = txtevenbackcolor.Tag
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnevenforecolor_Click()

  modSettings.SaveSettingsToVar("AppSetting_DataViewEvenRowForeColor/" & modBasic.$lbluser, txtevenforecolor.Tag)
  modBasic.$DataEvenForeColor = txtevenforecolor.Tag
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnoddbackcolor_Click()

  modSettings.SaveSettingsToVar("AppSetting_DataViewOddRowBackColor/" & modBasic.$lbluser, txtoddbackcolor.Tag)
  modBasic.$DataOddBackColor = txtoddbackcolor.Tag
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnoddforecolor_Click()

  modSettings.SaveSettingsToVar("AppSetting_DataViewOddRowForeColor/" & modBasic.$lbluser, txtoddforecolor.Tag)
  modBasic.$DataOddForeColor = txtoddforecolor.Tag
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

''------------------------- General -------------------------------------
Private Sub ShowOptionSettings()

  cmbbothside.Text = modSettings.ShowSettingFromFIle("GeneralSettings/GridViewSearch")
  modSettings.ShowCheckBox(cmbtablet, "GeneralSettings/EnableTabletMode")

End

Public Sub btnbothside_Click()

  modSettings.SaveSettingsToFile("GeneralSettings/GridViewSearch", cmbbothside.Text)
  modBasic.$SearchBothSide = cmbbothside.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btntablet_Click()

  modSettings.EnterCheckSetting(cmbtablet, "GeneralSettings/EnableTabletMode")
  If cmbtablet.Value = True Then
    modBasic.$TabletModeEnable = "Yes"
  Else If cmbtablet.Value = False Then
    modBasic.$TabletModeEnable = "No"
  Endif
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

''================== Application ===================
Private Sub SetApplicationSettings()

  modSettings.ShowCheckBox(chkdebugmsg, "GeneralSettings/DebuggingMessage_Enable")

End

Public Sub btndebugmsg_Click()

  modSettings.EnterCheckSetting(chkdebugmsg, "GeneralSettings/DebuggingMessage_Enable")
  modBasic.$DebugMsg = chkdebugmsg.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

''----------------------------------- Bar Code -------------------------------------
Private Function BarCodeFormats() As String[]

  Dim xfile As String
  Dim xlist As String[]

  xfile = modHelpVariable.$localesDirectory &/ "zint"
  If Exist(xfile) Then
    xlist = modString.GetSelStringFieldFromCSV(xfile, 1, ";")
  Endif
  Return xlist

End

Private Sub ShowBarcodeSetting()

  cmbarformat.Text = modSettings.ShowSettingFromFIle("BarCodeFormat/FormatString")
  cmbartext.Text = modSettings.ShowSettingFromFIle("BarCodeFormat/DisplayText")

  If modSettings.ShowSettingFromFIle("BarCodeFormat/Width") Then
    txtbarscale.Value = CFloat(modSettings.ShowSettingFromFIle("BarCodeFormat/Width"))
  Endif
  If modSettings.ShowSettingFromFIle("BarCodeFormat/ForeGround") Then
    colbarfore.Value = CInt(modSettings.ShowSettingFromFIle("BarCodeFormat/ForeGround"))
  Endif
  If modSettings.ShowSettingFromFIle("BarCodeFormat/BackGround") Then
    colbarback.Value = CInt(modSettings.ShowSettingFromFIle("BarCodeFormat/BackGround"))
  Endif
  If modSettings.ShowSettingFromFIle("BarCodeFormat/WhiteSpace") Then
    txtbarwhite.Value = CInt(modSettings.ShowSettingFromFIle("BarCodeFormat/WhiteSpace"))
  Endif

  If modSettings.ShowSettingFromFIle("BarCodeFormat/PixelSize") Then
    txtbarpixel.Value = CInt(modSettings.ShowSettingFromFIle("BarCodeFormat/PixelSize"))
  Endif
  If modSettings.ShowSettingFromFIle("BarCodeFormat/ImageDPI") Then
    txtbardpi.Value = CInt(modSettings.ShowSettingFromFIle("BarCodeFormat/ImageDPI"))
  Endif
  If modSettings.ShowSettingFromFIle("BarCodeFormat/MarginWidth") Then
    txtbarmargin.Value = CInt(modSettings.ShowSettingFromFIle("BarCodeFormat/MarginWidth"))
  Endif

End

Public Sub btnbarformat_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/FormatString", cmbarformat.Text)
  modBasic.$BarCodeFormatString = cmbarformat.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbarwidth_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/Width", CStr(txtbarscale.Value))
  modBasic.$BarCodeWidth = txtbarscale.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbarfore_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/ForeGround", colbarfore.Value)
  modBasic.$BarCodeForeGround = colbarfore.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbarback_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/BackGround", colbarback.Value)
  modBasic.$BarCodeBackGround = colbarback.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbartext_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/DisplayText", cmbartext.Text)
  modBasic.$BarCodeDisplayText = cmbartext.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbarwhite_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/WhiteSpace", CStr(txtbarwhite.Value))
  modBasic.$BarCodeWhiteSpace = txtbarwhite.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbarpixel_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/PixelSize", CStr(txtbarpixel.Value))
  modBasic.$BarCodePixelSize = txtbarpixel.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbardpi_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/ImageDPI", CStr(txtbardpi.Value))
  modBasic.$BarCodeImageDPI = txtbardpi.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnbarmargin_Click()

  modSettings.SaveSettingsToFile("BarCodeFormat/MarginWidth", CStr(txtbarmargin.Value))
  modBasic.$BarCodeMarginWidth = txtbarmargin.Value
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

'''---------------------------------- FTP --------------------------------------------------------------
Private Sub ShowFTPParameter()

  txtftphost.Text = modSettings.ShowSettingFromFIle("RemoteFTP/HostName")
  txtftpfolder.Text = modSettings.ShowSettingFromFIle("RemoteFTP/FTPFolder")
  If modSettings.ShowSettingFromFIle("RemoteFTP/UserName") Then
    txtftpuser.Text = UnBase64(modSettings.ShowSettingFromFIle("RemoteFTP/UserName"))
  Endif
  If modSettings.ShowSettingFromFIle("RemoteFTP/PassWord") Then
    txtftppass.Text = UnBase64(modSettings.ShowSettingFromFIle("RemoteFTP/PassWord"))
  Endif

End

Public Sub btnftphost_Click()

  modSettings.SaveSettingsToFile("RemoteFTP/HostName", txtftphost.Text)
  modBasic.$RepoManHost = txtftphost.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnftpfolder_Click()

  modSettings.SaveSettingsToFile("RemoteFTP/FTPFolder", txtftpfolder.Text)
  modBasic.$RepoManFolder = txtftpfolder.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnftpuser_Click()

  If txtftpuser.Text Then
    modSettings.SaveSettingsToFile("RemoteFTP/UserName", Base64(txtftpuser.Text))
    modBasic.$RepoManUser = txtftpuser.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnftppass_Click()

  If txtftppass.Text Then
    modSettings.SaveSettingsToFile("RemoteFTP/PassWord", Base64(txtftppass.Text))
    modBasic.$RepoManPass = txtftppass.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

''------------------------------------- SMTP Client ---------------------------
Private Sub SHowSMTPClient()

  txtsmtphost.Text = modSettings.ShowSettingFromFIle("SMTPEmail/HostName")
  txtsmtpuser.Text = modSettings.ShowSettingFromFIle("SMTPEmail/UserName")
  If modSettings.ShowSettingFromFIle("SMTPEmail/PassWord") Then
    txtsmtppass.Text = UnBase64(modSettings.ShowSettingFromFIle("SMTPEmail/PassWord"))
  Endif
  txtsmtpfrom.Text = modSettings.ShowSettingFromFIle("SMTPEmail/SenderName")

End

Public Sub btnsmtphost_Click()

  modSettings.SaveSettingsToFile("SMTPEmail/HostName", txtsmtphost.Text)
  modBasic.$emailSMTPHost = txtsmtphost.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnsmtpuser_Click()

  modSettings.SaveSettingsToFile("SMTPEmail/UserName", txtsmtpuser.Text)
  modBasic.$emailSMTPUser = txtsmtpuser.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnsmtppass_Click()

  If txtsmtppass.Text Then
    modSettings.SaveSettingsToFile("SMTPEmail/PassWord", Base64(txtsmtppass.Text))
    modBasic.$emailSMTPPass = txtsmtppass.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnsmtpfrom_Click()

  modSettings.SaveSettingsToFile("SMTPEmail/SenderName", txtsmtpfrom.Text)
  modBasic.$emailSMTPFrom = txtsmtpfrom.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  'Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btncertdown_Click()

  Exec ["wget", "http://curl.haxx.se/ca/cacert.pem"] Wait
  Message.Info("Copy " & User.Home &/ "/html/docs" &/ "cacert.pem" & " To " & modHelpVariable.$appetcFolder, ("OK"))

End

''========================================
Public Sub btnshowpacs_Click()

  If cmbpacname.Text Then
    ShowPacsConfiguration(cmbpacname.Text)
  Endif

End

Public Sub cmbpacname_Select()

  If cmbpacname.Text Then
    ShowPacsConfiguration(cmbpacname.Text)
  Endif

End

Private Sub ShowPacsConfiguration(sServer As String)

  txtpacshost.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "HostName")
  cmbpacsfind.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "FindCommand")
  cmbpacsget.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "GetCommand")
  cmbpacsssl.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "UseSSL")
  txtpacsAET.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "AETitle")
  txtpacsport.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "Port")

  txtorthancport.Text = modSettings.ShowSettingFromFIle(sServer & "/" & "HTTPPort")
  If modSettings.ShowSettingFromFIle(sServer & "/" & "HTTPUser") Then
    txtpacsuser.Text = UnBase64(modSettings.ShowSettingFromFIle(sServer & "/" & "HTTPUser"))
  Endif
  If modSettings.ShowSettingFromFIle(sServer & "/" & "HTTPPass") Then
    txtpacspass.Text = UnBase64(modSettings.ShowSettingFromFIle(sServer & "/" & "HTTPPass"))
  Endif

End

Public Sub btnpacshost_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "HostName", txtpacshost.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnpacsfind_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "FindCommand", cmbpacsfind.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnpacsget_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "GetCommand", cmbpacsget.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnpacsssl_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "UseSSL", cmbpacsssl.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnpacsaet_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "AETitle", txtpacsAET.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnpacsport_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "Port", txtpacsport.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnorthancport_Click()

  If cmbpacname.Text Then
    modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "HTTPPort", txtorthancport.Text)
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    'Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnpacsuser_Click()

  If cmbpacname.Text Then
    If txtpacsuser.Text Then
      modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "HTTPUser", Base64(txtpacsuser.Text))
      Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
      'Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub btnpacspass_Click()

  If cmbpacname.Text Then
    If txtpacspass.Text Then
      modSettings.SaveSettingsToFile(cmbpacname.Text & "/" & "HTTPPass", Base64(txtpacspass.Text))
      Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
      'Balloon.Delay = modBasic.$BalloonDelay
    Endif
  Endif

End

Public Sub btnpacsupload_Click()

  Dim xxx As String

  If txtpacshost.Text Then
    If txtpacsupload.Text Then
      xxx = modPACS.UploadDicomArchive(txtpacshost.Text, txtorthancport.Text, txtpacsupload.Text, txtpacsuser.Text, txtpacspass.Text, cmbpacsssl.Text)
    Endif
  Endif

End

''============= viewer ----------------------
Private Sub DicomViewSetting()

  ' cmbdicomdesk.Text = modSettings.ShowSettingFromFIle("DicomViewer/Default")
  cmbdicomweb.Text = modSettings.ShowSettingFromFIle("DicomWebViewer/Default")

End

Public Sub btndicomdesk_Click()

  modSettings.SaveSettingsToFile("DicomWebViewer/Default", cmbdicomweb.Text)
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' 'Balloon.Delay = modBasic.$BalloonDelay

End

' Public Sub btndicom_Click()
'
'   If cmbdicomdesk.Text Then
'     If System.Exist(cmbdicomdesk.Text) Then
'     Else
'       modApplSub.InstallSelectedApplication([cmbdicomdesk.Text])
'     Endif
'   Endif
'   modSettings.SaveSettingsToFile("DicomViewer/Default", cmbdicomdesk.Text)
'   Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
'   'Balloon.Delay = modBasic.$BalloonDelay
'
' End

''================= SMS Settings ===================
Private Sub ShowDefaultModem()

  cmbsmsmode.Text = modSettings.ShowSettingFromFIle("SMSMethod/Default")
  txtapipath.Text = modSettings.ShowSettingFromFIle("SMS_API/DefaultPath")
  txtapiexec.Text = modSettings.ShowSettingFromFIle("SMS_API/DefaultExec")
  cmbkdedevice.Text = modSettings.ShowSettingFromFIle("KDEConnect/DefaultPath")

End

Public Sub btnsmsmode_Click()

  modSettings.SaveSettingsToFile("SMSMethod/Default", cmbsmsmode.Text)
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnkdedefault_Click()

  modSettings.SaveSettingsToFile("KDEConnect/DefaultPath", cmbkdedevice.Text)
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnkderefresh_Click()

  cmbkdedevice.List = modDevice.KDEConnDeviceList()

End

Public Sub btnapipath_Click()

  modSettings.SaveSettingsToFile("SMS_API/DefaultPath", txtapipath.Text)
  modSettings.SaveSettingsToFile("SMS_API/DefaultExec", txtapiexec.Text)
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnapihelp_Click()

  Dim xx As String

  xx = "Script file should contain " & "{SMSPhoneNumber}" & " for Phone Number"
  xx = xx & "<br>" & "Script file should contain " & "{SMSMessage}" & " for SMS Message"
  Message.Info(xx, ("OK"))

End

Public Sub btnsendall_Click()

  Dim xList As String[]

  xList = modAppSupport.SendSMSData()
  txtsmsnow.Text = xList.Join(";")

End

Public Sub btnquerefresh_Click()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select count(fldid) as col from tblsmslog where fldstatus=&1", "Waiting")
  If res.Available Then
    txtquesms.Value = res["col"]
  Endif

End

''=================== Claim Doc ===========================
Private Sub ShowClaimParam()

  If modSettings.ShowSettingFromFIle("InsuranceClaim/UserName") Then
    txtclaimuser.Text = UnBase64(modSettings.ShowSettingFromFIle("InsuranceClaim/UserName"))
  Endif
  If modSettings.ShowSettingFromFIle("InsuranceClaim/PassWord") Then
    txtclaimpass.Text = UnBase64(modSettings.ShowSettingFromFIle("InsuranceClaim/PassWord"))
  Endif

  txtcheckurl.Text = modSettings.ShowSettingFromFIle("InsuranceClaim/CheckURL")
  txtsaveurl.Text = modSettings.ShowSettingFromFIle("InsuranceClaim/SaveURL")
  txtloadurl.Text = modSettings.ShowSettingFromFIle("InsuranceClaim/UploadLoadURL")
  cmbautodoc.Text = modSettings.ShowSettingFromFIle("InsuranceClaim/AutoUpload")

End

Public Sub lnkcheckurl_Click()

  txtcheckurl.Text = "https://claimdoc.hib.gov.np:443/user/check.php"

End

Public Sub lnksaveurl_Click()

  txtsaveurl.Text = "https://claimdoc.hib.gov.np:443/claim/create.php"

End

Public Sub lnkloadurl_Click()

  txtloadurl.Text = "https://claimdoc.hib.gov.np:443/claim/upload.php"

End

Public Sub btnclaimuser_Click()

  If txtclaimuser.Text Then
    modSettings.SaveSettingsToFile("InsuranceClaim/UserName", Base64(txtclaimuser.Text))
    modBasic.$ClaimUser = txtclaimuser.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnclaimpass_Click()

  If txtclaimpass.Text Then
    modSettings.SaveSettingsToFile("InsuranceClaim/PassWord", Base64(txtclaimpass.Text))
    modBasic.$ClaimPass = txtclaimpass.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btncheckurl_Click()

  modSettings.SaveSettingsToFile("InsuranceClaim/CheckURL", txtcheckurl.Text)
  modBasic.$ClaimCheckURL = txtcheckurl.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnsaveurl_Click()

  modSettings.SaveSettingsToFile("InsuranceClaim/SaveURL", txtsaveurl.Text)
  modBasic.$ClaimSaveURL = txtsaveurl.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnloadurl_Click()

  modSettings.SaveSettingsToFile("InsuranceClaim/UploadLoadURL", txtloadurl.Text)
  modBasic.$ClaimLoadURL = txtloadurl.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnautodocs_Click()

  modSettings.SaveSettingsToFile("InsuranceClaim/AutoUpload", cmbautodoc.Text)
  modBasic.$ClaimAutoDocs = cmbautodoc.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

''============================= IMIS Parameters ===================
Private Sub ShowIMISParam()

  If modSettings.ShowSettingFromFIle("InsuranceMain/UserName") Then
    txtimisuser.Text = UnBase64(modSettings.ShowSettingFromFIle("InsuranceMain/UserName"))
  Endif
  If modSettings.ShowSettingFromFIle("InsuranceMain/Password") Then
    txtimispass.Text = UnBase64(modSettings.ShowSettingFromFIle("InsuranceMain/Password"))
  Endif
  If modSettings.ShowSettingFromFIle("InsuranceMain/RemoteUser") Then
    txtremouser.Text = UnBase64(modSettings.ShowSettingFromFIle("InsuranceMain/RemoteUser"))
  Endif

  txtimispatURL.Text = modSettings.ShowSettingFromFIle("InsuranceMain/PatientURL")
  txtimiseligURL.Text = modSettings.ShowSettingFromFIle("InsuranceMain/EligibleURL")
  txtimisrequesturl.Text = modSettings.ShowSettingFromFIle("InsuranceMain/ClaimURL")
  txtimisvalidateurl.Text = modSettings.ShowSettingFromFIle("InsuranceMain/ValidationURL")

  txtimishospuu.Text = modSettings.ShowSettingFromFIle("InsuranceMain/HospitalUUID")
  txtimisadminuu.Text = modSettings.ShowSettingFromFIle("InsuranceMain/ClaimAdminUUID")
  cmbimiscert.Text = modSettings.ShowSettingFromFIle("InsuranceMain/CACertificate")
  cmbimisquote.Text = modSettings.ShowSettingFromFIle("InsuranceMain/QuotePass")
  cmbclaimicdform.Text = modSettings.ShowSettingFromFIle("InsuranceMain/ICDFormat")
  txtimisagent.Text = modSettings.ShowSettingFromFIle("InsuranceMain/UserAgent")
  cmbautoclaim.Text = modSettings.ShowSettingFromFIle("InsuranceMain/AutoClaim")

End

Public Sub lnkimispatURL_Click()

  txtimispatURL.Text = "https://imis.hib.gov.np/api/api_fhir/Patient/"

End

Public Sub lnkimiseligURL_Click()

  txtimiseligURL.Text = "https://imis.hib.gov.np/api/api_fhir/EligibilityRequest/"

End

Public Sub lnkimisrequesturl_Click()

  txtimisrequesturl.Text = "https://imis.hib.gov.np/api/api_fhir/Claim/"

End

Public Sub lnkimisvalidurl_Click()

  txtimisvalidateurl.Text = "https://imis.hib.gov.np/api/api_fhir/cap-validation"

End

Public Sub btnclaimicdform_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/ICDFormat", cmbclaimicdform.Text)
  modBasic.$IMISICDForm = cmbclaimicdform.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimisuser_Click()

  If txtimisuser.Text Then
    modSettings.SaveSettingsToFile("InsuranceMain/UserName", Base64(txtimisuser.Text))
    modBasic.$IMISUser = txtimisuser.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnimispass_Click()

  If txtimispass.Text Then
    modSettings.SaveSettingsToFile("InsuranceMain/Password", Base64(txtimispass.Text))
    modBasic.$IMISPass = txtimispass.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnimisremouser_Click()

  If txtremouser.Text Then
    modSettings.SaveSettingsToFile("InsuranceMain/RemoteUser", Base64(txtremouser.Text))
    modBasic.$IMISRemoUser = txtremouser.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnimispaturl_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/PatientURL", txtimispatURL.Text)
  modBasic.$IMISPatientURL = txtimispatURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimiseligURL_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/EligibleURL", txtimiseligURL.Text)
  modBasic.$IMISEligibleURL = txtimiseligURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimisrequrl_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/ClaimURL", txtimisrequesturl.Text)
  modBasic.$IMISClaimURL = txtimisrequesturl.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimisvalidurl_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/ValidationURL", txtimisvalidateurl.Text)
  modBasic.$IMISValidateURL = txtimisvalidateurl.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimishodpuu_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/HospitalUUID", txtimishospuu.Text)
  modBasic.$IMISHospUUID = txtimishospuu.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimisadminuu_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/ClaimAdminUUID", txtimisadminuu.Text)
  modBasic.$IMISAdminUUID = txtimisadminuu.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimiscert_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/CACertificate", cmbimiscert.Text)
  modBasic.$IMISCACert = cmbimiscert.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimisquote_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/QuotePass", cmbimisquote.Text)
  modBasic.$IMISQuote = cmbimisquote.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnimisagent_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/UserAgent", txtimisagent.Text)
  modBasic.$IMISAgent = txtimisagent.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnautoclaim_Click()

  modSettings.SaveSettingsToFile("InsuranceMain/AutoClaim", cmbautoclaim.Text)
  modBasic.$IMISAutoClaim = cmbautoclaim.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

''============================= SSF Parameters ===================
Private Sub ShowSSFundParam()

  If modSettings.ShowSettingFromFIle("SocialSecurityFund/UserName") Then
    txtssfuser.Text = UnBase64(modSettings.ShowSettingFromFIle("SocialSecurityFund/UserName"))
  Endif
  If modSettings.ShowSettingFromFIle("SocialSecurityFund/Password") Then
    txtssfpass.Text = UnBase64(modSettings.ShowSettingFromFIle("SocialSecurityFund/Password"))
  Endif
  If modSettings.ShowSettingFromFIle("SocialSecurityFund/RemoteUser") Then
    txtssfremouser.Text = UnBase64(modSettings.ShowSettingFromFIle("SocialSecurityFund/RemoteUser"))
  Endif

  txtssfpatURL.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/PatientURL")
  txtssfeligURL.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/EligibleURL")
  txtssfrequesturl.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/ClaimURL")
  txtssfimgURL.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/ImageURL")
  txtssfeplURL.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/EmployerURL")
  txtssffileURL.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/AttachmentURL")
  txtssfbookURL.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/BookingURL")

  txtssfhospuu.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/HospitalUUID")
  txtssfadminuu.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/ClaimAdminUUID")
  txtssfpractrole.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/PractRole")
  cmbssfcert.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/CACertificate")
  cmbssfquote.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/QuotePass")
  cmbssficdformat.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/ICDFormat")
  cmbssflock.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/BookingLock")
  txtssfagent.Text = modSettings.ShowSettingFromFIle("SocialSecurityFund/UserAgent")

End

Public Sub btnssfuser_Click()

  If txtssfuser.Text Then
    modSettings.SaveSettingsToFile("SocialSecurityFund/UserName", Base64(txtssfuser.Text))
    modBasic.$SSFUser = txtssfuser.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnssfpass_Click()

  If txtssfpass.Text Then
    modSettings.SaveSettingsToFile("SocialSecurityFund/Password", Base64(txtssfpass.Text))
    modBasic.$SSFPass = txtssfpass.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnssfremouser_Click()

  If txtssfremouser.Text Then
    modSettings.SaveSettingsToFile("SocialSecurityFund/RemoteUser", Base64(txtssfremouser.Text))
    modBasic.$SSFRemoUser = txtssfremouser.Text
    Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
    ' Balloon.Delay = modBasic.$BalloonDelay
  Endif

End

Public Sub btnssfpaturl_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/PatientURL", txtssfpatURL.Text)
  modBasic.$SSFPatientURL = txtssfpatURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfeligURL_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/EligibleURL", txtssfeligURL.Text)
  modBasic.$SSFEligibleURL = txtssfeligURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfrequrl_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/ClaimURL", txtssfrequesturl.Text)
  modBasic.$SSFClaimURL = txtssfrequesturl.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfimgurl_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/ImageURL", txtssfimgURL.Text)
  modBasic.$SSFImageURL = txtssfimgURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfemplURL_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/EmployerURL", txtssfeplURL.Text)
  modBasic.$SSFEmployerURL = txtssfeplURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssffileurl_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/AttachmentURL", txtssffileURL.Text)
  modBasic.$SSFAttachURL = txtssffileURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfbookURL_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/BookingURL", txtssfbookURL.Text)
  modBasic.$SSFBookingURL = txtssfbookURL.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfhodpuu_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/HospitalUUID", txtssfhospuu.Text)
  modBasic.$SSFHospUUID = txtssfhospuu.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfadminuu_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/ClaimAdminUUID", txtssfadminuu.Text)
  modBasic.$SSFAdminUUID = txtssfadminuu.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfpractrole_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/PractRole", txtssfpractrole.Text)
  modBasic.$SSFPracRole = txtssfpractrole.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfcert_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/CACertificate", cmbssfcert.Text)
  modBasic.$SSFCACert = cmbssfcert.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfquote_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/QuotePass", cmbssfquote.Text)
  modBasic.$SSFQuote = cmbssfquote.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssficdform_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/ICDFormat", cmbssficdformat.Text)
  modBasic.$SSFICDForm = cmbssficdformat.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssflock_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/BookingLock", cmbssflock.Text)
  modBasic.$SSFBookLock = cmbssflock.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub btnssfagent_Click()

  modSettings.SaveSettingsToFile("SocialSecurityFund/UserAgent", txtssfagent.Text)
  modBasic.$SSFUserAgent = txtssfagent.Text
  Me.Exec("Toastify({text: 'Information saved', duration: 3000}).showToast()")
  ' Balloon.Delay = modBasic.$BalloonDelay

End

Public Sub lnkssfpatURL_Click()

  txtssfpatURL.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/Patient/"

End

Public Sub lnkssfeligURL_Click()

  txtssfeligURL.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/CoverageEligibilityRequest/"

End

Public Sub lnkssfrequesturl_Click()

  txtssfrequesturl.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/Claim/"

End

Public Sub lnkssfimgURL_Click()

  txtssfimgURL.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/Images/Updated/"

End

Public Sub lnkssfiemplURL_Click()

  txtssfeplURL.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/Employee/"

End

Public Sub lnkssffileURL_Click()

  txtssffileURL.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/attachments"

End

Public Sub lnkssfbookURL_Click()

  txtssfbookURL.Text = "https://openimis.ssf.gov.np/api/api_fhir_r4/BookingService"

End

''---------------- Buttons ---------------------------
Public Sub WebButtonL1_Click()

  GetNormalButtons()
  IconPanel1.Index = 0
  WebButtonL1.Background = Color.LightGray

End

Public Sub WebButtonL2_Click()

  GetNormalButtons()
  IconPanel1.Index = 1
  WebButtonL2.Background = Color.LightGray

End

Public Sub WebButtonL3_Click()

  GetNormalButtons()
  IconPanel1.Index = 2
  WebButtonL3.Background = Color.LightGray

End

Public Sub WebButtonL4_Click()

  GetNormalButtons()
  IconPanel1.Index = 3
  WebButtonL4.Background = Color.LightGray

End

Public Sub WebButtonL5_Click()

  GetNormalButtons()
  IconPanel1.Index = 4
  WebButtonL5.Background = Color.LightGray

End

Public Sub WebButtonL6_Click()

  GetNormalButtons()
  IconPanel1.Index = 5
  WebButtonL6.Background = Color.LightGray

End

Public Sub WebButtonL7_Click()

  GetNormalButtons()
  IconPanel1.Index = 6
  WebButtonL7.Background = Color.LightGray

End

Public Sub WebButtonL8_Click()

  GetNormalButtons()
  IconPanel1.Index = 7
  WebButtonL8.Background = Color.LightGray

End

Private Sub GetNormalButtons()

  WebButtonL1.Background = Color.Default
  WebButtonL2.Background = Color.Default
  WebButtonL3.Background = Color.Default
  WebButtonL4.Background = Color.Default
  WebButtonL5.Background = Color.Default
  WebButtonL6.Background = Color.Default
  WebButtonL7.Background = Color.Default
  WebButtonL8.Background = Color.Default

End

Public Sub btnclose_Click()

  Me.Close()

End

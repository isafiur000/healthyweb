' Gambas class file

Private $encid As String
Private Columns As String[]
Private $sType As String
Private $Data As String
Private Template As String
Private $sBillNo As String
Private UserData As New Collection
Private SPecData As New Collection

Private TextAlign As String
Private Width As Integer
Private ReportPath As String

Public Sub _new(encid As String, sColumns As String[], sType As String, sData As String, TempletePath As String, sBillNo As String, sUserData As Collection, xpecData As Collection)

  $encid = encid
  $sType = sType
  $Data = sData
  Columns = sColumns
  Template = TempletePath
  $sBillNo = sBillNo
  UserData = sUserData
  SPecData = xpecData

  MakeHTMLFile()

End

Public Function GetHTMLFile() As String

  Return ReportPath

End

Private Sub MakeHTMLFile()

  Dim $Report As String[]
  Dim xhideb As String

  xhideb = modSettings.ShowSettingFromFIle("Invoice/HideTable")
  $Report = New String[]
  $Report.Add(modRepoTemplete.TitleHTMLScript())
  $Report.Add(modReportVar.$HTMLStart)
  $Report.Add("<section id='printable@report' class='printable@report'>") '''used to locate printable text
  $Report.Add(modReportVar.$CSSStart)
  $Report.Add(t_ReadPart("billtemplate.tpl"))
  $Report.Add(modReportVar.$CSSEnd)
  $Report.Add(modReportVar.$TitleStart)
  $Report.Insert(BillTitle())
  $Report.Add(BillTypeString())
  $Report.Add(modReportVar.$TitleEnd)
  $Report.Add(modReportVar.$HeaderStart)
  $Report.Insert(BillHeader())
  $Report.Add(modReportVar.$HeaderEnd)
  $Report.Insert(ExtraHeader())

  If xhideb = "Yes" Then
  Else
    $Report.Add(modReportVar.$BodyStart)
    $Report.Insert(BillBody())
    $Report.Add(modReportVar.$BodyEnd)
  Endif

  $Report.Add(modReportVar.$FooterStart)
  $Report.Insert(BillFooter())
  $Report.Add(modReportVar.$FooterEnd)
  $Report.Add(modReportVar.$FootImageStart)
  $Report.Add(modRepoTemplete.InvoiceFootImage())
  $Report.Add(modReportVar.$FootImageEnd)
  $Report.Add("</section>")
  $Report.Add(modReportVar.$HTMLEnd)
  $Report.Add(modRepoTemplete.EndTemplete())

  ReportPath = Temp() & ".html"
  File.Save(ReportPath, $Report.Join(gb.NewLine))

End

Private Function BillTitle() As String[]

  Dim repo As String[]
  Dim xtitle As String

  repo = New String[]
  xtitle = modSettings.ShowSettingFromFIle("Invoice/Default_Title")
  If xtitle And If xtitle = "BuiltIn" Then
    repo.Add(t_replace(modRepoTemplete.GetInvoiceTitleTemplete()))
  Else
    If $sType = "Deposit" Then
      repo.Add(t_ReadPart("billing_title.tpl"))
    Else If $sType = "Receipt" Then
      repo.Add(t_ReadPart("receipt_title.tpl"))
    Else
      repo.Add(t_ReadPart("billing_title.tpl"))
    Endif
  Endif

  Return repo

End

Private Function BillTypeString() As String

  Dim xx As String

  xx = t_replace(modRepoTemplete.GetInvoiceBillType())
  Return xx

End

Private Function BillHeader() As String[]

  Dim repo As String[]
  Dim xdefhead As String

  repo = New String[]
  repo.Add(modReportVar.BlankLinesAccSetting("Invoice/BlankLines_Department_Header"))
  xdefhead = modSettings.ShowSettingFromFIle("Invoice/Default_Header")
  If xdefhead And If xdefhead = "BuiltIn" Then
    repo.Add(t_replace(modRepoTemplete.GetInvoiceHeaderTemplete()))
  Else
    If $sType = "Deposit" Then
      repo.Add(t_ReadPart("deposit_header.tpl"))
    Else If $sType = "Receipt" Then
      repo.Add(t_ReadPart("receipt_header.tpl"))
    Else
      repo.Add(t_ReadPart("billing_header.tpl"))
    Endif
  Endif

  Return repo

End

Private Function BillFooter() As String[]

  Dim repo As String[]
  Dim xdeffoot As String

  repo = New String[]
  xdeffoot = modSettings.ShowSettingFromFIle("Invoice/Default_Footer")
  If xdeffoot And If xdeffoot = "BuiltIn" Then
    If $sType = "Deposit" Then
      repo.Add(t_replace(modRepoTemplete.GetDepositInvoiceFooterTemplete()))
    Else
      repo.Add(t_replace(modRepoTemplete.GetBillingInvoiceFooterTemplete()))
    Endif
  Else
    If $sType = "Deposit" Then
      repo.Add(t_ReadPart("deposit_footer.tpl"))
    Else If $sType = "Receipt" Then
      repo.Add(t_ReadPart("receipt_footer.tpl"))
    Else
      repo.Add(t_ReadPart("billing_footer.tpl"))
    Endif

  Endif

  Return repo

End

Private Function ExtraHeader() As String[]

  Dim repo As String[]
  Dim xfile As String

  repo = New String[]
  xfile = GetInvoiceExtra($sBillNo)
  If xfile Then
    repo.Add(t_ReadExtra(xfile))
  Endif

  Return repo

End

Private Function BillBody() As String[]

  Dim counter As Integer = 0
  Dim xx As String
  Dim repo As String[]
  Dim colStr As String

  Dim xbackpic As String
  Dim xcoltitle As String
  Dim xcoltitfont As String
  Dim xcolwid As String

  repo = New String[]
  If (TextAlign = "") Then
    TextAlign = "left"
  Endif

  If (Width = 0) Then
    Width = 100
  Endif

  xbackpic = modSettings.ShowSettingFromFIle("Invoice/Body_BackgroundPicture")
  If xbackpic Then
    xx = " background=" & xbackpic
  Else
    xx = ""
  Endif

  repo.Add(modReportVar.BlankLinesAccSetting("Invoice/BlankLines_Header_Body"))

  repo.Add("  <table " & xx & " class='report_table' style='text-align: " & TextAlign & "; width: " & Width & "%;' id='bodytable'>")
  repo.Add("    <thead>")   ''use when webkit bug solved
  repo.Add("    <tr>")

  xcoltitle = modSettings.ShowSettingFromFIle("Invoice/ShowColumnTitle")
  xcoltitfont = modSettings.ShowSettingFromFIle("Invoice/ColumnTitle_Font")
  For counter = 0 To Columns.Count - 1
    If xcoltitle And If xcoltitle = "No" Then
      colStr = ""
    Else
      colStr = Columns[counter]
      If xcoltitfont Then
        colStr = modString.GetFormatTextFontString(colStr, xcoltitfont)
      Endif
    Endif

    xcolwid = modSettings.ShowSettingFromFIle("Invoice/ColumnWidth" & CStr(counter + 1) & "_Value")
    If xcolwid Then
      repo.Add("      <td class='report_table_h' style='width: " & CInt(xcolwid) & modSettings.ShowSettingFromFIle("Invoice/ColumnWidth" & CStr(counter + 1) & "_Unit") & ";'>" & colStr & "</td>")
    Else
      repo.Add("      <td class='report_table_h'>" & colStr & "</td>")
    Endif
  Next
  repo.Add("    <tr>")
  repo.Add("    </thead>")

  repo.Add("    <tbody>")
  repo.Add(File.Load($Data))
  repo.Add("    </tbody>")
  repo.Add("  </table>")
  repo.Add(modReportVar.BlankLinesAccSetting("Invoice/BlankLines_Body_Footer"))

  Return repo

End

Private Function t_ReadPart(T_File As String) As String

  Dim sLine As String
  Dim repo As String

  If Exist(Template &/ T_File) Then
    sLine = File.Load(Template &/ T_File)
    repo = t_replace(sLine)
  Endif

  Return repo

End

Private Function t_ReadExtra(T_File As String) As String

  Dim sLine As String
  Dim repo As String

  If Exist(Template &/ "extra" &/ T_File) Then
    sLine = File.Load(Template &/ "extra" &/ T_File)
    repo = t_replace(sLine)
  Endif

  Return repo

End

Private Function t_replace(sLine As String) As String

  Dim KeyValue As String
  Dim KeySpec As String

  sLine = modReportVar.GetReportVarTitle(sLine)
  If $encid Then
    sLine = modReportVar.GetReportVarImages($encid, sLine)
    sLine = modReportVar.GetReportVarPatient($encid, sLine)
    sLine = modReportVar.GetReportVarEncounter($encid, sLine)
    sLine = modReportVar.GetReportLastConsult($encid, sLine)
    sLine = modReportVar.GetPatientSMSVAr($encid, sLine)

    If modBasic.$CustomDemog = "Yes" Then
      While (String.InStr(sLine, "$Last_Demog:") > 0)
        sLine = modReportVar.GetReporDemogLastVal($encid, sLine)
      Wend
    Endif
  Endif

  While (String.InStr(sLine, "InvoiceBarCode") > 0)
    sLine = Replace(sLine, "{InvoiceBarCode}", modReportVar.GetBarCodeInvoicePrint($sBillNo))
  Wend
  While (String.InStr(sLine, "InvoiceQRCode") > 0)
    sLine = Replace(sLine, "{InvoiceQRCode}", modReportVar.GetQRCodeInvoicePrint($sBillNo))
  Wend
  While (String.InStr(sLine, "PortalQRLogin") > 0)
    sLine = Replace(sLine, "{PortalQRLogin}", modReportVar.GetPortalLinkQRCode($encid, "Invoice"))
  Wend

  If modBasic.$CustomImage = "Yes" Then
    While (String.InStr(sLine, "$BarCode[") > 0)
      sLine = modReportVar.GetBarCodeCustom(sLine)
    Wend
    While (String.InStr(sLine, "$QRCode[") > 0)
      sLine = modReportVar.GetQRCodeCustom(sLine)
    Wend
    While (String.InStr(sLine, "$PatImage[") > 0)
      sLine = modReportVar.GetPatImageCustom(sLine)
    Wend
  Endif

  If modBasic.$CustomUser = "Yes" Then
    While (String.InStr(sLine, "$UserProfile[") > 0)
      sLine = modReportVar.GetUserProfileCustom(sLine)
    Wend
  Endif

  'collection
  For Each KeyValue In UserData
    If (String.InStr(sLine, UserData.Key) > 0) Then
      sLine = Replace(sLine, "{" & UserData.Key & "}", KeyValue)
    Endif
  Next

  For Each KeySpec In SPecData
    If (String.InStr(sLine, SPecData.Key) > 0) Then
      sLine = Replace(sLine, SPecData.Key, KeySpec)
    Endif
  Next

  Return sLine

End

Private Function GetInvoiceExtra(sBillNo As String) As String

  Dim BilType As String

  If sBillNo Like "DEP" & "*" Then
    BilType = "billing_CashDeposit.tpl"
  Else If sBillNo Like "CAS" & "*" Then
    BilType = "billing_CounterSales.tpl"
  Else If sBillNo Like "CRE" & "*" Then
    BilType = "billing_CounterReturn.tpl"
  Else If sBillNo Like "PHM" & "*" Then
    BilType = "billing_PharmacySales.tpl"
  Else If sBillNo Like "RET" & "*" Then
    BilType = "billing_PharmacyReturn.tpl"
  Else If sBillNo Like "DCL" & "*" Then
    BilType = "billing_DueClearance.tpl"

  Else If sBillNo Like "DET" & "*" Then
    BilType = "receipt_CashDeposit.tpl"
  Else If sBillNo Like "TMP" & "*" Then
    BilType = "receipt_CounterSales.tpl"
  Else If sBillNo Like "TRE" & "*" Then
    BilType = "receipt_CounterReturn.tpl"
  Else If sBillNo Like "TPM" & "*" Then
    BilType = "receipt_PharmacySales.tpl"
  Else If sBillNo Like "TPR" & "*" Then
    BilType = "receipt_PharmacyReturn.tpl"
  Else If sBillNo Like "TCL" & "*" Then
    BilType = "receipt_DueClearance.tpl"

  Else If sBillNo Like "TDA" & "*" Then
    BilType = "receipt_DepositAdjustment.tpl"
  Else If sBillNo Like "ARC" & "*" Then
    BilType = "receipt_Advanced.tpl"

  Endif
  Return BilType

End

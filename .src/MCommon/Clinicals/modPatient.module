' Gambas module file

'''Color.Transparent to Color.White
Public $PatProfileData As Collection

Public $PatDOAData As Collection
Public $PatDODData As Collection
Public $PatDOFollData As Collection

''------------------ Master collection -----------------
Public Sub GetPatientDataColl(encid As String, sCon As Connection)

  Dim res As Result
  Dim sColl As Collection
  Dim xaddr As String[]

  If $PatProfileData.Exist(encid) = False Then
    res = sCon.Exec("SELECT tblpatientinfo.fldpatientval as fldpatientval,tblpatientinfo.fldptnamefir as fldptnamefir,tblpatientinfo.fldptnamelast as fldptnamelast,tblpatientinfo.fldethniccode as fldethniccode,tblpatientinfo.fldptsex as fldptsex,tblpatientinfo.fldptaddvill as fldptaddvill,tblpatientinfo.fldptaddward as fldptaddward,tblpatientinfo.fldptadddist as fldptadddist,tblpatientinfo.fldptcontact as fldptcontact,tblpatientinfo.fldemail as fldemail,tblpatientinfo.fldptbirday as fldptbirday,tblpatientinfo.fldptguardian as fldptguardian,tblpatientinfo.fldrelation as fldrelation,tblpatientinfo.fldptcode as fldptcode,tblpatientinfo.fldencrypt as fldencrypt,tblpatientinfo.fldadmitfile as fldadmitfile,tblpatientinfo.fldcomment as fldcomment,tblencounter.fldadmitlocat as fldadmitlocat,tblencounter.fldregdate as fldregdate,tblencounter.fldvisit as fldvisit,tblencounter.fldfollow as fldfollow FROM tblpatientinfo INNER JOIN tblencounter ON tblpatientinfo.fldpatientval=tblencounter.fldpatientval WHERE tblencounter.fldencounterval=&1", encid)     ''
    If res.Available Then
      sColl = New Collection
      sColl.Add(res["fldpatientval"], "fldpatientval")
      sColl.Add(res["fldptnamefir"], "fldptnamefir")
      sColl.Add(res["fldptnamelast"], "fldptnamelast")
      sColl.Add(res["fldptsex"], "fldptsex")
      sColl.Add(res["fldethniccode"], "fldethniccode")
      sColl.Add(res["fldptbirday"], "fldptbirday")
      sColl.Add(res["fldptadddist"], "fldptadddist")
      sColl.Add(res["fldencrypt"], "fldencrypt")

      If res["fldptaddward"] Then
        sColl.Add(res["fldptaddward"], "fldptaddward")
        sColl.Add(res["fldptaddvill"], "fldptaddvill")
      Else
        If res["fldptaddvill"] Then
          xaddr = Split(res["fldptaddvill"], "-")
          If xaddr.Count > 1 Then
            If IsInteger(xaddr[xaddr.Count - 1]) Then
              sColl.Add(xaddr[xaddr.Count - 1], "fldptaddward")
              sColl.Add(xaddr.Copy(0, xaddr.Count - 1).Join("-"), "fldptaddvill")
            Else
              sColl.Add("", "fldptaddward")
              sColl.Add(xaddr.Join("-"), "fldptaddvill")
            Endif
          Else
            sColl.Add("", "fldptaddward")
            sColl.Add(xaddr.Join("-"), "fldptaddvill")
          Endif
        Endif
      Endif

      sColl.Add(res["fldptcode"], "fldptcode")
      sColl.Add(res["fldrelation"], "fldrelation")
      sColl.Add(res["fldptguardian"], "fldptguardian")
      sColl.Add(res["fldptcontact"], "fldptcontact")
      sColl.Add(res["fldemail"], "fldemail")
      sColl.Add(res["fldadmitfile"], "fldadmitfile")
      sColl.Add(res["fldcomment"], "fldcomment")

      sColl.Add(res["fldadmitlocat"], "fldadmitlocat")
      sColl.Add(res["fldregdate"], "fldregdate")
      sColl.Add(res["fldvisit"], "fldvisit")
      sColl.Add(res["fldfollow"], "fldfollow")

      ''add to collection
      $PatProfileData.Add(sColl, encid)
    Endif
  Endif

End

'NOTE: ----------------------- General --------------------------
''fet patient locked to user
Public Function GetPatientLockMacAdd(encid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldhostmac from tblactivity where fldcategory=&1 and fldactivity=&2 and fldcomment=&3", "Patient Lock", "EncounterID", encid)
  If res.Available Then
    If res["fldhostmac"] Then
      xx = res["fldhostmac"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

''====================== Patient number ===================================
Public Function SearchPatNo(ptno As String, Optional sCon As Connection) As Boolean

  Dim res As Result
  Dim xx As Boolean
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  res = $con.Exec("select fldpatientval from tblpatientinfo where fldpatientval=&1", ptno)
  xx = res.Available
  Return xx

End

Public Function GetPatientListFileNo(sFileNo As String) As String[]

  Dim res As Result
  Dim xval As String[]

  res = modDatabase.$myConn.Exec("select fldpatientval ascol from tblpatientinfo where fldadmitfile=&1", sFileNo)
  If res.Available Then
    xval = modControlSub.GetDirectFillresult(res)
  Endif
  Return xval

End

Public Function GetPatientFileByPatNo(patno As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldadmitfile from tblpatientinfo where fldpatientval=&1", patno)
  If res.Available Then
    If res["fldadmitfile"] Then
      xx = res["fldadmitfile"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetPatientNoByHospCode(hospcode As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldpatientval from tblpatientinfo where fldptcode=&1 ORDER BY fldptadmindate", hospcode)
  If res.Available Then
    res.MoveFirst
    If res["fldpatientval"] Then
      xx = res["fldpatientval"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetInfantPatNoByHospCode(hospcode As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldpatientval from tblpatientinfo where fldptcode=&1 and fldptnamefir like &2", hospcode, "I/O" & "%")
  If res.Available Then
    res.MoveFirst
    If res["fldpatientval"] Then
      xx = res["fldpatientval"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetPatientNoByFileNo(fileno As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldpatientval from tblpatientinfo where fldadmitfile=&1", fileno)
  If res.Available Then
    res.MoveFirst
    If res["fldpatientval"] Then
      xx = res["fldpatientval"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

''Last Encounter
Public Function GetLastEncoutnerFromPatNo(ptno As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldpatientval=&1 ORDER BY fldregdate DESC", ptno)
  If res.Available Then
    res.MoveFirst
    xx = res["fldencounterval"]
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetEncListFromPatNo(ptno As String, Optional sCon As Connection) As String[]

  Dim $con As Connection
  Dim res As Result
  Dim xx As String[]

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  res = $con.Exec("select fldencounterval as col from tblencounter where fldpatientval=&1 ORDER BY fldregdate DESC", ptno)
  xx = modControlSub.GetDirectFillresult(res)
  Return xx

End

Public Function GetEncListFromEncSetting(encid As String, Optional sCon As Connection) As String[]

  Dim xx As String[]
  Dim patno As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  If modBasic.$ShowHistorySource = "Last Visit" Then
    xx = New String[]
    xx.Add(modPatient.GetSecondLastEncidPatient(encid))
  Else
    patno = modPatient.GetPatientNoByEnc(encid, $con)
    If patno Then
      xx = modPatient.GetEncListFromPatNo(patno, $con)
    Endif
  Endif

  Return xx

End

Public Function GetLastEncoutnerFromPatCode(ptcode As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select tblencounter.fldencounterval as col from tblencounter inner join tblpatientinfo on tblencounter.fldpatientval=tblpatientinfo.fldpatientval where tblpatientinfo.fldptcode=&1 ORDER BY tblencounter.fldregdate DESC", ptcode)
  If res.Available Then
    res.MoveFirst
    xx = res["col"]
  Endif
  Return xx

End

Public Function GetEncListFromPatCode(ptcode As String, Optional sCon As Connection) As String[]

  Dim $con As Connection
  Dim res As Result
  Dim xx As String[]

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  res = $con.Exec("select tblencounter.fldencounterval as col from tblencounter inner join tblpatientinfo on tblencounter.fldpatientval=tblpatientinfo.fldpatientval where tblpatientinfo.fldptcode=&1 ORDER BY tblencounter.fldregdate DESC", ptcode)
  xx = modControlSub.GetDirectFillresult(res)
  Return xx

End

Public Function GetEncoutnerCountFromPatNo(ptno As String) As Integer

  Dim res As Result
  Dim xx As Integer

  res = modDatabase.$myConn.Exec("select COUNT(fldencounterval) as col from tblencounter where fldpatientval=&1", ptno)
  If res.Available Then
    If res["col"] Then
      xx = res["col"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif
  Return xx

End

Public Function GetPatientVisitStatus(ptno As String) As String

  Dim xval As Integer
  Dim xx As String

  xval = GetEncoutnerCountFromPatNo(ptno)
  If xval Then
    xx = "OLD"
  Else
    xx = "NEW"
  Endif
  Return xx

End

Public Function GetPatientFixDisc(patno As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddiscount from tblpatientinfo where fldpatientval=&1", patno)
  If res.Available Then
    res.MoveFirst
    If res["flddiscount"] Then
      xx = res["flddiscount"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

''-------------------- patient profile tblpatientinfo ----------------
Public Function PatientFullNameByPatID(patno As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim firname As String
  Dim lstname As String

  Dim xrank As String
  Dim xservice As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  If modBasic.$PatNameModification Then
    res = $con.Exec("select fldptnamefir,fldptnamelast,fldencrypt,fldrank,fldcategory from tblpatientinfo where fldpatientval=&1", patno)
  Else
    res = $con.Exec("select fldptnamefir,fldptnamelast,fldencrypt from tblpatientinfo where fldpatientval=&1", patno)
  Endif
  If res.Available Then

    If res["fldptnamefir"] Then
      If modBasic.$PatNameFormat = "***SurName" Then
        firname = "***"
      Else
        If MMain.$RepoReportMode = True Then
          firname = modPassword.DecryptPatData(res["fldptnamefir"], res["fldencrypt"])
        Else
          If modBasic.$SuperUser = True Then
            firname = modPassword.DecryptPatData(res["fldptnamefir"], res["fldencrypt"])
          Else
            firname = res["fldptnamefir"]
          Endif
        Endif
      Endif
    Else
      firname = ""
    Endif

    If res["fldptnamelast"] Then
      If MMain.$RepoReportMode = True Then
        lstname = modPassword.DecryptPatData(res["fldptnamelast"], res["fldencrypt"])
      Else
        If modBasic.$SuperUser = True Then
          lstname = modPassword.DecryptPatData(res["fldptnamelast"], res["fldencrypt"])
        Else
          lstname = res["fldptnamelast"]
        Endif
      Endif
    Else
      lstname = ""
    Endif

    If modBasic.$PatNameFormat = "FirstName+SurName" Then
      xx = firname & Space(1) & lstname
    Else If modBasic.$PatNameFormat = "SurName+FirstName" Then
      xx = lstname & Space(1) & firname
    Else If modBasic.$PatNameFormat = "FirstName+SURNAME" Then
      xx = firname & Space(1) & UCase(lstname)
    Else If modBasic.$PatNameFormat = "SURNAME+FirstName" Then
      xx = UCase(lstname) & Space(1) & firname
    Else If modBasic.$PatNameFormat = "FirstName Only" Then
      xx = firname
    Else If modBasic.$PatNameFormat = "***SurName" Then
      xx = "***" & Space(1) & lstname
    Else
      xx = firname & Space(1) & lstname
    Endif

    If modBasic.$PatNameModification Then
      If res["fldrank"] Then
        xrank = res["fldrank"]
      Else
        xrank = ""
      Endif
      If res["fldcategory"] Then
        xservice = res["fldcategory"]
      Else
        xservice = ""
      Endif
      If modBasic.$PatNameModification = "Rank+Name" Then
        xx = xrank & Space(1) & xx
      Else If modBasic.$PatNameModification = "Name+Category" Then
        xx = xx & Space(1) & "(" & xservice & ")"
      Else If modBasic.$PatNameModification = "Rank+Name+Category" Then
        xx = xrank & Space(1) & xx & Space(1) & "(" & xservice & ")"
      Else If modBasic.$PatNameModification = "Rank+Name+Category+Scheme" Then
        xx = xrank & Space(1) & xx & Space(1) & "(" & xservice & ")"
      Endif
    Endif

  Else
    xx = ""
  Endif

  If modBasic.$PatNameUCase = "Yes" Then
    xx = UCase(xx)
  Endif

  Return xx

End

Public Function GetPatientAddressByPatno(patno As String, Optional sCon As Connection) As String

  Dim adfir As String
  Dim award As String
  Dim addist As String
  Dim xx As String
  Dim $con As Connection
  Dim res As Result

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldptaddvill,fldptaddward,fldptadddist from tblpatientinfo where fldpatientval=&1", patno)
  If res.Available Then
    If res["fldptaddvill"] Then
      adfir = res["fldptaddvill"]
    Else
      adfir = ""
    Endif
    If res["fldptaddward"] Then
      award = res["fldptaddward"]
    Else
      award = ""
    Endif
    If res["fldptadddist"] Then
      addist = res["fldptadddist"]
    Else
      addist = ""
    Endif
    If adfir Then
      If award Then
        xx = adfir & "-" & award & ", " & addist
      Else
        xx = adfir & ", " & addist
      Endif
    Else
      xx = addist
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function PatientGenderByPatNo(patno As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim sex As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  res = $con.Exec("select fldptsex from tblpatientinfo where fldpatientval=&1", patno)
  If res.Available Then
    If res["fldptsex"] Then
      sex = res["fldptsex"]
    Else
      sex = ""
    Endif
  Else
    sex = ""
  Endif
  Return sex

End

Public Function GetPatientContactByPatNo(patno As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  res = $con.Exec("select fldptcontact,fldencrypt from tblpatientinfo where fldpatientval=&1", patno)
  If res.Available Then
    If res["fldptcontact"] Then
      If MMain.$RepoReportMode = True Then
        xx = modPassword.DecryptPatData(res["fldptcontact"], res["fldencrypt"])
      Else
        If modBasic.$SuperUser = True Then
          xx = modPassword.DecryptPatData(res["fldptcontact"], res["fldencrypt"])
        Else
          xx = res["fldptcontact"]
        Endif
      Endif
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatientAgePatNo(patno As String, dtnow As Date) As String

  Dim res As Result
  Dim xage As String

  res = modDatabase.$myConn.Exec("select fldptbirday from tblpatientinfo where fldpatientval=&1", patno)
  If res.Available Then
    If res["fldptbirday"] Then
      xage = modDate.GetAgeString(res["fldptbirday"], dtnow)
    Else
      xage = "?"
    Endif
  Else
    xage = "?"
  Endif

  Return xage

End

''============================ encounter id ================================
Public Function GetPatientNoByEnc(encid As String, Optional sCon As Connection) As String

  Dim $con As Connection
  Dim res As Result
  Dim xx As String

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldpatientval"]
  Else
    res = $con.Exec("select fldpatientval from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["fldpatientval"] Then
        xx = res["fldpatientval"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif

  Return xx

End

Public Function GetEncounterExist(sCon As Connection, encid As String) As Boolean

  Dim res As Result
  Dim xval As Boolean

  res = sCon.Exec("select fldencounterval from tblencounter where fldencounterval=&1", encid)
  xval = res.Available

  Return xval

End

Public Function GetSecondLastEncidPatient(encid As String) As String

  Dim res As Result
  Dim newid As String

  res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldencounterval<>&1 and fldpatientval=&2 and fldregdate<&3 ORDER BY fldregdate DESC", encid, GetPatientNoByEnc(encid), GetRecordDate(encid))
  If res.Available Then
    res.MoveFirst
    newid = res["fldencounterval"]
  Else
    newid = encid
  Endif
  Return newid

End

Public Function GetPatientFileByEnc(encid As String) As String

  Dim res As Result
  Dim xx As String

  GetPatientDataColl(encid, modDatabase.$myConn)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldadmitfile"]
  Else
    res = modDatabase.$myConn.Exec("select fldadmitfile from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldadmitfile"] Then
        xx = res["fldadmitfile"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

''----------------- patient  Profile  --------------------
Public Function GetPatientCommentByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldcomment"]
  Else
    res = $con.Exec("select fldcomment from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldcomment"] Then
        xx = res["fldcomment"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetPatientExtCOdebyEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldptcode"]
  Else
    res = $con.Exec("select fldptcode from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptcode"] Then
        xx = res["fldptcode"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetPatEncryptionbyEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As Boolean
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldencrypt"]
  Else
    res = modDatabase.$myConn.Exec("select fldencrypt from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldencrypt"] Then
        xx = res["fldencrypt"]
      Else
        xx = False
      Endif
    Else
      xx = False
    Endif
  Endif
  Return xx

End

Public Function GetPatientEthnicity(encid As String, Optional sCon As Connection) As String

  Dim xx As String
  Dim res As Result
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldethniccode"]
  Else
    res = $con.Exec("select fldethniccode from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldethniccode"] Then
        xx = res["fldethniccode"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetPatientFirstNameEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim $con As Connection
  Dim firname As String
  Dim xencrypt As Boolean
  Dim xval As String

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    firname = $PatProfileData[encid]["fldptnamefir"]
  Else
    res = $con.Exec("select fldptnamefir from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptnamefir"] Then
        firname = res["fldptnamefir"]
      Else
        firname = ""
      Endif
    Else
      firname = ""
    Endif
  Endif

  If firname Then
    xencrypt = GetPatEncryptionbyEnc(encid, $con)
    If MMain.$RepoReportMode = True Then
      xval = modPassword.DecryptPatData(firname, xencrypt)
    Else
      If modBasic.$SuperUser = True Then
        xval = modPassword.DecryptPatData(firname, xencrypt)
      Else
        xval = firname
      Endif
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

Public Function GetPatientLastNameEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim $con As Connection
  Dim lstname As String
  Dim xencrypt As Boolean
  Dim xval As String

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    lstname = $PatProfileData[encid]["fldptnamelast"]
  Else
    res = $con.Exec("select fldptnamelast from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptnamelast"] Then
        lstname = res["fldptnamelast"]
      Else
        lstname = ""
      Endif
    Else
      lstname = ""
    Endif
  Endif

  If lstname Then
    xencrypt = GetPatEncryptionbyEnc(encid, $con)
    If MMain.$RepoReportMode = True Then
      xval = modPassword.DecryptPatData(lstname, xencrypt)
    Else
      If modBasic.$SuperUser = True Then
        xval = modPassword.DecryptPatData(lstname, xencrypt)
      Else
        xval = lstname
      Endif
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

Public Function GetPatientNameByEnc(encid As String, Optional sCon As Connection, Optional sFormat As String) As String

  Dim xx As String
  Dim firname As String
  Dim lstname As String
  Dim xrank As String
  Dim xservice As String

  Dim $con As Connection
  Dim xformat As String

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  If sFormat Then
    xformat = sFormat
  Else
    xformat = modBasic.$PatNameFormat
  Endif

  firname = GetPatientFirstNameEnc(encid, $con)
  lstname = GetPatientLastNameEnc(encid, $con)

  If xformat = "FirstName+SurName" Then
    xx = firname & Space(1) & lstname
  Else If xformat = "SurName+FirstName" Then
    xx = lstname & Space(1) & firname
  Else If xformat = "FirstName+SURNAME" Then
    xx = firname & Space(1) & UCase(lstname)
  Else If xformat = "SURNAME+FirstName" Then
    xx = UCase(lstname) & Space(1) & firname
  Else If xformat = "FirstName Only" Then
    xx = firname
  Else If xformat = "***SurName" Then
    xx = "***" & Space(1) & lstname
  Else If xformat = "HMISFormat" Then
    xx = firname & gb.NewLine & lstname
  Else
    xx = firname & Space(1) & lstname
  Endif

  If modBasic.$PatNameModification Then
    xrank = GetPatServiceRank(encid, $con)
    xservice = GetPatServiceType(encid, $con)
    If modBasic.$PatNameModification = "Rank+Name" Then
      xx = xrank & Space(1) & xx
    Else If modBasic.$PatNameModification = "Name+Category" Then
      xx = xx & Space(1) & "(" & xservice & ")"
    Else If modBasic.$PatNameModification = "Rank+Name+Category" Then
      xx = xrank & Space(1) & xx & Space(1) & "(" & xservice & ")"
    Else If modBasic.$PatNameModification = "Rank+Name+Category+Scheme" Then
      xx = xrank & Space(1) & xx & Space(1) & "(" & xservice & " : " & ShowDiscountCategEnc(encid, $con) & ")"
    Endif
  Endif

  If modBasic.$PatNameUCase = "Yes" Then
    xx = UCase(xx)
  Endif

  Return xx

End

Public Function GetPatFirAddressByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xaddr As String[]
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldptaddvill"]
  Else
    res = $con.Exec("select fldptaddvill,fldptaddward from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then

      If res["fldptaddward"] Then
        xx = res["fldptaddvill"]
      Else
        If res["fldptaddvill"] Then
          xaddr = Split(res["fldptaddvill"], "-")
          If xaddr.Count > 1 Then
            If IsInteger(xaddr[xaddr.Count - 1]) Then
              xx = xaddr.Copy(0, xaddr.Count - 1).Join("-")
            Else
              xx = xaddr.Join("-")
            Endif
          Else
            xx = xaddr.Join("-")
          Endif
        Else
          xx = ""
        Endif
      Endif

    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetPatWardAddressByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xaddr As String[]
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldptaddward"]
  Else
    res = $con.Exec("select fldptaddvill,fldptaddward from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then

      If res["fldptaddward"] Then
        xx = res["fldptaddward"]
      Else
        If res["fldptaddvill"] Then
          xaddr = Split(res["fldptaddvill"], "-")
          If xaddr.Count > 1 Then
            If IsInteger(xaddr[xaddr.Count - 1]) Then
              xx = xaddr[xaddr.Count - 1]
            Else
              xx = ""
            Endif
          Else
            xx = ""
          Endif
        Else
          xx = ""
        Endif
      Endif

    Else
      xx = ""
    Endif
  Endif

  Return xx

End

Public Function GetPatDistrictByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldptadddist"]
  Else
    res = $con.Exec("select fldptadddist from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptadddist"] Then
        xx = res["fldptadddist"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetPatientAddressByEnc(encid As String, Optional sCon As Connection) As String

  Dim adfir As String
  Dim addist As String
  Dim award As String
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  adfir = GetPatFirAddressByEnc(encid, $con)
  award = GetPatWardAddressByEnc(encid, $con)
  addist = GetPatDistrictByEnc(encid, $con)
  If modBasic.$PatAddressFormat Then
    xx = modBasic.$PatAddressFormat
    xx = Replace(xx, "{PatientMunicipality}", adfir)
    xx = Replace(xx, "{PatientWardAddress}", award)
    xx = Replace(xx, "{PatientDistrict}", addist)
  Else
    If adfir Then
      If award Then
        xx = adfir & "-" & award & ", " & addist
      Else
        xx = adfir & ", " & addist
      Endif
    Else
      xx = addist
    Endif
  Endif

  Return xx

End

Public Function GetPatientSex(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim sex As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    sex = $PatProfileData[encid]["fldptsex"]
  Else
    res = $con.Exec("select fldptsex from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptsex"] Then
        sex = res["fldptsex"]
      Else
        sex = ""
      Endif
    Else
      sex = ""
    Endif
  Endif
  Return sex

End

Public Function GetPatientContactByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xcont As String
  Dim xval As String
  Dim $con As Connection
  Dim xencrypt As Boolean

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xcont = $PatProfileData[encid]["fldptcontact"]
  Else
    res = $con.Exec("select fldptcontact,fldencrypt from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptcontact"] Then
        xcont = res["fldptcontact"]
      Else
        xcont = ""
      Endif
    Else
      xcont = ""
    Endif
  Endif

  If xcont Then
    xencrypt = GetPatEncryptionbyEnc(encid, $con)
    If MMain.$RepoReportMode = True Then
      xval = modPassword.DecryptPatData(xcont, xencrypt)
    Else
      If modBasic.$SuperUser = True Then
        xval = modPassword.DecryptPatData(xcont, xencrypt)
      Else
        xval = xcont
      Endif
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

Public Function GetPatientEmail(encid As String, Optional sCon As Connection) As String

  Dim smail As String
  Dim res As Result
  Dim $con As Connection
  Dim xencrypt As Boolean
  Dim xval As String

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    smail = $PatProfileData[encid]["fldemail"]
  Else
    res = $con.Exec("select fldemail,fldencrypt from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)                                                     ''
    If res.Available Then
      If res["fldemail"] Then
        smail = res["fldemail"]
      Else
        smail = ""
      Endif
    Else
      smail = ""
    Endif
  Endif

  If smail Then
    xencrypt = GetPatEncryptionbyEnc(encid, $con)
    If MMain.$RepoReportMode = True Then
      xval = modPassword.DecryptPatData(smail, xencrypt)
    Else
      If modBasic.$SuperUser = True Then
        xval = modPassword.DecryptPatData(smail, xencrypt)
      Else
        xval = smail
      Endif
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

Public Function GetPatientGuardianByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldptguardian"]
  Else
    res = $con.Exec("select fldptguardian from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptguardian"] Then
        xx = res["fldptguardian"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif

  Return xx

End

Public Function GetPatientReltionByEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldrelation"]
  Else
    res = $con.Exec("select fldrelation from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldrelation"] Then
        xx = res["fldrelation"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif

  Return xx

End

Public Function GetPatServiceType(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select tblpatientinfo.fldcategory AS fldcategory from tblpatientinfo inner join tblencounter ON tblpatientinfo.fldpatientval=tblencounter.fldpatientval where tblencounter.fldencounterval=&1", encid)
  If res.Available Then
    If res["fldcategory"] Then
      xx = res["fldcategory"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatServiceRank(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select tblpatientinfo.fldrank AS fldrank from tblpatientinfo inner join tblencounter ON tblpatientinfo.fldpatientval=tblencounter.fldpatientval where tblencounter.fldencounterval=&1", encid)
  If res.Available Then
    If res["fldrank"] Then
      xx = res["fldrank"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatServiceUnit(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select tblpatientinfo.fldunit AS fldunit from tblpatientinfo inner join tblencounter ON tblpatientinfo.fldpatientval=tblencounter.fldpatientval where tblencounter.fldencounterval=&1", encid)
  If res.Available Then
    If res["fldunit"] Then
      xx = res["fldunit"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetPatientBirthDay(encid As String, Optional sCon As Connection) As Date

  Dim res As Result
  Dim xx As Date
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  GetPatientDataColl(encid, $con)
  If $PatProfileData.Exist(encid) Then
    xx = $PatProfileData[encid]["fldptbirday"]
  Else
    res = $con.Exec("select fldptbirday from tblpatientinfo where fldpatientval in(select fldpatientval from tblencounter where fldencounterval=&1)", encid)
    If res.Available Then
      If res["fldptbirday"] Then
        xx = res["fldptbirday"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif

  Return xx

End

''-------------------------------- Birthday and age
Public Function GetAgeGroup(encid As String, Optional NowDate As Date) As String

  Dim xx As String
  Dim xnow As String

  If NowDate Then
    xnow = NowDate
  Else
    xnow = Now()
  Endif
  xx = GetAgeGroupFIxed(encid, xnow)
  Return xx

End

Public Function GetAgeGroupFIxed(encid As String, xnow As Date) As String

  Dim agrgrp As String
  Dim age As Float
  Dim xdate As Date
  Dim xvar As String[]

  xdate = GetPatientBirthDay(encid)
  If xdate Then
    age = DateDiff(xdate, xnow, gb.Day)

    If modBasic.$PatDBAgeGroupList And If modBasic.$PatDBAgeGroupList.Count Then
      For Each xvar In modBasic.$PatDBAgeGroupList
        If age >= CInt(xvar[1]) And If age < CInt(xvar[2]) Then
          agrgrp = xvar[0]
        Endif
      Next
    Endif

    If Not agrgrp Then
      If age >= 60 * 365 Then
        agrgrp = "Elderly"
      Else If age >= 20 * 365 And If age < 60 * 365 Then
        agrgrp = "Adult"
      Else If age >= 12 * 365 And If age < 20 * 365 Then
        agrgrp = "Adolescent"
      Else If age >= 2 * 365 And If age < 12 * 365 Then
        agrgrp = "Children"
      Else If age >= 365 And If age < 2 * 365 Then
        agrgrp = "Toddler"
      Else If age >= 30 And If age < 365 Then
        agrgrp = "Infant"
      Else If age < 30 Then
        agrgrp = "Neonate"
      Endif
    Endif

  Else
    agrgrp = ""
  Endif

  Return agrgrp

End

Public Function GetAgeGroupCustom(encid As String, Optional NowDate As Date) As String

  Dim xx As String
  Dim age As Float
  Dim xdate As Date
  Dim xnow As Date

  Dim hFile As File
  Dim sline As String
  Dim agegrp As String[]

  If NowDate Then
    xnow = NowDate
  Else
    xnow = Now()
  Endif

  If Exist(modHelpVariable.AppDirectory &/ "agegrouping") And If modSettings.ShowSettingFromFIle("AgeGrouping/Custom") = "Yes" Then
    xdate = GetPatientBirthDay(encid)
    If xdate Then
      age = DateDiff(xdate, xnow, gb.Day)
      hFile = Open modHelpVariable.AppDirectory &/ "agegrouping"
      For Each sline In hFile.Lines
        If Len(sline) Then
          agegrp = Split(sline, ";")
          If age >= CInt(agegrp[1]) And If age < CInt(agegrp[2]) Then
            xx = agegrp[0]
            Break
          Endif
        Endif
      Next
      hFile.Close()
    Endif

  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatientAgeString(encid As String, dtnow As Date) As String

  Dim xage As String
  Dim xdate As Date

  xdate = GetPatientBirthDay(encid)
  If xdate Then
    xage = modDate.GetAgeString(xdate, dtnow)
  Else
    If modBasic.$PatAgeFormat = "AgeInYears" Then
      xage = ""
    Else
      xage = "?"
    Endif
  Endif

  Return xage

End

''================ from  tblencounter =================================
Public Function GetFirstRegistrationDate() As Date

  Dim res As Result
  Dim dxt As Date
  Dim xfir As Date

  xfir = Date(2000, 1, 1, 0, 0, 0, 0)
  res = modDatabase.$myConn.Limit(2).Exec("select fldptadmindate from tblpatientinfo WHERE fldptadmindate>&1 and fldptadmindate IS NOT NULL ORDER BY fldptadmindate ASC", xfir)                                         ''
  If res.Available = True Then
    res.MoveFirst
    If res["fldptadmindate"] Then
      dxt = res["fldptadmindate"]
    Else
      dxt = ""
    Endif
  Else
    dxt = Now()
  Endif
  Return dxt

End

''get patient color
Public Function GetPatientColor(encid As String) As Integer

  Dim xint As Integer

  If modBasic.$TriageMode = "Dynamic" Then
    xint = modPathoSub.GetPatientColorDynamic(encid)
  Else
    xint = GetPatientColorStatic(encid)
  Endif
  Return xint

End

Public Function GetPatientColorStatic(encid As String) As Integer

  Dim xint As Integer
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldheight from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldheight"] Then
      xint = CInt(res["fldheight"])
    Else
      xint = Color.White
    Endif
  Else
    xint = Color.White
  Endif
  Return xint

End

Public Sub SetPatientColor(encid As String, xColor As String)

  Dim res As Result

  res = modDatabase.$myConn.Edit("tblencounter", "fldencounterval=&1", encid)
  res["fldheight"] = xColor
  res["xyz"] = False
  res.Update

End

''------------------------ Rate Plan
Public Function GetPatBillingMode(encid As String) As String

  Dim res As Result
  Dim bilmode As String

  res = modDatabase.$myConn.Exec("select fldbillingmode from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldbillingmode"] Then
      bilmode = res["fldbillingmode"]
    Else
      bilmode = ""
    Endif
  Else
    bilmode = ""
  Endif

  Return bilmode

End

''------------------------------- discount by encid
Public Function ShowDiscountCategEnc(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif
  res = $con.Exec("select flddisctype from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["flddisctype"] Then
      xx = res["flddisctype"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function ShowDiscValidityEnc(encid As String) As Date

  Dim res As Result
  Dim xx As Date

  res = modDatabase.$myConn.Exec("select fldvalidity from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldvalidity"] Then
      xx = res["fldvalidity"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

''--------------------------------- Visit Type
Public Function GetPatVisitHMIS(encid As String) As String

  Dim res As Result
  Dim vistype As String

  GetPatientDataColl(encid, modDatabase.$myConn)
  If $PatProfileData.Exist(encid) Then
    vistype = $PatProfileData[encid]["fldvisit"]
  Else
    res = modDatabase.$myConn.Exec("select fldvisit from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["fldvisit"] Then
        vistype = res["fldvisit"]
      Else
        vistype = ""
      Endif
    Else
      vistype = ""
    Endif
  Endif

  Return vistype

End

Public Function GetPatVisitType(encid As String) As String

  Dim res As Result
  Dim vistype As String

  GetPatientDataColl(encid, modDatabase.$myConn)
  If $PatProfileData.Exist(encid) Then
    vistype = $PatProfileData[encid]["fldfollow"]
  Else
    res = modDatabase.$myConn.Exec("select fldfollow from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["fldfollow"] Then
        vistype = res["fldfollow"]
      Else
        vistype = ""
      Endif
    Else
      vistype = ""
    Endif
  Endif
  Return vistype

End

'''----------------------Current location (Bed)
Public Function GetAdmitLocation(encid As String) As String

  Dim res As Result
  Dim bedno As String

  GetPatientDataColl(encid, modDatabase.$myConn)
  If $PatProfileData.Exist(encid) Then
    bedno = $PatProfileData[encid]["fldadmitlocat"]
  Else
    res = modDatabase.$myConn.Exec("select fldadmitlocat from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["fldadmitlocat"] Then
        bedno = res["fldadmitlocat"]
      Else
        bedno = ""
      Endif
    Else
      bedno = ""
    Endif
  Endif

  Return bedno

End

''used for HI and SSF
Public Function GetAdmitLocationCategory(encid As String) As String

  Dim res As Result
  Dim xval As String
  Dim bedno As String

  res = modDatabase.$myConn.Exec("select fldcateg,fldactive from tbldepartment where flddept in(select fldadmitlocat from tblencounter where fldencounterval=&1)", encid)
  If res.Available Then
    If res["fldcateg"] Then
      xval = res["fldcateg"]
      If xval = "OPD Visit" Then
        If res["fldactive"] = "Emergency" Then
          bedno = "Emergency"
        Else
          bedno = "Consultation"
        Endif
      Else
        bedno = xval
      Endif
    Else
      bedno = ""
    Endif
  Else
    bedno = ""
  Endif

  Return bedno

End

Public Function GetPatientLocation(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim bedno As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldadmitlocat,fldcurrlocat from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldcurrlocat"] Then
      bedno = res["fldcurrlocat"]
    Else
      If res["fldadmitlocat"] Then
        bedno = res["fldadmitlocat"]
      Else
        bedno = ""
      Endif
    Endif
  Else
    bedno = ""
  Endif
  Return bedno

End

Public Function GetPatientWardName(encid As String) As String

  Dim res As Result
  Dim bedno As String

  res = modDatabase.$myConn.Exec("select flddept from tbldepartmentbed where fldbed in(select fldcurrlocat from tblencounter where fldencounterval=&1)", encid)
  If res.Available Then
    If res["flddept"] Then
      bedno = res["flddept"]
    Else
      bedno = ""
    Endif
  Else
    bedno = ""
  Endif
  Return bedno

End

Public Function GetPatientCurrDepartment(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xdept As String
  Dim bedno As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldadmission,fldadmitlocat,fldcurrlocat from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    Select res["fldadmission"]
      Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
        If res["fldcurrlocat"] Then
          xdept = modGeneral.GetDepartmentNameFromBed(res["fldcurrlocat"])
          If xdept Then
            bedno = xdept
          Else
            bedno = res["fldcurrlocat"]
          Endif
        Else
          bedno = res["fldadmitlocat"]
        Endif

      Case Else
        If res["fldcurrlocat"] Then
          bedno = res["fldcurrlocat"]
        Else
          bedno = res["fldadmitlocat"]
        Endif
    End Select

  Else
    bedno = ""
  Endif

  Return bedno

End

Public Function GetPatientBedOxygen(encid As String) As String

  Dim res As Result
  Dim bedno As String

  res = modDatabase.$myConn.Exec("select fldoxyport from tbldepartmentbed where fldbed in(select fldcurrlocat from tblencounter where fldencounterval=&1)", encid)
  If res.Available Then
    If res["fldoxyport"] Then
      bedno = res["fldoxyport"]
    Else
      bedno = ""
    Endif
  Else
    bedno = ""
  Endif
  Return bedno

End

Public Function GetPatientBedVentilator(encid As String) As String

  Dim res As Result
  Dim bedno As String

  res = modDatabase.$myConn.Exec("select fldventilator from tbldepartmentbed where fldbed in(select fldcurrlocat from tblencounter where fldencounterval=&1)", encid)
  If res.Available Then
    If res["fldventilator"] Then
      bedno = res["fldventilator"]
    Else
      bedno = ""
    Endif
  Else
    bedno = ""
  Endif
  Return bedno

End

Public Function GetPatientWardCaption(encid As String) As String

  Dim res As Result
  Dim bedno As String

  res = modDatabase.$myConn.Exec("select fldactive from tbldepartment where flddept in(select flddept from tbldepartmentbed where fldbed in(select fldcurrlocat from tblencounter where fldencounterval=&1))", encid)
  If res.Available Then
    If res["fldactive"] Then
      bedno = res["fldactive"]
    Else
      bedno = ""
    Endif
  Else
    bedno = ""
  Endif
  Return bedno

End

'''--------------------------- Admission Date and other dates
Public Function GetRecordDate(encid As String) As Date

  Dim res As Result
  Dim dt As Date

  GetPatientDataColl(encid, modDatabase.$myConn)
  If $PatProfileData.Exist(encid) Then
    dt = $PatProfileData[encid]["fldregdate"]
  Else
    res = modDatabase.$myConn.Exec("select fldregdate from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["fldregdate"] Then
        dt = res["fldregdate"]
      Else
        dt = ""
      Endif
    Else
      dt = ""
    Endif
  Endif
  Return dt

End

Public Function GetFollowUpDate(encid As String) As Date

  Dim res As Result
  Dim dt As Date

  dt = modHelpVariable.GetCollectionValue($PatDOFollData, encid, modBasic.$AppCachePatientVisits)
  If Not dt Then
    res = modDatabase.$myConn.Exec("select fldfollowdate from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["fldfollowdate"] Then
        dt = res["fldfollowdate"]
        If modBasic.$AppCachePatientVisits = "Yes" Then
          $PatDOFollData.Add(dt, encid)
        Endif
      Else
        dt = ""
      Endif
    Else
      dt = ""
    Endif
  Endif

  Return dt

End

Public Function GetReferLocation(encid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreferto from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldreferto"] Then
      xx = res["fldreferto"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetAdmisionBedValue(encid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldadmitbed from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldadmitbed"] Then
      xx = res["fldadmitbed"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetDischargeDate(encid As String) As Date

  Dim res As Result
  Dim dt As Date

  dt = modHelpVariable.GetCollectionValue($PatDODData, encid, modBasic.$AppCachePatientVisits)
  If Not dt Then
    res = modDatabase.$myConn.Exec("select flddod from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["flddod"] Then
        dt = res["flddod"]
        If modBasic.$AppCachePatientVisits = "Yes" Then
          $PatDODData.Add(dt, encid)
        Endif
      Else
        dt = ""
      Endif
    Else
      dt = ""
    Endif
  Endif

  Return dt

End

Public Function GetAdmissionDate(encid As String) As Date

  Dim dt As Date
  Dim res As Result

  dt = modHelpVariable.GetCollectionValue($PatDOAData, encid, modBasic.$AppCachePatientVisits)
  If Not dt Then
    res = modDatabase.$myConn.Exec("select flddoa from tblencounter where fldencounterval=&1", encid)
    If res.Available Then
      If res["flddoa"] Then
        dt = res["flddoa"]
        If modBasic.$AppCachePatientVisits = "Yes" Then
          $PatDOAData.Add(dt, encid)
        Endif
      Else
        dt = ""
      Endif
    Else
      dt = ""
    Endif
  Endif
  Return dt

End

Public Function GetDayDiffAdmission(encid As String, dt As Date) As String

  Dim xx As String
  Dim xadmis As Date

  xadmis = GetAdmissionDate(encid)
  If xadmis And If xadmis < dt Then
    xx = "Day " & CStr(Floor(DateDiff(modDate.StartSqlDate(xadmis), dt, gb.Minute) / 1440) + 1)
  Else
    xx = modReportVar.GetDateTimeReport(dt, gb.MediumDate)
  Endif
  Return xx

End

Public Function GetHospitalStayInHours(encid As String) As Integer

  Dim xadmis As Date
  Dim xdisc As Date
  Dim xdiff As Integer

  xadmis = GetAdmissionDate(encid)
  xdisc = GetDischargeDate(encid)
  If xadmis And If xdisc Then
    xdiff = DateDiff(xadmis, xdisc, gb.Hour)
  Else
    xdiff = 0
  Endif
  Return xdiff

End

Public Function GetDayTimeFromAdmission(encid As String, fldnow As Date) As String

  Dim xx As String

  xx = GetDayDiffAdmission(encid, fldnow) & "::" & Format(fldnow, "hh:nn")
  Return xx

End

''----------------------- Other ------------------------------
Public Function GetLocationSetting(encid As String, xStatus As String) As String

  Dim txtlocation As String

  Select xStatus
    Case "Registered", "Admitted"
      txtlocation = GetPatientLocation(encid)
    Case "Discharged", "LAMA", "Death", "Refer", "Absconder"
      txtlocation = xStatus
    Case Else
      txtlocation = xStatus
  End Select

  Return txtlocation

End

Public Function GetPatientFirstWard(encid As String) As String

  Dim xx As String
  Dim res1 As Result

  res1 = modDatabase.$myConn.Exec("select fldadmitward from tblencounter where fldencounterval=&1", encid)
  If res1.Available And If res1["fldadmitward"] Then
    xx = res1["fldadmitward"]
  Else
    xx = GetFirstWardTransfer(encid)
  Endif
  Return xx

End

Public Function GetFirstWardTransfer(encid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flditem from tblpattiming where fldencounterval=&1 and fldtype=&2 and fldfirstreport=&3 ORDER BY fldfirsttime", encid, "General Services", "Bed")
  If res.Available Then
    res.MoveFirst
    If res["flditem"] Then
      xx = res["flditem"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

''------------------------------ Admission status
Public Function CurrentAdmissionStatus(encid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldadmission from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldadmission"] Then
      xx = res["fldadmission"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetPatExitComment(encid As String, sType As String) As String ''Type: "Discharged","Death"

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldcomment from tblpatientdate where fldencounterval=&1 and fldhead=&2", encid, sType)
  If res.Available Then
    If res["fldcomment"] Then
      xx = res["fldcomment"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function CurrentStatuswithComment(encid As String) As String

  Dim xstate As String
  Dim xx As String

  xstate = CurrentAdmissionStatus(encid)
  If xstate Then
    If xstate = "Discharged" Then
      xx = "Discharged : " & GetPatExitComment(encid, "Discharged")
    Else
      xx = xstate
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPptientImpDateUser(encid As String, sType As String) As String

  Dim res As Result
  Dim xuser As String

  If sType = "Clearance" Then
    res = modDatabase.$myConn.Exec("select flduserid from tblpatientdate where fldencounterval=&1 and fldhead=&2", encid, "Clearance")
  Else If sType = "Discharge" Then
    res = modDatabase.$myConn.Exec("select flduserid from tblpatientdate where fldencounterval=&1 and (fldhead=&2 or fldhead=&3 or fldhead=&4 and fldhead=&5 or fldhead=&6)", encid, "Discharged", "LAMA", "Death", "Refer", "Absconder")
  Else If sType = "Admission" Then
    res = modDatabase.$myConn.Exec("select flduserid from tblpatientdate where fldencounterval=&1 and fldhead=&2", encid, "Admitted")
  Else If sType = "Consultation" Then
    res = modDatabase.$myConn.Exec("select flduserid from tblpatientdate where fldencounterval=&1 and (fldhead=&2 or fldhead=&3 or fldhead=&4 or fldhead=&5 or fldhead=&6 or fldhead=&7)", encid, "Recorded", "Registered", "Follow Up", "Refer(OPD)", "LAMA(OPD)", "Death(OPD)")
  Endif
  If res.Available Then
    res.MoveFirst
    If res["flduserid"] Then
      xuser = res["flduserid"]
    Else
      xuser = ""
    Endif
  Else
    xuser = ""
  Endif
  Return xuser

End

Public Function GetClearanceDateTime(encid As String) As Date

  Dim res As Result
  Dim xval As Date

  res = modDatabase.$myConn.Exec("select fldtime from tblpatientdate where fldencounterval=&1 and fldhead=&2", encid, "Clearance")
  If res.Available Then
    res.MoveLast
    If res["fldtime"] Then
      xval = res["fldtime"]
    Else
      xval = ""
    Endif
  Else
    xval = ""
  Endif
  Return xval

End

Public Function EnableClinicForm(xStatus As String) As Boolean

  Dim fme As Boolean

  If modBasic.$SuperUser = True Then
    fme = True
  Else
    Select xStatus
      Case "Registered", "Admitted"
        fme = True
      Case "Discharged", "LAMA", "Death", "Refer", "Absconder"
        fme = False
      Case "Follow Up", "Refer(OPD)", "LAMA(OPD)", "Death(OPD)"
        fme = False
      Case Else
        If modGlobalSetting.ShowSettingFromDB("GeneralSettings/Clinic_LockNonRegistered") = "Yes" Then
          fme = False
        Else
          fme = True
        Endif
    End Select

  Endif
  Return fme

End

''----------------------------delivery/ Mother Info---------------------
Public Function GetBirthValue(sField As String, encid As String) As Variant

  Dim res As Result
  Dim sql As String
  Dim xx As Variant

  sql = Subst("select tblconfinement.&1 AS &1 from tblconfinement", sField)
  res = modDatabase.$myConn.Exec(sql & " inner join tblencounter ON tblconfinement.fldbabypatno=tblencounter.fldpatientval where tblencounter.fldencounterval=&1", encid)
  If res.Available Then
    res.MoveLast
    xx = res[sField]
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetMotherEncounter(encid As String, Optional aCon As Connection) As String

  Dim xenc As String
  Dim res As Result
  Dim sCon As Connection

  If aCon Then
    sCon = aCon
  Else
    sCon = modDatabase.$myConn
  Endif
  res = sCon.Exec("select tblconfinement.fldencounterval AS fldencounterval from tblconfinement inner join tblencounter ON tblconfinement.fldbabypatno=tblencounter.fldpatientval where tblencounter.fldencounterval=&1", encid)
  If res.Available Then
    If res["fldencounterval"] Then
      xenc = res["fldencounterval"]
    Else
      xenc = ""
    Endif
  Else
    xenc = ""
  Endif
  Return xenc

End

Public Function GetObstetricFieldValue(xReference As String, xField As String) As Variant

  Dim res As Result
  Dim sVal As Variant

  res = modDatabase.$syConn.Exec(Subst("select &1 as col from tblobstetrics", xField) & " where flddelref=&1", xReference)
  If res.Available Then
    If res["col"] Then
      sVal = res["col"]
    Else
      sVal = ""
    Endif
  Else
    sVal = ""
  Endif

  Return sVal

End

''mother details from obs
Public Function GetObstetricFieldEnc(sField As String, encid As String) As Variant

  Dim res As Result
  Dim sVal As Variant
  Dim xdtstr As String

  xdtstr = modDate.GetSQLDateDiffStr("tblencounter.fldregdate", "tblobstetrics.fldexpect", modDatabase.$myConn)
  res = modDatabase.$syConn.Exec(Subst("select &1 as col from tblobstetrics", "tblobstetrics." & sField) & " inner join tblencounter on tblobstetrics.fldpatientval=tblencounter.fldpatientval where tblencounter.fldencounterval=&1 and tblobstetrics.fldlast<tblencounter.fldregdate and " & xdtstr & " <&2", encid, 90)
  If res.Available Then
    If res["col"] Then
      sVal = res["col"]
    Else
      sVal = ""
    Endif
  Else
    sVal = ""
  Endif

  Return sVal

End

''baby details from obs
Public Function GetObsFieldBabyEnc(sField As String, encid As String) As Variant

  Dim res As Result
  Dim sVal As Variant

  res = modDatabase.$syConn.Exec(Subst("select &1 as col from tblobstetrics", sField) & " where flddelref in(select fldreference from tblconfinement where fldbabypatno in(select fldpatientval from tblencounter where fldencounterval=&1))", encid)
  If res.Available Then
    If res["col"] Then
      sVal = res["col"]
    Else
      sVal = ""
    Endif
  Else
    sVal = ""
  Endif

  Return sVal

End

''Used on entry
Public Function GetLastMensDate(xRefNo As String) As Date

  Dim res As Result
  Dim xdate As Date

  res = modDatabase.$myConn.Exec("select fldlast from tblobstetrics where flddelref=&1 ORDER BY fldlast ASC", xRefNo)
  If res.Available Then
    res.MoveLast
    If res["fldlast"] Then
      xdate = res["fldlast"]
    Else
      xdate = ""
    Endif
  Else
    xdate = ""
  Endif

  Return xdate

End

Public Function GetLastObstReference(xPatNo As String) As String

  Dim res As Result
  Dim xval As String

  res = modDatabase.$myConn.Exec("select flddelref from tblobstetrics where fldpatientval=&1 and fldlast<&2 and fldexpect>&3 ORDER BY fldlast ASC", xPatNo, Now(), DateAdd(Now(), gb.Month, -3))
  If res.Available Then
    res.MoveLast
    If res["flddelref"] Then
      xval = res["flddelref"]
    Else
      xval = ""
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

'''------------------------------------- ENCOUNTER SPECIFIC ---------------------------------------------------------------------------
Public Function PatientFindingList(encid As String, strType As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]

  xx = New String[]
  sql = "select fldcode,fldcodenew from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3"
  res = modDatabase.$myConn.Exec(sql, encid, strType, True) '("Allergic Drugs","Final Diagnosis","Provisional Diagnosis")
  If res.Available = True Then
    For Each res
      If res["fldcodenew"] Then
        If res["fldcodenew"] = "Other" Then
          xx.Add(res["fldcode"])
        Else
          xx.Add("[" & res["fldcodenew"] & "] " & res["fldcode"])
        Endif
      Else
        xx.Add(res["fldcode"])
      Endif
    Next
  Else
    If strType = "Allergic Drugs" Then
      xx.Add("None")
    Endif
  Endif

  Return xx

End

Public Function PatientDiagnoCurrentList(encid As String) As String[]

  Dim xx As String[]

  xx = PatientFindingList(encid, "Final Diagnosis")
  If xx.Count = 0 Then
    xx = PatientFindingList(encid, "Provisional Diagnosis")
  Endif
  Return xx

End

Public Function PatientDiagnoCurrentCount(encid As String) As Integer

  Dim sql As String
  Dim res As Result
  Dim xx As Integer

  sql = "select fldcode,fldcodenew from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4"
  res = modDatabase.$myConn.Exec(sql, encid, "Provisional Diagnosis", "Final Diagnosis", True)
  If res.Available Then
    xx = res.Count
  Else
    xx = 0
  Endif
  Return xx

End

Public Function PatientDiagnoClassList(encid As String, strType As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]

  xx = New String[]
  sql = "select distinct(fldcodenew) as col from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3"
  res = modDatabase.$myConn.Exec(sql, encid, strType, True) '("Final Diagnosis","Provisional Diagnosis")
  If res.Available = True Then
    For Each res
      If res["col"] Then
        xx.Add(res["col"])
      Endif
    Next
    xx.Sort(gb.Ascent)
  Endif

  Return xx

End

Public Function PatientDiagnoCurClassList(encid As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]
  Dim res1 As Result

  xx = New String[]
  sql = "select distinct(fldcodenew) as col from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3"
  res = modDatabase.$myConn.Exec(sql, encid, "Final Diagnosis", True)
  If res.Available = True Then
    For Each res
      If res["col"] Then
        xx.Add(res["col"])
      Endif
    Next
    xx.Sort(gb.Ascent)
  Else
    res1 = modDatabase.$myConn.Exec(sql, encid, "Provisional Diagnosis", True)
    If res1.Available Then
      For Each res1
        If res1["col"] Then
          xx.Add(res1["col"])
        Endif
      Next
      xx.Sort(gb.Ascent)
    Endif
  Endif

  Return xx

End

''---------------------------------------------- demographics -----------------------------
Public Function GetAccDemographicType(sItem As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldoption from tblaccdemograp where flddemoid=&1", sItem)
  If res.Available Then
    If res["fldoption"] Then
      xx = res["fldoption"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetAccDemographicOptionList(sName As String, sType As String) As String[]

  Dim res As Result
  Dim opt As String[]

  res = modDatabase.$myConn.Exec("select fldanswer from tblaccdemogoption where flddemoid=&1 and fldanswertype like &2 ORDER BY fldindex", sName, sType)
  opt = modControlSub.GetDirectFillresult(res)

  Return opt

End

Public Function GetDemographAccountValue(encid As String, sDemographic As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreportquali from tblpataccgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3", encid, "Demographics", sDemographic)
  If res.Available Then
    If res["fldreportquali"] Then
      xx = res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

'NOTE: --------------------- Consult -------------------------------
Public Function GetPatientCOnsultList(encid As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  xxx = New String[]
  res = modDatabase.$myConn.Exec("select fldconsultname,fldconsulttime,fldstatus,fldorduserid from tblconsult where fldencounterval=&1", encid)
  If res.Available Then
    For Each res
      If modBasic.$ShowDayMedReport = "User" Then
        xxx.Add(res["fldconsultname"] & " (" & res["fldstatus"] & ")" & gb.NewLine & "[User: " & res["fldorduserid"] & "]")
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xxx.Add(modReportVar.GetDateTimeReport(res["fldconsulttime"], gb.GeneralDate) & " : " & res["fldconsultname"] & " (" & res["fldstatus"] & ")" & gb.NewLine & "[User: " & res["fldorduserid"] & "]")
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xxx.Add(modReportVar.GetDateTimeReport(res["fldconsulttime"], gb.GeneralDate) & " : " & res["fldconsultname"] & " (" & res["fldstatus"] & ")")
      Else
        xxx.Add(res["fldconsultname"] & " (" & res["fldstatus"] & ")")
      Endif
    Next
  Endif
  Return xxx

End

Public Function GetAttendingConsultant(encid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flduserid from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["flduserid"] Then
      xx = res["flduserid"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetLastConsultBillMode(encid As String, sDepart As String) As String

  Dim sBillMode As String
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldbillingmode from tblconsult where fldencounterval=&1 and fldbillingmode=&2", encid, sDepart)
  If res.Available Then
    res.MoveLast
    If res["fldbillingmode"] Then
      sBillMode = res["fldbillingmode"]
    Else
      sBillMode = ""
    Endif
  Else
    sBillMode = ""
  Endif
  Return sBillMode

End

''------------------------------ Patient SUbscripts --------------------------------
Public Sub GetPatientNoPrefixes()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldid,fldpatno,fldpatlen,fldencid,fldenclen,fldbooking,fldbooklen,fldhospcode from tblpatsubs")
  If res.Available Then
    res.MoveLast
    If MMain.$WebEntry = True Then
    Else
      If res["fldhospcode"] Then
        modBasic.$HospCode = res["fldhospcode"]
      Else
        modBasic.$HospCode = ""
      Endif
    Endif

    If res["fldpatno"] Then
      modBasic.$PatNoPrefix = res["fldpatno"]
    Else
      modBasic.$PatNoPrefix = ""
    Endif
    If res["fldencid"] Then
      modBasic.$EncIdPrefix = res["fldencid"]
    Else
      modBasic.$EncIdPrefix = ""
    Endif
    If res["fldbooking"] Then
      modBasic.$BookNoPrefix = res["fldbooking"]
    Else
      modBasic.$BookNoPrefix = ""
    Endif

    If res["fldpatlen"] Then
      modBasic.$PatNoLen = res["fldpatlen"]
    Else
      modBasic.$PatNoLen = 0
    Endif
    If res["fldenclen"] Then
      modBasic.$EncIdLen = res["fldenclen"]
    Else
      modBasic.$EncIdLen = 0
    Endif
    If res["fldbooklen"] Then
      modBasic.$BookNoLen = res["fldbooklen"]
    Else
      modBasic.$BookNoLen = 0
    Endif

  Else
    modBasic.$HospCode = ""
    modBasic.$PatNoPrefix = ""
    modBasic.$EncIdPrefix = ""
    modBasic.$BookNoPrefix = ""
    modBasic.$PatNoLen = 0
    modBasic.$EncIdLen = 0
    modBasic.$BookNoLen = 0
  Endif

End

Public Function PatientParameterPresent(patno As String) As Boolean

  Dim sql As String
  Dim res As Result
  Dim xx As Boolean

  sql = "select fldptaddvill,fldptaddward,fldptadddist,fldptcontact,fldptguardian,fldptbirday,fldptadmindate,fldemail,fldrelation,fldptcode from tblpatientinfo where fldpatientval = &1 "                                    ''"
  res = modDatabase.$myConn.Exec(sql, patno)

  xx = True
  If res.Available Then
    If modBasic.$RegistEssAddress = "Yes" Then
      If Not res["fldptaddvill"] Then
        xx = False
      Endif
    Endif

    ' If modBasic.$AdmitEssWardNo = "Yes" Then
    '   If Not res["fldptaddward"] Then
    '     xx = False
    '   Endif
    ' Endif

    If modBasic.$RegistEssDistrict = "Yes" Then
      If Not res["fldptadddist"] Then
        xx = False
      Endif
    Endif

    If modBasic.$RegistEssAge = "Yes" Then
      If Not res["fldptbirday"] Then
        xx = False
      Endif
    Endif

    If modBasic.$RegistEssGuardian = "Yes" Then
      If Not res["fldptguardian"] Then
        xx = False
      Endif
    Endif

    If modBasic.$RegistEssRelation = "Yes" Then
      If Not res["fldrelation"] Then
        xx = False
      Endif
    Endif

    If modBasic.$RegistEssContact = "Yes" Then
      If Not res["fldptcontact"] Then
        xx = False
      Endif
    Endif

    If modBasic.$RegistEssEMail = "Yes" Then
      If Not res["fldemail"] Then
        xx = False
      Endif
    Endif

    If modBasic.$RegistEssCode = "Yes" Then
      If Not res["fldptcode"] Then
        xx = False
      Endif
    Endif
  Endif
  Return xx

End

''----------------------------------- BOOKING ------------------------------------------
Public Function GetPatFullNameBooking(bookid As String) As String

  Dim res As Result
  Dim xx As String
  Dim firname As String
  Dim lstname As String

  res = modDatabase.$myConn.Exec("select fldptnamefir,fldptnamelast from tblpatientbook where fldbookingval=&1", bookid)
  If res.Available Then
    If res["fldptnamefir"] Then
      firname = res["fldptnamefir"]
    Else
      firname = ""
    Endif
    If res["fldptnamelast"] Then
      lstname = res["fldptnamelast"]
    Else
      lstname = ""
    Endif

    If modBasic.$PatNameFormat = "Name+Surname" Then
      xx = firname & Space(1) & lstname
    Else If modBasic.$PatNameFormat = "Surname+Name" Then
      xx = lstname & Space(1) & firname
    Else
      xx = firname & Space(1) & lstname
    Endif

  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatRemoteMailBooking(bookid As String) As String

  Dim res As Result
  Dim xemail As String

  res = modDatabase.$myConn.Exec("select fldremotemail from tblpatientbook where fldbookingval=&1", bookid)
  If res.Available Then
    If res["fldremotemail"] Then
      xemail = res["fldremotemail"]
    Else
      xemail = ""
    Endif
  Else
    xemail = ""
  Endif

  Return xemail

End

Public Function GetPatRemoteOnlineBooking(bookid As String) As String

  Dim res As Result
  Dim xemail As String

  res = modDatabase.$myConn.Exec("select fldremotemail from tblonlinebook where fldbookingval=&1", bookid)
  If res.Available Then
    If res["fldremotemail"] Then
      xemail = res["fldremotemail"]
    Else
      xemail = ""
    Endif
  Else
    xemail = ""
  Endif

  Return xemail

End

Public Function GetLastVisitDate(encid As String) As Date

  Dim xdate As Date
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldconsulttime from tblconsult where fldencounterval=&1", encid)
  If res.Available Then
    res.MoveLast
    xdate = res["fldconsulttime"]
  Else
    xdate = modPatient.GetRecordDate(encid)
  Endif
  Return xdate

End

Public Function GetLastVisitLocation(encid As String) As String

  Dim xlocat As String
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldconsultname from tblconsult where fldencounterval=&1", encid)
  If res.Available Then
    res.MoveLast
    xlocat = res["fldconsultname"]
  Else
    xlocat = modPatient.GetAdmitLocation(encid)
  Endif
  Return xlocat

End

Public Sub GetRegistrationAllow(xpatno As String, Optional xDept As String) As Boolean

  Dim res As Result
  Dim xallow As Boolean
  Dim res1 As Result

  If modBasic.$RegistOneDaily = "OnePerDay" Then
    res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldpatientval=&1 and fldregdate>=&2 and fldregdate<=&3", xpatno, modDate.StartSqlDate(Now()), modDate.EndSqlDate(Now()))
    If res.Available Then
      xallow = False
    Else
      xallow = True
    Endif

  Else If modBasic.$RegistOneDaily = "OnePerCompPerDay" Then
    res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldpatientval=&1 and fldregdate>=&2 and fldregdate<=&3 and fldcomp=&4", xpatno, modDate.StartSqlDate(Now()), modDate.EndSqlDate(Now()), modBasic.$compID)
    If res.Available Then
      xallow = False
    Else
      xallow = True
    Endif

  Else If modBasic.$RegistOneDaily = "None" Then
    xallow = True

  Else
    res1 = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldpatientval=&1 and fldadmission=&2", xpatno, "Admitted")
    If res1.Available Then
      xallow = False
    Else
      If xDept Then
        If modBasic.$RegERDeparts.Exist(xDept) = True Then
          xallow = True
        Else
          xallow = False
        Endif

      Else
        res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldpatientval=&1 and fldregdate>=&2 and fldregdate<=&3", xpatno, modDate.StartSqlDate(Now()), modDate.EndSqlDate(Now()))
        If res.Available Then
          xallow = False
        Else
          xallow = True
        Endif

      Endif
    Endif

  Endif

  Return xallow

End

Public Function GetLastPaidConsultDate(xpatno As String) As Date

  Dim res As Result
  Dim res1 As Result
  Dim xdate As Date

  res1 = modDatabase.$myConn.Exec("select fldregdate from tblencounter where fldpatientval=&1 and fldfollow=&2 ORDER BY fldregdate ASC", xpatno, "New")
  If res1.Available Then
    res1.MoveLast
    If res1["fldregdate"] Then
      xdate = res1["fldregdate"]
    Else
      xdate = ""
    Endif
  Else
    xdate = ""
  Endif

  If Not xdate Then
    res = modDatabase.$myConn.Exec("select tblconsult.fldconsulttime AS fldconsulttime from tblconsult inner join tblencounter ON tblconsult.fldencounterval=tblencounter.fldencounterval where tblencounter.fldpatientval=&1 and tblconsult.fldcomment=&2 ORDER BY tblconsult.fldconsulttime ASC", xpatno, "Paid Consultation")
    If res.Available Then
      res.MoveLast
      If res["fldconsulttime"] Then
        xdate = res["fldconsulttime"]
      Else
        xdate = ""
      Endif
    Else
      xdate = ""
    Endif
  Endif
  Return xdate

End

''------------------------- HMIS -------------------------
''get Patient Status
Public Function GetPatientHMISStattus(sPatNo As String) As String

  Dim xval As String
  Dim res As Result
  Dim xDate As Date

  If sPatNo Then
    xDate = modDate.GetNepaliFiscalYarStart(Now())
    If xDate Then
      res = modDatabase.$myConn.Limit(1).Exec("select fldencounterval from tblencounter where fldpatientval=&1 and fldregdate>=&2", sPatNo, xDate)
      If res.Available Then
        xval = "OLD"
      Else
        xval = "NEW"
      Endif
    Else
      res = modDatabase.$myConn.Limit(1).Exec("select fldencounterval from tblencounter where fldpatientval=&1", sPatNo)
      If res.Available Then
        xval = "OLD"
      Else
        xval = "NEW"
      Endif
    Endif
  Else
    xval = "NEW"
  Endif
  Return xval

End

Public Function GetPatientHMISRegValue(encid As String) As String

  Dim xval As String
  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldregistid from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldregistid"] Then
      xval = res["fldregistid"]
    Else
      xval = ""
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

Public Function GetPatientHMISRegVal(sPatNo As String) As String

  Dim xval As String
  Dim res As Result
  Dim xDate As Date

  If sPatNo Then
    xDate = modDate.GetNepaliFiscalYarStart(Now())
    If xDate Then
      res = modDatabase.$myConn.Limit(1).Exec("select fldregistid from tblencounter where fldpatientval=&1 and fldregdate>=&2 ORDER BY fldregdate", sPatNo, xDate)
      If res.Available Then
        If res["fldregistid"] Then
          xval = res["fldregistid"]
        Else
          xval = modBillLock.GetHMISRegVal("Master")
        Endif
      Else
        xval = modBillLock.GetHMISRegVal("Master")
      Endif
    Endif
  Else
    xval = modBillLock.GetHMISRegVal("Master")
  Endif
  Return xval

End

Public Function GetPatientHMISAdmission(sPatNo As String) As String

  Dim xval As String
  Dim res As Result
  Dim xDate As Date

  If sPatNo Then
    xDate = modDate.GetNepaliFiscalYarStart(Now())
    If xDate Then
      res = modDatabase.$myConn.Limit(1).Exec("select fldadmitid from tblencounter where fldpatientval=&1 and flddoa>=&2 ORDER BY fldregdate", sPatNo, xDate)
      If res.Available Then
        If res["fldadmitid"] Then
          xval = res["fldadmitid"]
        Else
          xval = modBillLock.GetHMISRegVal("Indoor")
        Endif
      Else
        xval = modBillLock.GetHMISRegVal("Indoor")
      Endif
    Endif
  Else
    xval = modBillLock.GetHMISRegVal("Indoor")
  Endif
  Return xval

End

Public Function GetPatientHMISConsult(encid As String) As String

  Dim xval As String
  Dim res As Result
  Dim xDate As Date

  If encid Then
    xDate = modDate.GetNepaliFiscalYarStart(Now())
    If xDate Then
      res = modDatabase.$myConn.Limit(1).Exec("select fldconsultid,fldcomment from tblconsult where fldencounterval=&1 and fldconsulttime>=&2 and fldconsultid like &3 ORDER BY fldtime", encid, xDate, "%")
      If res.Available Then
        res.MoveFirst
        If res["fldconsultid"] Then
          xval = res["fldconsultid"]
        Else
          xval = modBillLock.GetHMISRegVal("Consult")
        Endif
      Else
        xval = modBillLock.GetHMISRegVal("Consult")
      Endif
    Endif
  Else
    xval = modBillLock.GetHMISRegVal("Consult")
  Endif
  Return xval

End

Public Function GetDeliveryHMISVal(sPatNo As String) As String

  Dim xval As String
  Dim res As Result

  res = modDatabase.$myConn.Exec("select flddelref from tblobstetrics where fldlast<&1 and fldexpect>&2 and fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&3) ORDER BY fldtime", Now(), DateAdd(Now(), gb.Month, -3), sPatNo)
  If res.Available Then
    res.MoveFirst
    If res["flddelref"] Then
      xval = res["flddelref"]
    Else
      xval = modBillLock.GetHMISRegVal("Delivery")
    Endif
  Else
    xval = modBillLock.GetHMISRegVal("Delivery")
  Endif

  Return xval

End

''------------------------ claim code --------------------
Public Function GetPatientNHSIbyCode(claimcode As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldptcode from tblclaimcode where fldclaimid=&1", claimcode)
  If res.Available Then
    If res["fldptcode"] Then
      xx = res["fldptcode"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatientSSFbyCode(claimcode As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldptcode from tblssfclaim where fldclaimid=&1", claimcode)
  If res.Available Then
    If res["fldptcode"] Then
      xx = res["fldptcode"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

''from encounter
Public Function GetPatientNHSIbyEncounter(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldptcode from tblclaimcode where fldencounterval=&1", encid)
  If res.Available Then
    res.MoveFirst
    If res["fldptcode"] Then
      xx = res["fldptcode"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatientSSFbyEncounter(encid As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$myConn
  Endif

  res = $con.Exec("select fldptcode from tblssfclaim where fldencounterval=&1", encid)
  If res.Available Then
    res.MoveFirst
    If res["fldptcode"] Then
      xx = res["fldptcode"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

''-------------------- HMIS ID View only ---------------------
Public Function GetHMISAdmissionNo(encid As String) As String

  Dim res As Result
  Dim xval As String

  res = modDatabase.$myConn.Exec("select fldadmitid from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldadmitid"] Then
      xval = res["fldadmitid"]
    Else
      xval = ""
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

''------------------------------- HAI summary --------------------------------
Public Function GetHaiClassificationSet(encid As String, sType As String) As String

  Dim res As Result
  Dim xclass As String

  If sType = "BSI" Then
    res = modDatabase.$myConn.Exec("select fldbsiclassify from tblhaicasereports where fldencounterval=&1", encid)
  Else If sType = "UTI" Then
    res = modDatabase.$myConn.Exec("select flduticlassify from tblhaicasereports where fldencounterval=&1", encid)
  Endif
  If res.Available Then
    If res["flduticlassify"] Then
      xclass = res["flduticlassify"]
    Else
      xclass = ""
    Endif
  Else
    xclass = ""
  Endif

  Return xclass

End

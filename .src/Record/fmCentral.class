' Gambas class file

Private $sType As String
Private $tblSet As String
Private $linkCon As Connection
Private $TableList As String[]

Public Sub _new(sType As String)

  Dim $curCon As Connection

  $sType = sType
  Me.Title = $sType

  If $sType = "Repository" Then
    $tblSet = "DataUpload"
  Else If $sType = "LocalRepository" Then
    $tblSet = "LocalUpload"
  Endif

  cmbtype.List = ["sqlite3", "mysql", "postgresql", "odbc", "http"]
  cmbcomp.List = modBasic.$AllCompList
  cmbcomp.Text = modBasic.$compID

  $curCon = modDBApp.OpenConnection("sqlite3", modHelpVariable.AppDirectory, "current", "", "")
  $TableList = modDBApp.DBRegularTablesSelField($curCon, ["xyz"])

End

Public Sub btnrefresh_Click()

  If cmbcomp.Text Then
    ListBox2.List = modGlobalSetting.ShowTableSettingDB(cmbcomp.Text, $tblSet)
  Endif

End

Public Sub btnaddlocal_Click()

  Dim xx As String[]
  Dim tablist As String[]

  tablist = modString.GetRemainingArray($TableList, ListBox2.List)
  xx = SelectListView("Insert Table Name", tablist, False)
  If xx Then
    modGlobalSetting.AddTableListDB(cmbcomp.Text, $tblSet, xx)
    ListBox2.List = modGlobalSetting.ShowTableSettingDB(cmbcomp.Text, $tblSet)
  Endif

End

Public Sub mnudelsing_Click()

  modDatabase.$myConn.Delete("tbltabsettings", "fldcomp=&1 and fldcategory=&2 and fldvalue=&3", cmbcomp.Text, $tblSet & "/TableList", ListBox2.Text)                                   ''
  ListBox2.List = modGlobalSetting.ShowTableSettingDB(cmbcomp.Text, $tblSet)

End

Public Sub mnudelall_Click()

  Dim xx As String

  For Each xx In ListBox2.List
    modDatabase.$myConn.Delete("tbltabsettings", "fldcomp=&1 and fldcategory=&2 and fldvalue=&3", cmbcomp.Text, $tblSet & "/TableList", xx)                                   ''
  Next
  ListBox2.List = modGlobalSetting.ShowTableSettingDB(cmbcomp.Text, $tblSet)

End

''====================== DATABASE ========================
Private Sub SaveRepoSettingsToFile(strSetting As String, strVal As String)

  Dim ConfFile As Settings

  If $sType = "Repository" Then
    ConfFile = New Settings(modHelpVariable.AppDirectory &/ "/sishrepository.conf")
  Else If $sType = "LocalRepository" Then
    ConfFile = New Settings(modHelpVariable.AppDirectory &/ "/localrepository.conf")
  Endif
  ConfFile[strSetting] = Trim(strVal)

End

Public Sub btnsave_Click()

  Dim sPass As String
  Dim xdir As String
  Dim xPath As String
  Dim xfile As String

  Dim xx As String
  Dim xval As String

  SaveRepoSettingsToFile($sType & "/UseOpenSSL", "Yes")
  SaveRepoSettingsToFile($sType & "/Service", cmbtype.Text)
  If cmbtype.Text = "http" Then
    SaveRepoSettingsToFile($sType & "/URL", txtserver.Text)
  Else
    SaveRepoSettingsToFile($sType & "/Host", txtserver.Text)
  Endif
  SaveRepoSettingsToFile($sType & "/User", txtuser.Text)
  SaveRepoSettingsToFile($sType & "/Password", modPassword.EncryptDBPass(txtpass.Text, True))
  SaveRepoSettingsToFile($sType & "/Database", txtdb.Text)
  If txtport.Text Then
    SaveRepoSettingsToFile($sType & "/Port", txtport.Text)
  Endif
  SaveRepoSettingsToFile($sType & "/CryptValue", txtcrypt.Text)
  SaveRepoSettingsToFile($sType & "/StartDate", CStr(dtstart.Value))

  SaveRepoSettingsToFile($sType & "/FTPHost", txtftpserver.Text)
  SaveRepoSettingsToFile($sType & "/FTPFolder", txtftpfolder.Text)
  SaveRepoSettingsToFile($sType & "/FTPUser", txtftpuser.Text)
  SaveRepoSettingsToFile($sType & "/FTPPassword", modPassword.EncryptDBPass(txtftpass.Text, True))

  SaveRepoSettingsToFile($sType & "/PACSHost", txtpacshost.Text)
  SaveRepoSettingsToFile($sType & "/PACSAETitle", txtpacsAET.Text)
  SaveRepoSettingsToFile($sType & "/PACSPort", txtpacsport.Text)
  SaveRepoSettingsToFile($sType & "/PACSUser", txtpacsuser.Text)
  SaveRepoSettingsToFile($sType & "/PACSPassword", modPassword.EncryptDBPass(txtpacspass.Text, True))

  If $sType = "Repository" Then
    ' xfile = "sishrepository.conf"
    ' If System.Exist("7z") Then
    '   xdir = modHelpVariable.AppCacheDir
    '   modExternal.CreateNewCacheFile(xdir, xfile)
    '   modDevAll.Get7ZCompression(modHelpVariable.AppDirectory &/ xfile, modHelpVariable.$CryptRepoZip, xdir &/ xfile & ".7z")
    '   xPath = xdir &/ xfile & ".7z"
    '   Kill modHelpVariable.AppDirectory &/ xfile
    '
    '   sPass = InputPassword(("Enter Password for Super User"), ("Super User"), "")
    '   modExternal.ReplaceFileAsRoot(xPath, modHelpVariable.$appetcFolder, sPass)
    '   Wait
    '   If Exist(xdir) Then
    '     modExternal.DeleteFolderRecursive(xdir)
    '   Endif
    '
    ' Else
    '   modApplSub.InstallSelectedApplication(["p7zip-full"])
    ' Endif
  Else If $sType = "LocalRepository" Then
    xfile = "localrepository.conf"
    xval = File.Load(modHelpVariable.AppDirectory &/ xfile)
    xx = GetTextArea("Save the content to /etc/" & Application.Name &/ xfile, xval)
  Endif

End

Private Sub SHowDBParam()

  If $sType = "Repository" Then
    modRepository.ReadRemoteRepoConfig()
  Else If $sType = "LocalRepository" Then
    modRepository.ReadLocalRepoConfig()
  Endif

  cmbtype.Text = modRepository.$RepoService
  If modRepository.$RepoService = "http" Then
    txtserver.Text = modRepository.$RepoURL
  Else
    txtserver.Text = modRepository.$RepoHost
  Endif
  txtuser.Text = modRepository.$RepoUser
  txtpass.Text = modRepository.$RepoPassword
  txtdb.Text = modRepository.$RepoDatabase
  If modRepository.$RepoPort Then
    txtport.Text = CInt(modRepository.$RepoPort)
  Endif
  txtcrypt.Text = modRepository.$RepoCryptValue
  dtstart.Value = modRepository.$RepoStartDate

  txtftpserver.Text = modRepository.$RepoFTPHost
  txtftpfolder.Text = modRepository.$RepolFTPFolder
  txtftpuser.Text = modRepository.$RepoFTPUser
  txtftpass.Text = modRepository.$RepoFTPPassword

  txtpacshost.Text = modRepository.$RepoPACSHost
  txtpacsAET.Text = modRepository.$RepolPACSAETtitle
  txtpacsport.Text = modRepository.$RepoPACSPort
  txtpacsuser.Text = modRepository.$RepoPACSUser
  txtpacspass.Text = modRepository.$RepoPACSPassword

End

Public Sub btnload_Click()

  SHowDBParam()

End

Public Sub btnconnect_Click()

  $linkCon = modDBApp.OpenConnection(cmbtype.Text, txtserver.Text, txtdb.Text, txtuser.Text, txtpass.Text, txtport.Text)
  If $linkCon.Opened = True Then
    Message.Info(("Connection Successful"), ("OK"))
  Endif

End

Public Sub txtport_GotFocus()

  If cmbtype.Text = "http" Then
    txtport.ReadOnly = True
  Else
    txtport.ReadOnly = False
  Endif

End

Public Sub btnclose_Click()

  Me.Close

End

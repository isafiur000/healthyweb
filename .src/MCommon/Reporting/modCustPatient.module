' Gambas module file

''----------- summation -------------------
Public $SumChapterColumn As Integer
Private $SumChapterScript As String
Private $SumChapterShell As String
Private $SumChapterTrans As String
Private $SumChapterColl As Collection

Public $SumGroupColumn As Integer
Private $SumGroupScript As String
Private $SumGroupShell As String
Private $SumGroupTrans As String
Private $SumGroupColl As Collection

Public $SumValueColumn As Integer
Public $SummaryType As String
Public $SumExcludeNull As String

''---------- cross tabulation --------------
Public $TabUseBivarData As String
Public $TabRowColumn As String
Public $TabRowScript As String
Public $TabRowShell As String
Public $TabRowTrans As String
Public $TabRowColl As Collection
Public $TabRowExclude As String

Public $TabFieldColumn As String
Public $TabFieldScript As String
Public $TabFieldShell As String
Public $TabFieldTrans As String
Public $TabFieldColl As Collection
Public $TabFieldExclude As String

''----------- timeseries --------------
''independent (prevalue)
Public $TimeUseGridValRow As String
Public $TimeIndepType As String

Public $TimeGridRow As Integer
Private $TimeGridSQLTextRow As String
Public $TimeGridOptionFirRow As Integer
Private $TimeGridOptionSecRow As String
Private $TimeGridOptionThirRow As String

Private $TimeRowVariable As String
Private $TimeSQLTextRow As String
Private $TimeOptionFirRow As String
Private $TimeOptionSecRow As String
Private $TimeOptionThirRow As String

Private $TimeRowScript As String
Private $TimeRowShell As String
Private $TimeRowTrans As String
Private $TimeRowColl As Collection

Private $TimeRowLow As Float
Private $TimeRowHigh As Float

'dependent (postvalue)
Public $TimeUseGridValCol As String
Public $TimeOutcomeType As String

Public $TimeGridColumn As Integer
Private $TimeGridSQLTextCol As String
Public $TimeGridOptionFirCol As Integer
Private $TimeGridOptionSecCol As String
Private $TimeGridOptionThirCol As String

Private $TimeColVariable As String
Private $TimeSQLTextCol As String
Private $TimeOptionFirCol As String
Private $TimeOptionSecCol As String
Private $TimeOptionThirCol As String

Private $TimeColScript As String
Private $TimeColShell As String
Private $TimeColTrans As String
Private $TimeColColl As Collection

Private $TimeColLow As Float
Private $TimeColHigh As Float

''------------- Rgresion -----------------
''dependent
Public $RegDepUseGridVal As String
Public $RegDepGrid As Integer
Private $RegDepGridSQLText As String
Public $RegDepGridOptionFir As Integer
Private $RegDepGridOptionSec As String
Private $RegDepGridOptionThir As String

Public $RegDepVariable As String
Public $RegDepSQLText As String
Private $RegDepOptionFir As String
Private $RegDepOptionSec As String
Private $RegDepOptionThir As String

Private $RegDepScript As String
Private $RegDepShell As String

Private $RegDepLow As Float
Private $RegDepHigh As Float

''variable1
Public $RegVar1UseGridVal As String
Public $RegVar1Grid As Integer
Private $RegVar1GridSQLText As String
Public $RegVar1GridOptionFir As Integer
Private $RegVar1GridOptionSec As String
Private $RegVar1GridOptionThir As String

Public $RegVar1Variable As String
Public $RegVar1SQLText As String
Private $RegVar1OptionFir As String
Private $RegVar1OptionSec As String
Private $RegVar1OptionThir As String

Private $RegVar1Script As String
Private $RegVar1Shell As String

Private $RegVar1Low As Float
Private $RegVar1High As Float

''var2
Public $RegVar2UseGridVal As String
Public $RegVar2Grid As Integer
Private $RegVar2GridSQLText As String
Public $RegVar2GridOptionFir As Integer
Private $RegVar2GridOptionSec As String
Private $RegVar2GridOptionThir As String

Public $RegVar2Variable As String
Public $RegVar2SQLText As String
Private $RegVar2OptionFir As String
Private $RegVar2OptionSec As String
Private $RegVar2OptionThir As String

Private $RegVar2Script As String
Private $RegVar2Shell As String

Private $RegVar2Low As Float
Private $RegVar2High As Float

''var3
Public $RegVar3UseGridVal As String
Public $RegVar3Grid As Integer
Private $RegVar3GridSQLText As String
Public $RegVar3GridOptionFir As Integer
Private $RegVar3GridOptionSec As String
Private $RegVar3GridOptionThir As String

Public $RegVar3Variable As String
Public $RegVar3SQLText As String
Private $RegVar3OptionFir As String
Private $RegVar3OptionSec As String
Private $RegVar3OptionThir As String

Private $RegVar3Script As String
Private $RegVar3Shell As String

Private $RegVar3Low As Float
Private $RegVar3High As Float

''var4
Public $RegVar4UseGridVal As String
Public $RegVar4Grid As Integer
Private $RegVar4GridSQLText As String
Public $RegVar4GridOptionFir As Integer
Private $RegVar4GridOptionSec As String
Private $RegVar4GridOptionThir As String

Public $RegVar4Variable As String
Public $RegVar4SQLText As String
Private $RegVar4OptionFir As String
Private $RegVar4OptionSec As String
Private $RegVar4OptionThir As String

Private $RegVar4Script As String
Private $RegVar4Shell As String

Private $RegVar4Low As Float
Private $RegVar4High As Float

''var5
Public $RegVar5UseGridVal As String
Public $RegVar5Grid As Integer
Private $RegVar5GridSQLText As String
Public $RegVar5GridOptionFir As Integer
Private $RegVar5GridOptionSec As String
Private $RegVar5GridOptionThir As String

Public $RegVar5Variable As String
Public $RegVar5SQLText As String
Private $RegVar5OptionFir As String
Private $RegVar5OptionSec As String
Private $RegVar5OptionThir As String

Private $RegVar5Script As String
Private $RegVar5Shell As String

Private $RegVar5Low As Float
Private $RegVar5High As Float

''----------- crosstab --------------
''independent
Public $CrossUseGridValRow As String
Public $CrossIndepType As String

Public $CrossGridRow As Integer
Private $CrosGridSQLTextRow As String
Public $CrosGridOptionFirRow As Integer
Private $CrosGridOptionSecRow As String
Private $CrosGridOptionThirRow As String

Private $CrosRowVariable As String
Private $CrosSQLTextRow As String
Private $CrosOptionFirRow As String
Private $CrosOptionSecRow As String
Private $CrosOptionThirRow As String

Private $CrossRowScript As String
Private $CrossRowShell As String
Private $CrossRowTrans As String
Private $CrossRowColl As Collection

Private $CrossRowLow As Float
Private $CrossRowHigh As Float

'dependent
Public $CrossUseGridValCol As String
Public $CrossOutcomeType As String

Public $CrossGridColumn As Integer
Private $CrosGridSQLTextCol As String
Public $CrosGridOptionFirCol As Integer
Private $CrosGridOptionSecCol As String
Private $CrosGridOptionThirCol As String

Private $CrosColVariable As String
Private $CrosSQLTextCol As String
Private $CrosOptionFirCol As String
Private $CrosOptionSecCol As String
Private $CrosOptionThirCol As String

Private $CrossColScript As String
Private $CrossColShell As String
Private $CrossColTrans As String
Private $CrossColColl As Collection

Private $CrossColLow As Float
Private $CrossColHigh As Float

''--------------- univariate ----------------
Public $EncUseGridVal As String

Public $EncGridIndex As Integer
Private $EncGridSQLText As String
Public $EncGridOptionFir As Integer
Private $EncGridOptionSec As String
Private $EncGridOptionThir As String

Private $EncVariable As String
Private $EncSQLText As String
Private $EncOptionFir As String
Private $EncOptionSec As String
Private $EncOptionThir As String

Private $EncScript As String
Private $EncShell As String
Private $EncTrans As String
Private $EncColl As Collection

Private $EncLower As Float
Private $EncUpper As Float

''====================================================
''------------------ custom report ---------------------
Private $ReportSQLText As String
Private $ReportArrayOut As String
Private $ReportOptionFir As String
Private $ReportOptionSec As String
Private $ReportOptionThir As String
Private $ReportVariable As String
Private $ReportFormatScript As String
Private $ReportFormatShell As String

Public $extColumnColl As Collection
Public $newColumnColl As Collection
Public $FormatColumnColl As Collection

''============================ Report column format ====================================================
Public Sub LoadReportColumnFOrmat()

  $ReportSQLText = modSettings.ShowSettingFromFIle("ReportColumnFormat/SQLText")
  $ReportArrayOut = modSettings.ShowSettingFromFIle("ReportColumnFormat/ArrayOutput")
  $ReportOptionFir = modSettings.ShowSettingFromFIle("ReportColumnFormat/Option1")
  $ReportOptionSec = modSettings.ShowSettingFromFIle("ReportColumnFormat/Option2")
  $ReportOptionThir = modSettings.ShowSettingFromFIle("ReportColumnFormat/Option3")
  $ReportVariable = modSettings.ShowSettingFromFIle("ReportColumnFormat/PatVariable")
  $ReportFormatScript = modSettings.ShowSettingFromFIle("ReportColumnFormat/FormatScript")
  $ReportFormatShell = modSettings.ShowSettingFromFIle("ReportColumnFormat/FormatShell")

End

Public Function ReportCustColumnValue(sText As String) As Variant

  Dim sql As String
  Dim opt1 As String
  Dim opt2 As String
  Dim opt3 As String

  Dim res As Result
  Dim xx As Variant
  Dim xfinal As Variant
  Dim ref As String
  Dim xval As String[]

  If $ReportVariable Then
    xx = modReportVar.GetPatientVariableValue($ReportVariable, sText)

  Else
    If $ReportSQLText Then
      sql = "SELECT " & modDBApp.GetSecureSQL($ReportSQLText)
      opt1 = $ReportOptionFir
      If opt1 = "{ColumnData}" Then
        opt1 = sText
      Endif
      opt2 = $ReportOptionSec
      opt3 = $ReportOptionThir

      If modMisc.CheckRestrictedKey(sql) = 0 Then
        res = modDatabase.$syConn.Exec(sql, opt1, opt2, opt3)
        If res.Available Then
          ref = modDBApp.FirstResultField(res)
          If $ReportArrayOut = "Yes" Then
            xval = New String[]
            For Each res
              xval.Add(res[ref])
            Next
            xx = xval.Join(gb.NewLine)
          Else
            res.MoveLast
            xx = res[ref]
          Endif
        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif

    Else
      xx = sText
    Endif

  Endif

  xfinal = modExternal.GerScriptValueNoCache($ReportFormatScript, $ReportFormatShell, xx)
  Return xfinal

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

''============================== Extra Columns =========================================
Public Sub FillCOlumnCollection($FormName As String)

  Dim j As Integer

  $extColumnColl = New Collection
  For j = 1 To 99
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Title"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Title")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "PatVariable"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "PatVariable")                                                                                 ''
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "ValueColumn"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "ValueColumn")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "SQLText"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "SQLText")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Option1"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Option1")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Option2"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Option2")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Option3"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Option3")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Format"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Format")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "ArrayOutput"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "ArrayOutput")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "GridColumn"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "GridColumn")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "GridSecColumn"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "GridSecColumn")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "GridThrdColumn"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "GridThrdColumn")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "FormatScript"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "FormatScript")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "FormatShell"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "FormatShell")
    $extColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Translate"), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Translate")
    If modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Translate") = "Yes" Then
      $extColumnColl.Add(modString.GetCollectionFromCSV(modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "FormatScript")), $FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "TranslateList")
    Endif
  Next

End

Public Function CustomColumnsTitle($FormName As String) As String[]

  Dim i As Integer
  Dim xx As String[]
  Dim xcol As String

  xx = New String[]
  For i = 1 To 99
    xcol = modSettings.ShowSettingFromFIle($FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Title")
    If xcol Then
      xx.Add(xcol)
    Endif
  Next
  Return xx

End

Public Function ExtraColValue($FormName As String, xTitle As String, encid As String, colfir As Variant, colsec As Variant, colthrd As Variant, colvarval As Variant) As Variant

  Dim j As Integer
  Dim i As Integer
  Dim sql As String
  Dim opt1 As String
  Dim opt2 As String
  Dim opt3 As String

  Dim res As Result
  Dim xx As Variant
  Dim xfinal As Variant
  Dim ref As String
  Dim xvar As String

  For j = 1 To 99
    If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(j) & "/" & "Title"] = xTitle Then
      i = j
      Break
    Endif
  Next

  If i Then
    xvar = modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "PatVariable"]
    If xvar Then
      xx = modReportVar.GetPatientVariableValue(xvar, encid)

    Else
      If colvarval Then
        xx = colvarval
      Else

        sql = "SELECT " & modDBApp.GetSecureSQL(modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "SQLText"])
        opt1 = modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Option1"]
        If opt1 Then
          If opt1 = "{EncounterID}" Then
            opt1 = encid
          Endif
        Else
          opt1 = colfir
        Endif

        opt2 = modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Option2"]
        If opt2 Then
          If opt2 = "{EncounterID}" Then
            opt2 = encid
          Endif
        Else
          opt2 = colsec
        Endif

        opt3 = modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Option3"]
        If opt3 Then
          If opt3 = "{EncounterID}" Then
            opt3 = encid
          Endif
        Else
          opt3 = colthrd
        Endif

        xx = ""
        If modMisc.CheckRestrictedKey(sql) = 0 Then
          res = modDatabase.$syConn.Exec(sql, opt1, opt2, opt3)
          If res.Available Then
            ref = modDBApp.FirstResultField(res)

            If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "ArrayOutput"] = "Yes" Then
              For Each res
                If res[ref] Then
                  If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Date" Then
                    xx = xx & modReportVar.GetDateTimeReport(res[ref], gb.GeneralDate) & gb.NewLine
                  Else If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Currency" Then
                    xx = xx & modReportVar.GetLocaleNumberFormat(res[ref], gb.Currency) & gb.NewLine
                  Else If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Number" Then
                    xx = xx & modReportVar.GetLocaleNumberFormat(res[ref], 0) & gb.NewLine
                  Else If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Boolean" Then
                    xx = xx & "True" & gb.NewLine
                  Else
                    xx = xx & res[ref] & gb.NewLine
                  Endif
                Endif
              Next
            Else
              res.MoveLast
              If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Boolean" Then
                If res[ref] = True Then
                  xx = "True"
                Else If res[ref] = False Then
                  xx = "False"
                Else
                  xx = ""
                Endif
              Else
                If res[ref] Then
                  If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Date" Then
                    xx = modReportVar.GetDateTimeReport(res[ref], gb.GeneralDate)
                  Else If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Currency" Then
                    xx = modReportVar.GetLocaleNumberFormat(res[ref], gb.Currency)
                  Else If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Format"] = "Number" Then
                    xx = modReportVar.GetLocaleNumberFormat(res[ref], 0)
                  Else
                    xx = res[ref]
                  Endif
                Else
                  xx = ""
                Endif
              Endif
            Endif

          Else
            xx = ""
          Endif
        Else
          xx = ""
        Endif

      Endif
    Endif

    If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "Translate"] = "Yes" Then
      If modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "TranslateList"][xx] Then
        xfinal = modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "TranslateList"][xx]
      Else
        xfinal = modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "FormatShell"]
      Endif
    Else
      xfinal = modExternal.GerScriptValue(modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "FormatScript"], modCustPatient.$extColumnColl[$FormName & "_" & "ExtraColumn" & CStr(i) & "/" & "FormatShell"], xx)
    Endif
  Endif

  Return xfinal

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

''================================ New Columns ==============================================
Public Sub FillNewCOlumnCollection($FormName As String)

  Dim j As Integer

  $newColumnColl = New Collection
  For j = 1 To 99
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Title"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "Title")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "PatVariable"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "PatVariable")                                                                                 ''
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "SQLText"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "SQLText")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Option1"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "Option1")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Option2"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "Option2")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Option3"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "Option3")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Format"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "Format")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "ArrayOutput"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "ArrayOutput")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "FormatScript"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "FormatScript")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "FormatShell"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "FormatShell")
    $newColumnColl.Add(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Translate"), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "Translate")
    If modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "Translate") = "Yes" Then
      $newColumnColl.Add(modString.GetCollectionFromCSV(modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(j) & "/" & "FormatScript")), $FormName & "_" & "NewColumn" & CStr(j) & "/" & "TranslateList")
    Endif
  Next

End

Public Function CustomNewColumnsTitle($FormName As String) As String[]

  Dim i As Integer
  Dim xx As String[]
  Dim xcol As String

  xx = New String[]
  For i = 1 To 99
    xcol = modSettings.ShowSettingFromFIle($FormName & "_" & "NewColumn" & CStr(i) & "/" & "Title")
    If xcol Then
      xx.Add(xcol)
    Endif
  Next
  Return xx

End

Public Function NewColValue($FormName As String, xTitle As String, encid As String) As Variant

  Dim j As Integer
  Dim i As Integer
  Dim sql As String
  Dim opt1 As String
  Dim opt2 As String
  Dim opt3 As String

  Dim res As Result
  Dim xx As Variant
  Dim xfinal As Variant
  Dim ref As String
  Dim xvar As String

  For j = 1 To 99
    If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(j) & "/" & "Title"] = xTitle Then
      i = j
      Break
    Endif
  Next

  If i Then
    xvar = modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "PatVariable"]
    If xvar Then
      xx = modReportVar.GetPatientVariableValue(xvar, encid)

    Else
      sql = "SELECT " & modDBApp.GetSecureSQL(modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "SQLText"])
      opt1 = modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Option1"]
      If opt1 Then
        If opt1 = "{EncounterID}" Then
          opt1 = encid
        Endif
      Endif

      opt2 = modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Option2"]
      If opt2 Then
        If opt2 = "{EncounterID}" Then
          opt2 = encid
        Endif
      Endif

      opt3 = modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Option3"]
      If opt3 Then
        If opt3 = "{EncounterID}" Then
          opt3 = encid
        Endif
      Endif

      xx = ""
      If modMisc.CheckRestrictedKey(sql) = 0 Then
        res = modDatabase.$syConn.Exec(sql, opt1, opt2, opt3)
        If res.Available Then
          ref = modDBApp.FirstResultField(res)

          If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "ArrayOutput"] = "Yes" Then
            For Each res
              If res[ref] Then
                If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Date" Then
                  xx = xx & modReportVar.GetDateTimeReport(res[ref], gb.GeneralDate) & gb.NewLine
                Else If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Currency" Then
                  xx = xx & modReportVar.GetLocaleNumberFormat(res[ref], gb.Currency) & gb.NewLine
                Else If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Number" Then
                  xx = xx & modReportVar.GetLocaleNumberFormat(res[ref], 0) & gb.NewLine
                Else If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Boolean" Then
                  xx = xx & "True" & gb.NewLine
                Else
                  xx = xx & res[ref] & gb.NewLine
                Endif
              Endif
            Next
          Else
            res.MoveLast
            If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Boolean" Then
              If res[ref] = True Then
                xx = "True"
              Else If res[ref] = False Then
                xx = "False"
              Else
                xx = ""
              Endif
            Else
              If res[ref] Then
                If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Date" Then
                  xx = modReportVar.GetDateTimeReport(res[ref], gb.GeneralDate)
                Else If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Currency" Then
                  xx = modReportVar.GetLocaleNumberFormat(res[ref], gb.Currency)
                Else If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Format"] = "Number" Then
                  xx = modReportVar.GetLocaleNumberFormat(res[ref], 0)
                Else
                  xx = res[ref]
                Endif
              Else
                xx = ""
              Endif
            Endif
          Endif

        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif

    Endif

    If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "Translate"] = "Yes" Then
      If modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(j) & "/" & "TranslateList"][xx] Then
        xfinal = modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(j) & "/" & "TranslateList"][xx]
      Else
        xfinal = modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "FormatShell"]
      Endif
    Else
      xfinal = modExternal.GerScriptValue(modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "FormatScript"], modCustPatient.$newColumnColl[$FormName & "_" & "NewColumn" & CStr(i) & "/" & "FormatShell"], xx)
    Endif
  Endif

  Return xfinal

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

''============================= Format Columns ==========================================
Public Sub FillFormatCOlumnCollection()

  $FormatColumnColl = New Collection
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "Title"), "FormatColumn" & "/" & "Title")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "PatVariable"), "FormatColumn" & "/" & "PatVariable")                                                                                 ''
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "SQLText"), "FormatColumn" & "/" & "SQLText")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "Option1"), "FormatColumn" & "/" & "Option1")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "Option2"), "FormatColumn" & "/" & "Option2")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "Option3"), "FormatColumn" & "/" & "Option3")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "ArrayOutput"), "FormatColumn" & "/" & "ArrayOutput")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "FormatScript"), "FormatColumn" & "/" & "FormatScript")
  $FormatColumnColl.Add(modSettings.ShowSettingFromFIle("FormatColumn" & "/" & "FormatShell"), "FormatColumn" & "/" & "FormatShell")

End

Public Function FormatColValue(encid As String) As Variant

  Dim sql As String
  Dim opt1 As String
  Dim opt2 As String
  Dim opt3 As String

  Dim res As Result
  Dim xx As Variant
  Dim xfinal As Variant
  Dim ref As String
  Dim xvar As String

  If modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "Title"] Then
    xvar = modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "PatVariable"]
    If xvar Then
      xx = modReportVar.GetPatientVariableValue(xvar, encid)

    Else
      sql = "SELECT " & modDBApp.GetSecureSQL(modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "SQLText"])
      opt1 = modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "Option1"]
      If opt1 Then
        If opt1 = "{EncounterID}" Then
          opt1 = encid
        Endif
      Endif

      opt2 = modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "Option2"]
      If opt2 Then
        If opt2 = "{EncounterID}" Then
          opt2 = encid
        Endif
      Endif

      opt3 = modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "Option3"]
      If opt3 Then
        If opt3 = "{EncounterID}" Then
          opt3 = encid
        Endif
      Endif

      xx = ""
      If modMisc.CheckRestrictedKey(sql) = 0 Then
        res = modDatabase.$syConn.Exec(sql, opt1, opt2, opt3)
        If res.Available Then
          ref = modDBApp.FirstResultField(res)

          If modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "ArrayOutput"] = "Yes" Then
            For Each res
              If res[ref] Then
                xx = xx & res[ref] & gb.NewLine
              Endif
            Next
          Else
            res.MoveLast
            If res[ref] Then
              xx = res[ref]
            Else
              xx = ""
            Endif
          Endif

        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif

    Endif
    xfinal = modExternal.GerScriptValue(modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "FormatScript"], modCustPatient.$FormatColumnColl["FormatColumn" & "/" & "FormatShell"], xx)

  Else
    xfinal = ""
  Endif

  Return xfinal

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

''===================================================================================================
''========================= General for Uni/Biv/Regression ==========================================
Private Function GetLimitValue(sLow As Float, sUp As Float, sValue As String) As String

  Dim xval As Float
  Dim aaa As Integer
  Dim xxx As String

  If sValue Then
    aaa = 0
    xval = CFloat(sValue)
    If sLow Or If sUp Then

      If sLow Then
        If xval < sLow Then
          aaa = aaa + 1
        Endif
      Endif

      If sUp Then
        If xval > sUp Then
          aaa = aaa + 1
        Endif
      Endif

      If aaa = 0 Then
        xxx = sValue
      Else
        xxx = ""
      Endif

    Else
      xxx = sValue
    Endif
  Else
    xxx = sValue
  Endif

  Return xxx

End

Private Function GetGridSQLValue(SQLText As String, colValue As Variant, OptionSec As String, OptionThir As String) As Variant

  Dim sql As String
  Dim opt1 As String
  Dim opt2 As String
  Dim opt3 As String

  Dim res As Result
  Dim xx As Variant
  Dim ref As String

  If SQLText Then
    sql = "SELECT " & modDBApp.GetSecureSQL(SQLText)
    opt1 = colValue
    opt2 = OptionSec
    opt3 = OptionThir

    If modMisc.CheckRestrictedKey(sql) = 0 Then
      res = modDatabase.$syConn.Exec(sql, opt1, opt2, opt3)
      If res.Available Then
        ref = modDBApp.FirstResultField(res)
        res.MoveLast
        xx = res[ref]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif

  Else
    xx = ""
  Endif

  Return xx

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

Private Function EncounterGridValue(encid As String, EncVariable As String, EncSQLText As String, OptionFir As String, OptionSec As String, OptionThir As String) As Variant

  Dim sql As String
  Dim opt1 As String
  Dim opt2 As String
  Dim opt3 As String

  Dim res As Result
  Dim xx As Variant
  Dim ref As String

  If EncVariable Then
    xx = modReportVar.GetPatientVariableValue(EncVariable, encid)

  Else
    If EncSQLText Then
      sql = "SELECT " & modDBApp.GetSecureSQL(EncSQLText)
      opt1 = OptionFir
      If opt1 = "{EncounterID}" Then
        opt1 = encid
      Endif
      opt2 = OptionSec
      If opt2 = "{EncounterID}" Then
        opt2 = encid
      Endif
      opt3 = OptionThir
      If opt3 = "{EncounterID}" Then
        opt3 = encid
      Endif

      If modMisc.CheckRestrictedKey(sql) = 0 Then
        res = modDatabase.$syConn.Exec(sql, opt1, opt2, opt3)
        If res.Available Then
          ref = modDBApp.FirstResultField(res)
          res.MoveLast
          xx = res[ref]
        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif

    Else
      xx = ""
    Endif

  Endif

  Return xx

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

''============================== Univariate ======================================
Public Sub LoadEncChartSetting()

  Dim xcol As String
  Dim grdcol As String
  Dim xlow As String
  Dim xupp As String

  $EncUseGridVal = modSettings.ShowSettingFromFIle("UnivariateAnalysis/UseGridView")
  xcol = modSettings.ShowSettingFromFIle("UnivariateAnalysis/GridViewColumn")
  If xcol Then
    $EncGridIndex = CInt(xcol)
  Else
    $EncGridIndex = 0
  Endif
  $EncGridSQLText = modSettings.ShowSettingFromFIle("UnivariateAnalysis/GridSQLText")
  grdcol = modSettings.ShowSettingFromFIle("UnivariateAnalysis/GridOption1")
  If grdcol Then
    $EncGridOptionFir = CInt(grdcol)
  Else
    $EncGridOptionFir = 0
  Endif
  $EncGridOptionSec = modSettings.ShowSettingFromFIle("UnivariateAnalysis/GridOption2")
  $EncGridOptionThir = modSettings.ShowSettingFromFIle("UnivariateAnalysis/GridOption3")

  $EncVariable = modSettings.ShowSettingFromFIle("UnivariateAnalysis/PatVariable")
  $EncSQLText = modSettings.ShowSettingFromFIle("UnivariateAnalysis/EncSQLText")
  $EncOptionFir = modSettings.ShowSettingFromFIle("UnivariateAnalysis/EncOption1")
  $EncOptionSec = modSettings.ShowSettingFromFIle("UnivariateAnalysis/EncOption2")
  $EncOptionThir = modSettings.ShowSettingFromFIle("UnivariateAnalysis/EncOption3")

  $EncScript = modSettings.ShowSettingFromFIle("UnivariateAnalysis/Script")
  $EncShell = modSettings.ShowSettingFromFIle("UnivariateAnalysis/Shell")
  $EncTrans = modSettings.ShowSettingFromFIle("UnivariateAnalysis/Translate")
  If $EncTrans And If $EncTrans = "Yes" Then
    $EncColl = modString.GetCollectionFromCSV($EncScript)
  Endif

  xlow = modSettings.ShowSettingFromFIle("UnivariateAnalysis/LowerRange")
  If xlow Then
    $EncLower = CFloat(xlow)
  Endif
  xupp = modSettings.ShowSettingFromFIle("UnivariateAnalysis/UpperRange")
  If xupp Then
    $EncUpper = CFloat(xupp)
  Endif

End

Public Function GetLimitValueUnivar(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($EncLower, $EncUpper, sValue)
  Return xxx

End

Public Function FormatUnivariate(xx As Variant) As Variant

  Dim xfinal As Variant

  If $EncTrans And If $EncTrans = "Yes" Then
    xfinal = $EncColl[xx]
  Else
    xfinal = modExternal.GerScriptValue($EncScript, $EncShell, xx)
  Endif
  Return xfinal

End

Public Function UnivGridValue(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($EncGridSQLText, colValue, $EncGridOptionSec, $EncGridOptionThir)
  Return xx

End

Public Function EncChartValue(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $EncVariable, $EncSQLText, $EncOptionFir, $EncOptionSec, $EncOptionThir)
  Return xx

End

Public Function GetUnivariateColumn(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$EncUseGridVal = "Yes" Then
    If modCustPatient.$EncGridIndex Then
      Column = modCustPatient.$EncGridIndex - 1
    Else
      Column = modCustPatient.$EncGridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

''================================ Cross Tab ============================================
Public Sub LoadCrossChartSetting()

  Dim xrow As String
  Dim grdrow As String
  Dim xcolm As String
  Dim grdcol As String

  Dim xrowmin As String
  Dim xrowmax As String
  Dim xcolmin As String
  Dim xcolmax As String

  ''independent
  $CrossUseGridValRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_UseGridView")
  $CrossIndepType = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_DataType")

  xrow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_GridViewCol")
  If xrow Then
    $CrossGridRow = CInt(xrow)
  Else
    $CrossGridRow = 0
  Endif
  $CrosGridSQLTextRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_GridSQLText")
  grdrow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_GridOption1")
  If grdrow Then
    $CrosGridOptionFirRow = CInt(grdrow)
  Else
    $CrosGridOptionFirRow = 0
  Endif
  $CrosGridOptionSecRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_GridOption2")
  $CrosGridOptionThirRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_GridOption3")

  $CrosRowVariable = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_Enc")
  $CrosSQLTextRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_EncSQLText")
  $CrosOptionFirRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_EncOption1")
  $CrosOptionSecRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_EncOption2")
  $CrosOptionThirRow = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_EncOption3")

  $CrossRowScript = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_Script")
  $CrossRowShell = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_Shell")
  $CrossRowTrans = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_Translate")
  If $CrossRowTrans And If $CrossRowTrans = "Yes" Then
    $CrossRowColl = modString.GetCollectionFromCSV($CrossRowScript)
  Endif

  xrowmin = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_LowerRange")
  If xrowmin Then
    $CrossRowLow = CFloat(xrowmin)
  Endif
  xrowmax = modSettings.ShowSettingFromFIle("BivariateAnalysis/IndependentVar_UpperRange")
  If xrowmax Then
    $CrossRowHigh = CFloat(xrowmax)
  Endif

  ''dependent
  $CrossUseGridValCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_UseGridView")
  $CrossOutcomeType = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_DataType")

  xcolm = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_GridViewCol")
  If xcolm Then
    $CrossGridColumn = CInt(xcolm)
  Else
    $CrossGridColumn = 0
  Endif

  $CrosGridSQLTextCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_GridSQLText")
  grdcol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_GridOption1")
  If grdcol Then
    $CrosGridOptionFirCol = CInt(grdcol)
  Else
    $CrosGridOptionFirCol = 0
  Endif
  $CrosGridOptionSecCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_GridOption2")
  $CrosGridOptionThirCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_GridOption3")

  $CrosColVariable = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_Enc")
  $CrosSQLTextCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_EncSQLText")
  $CrosOptionFirCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_EncOption1")
  $CrosOptionSecCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_EncOption2")
  $CrosOptionThirCol = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_EncOption3")

  $CrossColScript = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_Script")
  $CrossColShell = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_Shell")
  $CrossColTrans = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_Translate")
  If $CrossColTrans And If $CrossColTrans = "Yes" Then
    $CrossColColl = modString.GetCollectionFromCSV($CrossColScript)
  Endif

  xcolmin = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_LowerRange")
  If xcolmin Then
    $CrossColLow = CFloat(xcolmin)
  Endif
  xcolmax = modSettings.ShowSettingFromFIle("BivariateAnalysis/OutcomeVar_UpperRange")
  If xcolmax Then
    $CrossColHigh = CFloat(xcolmax)
  Endif

End

''------------------------- Row data (independent) ------------------
Public Function GetLimitCrossIndep(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($CrossRowLow, $CrossRowHigh, sValue)
  Return xxx

End

Public Function FormatCrossRow(aaa As Variant) As Variant

  Dim aafinal As Variant

  If $CrossRowTrans And If $CrossRowTrans = "Yes" Then
    aafinal = $CrossRowColl[aaa]
  Else
    aafinal = modExternal.GerScriptValue($CrossRowScript, $CrossRowShell, aaa)
  Endif
  Return aafinal

End

Public Function CrossRowGridValue(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($CrosGridSQLTextRow, colValue, $CrosGridOptionSecRow, $CrosGridOptionThirRow)
  Return xx

End

Public Function CrossRowChartValue(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $CrosRowVariable, $CrosSQLTextRow, $CrosOptionFirRow, $CrosOptionSecRow, $CrosOptionThirRow)
  Return xx

End

Public Function GetCrossVarRow(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$CrossUseGridValRow = "Yes" Then
    If modCustPatient.$CrossGridRow Then
      Column = modCustPatient.$CrossGridRow - 1
    Else
      Column = modCustPatient.$CrosGridOptionFirRow - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

''---------------------------- column (dependent) --------------------------------
Public Function GetLimitCrossOutcome(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($CrossColLow, $CrossColHigh, sValue)
  Return xxx

End

Public Function FormatCrossColumn(bbb As Variant) As Variant

  Dim bbfinal As Variant

  If $CrossColTrans And If $CrossColTrans = "Yes" Then
    bbfinal = $CrossColColl[bbb]
  Else
    bbfinal = modExternal.GerScriptValue($CrossColScript, $CrossColShell, bbb)
  Endif
  Return bbfinal

End

Public Function CrossColGridValue(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($CrosGridSQLTextCol, colValue, $CrosGridOptionSecCol, $CrosGridOptionThirCol)
  Return xx

End

Public Function CrossColChartValue(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $CrosColVariable, $CrosSQLTextCol, $CrosOptionFirCol, $CrosOptionSecCol, $CrosOptionThirCol)
  Return xx

End

Public Function GetCrossVarColumn(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$CrossUseGridValCol = "Yes" Then
    If modCustPatient.$CrossGridColumn Then
      Column = modCustPatient.$CrossGridColumn - 1
    Else
      Column = modCustPatient.$CrosGridOptionFirCol - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

''====================================== Regression Analysis =============================
Public Sub LoadRegressionSetting()

  Dim xdepgrdcol As String
  Dim xdepgrdfir As String
  Dim xdepmin As String
  Dim xdepmax As String

  Dim xvar1grdcol As String
  Dim xvar1grdfir As String
  Dim xvar1min As String
  Dim xvar1max As String

  Dim xvar2grdcol As String
  Dim xvar2grdfir As String
  Dim xvar2min As String
  Dim xvar2max As String

  Dim xvar3grdcol As String
  Dim xvar3grdfir As String
  Dim xvar3min As String
  Dim xvar3max As String

  Dim xvar4grdcol As String
  Dim xvar4grdfir As String
  Dim xvar4min As String
  Dim xvar4max As String

  Dim xvar5grdcol As String
  Dim xvar5grdfir As String
  Dim xvar5min As String
  Dim xvar5max As String

  ''dependent variable
  $RegDepUseGridVal = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_UseGridView")

  xdepgrdcol = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_GridViewCol")
  If xdepgrdcol Then
    $RegDepGrid = CInt(xdepgrdcol)
  Endif
  $RegDepGridSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_GridSQLText")
  xdepgrdfir = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_GridOption1")
  If xdepgrdfir Then
    $RegDepGridOptionFir = CInt(xdepgrdfir)
  Endif
  $RegDepGridOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_GridOption2")
  $RegDepGridOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_GridOption3")

  $RegDepVariable = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_Enc")
  $RegDepSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_EncSQLText")
  $RegDepOptionFir = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_EncOption1")
  $RegDepOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_EncOption2")
  $RegDepOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_EncOption3")

  $RegDepScript = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_Script")
  $RegDepShell = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_Shell")

  xdepmin = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_LowerRange")
  If xdepmin Then
    $RegDepLow = CFloat(xdepmin)
  Endif
  xdepmax = modSettings.ShowSettingFromFIle("RegressionAnalysis/OutcomeVar_UpperRange")
  If xdepmax Then
    $RegDepHigh = CFloat(xdepmax)
  Endif

  ''Indep Var1
  $RegVar1UseGridVal = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_UseGridView")

  xvar1grdcol = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_GridViewCol")
  If xvar1grdcol Then
    $RegVar1Grid = CInt(xvar1grdcol)
  Endif
  $RegVar1GridSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_GridSQLText")
  xvar1grdfir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_GridOption1")
  If xvar1grdfir Then
    $RegVar1GridOptionFir = CInt(xvar1grdfir)
  Endif
  $RegVar1GridOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_GridOption2")
  $RegVar1GridOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_GridOption3")

  $RegVar1Variable = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_Enc")
  $RegVar1SQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_EncSQLText")
  $RegVar1OptionFir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_EncOption1")
  $RegVar1OptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_EncOption2")
  $RegVar1OptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_EncOption3")

  $RegVar1Script = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_Script")
  $RegVar1Shell = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_Shell")

  xvar1min = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_LowerRange")
  If xvar1min Then
    $RegVar1Low = CFloat(xvar1min)
  Endif
  xvar1max = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar1_UpperRange")
  If xvar1max Then
    $RegVar1High = CFloat(xvar1max)
  Endif

  ''Indep Var2
  $RegVar2UseGridVal = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_UseGridView")

  xvar2grdcol = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_GridViewCol")
  If xvar2grdcol Then
    $RegVar2Grid = CInt(xvar2grdcol)
  Endif
  $RegVar2GridSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_GridSQLText")
  xvar2grdfir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_GridOption1")
  If xvar2grdfir Then
    $RegVar2GridOptionFir = CInt(xvar2grdfir)
  Endif
  $RegVar2GridOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_GridOption2")
  $RegVar2GridOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_GridOption3")

  $RegVar2Variable = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_Enc")
  $RegVar2SQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_EncSQLText")
  $RegVar2OptionFir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_EncOption1")
  $RegVar2OptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_EncOption2")
  $RegVar2OptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_EncOption3")

  $RegVar2Script = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_Script")
  $RegVar2Shell = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_Shell")

  xvar2min = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_LowerRange")
  If xvar2min Then
    $RegVar2Low = CFloat(xvar2min)
  Endif
  xvar2max = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar2_UpperRange")
  If xvar2max Then
    $RegVar2High = CFloat(xvar2max)
  Endif

  ''Indep Var3
  $RegVar3UseGridVal = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_UseGridView")

  xvar3grdcol = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_GridViewCol")
  If xvar3grdcol Then
    $RegVar3Grid = CInt(xvar3grdcol)
  Endif
  $RegVar3GridSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_GridSQLText")
  xvar3grdfir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_GridOption1")
  If xvar3grdfir Then
    $RegVar3GridOptionFir = CInt(xvar3grdfir)
  Endif
  $RegVar3GridOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_GridOption2")
  $RegVar3GridOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_GridOption3")

  $RegVar3Variable = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_Enc")
  $RegVar3SQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_EncSQLText")
  $RegVar3OptionFir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_EncOption1")
  $RegVar3OptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_EncOption2")
  $RegVar3OptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_EncOption3")

  $RegVar3Script = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_Script")
  $RegVar3Shell = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_Shell")

  xvar3min = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_LowerRange")
  If xvar3min Then
    $RegVar3Low = CFloat(xvar3min)
  Endif
  xvar3max = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar3_UpperRange")
  If xvar3max Then
    $RegVar3High = CFloat(xvar3max)
  Endif

  ''Indep Var4
  $RegVar4UseGridVal = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_UseGridView")

  xvar4grdcol = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_GridViewCol")
  If xvar4grdcol Then
    $RegVar4Grid = CInt(xvar4grdcol)
  Endif
  $RegVar4GridSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_GridSQLText")
  xvar4grdfir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_GridOption1")
  If xvar4grdfir Then
    $RegVar4GridOptionFir = CInt(xvar4grdfir)
  Endif
  $RegVar4GridOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_GridOption2")
  $RegVar4GridOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_GridOption3")

  $RegVar4Variable = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_Enc")
  $RegVar4SQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_EncSQLText")
  $RegVar4OptionFir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_EncOption1")
  $RegVar4OptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_EncOption2")
  $RegVar4OptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_EncOption3")

  $RegVar4Script = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_Script")
  $RegVar4Shell = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_Shell")

  xvar4min = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_LowerRange")
  If xvar4min Then
    $RegVar4Low = CFloat(xvar4min)
  Endif
  xvar4max = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar4_UpperRange")
  If xvar4max Then
    $RegVar4High = CFloat(xvar4max)
  Endif

  ''Indep Var5
  $RegVar5UseGridVal = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_UseGridView")

  xvar5grdcol = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_GridViewCol")
  If xvar5grdcol Then
    $RegVar5Grid = CInt(xvar5grdcol)
  Endif
  $RegVar5GridSQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_GridSQLText")
  xvar5grdfir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_GridOption1")
  If xvar5grdfir Then
    $RegVar5GridOptionFir = CInt(xvar5grdfir)
  Endif
  $RegVar5GridOptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_GridOption2")
  $RegVar5GridOptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_GridOption3")

  $RegVar5Variable = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_Enc")
  $RegVar5SQLText = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_EncSQLText")
  $RegVar5OptionFir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_EncOption1")
  $RegVar5OptionSec = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_EncOption2")
  $RegVar5OptionThir = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_EncOption3")

  $RegVar5Script = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_Script")
  $RegVar5Shell = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_Shell")

  xvar5min = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_LowerRange")
  If xvar5min Then
    $RegVar5Low = CFloat(xvar5min)
  Endif
  xvar5max = modSettings.ShowSettingFromFIle("RegressionAnalysis/IndependentVar5_UpperRange")
  If xvar5max Then
    $RegVar5High = CFloat(xvar5max)
  Endif

End

''------------dependent regression ----------------------
Public Function GetLimitDepRegression(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($RegDepLow, $RegDepHigh, sValue)
  Return xxx

End

Public Function FormatDepRegression(aaa As Variant) As Variant

  Dim aafinal As Variant

  aafinal = modExternal.GerScriptValue($RegDepScript, $RegDepShell, aaa)
  Return aafinal

End

Public Function GridValueDepRegression(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($RegDepGridSQLText, colValue, $RegDepGridOptionSec, $RegDepGridOptionThir)
  Return xx

End

Public Function EncValueDepRegression(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $RegDepVariable, $RegDepSQLText, $RegDepOptionFir, $RegDepOptionSec, $RegDepOptionThir)
  Return xx

End

Public Function GetRegressionDepVal(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$RegDepUseGridVal = "Yes" Then
    If modCustPatient.$RegDepGrid Then
      Column = modCustPatient.$RegDepGrid - 1
    Else
      Column = modCustPatient.$RegDepGridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatRegressionDepToList(xData As Variant[], xval As Variant)

  If modCustPatient.$RegDepUseGridVal = "Yes" Then
    If modCustPatient.$RegDepGrid Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.GridValueDepRegression(xval))
    Endif
  Else
    xData.Add(modCustPatient.EncValueDepRegression(xval))
  Endif

End

''------------------ var1 regression --------------------------
Public Function GetLimitVar1Regression(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($RegVar1Low, $RegVar1High, sValue)
  Return xxx

End

Public Function FormatVar1Regression(aaa As Variant) As Variant

  Dim aafinal As Variant

  aafinal = modExternal.GerScriptValue($RegVar1Script, $RegVar1Shell, aaa)
  Return aafinal

End

Public Function GridValueVar1Regression(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($RegVar1GridSQLText, colValue, $RegVar1GridOptionSec, $RegVar1GridOptionThir)
  Return xx

End

Public Function EncValueVar1Regression(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $RegVar1Variable, $RegVar1SQLText, $RegVar1OptionFir, $RegVar1OptionSec, $RegVar1OptionThir)
  Return xx

End

Public Function GetRegressionVar1Val(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$RegVar1UseGridVal = "Yes" Then
    If modCustPatient.$RegVar1Grid Then
      Column = modCustPatient.$RegVar1Grid - 1
    Else
      Column = modCustPatient.$RegVar1GridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatRegressionVar1ToList(xData As Variant[], xval As Variant)

  If modCustPatient.$RegVar1UseGridVal = "Yes" Then
    If modCustPatient.$RegVar1Grid Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.GridValueVar1Regression(xval))
    Endif
  Else
    xData.Add(modCustPatient.EncValueVar1Regression(xval))
  Endif

End

''------------------ var2 regression --------------------------
Public Function GetLimitVar2Regression(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($RegVar2Low, $RegVar2High, sValue)
  Return xxx

End

Public Function FormatVar2Regression(aaa As Variant) As Variant

  Dim aafinal As Variant

  aafinal = modExternal.GerScriptValue($RegVar2Script, $RegVar2Shell, aaa)
  Return aafinal

End

Public Function GridValueVar2Regression(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($RegVar2GridSQLText, colValue, $RegVar2GridOptionSec, $RegVar2GridOptionThir)
  Return xx

End

Public Function EncValueVar2Regression(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $RegVar2Variable, $RegVar2SQLText, $RegVar2OptionFir, $RegVar2OptionSec, $RegVar2OptionThir)
  Return xx

End

Public Function GetRegressionVar2Val(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$RegVar2UseGridVal = "Yes" Then
    If modCustPatient.$RegVar2Grid Then
      Column = modCustPatient.$RegVar2Grid - 1
    Else
      Column = modCustPatient.$RegVar2GridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatRegressionVar2ToList(xData As Variant[], xval As Variant)

  If modCustPatient.$RegVar2UseGridVal = "Yes" Then
    If modCustPatient.$RegVar2Grid Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.GridValueVar2Regression(xval))
    Endif
  Else
    xData.Add(modCustPatient.EncValueVar2Regression(xval))
  Endif

End

''------------------ var3 regression --------------------------
Public Function GetLimitVar3Regression(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($RegVar3Low, $RegVar3High, sValue)
  Return xxx

End

Public Function FormatVar3Regression(aaa As Variant) As Variant

  Dim aafinal As Variant

  aafinal = modExternal.GerScriptValue($RegVar3Script, $RegVar3Shell, aaa)
  Return aafinal

End

Public Function GridValueVar3Regression(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($RegVar3GridSQLText, colValue, $RegVar3GridOptionSec, $RegVar3GridOptionThir)
  Return xx

End

Public Function EncValueVar3Regression(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $RegVar3Variable, $RegVar3SQLText, $RegVar3OptionFir, $RegVar3OptionSec, $RegVar3OptionThir)
  Return xx

End

Public Function GetRegressionVar3Val(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$RegVar3UseGridVal = "Yes" Then
    If modCustPatient.$RegVar3Grid Then
      Column = modCustPatient.$RegVar3Grid - 1
    Else
      Column = modCustPatient.$RegVar3GridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatRegressionVar3ToList(xData As Variant[], xval As Variant)

  If modCustPatient.$RegVar3UseGridVal = "Yes" Then
    If modCustPatient.$RegVar3Grid Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.GridValueVar3Regression(xval))
    Endif
  Else
    xData.Add(modCustPatient.EncValueVar3Regression(xval))
  Endif

End

''------------------ var4 regression --------------------------
Public Function GetLimitVar4Regression(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($RegVar4Low, $RegVar4High, sValue)
  Return xxx

End

Public Function FormatVar4Regression(aaa As Variant) As Variant

  Dim aafinal As Variant

  aafinal = modExternal.GerScriptValue($RegVar4Script, $RegVar4Shell, aaa)
  Return aafinal

End

Public Function GridValueVar4Regression(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($RegVar4GridSQLText, colValue, $RegVar4GridOptionSec, $RegVar4GridOptionThir)
  Return xx

End

Public Function EncValueVar4Regression(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $RegVar4Variable, $RegVar4SQLText, $RegVar4OptionFir, $RegVar4OptionSec, $RegVar4OptionThir)
  Return xx

End

Public Function GetRegressionVar4Val(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$RegVar4UseGridVal = "Yes" Then
    If modCustPatient.$RegVar4Grid Then
      Column = modCustPatient.$RegVar4Grid - 1
    Else
      Column = modCustPatient.$RegVar4GridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatRegressionVar4ToList(xData As Variant[], xval As Variant)

  If modCustPatient.$RegVar4UseGridVal = "Yes" Then
    If modCustPatient.$RegVar4Grid Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.GridValueVar4Regression(xval))
    Endif
  Else
    xData.Add(modCustPatient.EncValueVar4Regression(xval))
  Endif

End

''------------------ var5 regression --------------------------
Public Function GetLimitVar5Regression(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($RegVar5Low, $RegVar5High, sValue)
  Return xxx

End

Public Function FormatVar5Regression(aaa As Variant) As Variant

  Dim aafinal As Variant

  aafinal = modExternal.GerScriptValue($RegVar5Script, $RegVar5Shell, aaa)
  Return aafinal

End

Public Function GridValueVar5Regression(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($RegVar5GridSQLText, colValue, $RegVar5GridOptionSec, $RegVar5GridOptionThir)
  Return xx

End

Public Function EncValueVar5Regression(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $RegVar5Variable, $RegVar5SQLText, $RegVar5OptionFir, $RegVar5OptionSec, $RegVar5OptionThir)
  Return xx

End

Public Function GetRegressionVar5Val(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$RegVar5UseGridVal = "Yes" Then
    If modCustPatient.$RegVar5Grid Then
      Column = modCustPatient.$RegVar5Grid - 1
    Else
      Column = modCustPatient.$RegVar5GridOptionFir - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatRegressionVar5ToList(xData As Variant[], xval As Variant)

  If modCustPatient.$RegVar5UseGridVal = "Yes" Then
    If modCustPatient.$RegVar5Grid Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.GridValueVar5Regression(xval))
    Endif
  Else
    xData.Add(modCustPatient.EncValueVar5Regression(xval))
  Endif

End

''================================ Time Series ============================================
Public Sub LoadTimeChartSetting()

  Dim xrow As String
  Dim grdrow As String
  Dim xcolm As String
  Dim grdcol As String

  Dim xrowmin As String
  Dim xrowmax As String
  Dim xcolmin As String
  Dim xcolmax As String

  ''independent
  $TimeUseGridValRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_UseGridView")
  $TimeIndepType = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_DataType")

  xrow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_GridViewCol")
  If xrow Then
    $TimeGridRow = CInt(xrow)
  Else
    $TimeGridRow = 0
  Endif
  $TimeGridSQLTextRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_GridSQLText")
  grdrow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_GridOption1")
  If grdrow Then
    $TimeGridOptionFirRow = CInt(grdrow)
  Else
    $TimeGridOptionFirRow = 0
  Endif
  $TimeGridOptionSecRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_GridOption2")
  $TimeGridOptionThirRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_GridOption3")

  $TimeRowVariable = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_Enc")
  $TimeSQLTextRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_EncSQLText")
  $TimeOptionFirRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_EncOption1")
  $TimeOptionSecRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_EncOption2")
  $TimeOptionThirRow = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_EncOption3")

  $TimeRowScript = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_Script")
  $TimeRowShell = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_Shell")
  $TimeRowTrans = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_Translate")
  If $TimeRowTrans And If $TimeRowTrans = "Yes" Then
    $TimeRowColl = modString.GetCollectionFromCSV($TimeRowScript)
  Endif

  xrowmin = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_LowerRange")
  If xrowmin Then
    $TimeRowLow = CFloat(xrowmin)
  Endif
  xrowmax = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/IndependentVar_UpperRange")
  If xrowmax Then
    $TimeRowHigh = CFloat(xrowmax)
  Endif

  ''dependent
  $TimeUseGridValCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_UseGridView")
  $TimeOutcomeType = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_DataType")

  xcolm = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_GridViewCol")
  If xcolm Then
    $TimeGridColumn = CInt(xcolm)
  Else
    $TimeGridColumn = 0
  Endif

  $TimeGridSQLTextCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_GridSQLText")
  grdcol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_GridOption1")
  If grdcol Then
    $TimeGridOptionFirCol = CInt(grdcol)
  Else
    $TimeGridOptionFirCol = 0
  Endif
  $TimeGridOptionSecCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_GridOption2")
  $TimeGridOptionThirCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_GridOption3")

  $TimeColVariable = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_Enc")
  $TimeSQLTextCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_EncSQLText")
  $TimeOptionFirCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_EncOption1")
  $TimeOptionSecCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_EncOption2")
  $TimeOptionThirCol = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_EncOption3")

  $TimeColScript = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_Script")
  $TimeColShell = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_Shell")
  $TimeColTrans = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_Translate")
  If $TimeColTrans And If $TimeColTrans = "Yes" Then
    $TimeColColl = modString.GetCollectionFromCSV($TimeColScript)
  Endif

  xcolmin = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_LowerRange")
  If xcolmin Then
    $TimeColLow = CFloat(xcolmin)
  Endif
  xcolmax = modSettings.ShowSettingFromFIle("TimeSeriesAnalysis/OutcomeVar_UpperRange")
  If xcolmax Then
    $TimeColHigh = CFloat(xcolmax)
  Endif

End

''------------------------- Row data (pre) ------------------
Public Function GetLimitTimeIndep(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($TimeRowLow, $TimeRowHigh, sValue)
  Return xxx

End

Public Function FormatTimeRow(aaa As Variant) As Variant

  Dim aafinal As Variant

  If $TimeRowTrans And If $TimeRowTrans = "Yes" Then
    aafinal = $TimeRowColl[aaa]
  Else
    aafinal = modExternal.GerScriptValue($TimeRowScript, $TimeRowShell, aaa)
  Endif
  Return aafinal

End

Public Function TimeRowGridValue(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($TimeGridSQLTextRow, colValue, $TimeGridOptionSecRow, $TimeGridOptionThirRow)
  Return xx

End

Public Function TimeRowChartValue(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $TimeRowVariable, $TimeSQLTextRow, $TimeOptionFirRow, $TimeOptionSecRow, $TimeOptionThirRow)
  Return xx

End

Public Function GetTimeVarRow(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$TimeUseGridValRow = "Yes" Then
    If modCustPatient.$TimeGridRow Then
      Column = modCustPatient.$TimeGridRow - 1
    Else
      Column = modCustPatient.$TimeGridOptionFirRow - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatTimeVarRowToList(xData As Variant[], xval As Variant)

  If modCustPatient.$TimeUseGridValRow = "Yes" Then
    If modCustPatient.$TimeGridRow Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.TimeRowGridValue(xval))
    Endif
  Else
    xData.Add(modCustPatient.TimeRowChartValue(xval))
  Endif

End

''---------------------------- column (post) --------------------------------
Public Function GetLimitTimeOutcome(sValue As String) As String

  Dim xxx As String

  xxx = GetLimitValue($TimeColLow, $TimeColHigh, sValue)
  Return xxx

End

Public Function FormatTimeColumn(bbb As Variant) As Variant

  Dim bbfinal As Variant

  If $TimeColTrans And If $TimeColTrans = "Yes" Then
    bbfinal = $TimeColColl[bbb]
  Else
    bbfinal = modExternal.GerScriptValue($TimeColScript, $TimeColShell, bbb)
  Endif
  Return bbfinal

End

Public Function TimeColGridValue(colValue As Variant) As Variant

  Dim xx As Variant

  xx = GetGridSQLValue($TimeGridSQLTextCol, colValue, $TimeGridOptionSecCol, $TimeGridOptionThirCol)
  Return xx

End

Public Function TimeColChartValue(encid As String) As Variant

  Dim xx As Variant

  xx = EncounterGridValue(encid, $TimeColVariable, $TimeSQLTextCol, $TimeOptionFirCol, $TimeOptionSecCol, $TimeOptionThirCol)
  Return xx

End

Public Function GetTimeVarColumn(encColumn As Integer) As Integer

  Dim Column As Integer

  If modCustPatient.$TimeUseGridValCol = "Yes" Then
    If modCustPatient.$TimeGridColumn Then
      Column = modCustPatient.$TimeGridColumn - 1
    Else
      Column = modCustPatient.$TimeGridOptionFirCol - 1
    Endif
  Else
    Column = encColumn
  Endif
  Return Column

End

Public Sub AddFormatTimeVarColumnToList(xData As Variant[], xval As Variant)

  If modCustPatient.$TimeUseGridValCol = "Yes" Then
    If modCustPatient.$TimeGridColumn Then
      xData.Add(xval)
    Else
      xData.Add(modCustPatient.TimeColGridValue(xval))
    Endif
  Else
    xData.Add(modCustPatient.TimeColChartValue(xval))
  Endif

End

''============================ Cross Tabulation =========================
Public Sub LoadTabCrossSetting()

  $TabUseBivarData = modSettings.ShowSettingFromFIle("GridViewCrossTab/BivariateData")
  $TabRowColumn = modSettings.ShowSettingFromFIle("GridViewCrossTab/RowColumn")
  $TabRowScript = modSettings.ShowSettingFromFIle("GridViewCrossTab/RowScript")
  $TabRowShell = modSettings.ShowSettingFromFIle("GridViewCrossTab/RowShell")
  $TabRowTrans = modSettings.ShowSettingFromFIle("GridViewCrossTab/RowTranslate")
  $TabRowExclude = modSettings.ShowSettingFromFIle("GridViewCrossTab/RowExclude")
  If $TabRowTrans And If $TabRowTrans = "Yes" Then
    $TabRowColl = modString.GetCollectionFromCSV($TabRowScript)
  Endif

  $TabFieldColumn = modSettings.ShowSettingFromFIle("GridViewCrossTab/FieldColumn")
  $TabFieldScript = modSettings.ShowSettingFromFIle("GridViewCrossTab/FieldScript")
  $TabFieldShell = modSettings.ShowSettingFromFIle("GridViewCrossTab/FieldShell")
  $TabFieldTrans = modSettings.ShowSettingFromFIle("GridViewCrossTab/FieldTranslate")
  $TabFieldExclude = modSettings.ShowSettingFromFIle("GridViewCrossTab/FieldExclude")
  If $TabFieldTrans And If $TabFieldTrans = "Yes" Then
    $TabFieldColl = modString.GetCollectionFromCSV($TabFieldScript)
  Endif

End

''========================= SUMMATION ==============================
Public Sub LoadSummationSetting()

  Dim xchap As String
  Dim xgroup As String
  Dim xvalue As String

  xchap = modSettings.ShowSettingFromFIle("GridViewSummary/ChapterColumn")
  If xchap Then
    $SumChapterColumn = CInt(xchap)
  Endif
  $SumChapterScript = modSettings.ShowSettingFromFIle("GridViewSummary/ChapterScript")
  $SumChapterShell = modSettings.ShowSettingFromFIle("GridViewSummary/ChapterShell")
  $SumChapterTrans = modSettings.ShowSettingFromFIle("GridViewSummary/ChapterTranslate")
  If $SumChapterTrans And If $SumChapterTrans = "Yes" Then
    $SumChapterColl = modString.GetCollectionFromCSV($SumChapterScript)
  Endif

  xgroup = modSettings.ShowSettingFromFIle("GridViewSummary/GroupColumn")
  If xgroup Then
    $SumGroupColumn = CInt(xgroup)
  Endif
  $SumGroupScript = modSettings.ShowSettingFromFIle("GridViewSummary/GroupScript")
  $SumGroupShell = modSettings.ShowSettingFromFIle("GridViewSummary/GroupShell")
  $SumGroupTrans = modSettings.ShowSettingFromFIle("GridViewSummary/GroupTranslate")
  If $SumGroupTrans And If $SumGroupTrans = "Yes" Then
    $SumGroupColl = modString.GetCollectionFromCSV($SumGroupScript)
  Endif

  xvalue = modSettings.ShowSettingFromFIle("GridViewSummary/ValueColumn")
  If xvalue Then
    $SumValueColumn = CInt(xvalue)
  Endif
  $SummaryType = modSettings.ShowSettingFromFIle("GridViewSummary/SummaryType")
  $SumExcludeNull = modSettings.ShowSettingFromFIle("GridViewSummary/ExcludeNullValue")

End

Public Function FormatChapterSummation(aaa As Variant) As Variant

  Dim aafinal As Variant

  If $SumChapterTrans And If $SumChapterTrans = "Yes" Then
    aafinal = $SumChapterColl[aaa]
  Else
    aafinal = modExternal.GerScriptValue($SumChapterScript, $SumChapterShell, aaa)
  Endif
  Return aafinal

End

Public Function FormatGroupSummation(aaa As Variant) As Variant

  Dim aafinal As Variant

  If $SumGroupTrans And If $SumGroupTrans = "Yes" Then
    aafinal = $SumGroupColl[aaa]
  Else
    aafinal = modExternal.GerScriptValue($SumGroupScript, $SumGroupShell, aaa)
  Endif
  Return aafinal

End

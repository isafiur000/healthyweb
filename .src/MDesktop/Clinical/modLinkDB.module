' Gambas module file

Private $remoConn As Connection
Private xservice As String
Private xserver As String
Private xdatabase As String
Private xuser As String
Private xpass As String

Private xpatcsv As String
Private xenccsv As String
Private xsepcsv As String

Private $PatTable As String
Private $PatNo As String
Private $PatName As String
Private $PatSurName As String
Private $PatEthCode As String
Private $PatAddress As String
Private $PatAddWard As String
Private $PatDistrict As String
Private $PatGender As String
Private $PatCOntact As String
Private $PatGuardian As String
Private $PatRelation As String
Private $PatExtCode As String
Private $PatEmail As String
Private $PatDiary As String
Private $PatComment As String
Private $PatAge As String
Private $PatDOB As String

Private $EncTable As String
Private $EncID As String
Private $EncPatNo As String
Private $EncEntryLoc As String
Private $EncTriage As String
Private $EncLocation As String
Private $EncDeposit As String
Private $EncCredit As String
Private $EncDiscType As String
Private $EncDiscPer As String
Private $EncStatus As String
Private $EncRegDate As String
Private $EncBillMode As String
Private $EncConsult As String
Private $EncVisitType As String
Private $EncDiscLimit As String
Private $EncValidity As String

'Load Variables
Public Sub LoadExtraDBSettings()

  Dim spass As String

  xservice = modSettings.ShowExtSettingFromFIle("Database/Service")
  xserver = modSettings.ShowExtSettingFromFIle("Database/Server")
  xdatabase = modSettings.ShowExtSettingFromFIle("Database/DB")
  xuser = modSettings.ShowExtSettingFromFIle("Database/User")
  If xservice = "http" Then
  Else
    If Not xuser Then
      xuser = modDatabase.$myConn.User
    Endif
  Endif
  spass = modSettings.ShowExtSettingFromFIle("Database/Password")
  If xservice = "http" Then
  Else
    If Not spass Then
      xpass = modDatabase.$myConn.Password
    Else
      xpass = modPassword.DecryptSimple(spass)
    Endif
  Endif

  xpatcsv = modSettings.ShowExtSettingFromFIle("Database/PatientCSV")
  xenccsv = modSettings.ShowExtSettingFromFIle("Database/EncCSV")
  xsepcsv = modSettings.ShowExtSettingFromFIle("Database/Separator")

  $PatTable = modSettings.ShowExtSettingFromFIle("PatientTable/TableName")
  $PatNo = modSettings.ShowExtSettingFromFIle("PatientTable/PatientNo")
  $PatName = modSettings.ShowExtSettingFromFIle("PatientTable/Name")
  $PatSurName = modSettings.ShowExtSettingFromFIle("PatientTable/SurName")
  $PatEthCode = modSettings.ShowExtSettingFromFIle("PatientTable/Ethnicity")
  $PatAddress = modSettings.ShowExtSettingFromFIle("PatientTable/Address")
  $PatAddWard = modSettings.ShowExtSettingFromFIle("PatientTable/WardNo")
  $PatDistrict = modSettings.ShowExtSettingFromFIle("PatientTable/District")
  $PatGender = modSettings.ShowExtSettingFromFIle("PatientTable/Sex")
  $PatCOntact = modSettings.ShowExtSettingFromFIle("PatientTable/Contact")
  $PatGuardian = modSettings.ShowExtSettingFromFIle("PatientTable/Guardian")
  $PatRelation = modSettings.ShowExtSettingFromFIle("PatientTable/Relation")
  $PatExtCode = modSettings.ShowExtSettingFromFIle("PatientTable/ExtCode")
  $PatEmail = modSettings.ShowExtSettingFromFIle("PatientTable/E-Mail")
  $PatDiary = modSettings.ShowExtSettingFromFIle("PatientTable/DiaryNo")
  $PatComment = modSettings.ShowExtSettingFromFIle("PatientTable/Comment")
  $PatAge = modSettings.ShowExtSettingFromFIle("PatientTable/Age")
  $PatDOB = modSettings.ShowExtSettingFromFIle("PatientTable/DOB")

  $EncTable = modSettings.ShowExtSettingFromFIle("EncounterTable/TableName")
  $EncID = modSettings.ShowExtSettingFromFIle("EncounterTable/EncounterID")
  $EncPatNo = modSettings.ShowExtSettingFromFIle("EncounterTable/PatientNo")
  $EncEntryLoc = modSettings.ShowExtSettingFromFIle("EncounterTable/EntryDept")
  $EncTriage = modSettings.ShowExtSettingFromFIle("EncounterTable/Triage")
  $EncLocation = modSettings.ShowExtSettingFromFIle("EncounterTable/Location")
  $EncDeposit = modSettings.ShowExtSettingFromFIle("EncounterTable/Deposit")
  $EncCredit = modSettings.ShowExtSettingFromFIle("EncounterTable/Credit")
  $EncDiscType = modSettings.ShowExtSettingFromFIle("EncounterTable/DiscType")
  $EncDiscPer = modSettings.ShowExtSettingFromFIle("EncounterTable/DiscPercent")
  $EncStatus = modSettings.ShowExtSettingFromFIle("EncounterTable/Status")
  $EncRegDate = modSettings.ShowExtSettingFromFIle("EncounterTable/RegdDate")
  $EncBillMode = modSettings.ShowExtSettingFromFIle("EncounterTable/BillingMode")
  $EncConsult = modSettings.ShowExtSettingFromFIle("EncounterTable/Consultant")
  $EncVisitType = modSettings.ShowExtSettingFromFIle("EncounterTable/VisitType")
  $EncDiscLimit = modSettings.ShowExtSettingFromFIle("EncounterTable/DiscLimit")
  $EncValidity = modSettings.ShowExtSettingFromFIle("EncounterTable/Validity")

End

'NOTE: -------------------- Link to external DB --------------------------------

Private Function GetExtDBDataHTTP(sTable As String, xpriKey As String, xVal As Variant) As String

  Dim xJson As String

  xJson = modXMySQL.GetXMYSQLHTTPRowJson(xserver, xuser, xpass, sTable, "eq", xpriKey, xVal)
  Return xJson

End

''---------------- non-mssql connection -----
Private Sub OpenExtraConnection()

  $remoConn = modDBApp.OpenConnection(xservice, xserver, xdatabase, xuser, xpass)

End

''-------------------------------------- Patient info table ------------------------------------------
Public Sub CheckPatientDataRemote(ptno As String)

  If modBasic.$RegistDataRepo = "Yes" Then
    modRepository.CopyPatInfoFromRepository(ptno)

  Else
    If xservice Then
      If xservice = "csv" Then
        AddPatientData(ptno)
      Else If xservice = "mssql" Then
        AddPatientData(ptno)
      Else If xservice = "oracle" Then
        AddPatientData(ptno)
      Else If xservice = "http" Then
        AddPatientData(ptno)
      Else
        If Not $remoConn Then
          OpenExtraConnection()
        Endif
        If $remoConn.Opened = True Then
          AddPatientData(ptno)
        Endif
      Endif
    Endif

  Endif

End

Private Function GenderString(patsex As Variant) As String

  Dim sx As String

  If patsex = 0 Then
    sx = "Female"
  Else If patsex = 1 Then
    sx = "Male"
  Else If patsex = -1 Then
    sx = "Male"
  Else If Left(Trim(patsex), 1) = "F" Then
    sx = "Female"
  Else If Left(Trim(patsex), 1) = "f" Then
    sx = "Female"
  Else If Left(Trim(patsex), 1) = "M" Then
    sx = "Male"
  Else If Left(Trim(patsex), 1) = "m" Then
    sx = "Male"
  Endif
  Return sx

End

Private Sub AddPatientData(patientno As String)

  Dim res As Result
  Dim res1 As Result

  Dim hCSV As CsvFile
  Dim xcoll As Collection
  Dim ypath As String
  Dim yColl As Variant[]

  Dim xdistrict As String
  Dim xmunicipal As String
  Dim xdobirth As String

  If xservice = "csv" Then
    hCSV = New CsvFile(xpatcsv, xsepcsv)
    While hCSV.Eof = False
      xcoll = hCSV.Read()
      If Trim(xcoll[$PatNo]) = patientno Then

        res = modDatabase.$myConn.Create("tblpatientinfo")
        res["fldpatientval"] = patientno
        If $PatName Then
          res["fldptnamefir"] = Trim(xcoll[$PatName])
        Endif
        If $PatSurName Then
          res["fldptnamelast"] = Trim(xcoll[$PatSurName])
        Endif
        If $PatEthCode Then
          res["fldethniccode"] = Trim(xcoll[$PatEthCode])
        Endif
        If $PatAddress Then
          res["fldptaddvill"] = String.UCaseFirst(Trim(xcoll[$PatAddress]))
        Endif
        If $PatAddWard Then
          res["fldptaddward"] = String.UCaseFirst(Trim(xcoll[$PatAddWard]))
        Endif
        If $PatDistrict Then
          res["fldptadddist"] = String.UCaseFirst(Trim(xcoll[$PatDistrict]))
        Endif
        If $PatGender Then
          res["fldptsex"] = String.UCaseFirst(GenderString(Trim(xcoll[$PatGender])))
        Endif
        If $PatCOntact Then
          res["fldptcontact"] = Trim(xcoll[$PatCOntact])
        Endif
        If $PatGuardian Then
          res["fldptguardian"] = Trim(xcoll[$PatGuardian])
        Endif
        If $PatRelation Then
          res["fldrelation"] = Trim(xcoll[$PatRelation])
        Endif
        If $PatExtCode Then
          res["fldptcode"] = Trim(xcoll[$PatExtCode])
        Endif
        If $PatEmail Then
          res["fldemail"] = Trim(xcoll[$PatEmail])
        Endif
        If $PatDiary Then
          res["fldadmitfile"] = xcoll(res1[$PatDiary])
        Endif
        If $PatComment Then
          res["fldcomment"] = xcoll(res1[$PatComment])
        Endif
        If $PatDOB Then
          res["fldptbirday"] = Val(xcoll[$PatDOB])
        Else
          If $PatAge Then
            Try res["fldptbirday"] = DateAdd(Now(), gb.Year, 0 - Val(xcoll[$PatAge]))
          Endif
        Endif
        res["fldptadmindate"] = Now()
        res["fldencrypt"] = False
        res["xyz"] = False
        res.Update()

        Break
      Endif
    Wend
    hCSV.Close()

  Else If xservice = "http" Then
    ypath = GetExtDBDataHTTP($PatTable, $PatNo, patientno)
    Try yColl = JSON.Decode(ypath)
    If Trim(yColl[0][$PatNo]) = patientno Then

      res = modDatabase.$myConn.Create("tblpatientinfo")
      res["fldpatientval"] = patientno
      If $PatName Then
        res["fldptnamefir"] = Trim(yColl[0][$PatName])
      Endif
      If $PatSurName Then
        res["fldptnamelast"] = Trim(yColl[0][$PatSurName])
      Endif
      If $PatEthCode Then
        res["fldethniccode"] = Trim(yColl[0][$PatEthCode])
      Endif
      If $PatAddress Then
        res["fldptaddvill"] = String.UCaseFirst(Trim(yColl[0][$PatAddress]))
      Endif
      If $PatAddWard Then
        res["fldptaddward"] = String.UCaseFirst(Trim(yColl[0][$PatAddWard]))
      Endif
      If $PatDistrict Then
        res["fldptadddist"] = String.UCaseFirst(Trim(yColl[0][$PatDistrict]))
      Endif
      If $PatGender Then
        res["fldptsex"] = String.UCaseFirst(GenderString(Trim(yColl[0][$PatGender])))
      Endif
      If $PatCOntact Then
        res["fldptcontact"] = Trim(yColl[0][$PatCOntact])
      Endif
      If $PatGuardian Then
        res["fldptguardian"] = Trim(yColl[0][$PatGuardian])
      Endif
      If $PatRelation Then
        res["fldrelation"] = Trim(yColl[0][$PatRelation])
      Endif
      If $PatExtCode Then
        res["fldptcode"] = Trim(yColl[0][$PatExtCode])
      Endif
      If $PatEmail Then
        res["fldemail"] = Trim(yColl[0][$PatEmail])
      Endif
      If $PatDiary Then
        res["fldadmitfile"] = yColl[0][$PatDiary]
      Endif
      If $PatComment Then
        res["fldcomment"] = yColl[0][$PatComment]
      Endif
      If $PatDOB Then
        If yColl[0][$PatDOB] Then
          res["fldptbirday"] = modDate.GetDateFromJSON(yColl[0][$PatDOB])
        Else
          res["fldptbirday"] = ""
        Endif
      Else
        If $PatAge Then
          Try res["fldptbirday"] = DateAdd(Now(), gb.Year, 0 - Val(yColl[$PatAge]))
        Endif
      Endif
      res["fldptadmindate"] = Now()
      res["fldencrypt"] = False
      res["xyz"] = False
      res.Update()

    Endif

  Else If xservice = "mssql" Or If xservice = "oracle" Then
    res = modDatabase.$myConn.Create("tblpatientinfo")
    res["fldpatientval"] = patientno
    If $PatName Then
      res["fldptnamefir"] = Trim(GetRemoteFoeldPatient($PatName, patientno))
    Endif
    If $PatSurName Then
      res["fldptnamelast"] = Trim(GetRemoteFoeldPatient($PatSurName, patientno))
    Endif
    If $PatEthCode Then
      res["fldethniccode"] = Trim(GetRemoteFoeldPatient($PatEthCode, patientno))
    Endif
    If $PatAddress Then
      xmunicipal = Trim(GetRemoteFoeldPatient($PatAddress, patientno))
      If xmunicipal Then
        res["fldptaddvill"] = String.UCaseFirst(LCase(GetRemoteValuePatient("Municipality", xmunicipal)))
      Endif
    Endif
    If $PatAddWard Then
      res["fldptaddward"] = String.UCaseFirst(Trim(GetRemoteFoeldPatient($PatAddWard, patientno)))
    Endif
    If $PatDistrict Then
      xdistrict = Trim(GetRemoteFoeldPatient($PatDistrict, patientno))
      If xdistrict Then
        res["fldptadddist"] = String.UCaseFirst(LCase(GetRemoteValuePatient("District", xdistrict)))
      Endif
    Endif
    If $PatGender Then
      res["fldptsex"] = String.UCaseFirst(GenderString(GetRemoteFoeldPatient($PatGender, patientno)))
    Endif
    If $PatCOntact Then
      res["fldptcontact"] = Trim(GetRemoteFoeldPatient($PatCOntact, patientno))
    Endif
    If $PatGuardian Then
      res["fldptguardian"] = Trim(GetRemoteFoeldPatient($PatGuardian, patientno))
    Endif
    If $PatRelation Then
      res["fldrelation"] = Trim(GetRemoteFoeldPatient($PatRelation, patientno))
    Endif
    If $PatExtCode Then
      res["fldptcode"] = Trim(GetRemoteFoeldPatient($PatExtCode, patientno))
    Endif
    If $PatEmail Then
      res["fldemail"] = Trim(GetRemoteFoeldPatient($PatEmail, patientno))
    Endif
    If $PatDiary Then
      res["fldadmitfile"] = Trim(GetRemoteFoeldPatient($PatDiary, patientno))
    Endif
    If $PatComment Then
      res["fldcomment"] = Trim(GetRemoteFoeldPatient($PatComment, patientno))
    Endif
    If $PatDOB Then
      xdobirth = Trim(GetRemoteFoeldPatient($PatDOB, patientno))
      If xdobirth Then
        res["fldptbirday"] = GetRemoteDateValue(xdobirth)
      Endif
    Else
      If $PatAge Then
        Try res["fldptbirday"] = DateAdd(Now(), gb.Year, 0 - Val(GetRemoteFoeldPatient($PatAge, patientno)))
      Endif
    Endif
    res["fldptadmindate"] = Now()
    res["fldencrypt"] = False
    res["xyz"] = False
    res.Update()

  Else
    res1 = $remoConn.Exec(Subst("select * from &1 where &2", $PatTable, $PatNo) & "=&1", patientno)
    If res1.Available Then
      res1.MoveFirst

      res = modDatabase.$myConn.Create("tblpatientinfo")
      res["fldpatientval"] = patientno
      If $PatName Then
        res["fldptnamefir"] = Trim(res1[$PatName])
      Endif
      If $PatSurName Then
        res["fldptnamelast"] = Trim(res1[$PatSurName])
      Endif
      If $PatEthCode Then
        res["fldethniccode"] = Trim(res1[$PatEthCode])
      Endif
      If $PatAddress Then
        res["fldptaddvill"] = String.UCaseFirst(Trim(res1[$PatAddress]))
      Endif
      If $PatAddWard Then
        res["fldptaddward"] = String.UCaseFirst(Trim(res1[$PatAddWard]))
      Endif
      If $PatDistrict Then
        res["fldptadddist"] = String.UCaseFirst(Trim(res1[$PatDistrict]))
      Endif
      If $PatGender Then
        res["fldptsex"] = String.UCaseFirst(GenderString(Trim(res1[$PatGender])))
      Endif
      If $PatCOntact Then
        res["fldptcontact"] = Trim(res1[$PatCOntact])
      Endif
      If $PatGuardian Then
        res["fldptguardian"] = Trim(res1[$PatGuardian])
      Endif
      If $PatRelation Then
        res["fldrelation"] = Trim(res1[$PatRelation])
      Endif
      If $PatExtCode Then
        res["fldptcode"] = Trim(res1[$PatExtCode])
      Endif
      If $PatEmail Then
        res["fldemail"] = Trim(res1[$PatEmail])
      Endif
      If $PatDiary Then
        res["fldadmitfile"] = Trim(res1[$PatDiary])
      Endif
      If $PatComment Then
        res["fldcomment"] = Trim(res1[$PatComment])
      Endif
      If $PatDOB Then
        If TypeOf(res1[$PatDOB]) = gb.Date Then
          res["fldptbirday"] = res1[$PatDOB]
        Else
          res["fldptbirday"] = Val(res1[$PatDOB])
        Endif
      Else
        If $PatAge Then
          Try res["fldptbirday"] = DateAdd(Now(), gb.Year, 0 - Val(res1[$PatAge]))
        Endif
      Endif
      res["fldptadmindate"] = Now()
      res["fldencrypt"] = False
      res["xyz"] = False
      res.Update()

    Endif
  Endif

End

''for mssql/oracle
Private Function GetRemoteFoeldPatient(sField As String, ptno As String) As String

  Dim sql As String
  Dim xx As String

  sql = Subst(Subst("select &1 from &2 where &3", sField, $PatTable, $PatNo) & "=&1", ptno)
  If xservice = "mssql" Then
    xx = GetValueMSSqlSpecific(xserver, xdatabase, xuser, xpass, sql)
  Else If xservice = "oracle" Then
    xx = GetValueOracleSpecific(xserver, xdatabase, xuser, xpass, sql)
  Endif
  Return xx

End

Private Function GetRemoteValuePatient(sFormat As String, sValue As String) As String

  Dim sql As String
  Dim xx As String

  Dim xtable As String'
  Dim xreturn As String
  Dim xgiven As String

  xtable = modSettings.ShowExtSettingFromFIle(sFormat & "/Table")
  xreturn = modSettings.ShowExtSettingFromFIle(sFormat & "/Return")
  xgiven = modSettings.ShowExtSettingFromFIle(sFormat & "/Given")

  If xtable And If xreturn And If xgiven Then
    sql = Subst(Subst("select &1 from &2 where &3", xreturn, xtable, xgiven) & "=&1", sValue)
    If xservice = "mssql" Then
      xx = GetValueMSSqlSpecific(xserver, xdatabase, xuser, xpass, sql)
    Else If xservice = "oracle" Then
      xx = GetValueOracleSpecific(xserver, xdatabase, xuser, xpass, sql)
    Endif

  Else
    xgiven = sValue
  Endif

  Return xx

End

''---------------------------------------------- Encounter table -----------------------------------------
Public Sub CheckEncDataRemote(encid As String)

  Dim xx As String

  If xservice Then

    If xservice = "csv" Then
      AddEncounterData(encid)

    Else If xservice = "http" Then

    Else If xservice = "mssql" Or If xservice = "oracle" Then
      xx = GetRemoteFoeldPatient($PatName, Trim(GetRemoteFieldEncounter($EncPatNo, encid))) & Space(2) & GetRemoteFoeldPatient($PatSurName, Trim(GetRemoteFieldEncounter($EncPatNo, encid)))                                                                        ''
      If Message.Question(("Add Patient Record:") & gb.NewLine & "Patient No: " & GetRemoteFieldEncounter($EncPatNo, encid) & gb.NewLine & "Name: " & xx, ("Yes"), ("No")) = 1 Then
        AddEncounterData(encid)
      Endif

    Else
      If Not $remoConn Then
        OpenExtraConnection()
      Endif
      If $remoConn.Opened = True Then
        AddEncounterData(encid)
      Endif
    Endif

  Endif

End

Private Sub AddEncounterData(encounterid As String)

  Dim res As Result
  Dim res1 As Result
  Dim res2 As Result

  Dim hCSV As CsvFile
  Dim xcoll As Collection

  res1 = modDatabase.$myConn.Exec("select fldptnamefir from tblpatientinfo where fldpatientval=&1", Trim(GetRemoteFieldEncounter($EncPatNo, encounterid)))
  If res1.Available = False Then
    AddPatientData(Trim(GetRemoteFieldEncounter($EncPatNo, encounterid)))
  Endif

  If xservice = "csv" Then
    hCSV = New CsvFile(xenccsv, xsepcsv)
    While hCSV.Eof = False
      xcoll = hCSV.Read()
      If Trim(xcoll[$EncID]) = encounterid Then

        res = modDatabase.$myConn.Create("tblencounter")
        res["fldencounterval"] = encounterid
        If $EncPatNo Then
          res["fldpatientval"] = Trim(xcoll[$EncPatNo])
        Endif
        If $EncEntryLoc Then
          res["fldadmitlocat"] = Trim(xcoll[$EncEntryLoc])
        Endif
        If $EncTriage Then
          If xcoll[$EncTriage] Then
            res["fldheight"] = CFloat(xcoll[$EncTriage])
          Else
            res["fldheight"] = 0
          Endif
        Endif
        If $EncLocation Then
          res["fldcurrlocat"] = Trim(xcoll[$EncLocation])
        Endif
        res["flddoa"] = ""
        res["flddod"] = ""
        res["fldheight"] = ""
        If $EncDeposit Then
          res["fldcashdeposit"] = CFloat(xcoll[$EncDeposit])
        Endif
        If $EncCredit Then
          res["fldcashcredit"] = CFloat(xcoll[$EncCredit])
        Endif
        If $EncDiscType Then
          res["flddisctype"] = Trim(xcoll[$EncDiscType])
        Endif
        res["flduserid"] = ""
        If $EncStatus Then
          res["fldadmission"] = Trim(xcoll[$EncStatus])
        Endif
        res["fldfollowdate"] = ""
        res["fldreferto"] = ""
        If $EncRegDate Then
          res["fldregdate"] = xcoll[$EncRegDate]
        Endif
        If $EncBillMode Then
          res["fldbillingmode"] = Trim(xcoll[$EncBillMode])
        Endif
        If $EncConsult Then
          res["flduserid"] = Trim(xcoll[$EncConsult])
        Endif
        If $EncVisitType Then
          res["fldvisit"] = Trim(xcoll[$EncVisitType])
        Endif
        If $EncDiscLimit Then
          res["fldcharity"] = CFloat(xcoll[$EncDiscLimit])
        Endif
        If $EncValidity Then
          res["fldvalidity"] = Val(xcoll[$EncValidity])
        Endif
        res["fldfollow"] = "New"
        res["xyz"] = False
        res.Update()

        Break
      Endif
    Wend
    hCSV.Close()

  Else If xservice = "http" Then

  Else If xservice = "mssql" Or If xservice = "oracle" Then
    res = modDatabase.$myConn.Create("tblencounter")
    res["fldencounterval"] = encounterid
    If $EncPatNo Then
      res["fldpatientval"] = Trim(GetRemoteFieldEncounter($EncPatNo, encounterid))
    Endif
    If $EncEntryLoc Then
      res["fldadmitlocat"] = Trim(GetRemoteFieldEncounter($EncEntryLoc, encounterid))
    Endif
    If $EncTriage Then
      res["fldheight"] = CFloat(GetRemoteFieldEncounter($EncTriage, encounterid))
    Endif
    If $EncLocation Then
      res["fldcurrlocat"] = Trim(GetRemoteFieldEncounter($EncLocation, encounterid))
    Endif
    res["flddoa"] = ""
    res["flddod"] = ""
    res["fldheight"] = ""
    If $EncDeposit Then
      res["fldcashdeposit"] = CFloat(GetRemoteFieldEncounter($EncDeposit, encounterid))
    Endif
    If $EncCredit Then
      res["fldcashcredit"] = CFloat(GetRemoteFieldEncounter($EncCredit, encounterid))
    Endif
    If $EncDiscType Then
      res["flddisctype"] = Trim(GetRemoteFieldEncounter($EncDiscType, encounterid))
    Endif
    res["flduserid"] = ""
    If $EncStatus Then
      res["fldadmission"] = Trim(GetRemoteFieldEncounter($EncStatus, encounterid))
    Endif
    res["fldfollowdate"] = ""
    res["fldreferto"] = ""
    If $EncRegDate Then
      res["fldregdate"] = GetRemoteFieldEncounter($EncRegDate, encounterid)
    Endif
    If $EncBillMode Then
      res["fldbillingmode"] = Trim(GetRemoteFieldEncounter($EncBillMode, encounterid))
    Endif
    If $EncConsult Then
      res["flduserid"] = Trim(GetRemoteFieldEncounter($EncConsult, encounterid))
    Endif
    If $EncVisitType Then
      res["fldvisit"] = Trim(GetRemoteFieldEncounter($EncVisitType, encounterid))
    Endif
    If $EncDiscLimit Then
      res["fldcharity"] = CFloat(GetRemoteFieldEncounter($EncDiscLimit, encounterid))
    Endif
    If $EncValidity Then
      res["fldvalidity"] = Val(GetRemoteFieldEncounter($EncValidity, encounterid))
    Endif
    res["fldfollow"] = "New"
    res["xyz"] = False
    res.Update()

  Else
    If $EncTable Then
      res2 = $remoConn.Exec(Subst("select * from &1 where &2", $EncTable, $EncID) & "=&1", encounterid)
      If res2.Available Then
        res2.MoveFirst

        res = modDatabase.$myConn.Create("tblencounter")
        res["fldencounterval"] = encounterid
        If $EncPatNo Then
          res["fldpatientval"] = Trim(res2[$EncPatNo])
        Endif
        If $EncEntryLoc Then
          res["fldadmitlocat"] = Trim(res2[$EncEntryLoc])
        Endif
        If $EncTriage Then
          If res2[$EncTriage] Then
            res["fldheight"] = CFloat(res2[$EncTriage])
          Else
            res["fldheight"] = 0
          Endif
        Endif
        If $EncLocation Then
          res["fldcurrlocat"] = Trim(res2[$EncLocation])
        Endif
        res["flddoa"] = ""
        res["flddod"] = ""
        res["fldheight"] = ""
        If $EncDeposit Then
          res["fldcashdeposit"] = CFloat(res2[$EncDeposit])
        Endif
        If $EncCredit Then
          res["fldcashcredit"] = CFloat(res2[$EncCredit])
        Endif
        If $EncDiscType Then
          res["flddisctype"] = Trim(res2[$EncDiscType])
        Endif
        res["flduserid"] = ""
        If $EncStatus Then
          res["fldadmission"] = Trim(res2[$EncStatus])
        Endif
        res["fldfollowdate"] = ""
        res["fldreferto"] = ""
        If $EncRegDate Then
          res["fldregdate"] = res2[$EncRegDate]
        Endif
        If $EncBillMode Then
          res["fldbillingmode"] = Trim(res2[$EncBillMode])
        Endif
        If $EncConsult Then
          res["flduserid"] = Trim(res2[$EncConsult])
        Endif
        If $EncVisitType Then
          res["fldvisit"] = Trim(res2[$EncVisitType])
        Endif
        If $EncDiscLimit Then
          res["fldcharity"] = CFloat(res2[$EncDiscLimit])
        Endif
        If $EncValidity Then
          res["fldvalidity"] = CDate(res2[$EncValidity])
        Endif
        res["fldfollow"] = "New"
        res["xyz"] = False
        res.Update()

      Endif
    Endif

  Endif

End

Private Function GetRemoteFieldEncounter(sField As String, encid As String) As String

  Dim sql As String
  Dim xx As String
  Dim res As Result

  If $EncTable Then
    If xservice = "csv" Then
    Else If xservice = "http" Then
    Else If xservice = "mssql" Then
      sql = Subst(Subst("select &1 from &2 where &3", sField, $EncTable, $EncID) & "=&1", encid)
      xx = GetValueMSSqlSpecific(xserver, xdatabase, xuser, xpass, sql)
    Else If xservice = "oracle" Then
      sql = Subst(Subst("select &1 from &2 where &3", sField, $EncTable, $EncID) & "=&1", encid)
      xx = GetValueOracleSpecific(xserver, xdatabase, xuser, xpass, sql)
    Else
      sql = Subst("select &1 from &2 where &3", sField, $EncTable, $EncID) & "=&1"
      res = $remoConn.Exec(sql, encid)
      If res.Available Then
        If res[sField] Then
          xx = res[sField]
        Else
          xx = ""
        Endif
      Endif
    Endif

  Else
    xx = ""
  Endif
  Return xx

End

''-------------------------------------- Data Transfer --------------------------------------------------
Public Sub PatDataTransferMSSQL()

  Dim sql As String
  Dim xx As String
  Dim sFile As String

  Dim hFile As File
  Dim sLine As String

  sql = Subst("select &1 from &2", $EncID, $EncTable)
  xx = GetValueMSSqlSpecific(xserver, xdatabase, xuser, xpass, sql)
  sFile = Temp()
  File.Save(sFile, xx)

  hFile = Open sFile
  modBasic.DebugString("Open File " & sFile)
  For Each sLine In hFile.Lines
    AddEncounterData(Trim(sLine))
  Next
  hFile.Close()

  Message.Info(("Data Transfer completed"), ("OK"))

End

Public Sub PatDataTransferSQL()

  Dim sql As String
  Dim res As Result

  sql = Subst("select &1 as encid from &2", $EncID, $EncTable)
  If Not $remoConn Then
    OpenExtraConnection()
  Endif

  res = $remoConn.Exec(sql)
  If res.Available Then
    For Each res
      AddEncounterData(Trim(res!encid))
    Next
    Message.Info(("Data Transfer completed"), ("OK"))
  Endif

End

''======================  specific =================================
Private Function GetValueOracleSpecific(sServer As String, sDB As String, sUser As String, sPass As String, sQuery As String) As String

  Dim sText As String
  Dim asx As String[]
  Dim xx As String

  sText = modDevAll.GetQueryOracleServer(sServer, sDB, sUser, sPass, sQuery)
  asx = Split(sText, gb.NewLine)
  If asx.Count = 3 Then
    xx = asx[2]
  Else
    xx = ""
  Endif

  Return xx

End

Private Function GetValueMSSqlSpecific(sServer As String, sDB As String, sUser As String, sPass As String, sQuery As String) As String

  Dim xx As String

  xx = modDevAll.GetQueryMsSqlServer(sServer, sDB, sUser, sPass, sQuery)
  Return xx

End

Private Function GetRemoteDateValue(sDate As String) As Date

  Dim xdat As Date
  Dim asx As String[]
  Dim asy As String[]
  Dim i As Integer

  Dim xyr As Integer
  Dim xmon As Integer
  Dim xday As Integer
  Dim sFormat As String

  sFormat = modSettings.ShowExtSettingFromFIle("PatientTable/DOBFormat")
  If sFormat Then
    asx = Split(sFormat, "/")
    For i = 0 To 2
      If asx[i] = "YYYY" Then
        xyr = i
      Endif
      If asx[i] = "MM" Then
        xmon = i
      Endif
      If asx[i] = "DD" Then
        xday = i
      Endif
    Next
    asy = Split(sDate, "/")
    Try xdat = Date(CInt(asy[xyr]), CInt(asy[xmon]), CInt(asy[xday]))

  Else
    Try xdat = Val(sDate)
  Endif

  Return xdat

End

' Gambas module file

Public $PatAge As Float
Public $PatSex As String
Public $PatWeight As Float
Public $PatHeight As Float

Public Sub ClearPatParameterCalc()

  $PatAge = 0
  $PatSex = ""
  $PatWeight = 0
  $PatHeight = 0

End

Public Sub SetPatParametersCalc(encid As String)

  Dim xmsg As String

  xmsg = ""
  $PatAge = DateDiff(modPatient.GetPatientBirthDay(encid), Now(), gb.Year)
  $PatSex = modPatient.GetPatientSex(encid)

  $PatHeight = modClinic.GetPatientHeightinCm(encid)
  If Not $PatHeight Then
    If $PatAge >= 16 Then
      If $PatSex = "Male" Then
        $PatHeight = 177
      Else If $PatSex = "Female" Then
        $PatHeight = 162
      Endif
      xmsg = xmsg & "Patient's height not set. Using " & $PatHeight & " cm for now" & "<br>"
    Endif
  Endif

  $PatWeight = modClinic.GetBodyWeight(encid)
  If Not $PatWeight Then
    If $PatHeight Then
      If $PatSex = "Male" Then
        $PatWeight = 50 + 0.91 * ($PatHeight - 152)
      Else If $PatSex = "Female" Then
        $PatWeight = 45.5 + 0.91 * ($PatHeight - 152)
      Endif
      xmsg = xmsg & "Patient's weight not set. Using " & $PatWeight & " Kg for now"
    Endif
  Endif

  If xmsg Then
    Message.Warning(xmsg, "OK")
  Endif

End

''---------------------------------- calculation constants --------------------------------------------------------
Private Function GetParameterListFromCalc() As String[]

  Dim xx As String[]

  xx = New String[]
  xx.Add("Body_Surface_Area")
  xx.Add("Ideal_Body_Weight")
  xx.Add("Body_Mass_Index")
  xx.Add("Creatinine_Clearance")
  xx.Sort(gb.Ascent)
  Return xx

End

Public Function SysParamList() As String[]

  Dim xx As String[]

  xx = New String[]
  xx.Insert(GetParameterListFromCalc())
  xx.Insert(modBasic.$sysCustomList)
  ' xx.Insert(modBasic.GetSysconstList("Custom"))
  Return xx

End

''---------------------------------- Test constants --------------------------------
Private Function SysLabTestConstant() As String[]

  Dim cmb As String[]

  cmb = New String[]
  cmb.Add("Sodium_Serum")
  cmb.Add("Creatinine_Serum")
  cmb.Add("Potassium_Serum")
  cmb.Add("Calcium_Total_Serum")
  cmb.Add("Calcium_Ionized_Serum")
  cmb.Add("Albumin_Serum")
  cmb.Add("Glucose_Serum")
  cmb.Add("Bicarbonate_Serum")
  cmb.Add("Chloride_Serum")
  cmb.Add("Urea_Nitrogen_Blood")
  cmb.Add("pH_Blood")
  cmb.Add("Hemoglobin_Blood")
  cmb.Add("Culture_Sensitivity")
  Return cmb

End

Public Function SysLabTestList() As String[]

  Dim xx As String[]

  xx = New String[]
  xx.Insert(SysLabTestConstant())
  xx.Insert(modBasic.$sysTestList)
  ' xx.Insert(modSysCons.GetSysconstList("Test"))
  Return xx

End

''---------------------------------------- Examination constants ------------------------------
Private Function SysExamConstant() As String[]

  Dim cmb As String[]

  cmb = New String[]
  cmb.Add("Body_Weight")
  cmb.Add("Body_Height")
  cmb.Add("BloodPressure_Systolic")
  cmb.Add("BloodPressure_Diastolic")
  cmb.Add("Pulse_Rate")
  cmb.Add("Pulse_Rhythm")
  cmb.Add("Heart_Rate")
  cmb.Add("Respiration_Rate")
  cmb.Add("Temperature_System")
  cmb.Add("Oxygen_Saturation")
  cmb.Add("Glasgow_Coma_Scale")

  Return cmb

End

Public Function SysExaminationList() As String[]

  Dim xx As String[]

  xx = New String[]
  xx.Insert(SysExamConstant())
  xx.Insert(modBasic.$sysExamList)
  ' xx.Insert(modSysCons.GetSysconstList("Exam"))
  Return xx

End

''------------ All constants ------------------
Public Function GetAllSysConstantsList() As String[]

  Dim xxx As String[]

  xxx = New String[]
  xxx.Insert(SysParamList())
  xxx.Insert(SysLabTestList())
  xxx.Insert(SysExaminationList())
  xxx.Insert(modBasic.$sysRadioList)
  xxx.Insert(modBasic.$DemogList)

  Return xxx

End

''------------------------------------------ General calculation --------------------------------------------------
Public Function GetConstantValue(syscons As String, encid As String) As Float

  Dim xcalc As String
  Dim patsex As String
  Dim xval As String
  Dim xcon As Float

  patsex = modPatient.GetPatientSex(encid)
  xcalc = modSettings.ShowEqnSettingFromFIle(syscons & "/" & patsex)
  If Not xcalc Then
    xcalc = modSettings.ShowEqnSettingFromFIle(syscons & "/BothSex")
  Endif

  xval = modReportVar.GetCalcValue(xcalc, encid)
  If xval Then
    If IsNumber(xval) Then
      xcon = CFloat(xval)
    Else
      Message.Warning(("Unable to Calculate" & gb.NewLine & modBasic.$ErrorLastString), ("OK"))
    Endif
  Else
    Message.Warning(("Unable to Calculate" & gb.NewLine & modBasic.$ErrorLastString), ("OK"))
  Endif

  Return xcon

End

Public Function GetCalculationAValue(strParameter As String, encid As String) As Float

  Dim xx As Float
  Dim xsex As String
  Dim xage As Integer
  Dim xwt As Float
  Dim xht As Float

  If $PatSex Then
    xsex = $PatSex
  Else
    xsex = modPatient.GetPatientSex(encid)
  Endif
  If $PatAge Then
    xage = $PatAge
  Else
    xage = DateDiff(modPatient.GetPatientBirthDay(encid), Now(), gb.Year)
  Endif
  If $PatWeight Then
    xwt = $PatWeight
  Else
    xwt = modClinic.GetBodyWeight(encid)
  Endif
  If $PatHeight Then
    xht = $PatHeight
  Else
    xht = modClinic.GetPatientHeightinCm(encid)
  Endif

  If xage And If xwt And If xht Then
    xx = GetCalculationForSetA(strParameter, xsex, xage, xwt, xht, 0)                      ''
  Else
    Message.Warning(("One or more from Age, Weight and Height are missing"), ("OK"))
  Endif
  Return xx

End

Public Function GetCreatinineClearance(encid As String) As Float

  Dim xx As Float
  Dim xsex As String
  Dim xage As Integer
  Dim xwt As Float
  Dim xht As Float
  Dim xcreat As String

  If $PatSex Then
    xsex = $PatSex
  Else
    xsex = modPatient.GetPatientSex(encid)
  Endif
  If $PatAge Then
    xage = $PatAge
  Else
    xage = DateDiff(modPatient.GetPatientBirthDay(encid), Now(), gb.Year)
  Endif
  If $PatWeight Then
    xwt = $PatWeight
  Else
    xwt = modClinic.GetBodyWeight(encid)
  Endif
  If $PatHeight Then
    xht = $PatHeight
  Else
    xht = modClinic.GetPatientHeightinCm(encid)
  Endif
  xcreat = modLabTest.GetCurrTesValuePos("Last", encid, modFixLab.GetLabTestIDFromSysConst("Creatinine_Serum"), MMain.$defUnit)

  If xage And If xwt Then
    If xcreat Then
      xx = GetCalculationForSetA("Creatinine_Clearance", xsex, xage, xwt, xht, xcreat)                      ''
    Endif
  Else
    Message.Warning(("One or more from Age, Weight and Height are missing"), ("OK"))
  Endif
  Return xx

End

''--------------------------------------- custom sys constant -------------------------------------
Public Function GetSysconstList(sType As String) As String[]

  Dim res As Result
  Dim xxx As String[]

  res = modDatabase.$medConn.Exec("select fldsysconst from tblsysconst where fldcategory like &1", sType)
  xxx = modControlSub.GetDirectFillresult(res)
  Return xxx

End

''-----------------------------------------SYSTEM CONSTANT LIST ------------------------------------------------------------------
Public Function GetCalculationForSetA(strParameter As String, sex As String, age As Integer, weight As Float, height As Float, serumcreat As String) As Float

  Dim xx As Float
  Dim seta As String
  Dim eqn As String
  Dim sPath As String
  Dim arcmd As String[]

  sPath = modHelpVariable.AppDirectory &/ "/calculators/SetA"
  eqn = modSettings.ShowSettingFromFIle(strParameter & "/Equation")
  If Not eqn Then
    eqn = modSettings.ShowCalcSettingFromFIle(strParameter & "/Equation1")
  Endif
  If System.Exist("gbs3") Then
    arcmd = ["gbs3", sPath, strParameter, eqn, sex, CStr(weight), CStr(height), CStr(age), CStr(serumcreat)]
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To seta
  Else
    modApplSub.InstallSelectedApplication(["gambas3-scripter"])
  Endif

  If seta Then
    xx = Round(Val(seta), -3)
  Else
    xx = 0
  Endif

  Return xx

End

Public Function GetFormulaText(strParam As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim recrd As Boolean
  Dim xx As String

  hFile = Open modHelpVariable.AppDirectory &/ "/calculators/SetA"
  modBasic.DebugString("Open File " & modHelpVariable.AppDirectory &/ "/calculators/SetA")
  xx = ""
  While Not Eof(hFile)
    Line Input #hFile, sLine
    If sLine = "Function Calculate_" & strParam & "() As Float" Then
      recrd = True
    Else If sLine = "End" Then
      recrd = False
    Endif
    If recrd = True Then
      xx = xx & sLine & gb.NewLine
    Endif
  Wend

  Return xx

Catch
  modBasic.DebugString(Error.Text)

End

''------------------ Algorithm ----------------------------
Public Function GetALgorithmValue(encid As String, sName As String) As Variant

  Dim xTitle As String
  Dim algScript As String
  Dim algShell As String
  Dim i As Integer
  Dim arcmd As String[]
  Dim xval As Variant

  Dim argType As String
  Dim argCalc As String
  Dim argSql As String
  Dim argScript As String
  Dim argShell As String

  xTitle = modSettings.ShowSettingForReport(sName & "/" & "AlgorithmName")
  If xTitle Then
    algScript = modSettings.ShowSettingForReport(sName & "/" & "AlgorithmPathame")
    algShell = modSettings.ShowSettingForReport(sName & "/" & "AlgorithmShell")

    arcmd = New String[]
    arcmd.Add(algShell)
    arcmd.Add(algScript)
    For i = 1 To 99
      argType = modSettings.ShowSettingForReport(sName & "/" & "DataType_" & "Args" & CStr(i))
      argCalc = modSettings.ShowSettingForReport(sName & "/" & "Calculation_" & "Args" & CStr(i))
      argSql = modSettings.ShowSettingForReport(sName & "/" & "SQLQuery_" & "Args" & CStr(i))
      argScript = modSettings.ShowSettingForReport(sName & "/" & "FormatScript_" & "Args" & CStr(i))
      argShell = modSettings.ShowSettingForReport(sName & "/" & "FormatShell_" & "Args" & CStr(i))
      arcmd.Add(GetArgumentValue(encid, argType, argCalc, argSql, argScript, argShell))
    Next
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To xval

  Endif
  Return xval

End

Private Function GetArgumentValue(encid As String, sType As String, sCalc As String, sSQL As String, sScript As String, sShell As String) As Variant

  Dim xval As Variant
  Dim res As Result
  Dim fircol As String
  Dim xx As Variant

  If sType = "SQL Query" Then
    If sSQL Then
      res = modDatabase.$myConn.Exec("SELECT " & modDBApp.GetSecureSQL(sSQL), encid)
      fircol = modDBApp.FirstResultField(res)
      If res.Available Then
        xx = res[fircol]
      Endif
    Else
      xx = ""
    Endif
  Else
    If sCalc Then
      xx = modReportVar.GetCalcValue(sCalc, encid)
    Else
      xx = ""
    Endif
  Endif
  If xx Then
    xval = modExternal.GerScriptValueNoCache(sScript, sShell, xx)
  Endif

  Return xval

End

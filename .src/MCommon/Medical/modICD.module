' Gambas module file

'''------------------------------ICD TREE Procedures --------------------------------
Public Function GetICDCodeTreeList(CodePath As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String[]

  xx = New String[]
  hFile = Open CodePath
  modBasic.DebugString("Open File " & CodePath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If Len(Trim(asx[1])) = 3 Then  ''And If Trim(asx[2]) = "0"
      xx.Add(Trim(asx[3]) & "@" & Trim(asx[1]))
    Endif
  Next
  hFile.Close()

  Return xx

End

Public Function GetICDItemTreeList(CodePath As String, sCode As String, sName As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String[]
  Dim xbool As Boolean

  xx = New String[]
  hFile = Open CodePath
  modBasic.DebugString("Open File " & CodePath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If Trim(asx[1]) = sCode And If Trim(asx[3]) = sName Then
      xbool = True
    Else If Len(Trim(asx[1])) = 3 Then  ''And If Trim(asx[2]) = "0"
      xbool = False
    Endif

    If xbool = True Then
      If Trim(asx[1]) = sCode And If Trim(asx[3]) = sName Then
      Else
        xx.Add(Trim(asx[3]) & "@" & Trim(asx[1]))
      Endif
    Endif

  Next
  hFile.Close()

  Return xx

End

Public Function GetICDDiagnoTreeList(CodePath As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String[]

  xx = New String[]
  hFile = Open CodePath
  modBasic.DebugString("Open File " & CodePath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If Len(Trim(asx[1])) <> 3 Then  ''And If Trim(asx[2]) = "0"
      xx.Add(Trim(asx[3]) & "@" & Trim(asx[1]))
    Endif
  Next
  hFile.Close()

  Return xx

End

''------------------------- Group --------------------------------
Public Function ICDGroupNCodeList(CodePath As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String[]

  xx = New String[]
  hFile = Open CodePath
  modBasic.DebugString("Open File " & CodePath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If Len(Trim(asx[1])) = 3 Then   '''And If Trim(asx[2]) = "0"
      xx.Add(Trim(asx[3]) & "@" & Trim(asx[1]))
    Endif
  Next
  hFile.Close()

  Return xx

End

Public Function GetICDNameFromGroupCode(sCode As String, CodePath As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String

  If sCode Then
    sCode = Left(sCode, 3)   ''if disease or group first concert to group code
    hFile = Open CodePath
    modBasic.DebugString("Open File " & CodePath)
    For Each sLine In hFile.Lines
      asx = Split(sLine, ";")
      If Len(Trim(asx[1])) = 3 Then   ''And If Trim(asx[2]) = "0"
        If sCode = Trim(asx[1]) Then
          xx = Trim(asx[3])
          Break
        Endif
      Endif
    Next
    hFile.Close()
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetICDCodeFromGroupName(sName As String, CodePath As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String

  If sName Then
    hFile = Open CodePath
    modBasic.DebugString("Open File " & CodePath)
    For Each sLine In hFile.Lines
      asx = Split(sLine, ";")
      If Len(Trim(asx[1])) = 3 Then  ''And If Trim(asx[2]) = "0"
        If sName = Trim(asx[3]) Then
          xx = Trim(asx[1])
          Break
        Endif
      Endif
    Next
    hFile.Close()
  Else
    xx = ""
  Endif
  Return xx

End

''---------------------
Public Function GetICDGroupList(CodePath As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String[]

  xx = New String[]
  hFile = Open CodePath
  modBasic.DebugString("Open File " & CodePath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If Len(Trim(asx[1])) = 3 Then  ''And If Trim(asx[2]) = "0"
      xx.Add(Trim(asx[3]))
    Endif
  Next
  hFile.Close()

  Return xx

End

''======================== Blocks.txt and Chapters.txt ====================
Public Function GetICDCapterBlockList(xChapter As String, ChapterPath As String, BlockPath As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xchap As String
  Dim xx As String[]

  xx = New String[]
  If Exist(ChapterPath) And If Exist(BlockPath) Then
    xchap = modString.GetValueFromCSV(xChapter, ChapterPath, 1, 0, ";")

    hFile = Open BlockPath
    modBasic.DebugString("Open File " & BlockPath)
    For Each sLine In hFile.Lines
      asx = Split(sLine, ";")
      If Trim(asx[2]) = xchap Then
        xx.Add(Trim(asx[3]))
      Endif
    Next
    hFile.Close()

  Endif
  Return xx

End

''check below
Public Function GetICDItemBlockList(CodePath As String, BlockPath As String, sName As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim aa As String
  Dim bb As String

  Dim xxx As String[]
  Dim xstrList As String[]
  Dim xstr As String
  Dim alen As String

  hFile = Open BlockPath
  modBasic.DebugString("Open File " & BlockPath)
  For Each sLine In hFile.Lines
    asx = Split(sLine, ";")
    If Trim(asx[3]) = sName Then
      aa = asx[0]
      bb = asx[1]
      Break
    Endif
  Next
  hFile.Close()

  xstrList = GetICDbetween(aa, bb)
  xxx = New String[]
  For Each xstr In xstrList
    alen = GetICDNameFromGroupCode(xstr, CodePath)
    If alen Then
      xxx.Add(alen & "@" & xstr)
    Endif
  Next
  Return xxx

End

Private Function GetICDbetween(sCode1 As String, sCode2 As String) As String[]

  Dim spref As String
  Dim xstr As String
  Dim xval As Integer
  Dim ystr As String
  Dim yval As Integer
  Dim i As Integer
  Dim xx As String[]

  xx = New String[]
  If Left(sCode1, 1) = Left(sCode2, 1) Then
    spref = Left(sCode1, 1)
    xstr = Mid(sCode1, 2, Len(sCode1) - 1)
    xval = GetNumValue(xstr)
    ystr = Mid(sCode2, 2, Len(sCode2) - 1)
    yval = GetNumValue(ystr)

    For i = xval To yval
      If Len(CStr(i)) = 1 Then
        xx.Add(spref & "0" & CStr(i))
      Else
        xx.Add(spref & CStr(i))
      Endif
    Next
  Endif
  Return xx

End

Private Function GetNumValue(strVal As String) As Integer

  Dim xx As Integer

  If strVal = "00" Then
    xx = 0
  Else If strVal = "01" Then
    xx = 1
  Else If strVal = "02" Then
    xx = 2
  Else If strVal = "03" Then
    xx = 3
  Else If strVal = "04" Then
    xx = 4
  Else If strVal = "05" Then
    xx = 5
  Else If strVal = "06" Then
    xx = 6
  Else If strVal = "07" Then
    xx = 7
  Else If strVal = "08" Then
    xx = 8
  Else If strVal = "09" Then
    xx = 9
  Else
    xx = CInt(strVal)
  Endif
  Return xx

End

''-------------------- ICD Grid View ------------
Public Function GetICDCodeList(CodePath As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim asx As String[]
  Dim xx As String[]

  xx = New String[]
  If Exist(CodePath) Then
    hFile = Open CodePath
    modBasic.DebugString("Open File " & CodePath)
    For Each sLine In hFile.Lines
      asx = Split(sLine, ";")
      ' If Len(Trim(asx[1])) = 3 Then
      xx.Add(Trim(asx[3]) & "@" & Trim(asx[1]))
      ' Endif
    Next
    hFile.Close()
  Endif

  Return xx

End

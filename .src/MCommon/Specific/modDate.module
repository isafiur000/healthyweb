' Gambas module file

Public $LocalDateData As Collection

'NOTE: ---------------------------------- Start and End Time --------------------------------
'----------------------minute
Public Function StartSqlMinute(dt As Date) As Date

  Dim xx As Date

  xx = Date(Year(dt), Month(dt), Day(dt), Hour(dt), Minute(dt), 0, 0)
  Return xx

End

Public Function EndSqlMinute(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = DateAdd(StartSqlMinute(dt), gb.Minute, 1)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

'----------------Hour
Public Function StartSqlHour(dt As Date) As Date

  Dim xx As Date

  xx = Date(Year(dt), Month(dt), Day(dt), Hour(dt), 0, 0, 0)
  Return xx

End

Public Function EndSqlHour(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = DateAdd(StartSqlHour(dt), gb.Hour, 1)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

'----------Day
Public Function StartSqlDate(dt As Date) As Date

  Dim xx As Date

  xx = Date(Year(dt), Month(dt), Day(dt), 0, 0, 0, 0)
  Return xx

End

Public Function EndSqlDate(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = DateAdd(StartSqlDate(dt), gb.day, 1)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

'---------------------------- month
Public Function StartSqlMonth(dt As Date) As Date

  Dim xx As Date

  xx = Date(Year(dt), Month(dt), 1, 0, 0, 0, 0)
  Return xx

End

Public Function EndSqlMonth(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = DateAdd(StartSqlMonth(dt), gb.Month, 1)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

'------------------------------------ year
Public Function StartSqlYear(dt As Date) As Date

  Dim xx As Date

  xx = Date(Year(dt), 1, 1, 0, 0, 0, 0)
  Return xx

End

Public Function EndSqlYear(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = DateAdd(StartSqlYear(dt), gb.Year, 1)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

Public Function GetDateArrayBetween(dt1 As Date, dt2 As Date) As Date[]

  Dim xxx As Date[]
  Dim xdt As Date

  xxx = New Date[]
  If dt1 = dt2 Then
    xxx.Add(StartSqlDate(dt1))
  Else

    xdt = dt1
    While xdt < dt2
      xxx.Add(StartSqlDate(xdt))
      xdt = DateAdd(xdt, gb.Day, 1)
    Wend
    xxx.Add(StartSqlDate(xdt))

  Endif
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

Public Function GetSelectDateArrayBetween(sType As Integer, dt1 As Date, dt2 As Date) As Date[]

  Dim xxx As Date[]
  Dim xdt As Date

  xxx = New Date[]
  xdt = dt1
  While xdt <= dt2
    If sType = gb.Year Then
      xxx.Add(StartSqlYear(xdt))
      xdt = DateAdd(xdt, gb.Year, 1)
    Else If sType = gb.Month Then
      xxx.Add(StartSqlMonth(xdt))
      xdt = DateAdd(xdt, gb.Month, 1)
    Else
      xxx.Add(StartSqlDate(xdt))
      xdt = DateAdd(xdt, gb.Day, 1)
    Endif
  Wend
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End

''-------------------- Start and End BS Date Time -------------------------------
Public Function DateFormatViewBS(dt As Date, sType As String) As String

  Dim asx As String[]
  Dim aDate As String

  asx = Split(ConvertToLocaldate(dt), "/")
  If sType = "YearOnly" Then
    aDate = asx[0]
  Else If sType = "YearMonth" Then
    aDate = asx[0] & "/" & asx[1]
  Else If sType = "MonthDay" Then
    aDate = asx[1] & "/" & asx[2]
  Endif

  Return aDate

End

Public Function StartSqlMonthBS(dt As Date) As Date

  Dim asx As String[]
  Dim aDate As String
  Dim yy As Date
  Dim xx As Date

  asx = Split(ConvertToLocaldate(dt), "/")
  aDate = asx[0] & "/" & asx[1] & "/01"
  yy = ConvertToEnglishdate(aDate)
  xx = Date(Year(yy), Month(yy), Day(yy), 0, 0, 0, 0)
  Return xx

End

Public Function StartIncMonthBS(dt As Date) As Date

  Dim asx As String[]
  Dim xval As Float
  Dim aDate As String
  Dim sDate As Date
  Dim xx As Date

  asx = Split(ConvertToLocaldate(dt), "/")
  xval = CFloat(asx[1])
  If xval <= 11 Then
    If xval >= 9 Then
      aDate = asx[0] & "/" & CStr(CFloat(asx[1]) + 1) & "/01"
    Else
      aDate = asx[0] & "/0" & CStr(CFloat(asx[1]) + 1) & "/01"
    Endif
  Else
    aDate = CStr(CFloat(asx[0]) + 1) & "/01/01"
  Endif
  sDate = ConvertToEnglishdate(aDate)
  xx = Date(Year(sDate), Month(sDate), Day(sDate), 0, 0, 0, 0)
  Return xx

End

Public Function EndSqlMonthBS(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = StartIncMonthBS(dt)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

Public Function StartSqlYearBS(dt As Date) As Date

  Dim asx As String[]
  Dim aDate As String
  Dim sDate As Date
  Dim xx As Date

  asx = Split(ConvertToLocaldate(dt), "/")
  aDate = asx[0] & "/01/01"
  sDate = ConvertToEnglishdate(aDate)
  xx = Date(Year(sDate), Month(sDate), Day(sDate), 0, 0, 0, 0)
  Return xx

End

Public Function StartIncYearBS(dt As Date) As Date

  Dim asx As String[]
  Dim aDate As String
  Dim sDate As Date
  Dim xx As Date

  asx = Split(ConvertToLocaldate(dt), "/")
  aDate = CStr(CFloat(asx[0]) + 1) & "/01/01"
  sDate = ConvertToEnglishdate(aDate)
  xx = Date(Year(sDate), Month(sDate), Day(sDate), 0, 0, 0, 0)
  Return xx

End

Public Function EndSqlYearBS(dt As Date) As Date

  Dim xx As Date
  Dim yy As Date

  xx = StartIncYearBS(dt)
  yy = DateAdd(xx, gb.Millisecond, -1)
  Return yy

End

Public Function GetSelectDateBSArrayBetween(sType As Integer, dt1 As Date, dt2 As Date) As Date[]

  Dim xxx As Date[]
  Dim xdt As Date

  xxx = New Date[]
  xdt = dt1
  While xdt <= dt2
    If sType = gb.Year Then
      xxx.Add(StartSqlYearBS(xdt))
      xdt = StartIncYearBS(xdt)
    Else If sType = gb.Month Then
      xxx.Add(StartSqlMonthBS(xdt))
      xdt = StartIncMonthBS(xdt)
    Else
      xxx.Add(StartSqlDate(xdt))
      xdt = DateAdd(xdt, gb.Day, 1)
    Endif
  Wend
  If xxx Then
    xxx.Sort()
  Endif
  Return xxx

End
'
''
'''
''''

Public Function ConvertToLocaldate(sdate As Date) As String

  Dim res As Result
  Dim xx As String
  Dim xdate As Date

  If sdate Then
    xdate = Date(Year(sdate), Month(sdate), Day(sdate), 0, 0, 0, 0)
    xx = modHelpVariable.GetCollectionValue($LocalDateData, Format(xdate, gb.ShortDate), modBasic.$AppCacheDateConversion)
    If Not xx Then
      res = modDatabase.$calConn.Exec("select BS_DATE from tblbsdate where AD_DATE=&1", xdate)
      If res.Available = True Then
        If res["BS_DATE"] Then
          xx = res["BS_DATE"]
          If modBasic.$AppCacheDateConversion = "No" Then
          Else
            $LocalDateData.Add(xx, Format(xdate, gb.ShortDate))
          Endif
        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif
    Endif

  Else
    xx = ""
  Endif
  Return xx

End

Public Function ConvertToEnglishdate(nepDate As String) As Date

  Dim res As Result
  Dim xx As Date

  If Len(Trim(nepDate)) Then
    res = modDatabase.$calConn.Exec("select AD_DATE from tblbsdate where BS_DATE=&1", nepDate)
    If res.Available = True Then
      If res["AD_DATE"] Then
        xx = res["AD_DATE"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function ConvertToEngFullDateTime(nepDate As String) As Date

  Dim asx As String[]
  Dim bsx As String[]
  Dim xdate As Date

  If Len(Trim(nepDate)) Then
    asx = Split(nepDate, Space(1))
    xdate = ConvertToEnglishdate(asx[0])
    If xdate Then
      If asx.Count = 2 Then
        bsx = Split(asx[0], ":")
        If bsx.Count > 2 Then
          xdate = Date(Year(xdate), Month(xdate), Day(xdate), Hour(bsx[0]), Minute(bsx[1]), Second(bsx[2]))
        Else If bsx.Count > 1 Then
          xdate = Date(Year(xdate), Month(xdate), Day(xdate), Hour(bsx[0]), Minute(bsx[1]))
        Endif
      Else
        xdate = Date(Year(xdate), Month(xdate), Day(xdate))
      Endif
    Endif

  Else
    xdate = ""
  Endif

  Return xdate

End

Public Function GetNepaliFiscalYear(sDate As Date) As String

  Dim xnepdate As String
  Dim asx As String[]
  Dim xval As String

  xnepdate = ConvertToLocaldate(Date(sDate))
  asx = Split(xnepdate, "/")
  Select asx[1]
    Case "04", "05", "06", "07", "08", "09", "10", "11", "12"
      xval = asx[0] & "/" & CStr(CInt(asx[0]) + 1)
    Case "01", "02", "03"
      xval = CStr(CInt(asx[0]) - 1) & "/" & asx[0]
  End Select
  Return xval

End

Public Function GetNepaliFiscalSymbol(xnepdate As String) As String

  Dim asx As String[]
  Dim xval As String

  asx = Split(xnepdate, "/")
  xval = Right(asx[0], 2) & "/" & Right(asx[1], 2)

  Return xval

End

Public Function GetNepaliFiscalYarStart(curDate As Date) As Date

  Dim sFiscal As String
  Dim asx As String[]
  Dim xdate As String
  Dim sDate As Date

  sFiscal = GetNepaliFiscalYear(curDate)
  asx = Split(sFiscal, "/")
  xdate = asx[0] & "/04/01"
  sDate = ConvertToEnglishdate(xdate)
  Return sDate

End

Public Function GetBSDateRange(xdate As String) As Date[]

  Dim asx As String[]
  Dim lstval As String
  Dim xmont As String

  Dim xfir As Date
  Dim xlast As Date
  Dim dateRange As Date[]

  If xdate And If xdate <> "0000/00" Then
    asx = Split(xdate, "/")
    xfir = modDate.ConvertToEnglishdate(xdate & "/01")
    If asx[1] = "12" Then
      lstval = CStr(CInt(asx[0]) + 1) & "/" & "01" & "/" & "01"
    Else
      xmont = CStr(CInt(asx[1]) + 1)
      If Len(xmont) = 1 Then
        xmont = "0" & xmont
      Endif
      lstval = asx[0] & "/" & xmont & "/" & "01"
    Endif
    xlast = DateAdd(modDate.ConvertToEnglishdate(lstval), gb.Day, -1)

    dateRange = [xfir, xlast]
  Else
    dateRange = ["", ""]
  Endif

  Return dateRange

End

''formatting dates
Public Function ConvertLocalDateWithMonth(dt As Date) As String

  Dim xx As String
  Dim sAff As String[]
  Dim sVal As String
  Dim xdate As String

  xdate = ConvertToLocaldate(dt)
  If xdate Then
    sAff = Split(xdate, "/")
    If sAff[1] = "01" Then
      sVal = "Baishakh"
    Else If sAff[1] = "02" Then
      sVal = "Jestha"
    Else If sAff[1] = "03" Then
      sVal = "Asar"
    Else If sAff[1] = "04" Then
      sVal = "Shrawan"
    Else If sAff[1] = "05" Then
      sVal = "Bhadra"
    Else If sAff[1] = "06" Then
      sVal = "Ashwin"
    Else If sAff[1] = "07" Then
      sVal = "Karthik"
    Else If sAff[1] = "08" Then
      sVal = "Mangsir"
    Else If sAff[1] = "09" Then
      sVal = "Poush"
    Else If sAff[1] = "10" Then
      sVal = "Magh"
    Else If sAff[1] = "11" Then
      sVal = "Falgun"
    Else If sAff[1] = "12" Then
      sVal = "Chaitra"
    Endif
    xx = sAff[0] & Space(1) & sVal & Space(1) & sAff[2]

  Else
    xx = ""
  Endif
  Return xx

End

'##DATE FUNCTION##
Public Function GetDateOnlyInFormatForAll(strDate As Date, strFormat As String, sType As String) As String

  Dim xx As String
  Dim asx As String[]

  If strFormat = "BS Date" Then
    If sType = "LongDate" Then
      xx = ConvertLocalDateWithMonth(strDate) & Space(1) & GetWeekDay(strDate)
    Else If sType = "MediumDate" Then
      xx = ConvertLocalDateWithMonth(strDate)
    Else If sType = "YearOnly" Then
      xx = modDate.DateFormatViewBS(strDate, "YearOnly")
    Else If sType = "YearMonth" Then
      xx = modDate.DateFormatViewBS(strDate, "YearMonth")
    Else If sType = "MonthDay" Then
      xx = modDate.DateFormatViewBS(strDate, "MonthDay")
    Else If sType = "DateOnly" Then
      xx = ConvertToLocaldate(strDate)
    Else If sType = "ShortDateOnly" Then
      xx = ConvertToLocaldate(strDate)
    Else If sType = "TimeOnly" Then
      xx = ""
    Else ''If sType = "ShortDate" Then
      xx = ConvertToLocaldate(strDate)
    Endif

  Else If strFormat = "AD/BS Date" Then
    If sType = "LongDate" Then
      xx = Format(strDate, gb.LongDate) & Space(1) & "(" & ConvertLocalDateWithMonth(strDate) & ")"       ''
    Else If sType = "MediumDate" Then
      xx = Format(strDate, "mmm dd yyyy") & Space(1) & "(" & ConvertToLocaldate(strDate) & ")"
    Else If sType = "YearOnly" Then
      xx = Format(strDate, "yyyy") & Space(1) & "(" & modDate.DateFormatViewBS(strDate, "YearOnly") & ")"
    Else If sType = "YearMonth" Then
      xx = Format(strDate, "mmm yyyy") & Space(1) & "(" & modDate.DateFormatViewBS(strDate, "YearMonth") & ")"
    Else If sType = "MonthDay" Then
      xx = Format(strDate, "mmm dd") & Space(1) & "(" & modDate.DateFormatViewBS(strDate, "MonthDay") & ")"
    Else If sType = "DateOnly" Then
      xx = Format(strDate, gb.MediumDate) & Space(1) & "(" & ConvertToLocaldate(strDate) & ")"
    Else If sType = "ShortDateOnly" Then
      xx = Format(strDate, gb.ShortDate) & Space(1) & "(" & ConvertToLocaldate(strDate) & ")"
    Else If sType = "TimeOnly" Then
      xx = ""
    Else If sType Like "FORMAT@" & "*" Then
      asx = Split(sType, "@")
      If asx.Count > 1 Then
        xx = Format(strDate, asx[1]) & Space(1) & "(" & ConvertToLocaldate(strDate) & ")"
      Else
        xx = Format(strDate, gb.ShortDate) & Space(1) & "(" & ConvertToLocaldate(strDate) & ")"
      Endif
    Else  ''If sType = "ShortDate" Then
      xx = Format(strDate, gb.MediumDate) & Space(1) & "(" & ConvertToLocaldate(strDate) & ")"
    Endif

  Else   ''If strFormat = "AD Date" Then
    If sType = "LongDate" Then
      xx = Format(strDate, gb.LongDate)
    Else If sType = "MediumDate" Then
      xx = Format(strDate, "mmm dd yyyy")
    Else If sType = "YearOnly" Then
      xx = Format(strDate, "yyyy")
    Else If sType = "YearMonth" Then
      xx = Format(strDate, "mmm yyyy")
    Else If sType = "MonthDay" Then
      xx = Format(strDate, "mmm dd")
    Else If sType = "DateOnly" Then
      xx = Format(strDate, gb.MediumDate)
    Else If sType = "ShortDateOnly" Then
      xx = Format(strDate, gb.ShortDate)
    Else If sType = "TimeOnly" Then
      xx = ""
    Else If sType Like "FORMAT@" & "*" Then
      asx = Split(sType, "@")
      If asx.Count > 1 Then
        xx = Format(strDate, asx[1])
      Else
        xx = Format(strDate, gb.ShortDate)
      Endif
    Else  ''If sType = "ShortDate" Then
      xx = Format(strDate, gb.MediumDate)
    Endif

  Endif

  Return xx

End

'##DATE FUNCTION##
Public Function GetTimeOnlyForAll(strDate As Date, sType As String) As String

  Dim xx As String

  If sType = "LongDate" Then
    xx = Format(strDate, gb.LongTime)
  Else If sType = "MediumDate" Then
    xx = Format(strDate, gb.MediumTime)
  Else If sType = "YearOnly" Then
    xx = ""
  Else If sType = "YearMonth" Then
    xx = ""
  Else If sType = "MonthDay" Then
    xx = ""
  Else If sType = "DateOnly" Then
    xx = ""
  Else If sType = "ShortDateOnly" Then
    xx = ""
  Else If sType = "TimeOnly" Then
    xx = Format(strDate, gb.MediumTime)
  Else ''If sType = "ShortDate" Then
    xx = Format(strDate, gb.ShortTime)
  Endif
  Return xx

End

Public Function GetDateTimeInFormatForAll(strDate As Date, strFormat As String, sType As String) As String

  Dim xx As String
  Dim xtime As String

  xtime = GetTimeOnlyForAll(strDate, sType)
  If xtime Then
    xx = GetDateOnlyInFormatForAll(strDate, strFormat, sType) & Space(1) & xtime
  Else
    xx = GetDateOnlyInFormatForAll(strDate, strFormat, sType)
  Endif
  Return xx

End

Public Function GetMonthName(sdate As Date) As String

  Dim xx As String
  Dim monName As String[]

  monName = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  xx = monName[Month(sdate) - 1]
  Return xx

End

Public Function GetWeekDay(sdate As Date) As String

  Dim xx As String
  Dim DayNames As String[]

  DayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
  xx = DayNames[WeekDay(sdate)]
  Return xx

End

Public Function GetDayCode(sDay As String) As Integer

  Dim xx As Integer

  If sDay = "Sunday" Then
    xx = gb.Sunday
  Else If sDay = "Monday" Then
    xx = gb.Monday
  Else If sDay = "Tuesday" Then
    xx = gb.Tuesday
  Else If sDay = "Wednesday" Then
    xx = gb.Wednesday
  Else If sDay = "Thursday" Then
    xx = gb.Thursday
  Else If sDay = "Friday" Then
    xx = gb.Friday
  Else If sDay = "Saturday" Then
    xx = gb.Saturday
  Endif

  Return xx

End

'
''
'''
''''

''
'''

Public Function ConvertHoursToString(xHour As Float) As String

  Dim xval As Float
  Dim xunit As String
  Dim xx As String

  If xHour Then
    If xHour < 24 Then
      xval = xHour
      xunit = "Hours"
    Else If xHour >= 24 And If xHour < 24 * 30 Then
      xval = xHour / 24
      xunit = "Days"
    Else If xHour >= (24 * 30) And If xHour < (24 * 365) Then
      xval = xHour / (24 * 30)
      xunit = "Months"
    Else If xHour >= (24 * 365) Then
      xval = xHour / (24 * 365)
      xunit = "Years"
    Endif
    xx = CStr(Round(xval, -3)) & Space(1) & xunit

  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetAgeString(dtfir As Date, dtnow As Date) As String

  Dim xdiff As Integer
  Dim xval As Float
  Dim txtyear As Float
  Dim txtmonth As Float
  Dim btnyear As String
  Dim btnmon As String
  Dim xage As String
  Dim xx As String

  If dtfir And If dtnow Then
    xdiff = DateDiff(dtfir, dtnow, gb.Minute)
    If xdiff < (60 * 24) Then
      xval = xdiff / 60
      txtyear = Fix(xval)
      txtmonth = Floor(Frac(xval) * 60)
      btnyear = "Hr"
      btnmon = "Min"
    Else If xdiff >= (60 * 24) And If xdiff < 60 * 24 * 30 Then
      xval = xdiff / (60 * 24)
      txtyear = Fix(xval)
      txtmonth = Floor(Frac(xval) * 24)
      btnyear = "Day"
      btnmon = "Hr"
    Else If xdiff >= (60 * 24 * 30) And If xdiff < (60 * 24 * 365) Then
      xval = xdiff / (60 * 24 * 30)
      txtyear = Fix(xval)
      txtmonth = Floor(Frac(xval) * 30)
      btnyear = "Mon"
      btnmon = "Day"
    Else If xdiff >= (60 * 24 * 365) Then
      xval = xdiff / (60 * 24 * 365)
      txtyear = Fix(xval)
      txtmonth = Floor(Frac(xval) * 12)
      btnyear = "Yr"
      btnmon = "Mon"
    Endif

    If modBasic.$PatAgeFormat = "YearMonth" Then
      If txtmonth > 0 Then
        xage = CStr(txtyear) & btnyear & Space(1) & CStr(txtmonth) & btnmon
      Else
        xage = CStr(txtyear) & btnyear
      Endif
    Else If modBasic.$PatAgeFormat = "YearOnly" Then
      xage = CStr(txtyear) & btnyear
    Else If modBasic.$PatAgeFormat = "AgeInYears" Then
      xage = CStr(Round(xdiff / (60 * 24 * 365), -3))
    Else
      xage = CStr(Round(xval, -1)) & btnyear
    Endif

    If modBasic.$NumFont Then
      xx = modString.GetLocalNumber(xage)
    Else
      xx = xage
    Endif
  Endif

  Return xx

End

Public Function GetYearDate(sYear As Integer) As Date

  Dim xx As Date

  xx = Date(sYear, 1, 1, 0, 0, 0, 0)
  Return xx

End

Private Function ConvertIntervalToString(xhour As Integer, xminute As Integer, xsecond As Integer) As String

  Dim shour As String
  Dim smin As String
  Dim ssec As String
  Dim xval As String

  If xhour Then
    shour = CStr(xhour)
  Else
    shour = "0"
  Endif

  If xminute Then
    If xminute >= 10 Then
      smin = CStr(xminute)
    Else
      smin = "0" & CStr(xminute)
    Endif
  Else
    smin = "00"
  Endif

  If xsecond Then
    If xsecond >= 10 Then
      ssec = CStr(xsecond)
    Else
      ssec = "0" & CStr(xsecond)
    Endif
  Else
    ssec = "00"
  Endif

  xval = shour & " : " & smin & " : " & ssec
  Return xval

End

Public Function GetSecondToTimeForm(xSecond As Integer) As String

  Dim xnewsec As Integer
  Dim xhour As Integer
  Dim xmin As Integer
  Dim xsec As Integer
  Dim xval As String

  If xSecond >= 3600 Then
    xhour = Fix(xSecond / 3600)
    xnewsec = xSecond - (xhour * 3600)
    If xnewsec >= 60 Then
      xmin = Fix(xnewsec / 60)
      xsec = xnewsec - (xmin * 60)
    Else
      xmin = 0
      xsec = xnewsec
    Endif

  Else If xSecond >= 60 Then
    xhour = 0
    xmin = Fix(xSecond / 60)
    xsec = xSecond - (xmin * 60)
  Else
    xhour = 0
    xmin = 0
    xsec = xSecond
  Endif

  xval = ConvertIntervalToString(xhour, xmin, xsec)
  Return xval

End

Public Function GetHoursValue(sUnit As String) As Integer

  Dim xval As Float

  If sUnit = "Hours" Then
    xval = 1
  Else If sUnit = "Days" Then
    xval = 24
  Else If sUnit = "Weeks" Then
    xval = 24 * 7
  Else If sUnit = "Months" Then
    xval = 24 * 30
  Else If sUnit = "Years" Then
    xval = 24 * 365
  Else
    xval = 0
  Endif
  Return xval

End

Public Function DateStringForExam(sDate As Date) As String

  Dim xx As String

  If Hour(sDate) = 0 And If Minute(sDate) = 0 And If Second(sDate) = 0 Then
    xx = modDate.GetDateOnlyInFormatForAll(sDate, "AD Date", modBasic.$DateContent)
  Else
    xx = modDate.GetDateTimeInFormatForAll(sDate, "AD Date", modBasic.$DateContent)
  Endif
  Return xx

End

Public Function GetDateFromJSON(sVal As String) As Date

  Dim xdate As Date
  Dim xx As String
  Dim asx As String[]
  Dim adate As String[]
  Dim aTime As String[]

  xx = Replace(sVal, "T", Space(1))
  xx = Replace(xx, "Z", "")
  asx = Split(Trim(xx), Space(1))
  adate = Split(asx[0], "-")
  If asx.Count = 1 Then
    xdate = Date(CInt(adate[0]), CInt(adate[1]), CInt(adate[2]), 0, 0, 0, 0)
  Else
    aTime = Split(asx[1], ":")
    xdate = Date(CInt(adate[0]), CInt(adate[1]), CInt(adate[2]), CInt(aTime[0]), CInt(aTime[1]), Val(aTime[2]), 0)
  Endif
  Return xdate

End

Public Function GetSQLDateDiffStr(fldnow As String, fldbirth As String, $con As Connection) As String

  Dim dbType As String
  Dim xdtstr As String

  dbType = $con.Type
  dbType = modDatabase.$syConn.Type
  If dbType = "mysql" Then
    xdtstr = Subst("DATEDIFF(&1, &2)", fldnow, fldbirth)
  Else If dbType = "postgresql" Then
    xdtstr = Subst("DATE_PART('day',&1 - &2)", fldnow, fldbirth)
  Else If dbType = "sqlite3" Then
    xdtstr = Subst("(julianday(&1) - julianday(&2))", fldnow, fldbirth)
  Endif

  Return xdtstr

End

Public Function GetSQLHourDiffStr(fldnow As String, fldbirth As String, $con As Connection) As String

  Dim dbType As String
  Dim xdtstr As String

  dbType = $con.Type
  dbType = modDatabase.$syConn.Type
  If dbType = "mysql" Then
    xdtstr = Subst("TIMESTAMPDIFF(HOUR, &1, &2)", fldnow, fldbirth)
  Else If dbType = "postgresql" Then
    xdtstr = Subst("DATE_PART('hour', timestamp &1 - &2)", fldnow, fldbirth)
  Else If dbType = "sqlite3" Then
    xdtstr = ""
  Endif

  Return xdtstr

End

Public Function ConvertDateToString(sDate As Date, sFormat As String) As String

  Dim xmonth As String
  Dim xday As String
  Dim xval As String

  If Month(sDate) < 10 Then
    xmonth = "0" & CStr(Month(sDate))
  Else
    xmonth = CStr(Month(sDate))
  Endif
  If Day(sDate) < 10 Then
    xday = "0" & CStr(Day(sDate))
  Else
    xday = CStr(Day(sDate))
  Endif
  If sFormat = "Orthanc" Then
    xval = CStr(Year(sDate)) & xmonth & xday
  Else
    xval = CStr(Year(sDate)) & "-" & xmonth & "-" & xday
  Endif

  Return xval

End

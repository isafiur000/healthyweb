' Gambas module file

Public $ExamItemQualiQuanti As Collection
Public $ExamIDFromSysConst As Collection
Public $ExamCritValue As Collection
Public $ExamItemCategory As Collection
Public $ExamOptionType As Collection
Public $ExamSysOptionType As Collection

Public $ExamDrugHypo As Collection
Public $ExamdrugHyper As Collection
Public $ExamSyndroBrady As Collection
Public $ExamSyndroTachy As Collection

Public Function SelectDeptExamAbnormal(sDepart As String, sExam As String, sOption As String, Optional xOptionType As String) As Boolean

  Dim res As Result
  Dim xabn As Boolean

  If xOptionType Then
    res = modDatabase.$medConn.Exec("select fldabnormal from tbldeptexamoption where fldexamid=&1 and flddept=&2 and fldtanswertype=&3 and fldanswer=&4", sExam, sDepart, xOptionType, sOption)
  Else
    res = modDatabase.$medConn.Exec("select fldabnormal from tbldeptexamoption where fldexamid=&1 and flddept=&2 and fldanswer=&3", sExam, sOption)
  Endif
  If res.Available Then
    If res["fldabnormal"] Then
      xabn = res["fldabnormal"]
    Else
      xabn = False
    Endif
  Else
    xabn = False
  Endif

  Return xabn

End

Public Function GetLeftRightMainHeader(sType As String, sExam As String) As String

  Dim opt As String[]
  Dim optStr As String

  opt = modAllExam.SelectExamOptionList(sType, sExam, "Left and Right")
  If opt.Count >= 2 Then
    optStr = modString.GetLefRightJSON(opt[0], opt[1])
  Endif

  Return optStr

End

'NOTE: -------------------------------------- EXAM Procedure ---------------------------------------
Public Function GetChapterFromRecommendedID(sCode As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldcategory,flditem from tblstructexam where fldheadcode=&1", sCode)
  If res.Available Then
    If res["flditem"] Then
      xx = res["fldcategory"] & "@" & res["flditem"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetSubExamArray(examid As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select fldsubexam from tblexamquali where fldexamid=&1 ORDER BY fldindex", examid)
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

Public Function GetSubExamOption(headid As String, subheadid As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldtanswertype from tblexamquali where fldexamid=&1 and fldsubexam=&2", headid, subheadid)
  If res.Available Then
    If res["fldtanswertype"] Then
      xx = res["fldtanswertype"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function SysConstFromGetExamID(sExam As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldsysconst from tblexam where fldexamid=&1", sExam)
  If res.Available = True Then
    If res["fldsysconst"] Then
      xx = res["fldsysconst"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetExamSysOptionType(strSys As String) As String

  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($ExamSysOptionType, strSys, modBasic.$AppCacheExaminationConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldoption from tblexam where fldsysconst=&1", strSys)
    If res.Available Then
      If res["fldoption"] Then
        xx = res["fldoption"]
        If modBasic.$AppCacheExaminationConstants = "Yes" Then
          $ExamSysOptionType.Add(xx, strSys)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  If Not xx Then
    If modMedicine.GetFixedLRExaminations().Exist(strSys) = True Then
      xx = "Left and Right"
    Endif
  Endif
  Return xx

End

Public Function GetExamtOptionType(strTest As String) As String

  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($ExamOptionType, strTest, modBasic.$AppCacheExaminationConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldoption from tblexam where fldexamid=&1", strTest)
    If res.Available Then
      If res["fldoption"] Then
        xx = res["fldoption"]
        If modBasic.$AppCacheExaminationConstants = "Yes" Then
          $ExamOptionType.Add(xx, strTest)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  If Not xx Then
    If modMedicine.GetFixedLRExaminations().Exist(strTest) = True Then
      xx = "Left and Right"
    Endif
  Endif
  Return xx

End

Public Function GetExamIDFromSysConst(syscons As String) As String

  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($ExamIDFromSysConst, syscons, modBasic.$AppCacheExaminationConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldexamid from tblexam where fldsysconst=&1", syscons)
    If res.Available = True Then
      res.MoveFirst
      If res["fldexamid"] Then
        xx = res["fldexamid"]
        If modBasic.$AppCacheExaminationConstants = "Yes" Then
          $ExamIDFromSysConst.Add(xx, syscons)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetExaminationCategory(test As String) As String

  Dim xx As String
  Dim res As Result

  xx = modHelpVariable.GetCollectionValue($ExamItemCategory, test, modBasic.$AppCacheExaminationConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldcategory from tblexam where fldexamid=&1", test)
    If res.Available Then
      If res["fldcategory"] Then
        xx = res["fldcategory"]
        If modBasic.$AppCacheExaminationConstants = "Yes" Then
          $ExamItemCategory.Add(xx, test)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetExamWithCategory(sExamList As String[]) As String[]

  Dim xx As String
  Dim xval As String[]

  xval = New String[]
  For Each xx In sExamList
    xval.Add(GetExaminationCategory(xx) & "@" & xx)
  Next
  Return xval

End

Public Function MethodsForClinExam(sTestName As String) As String[]

  Dim xx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select distinct(fldmethod) as col from tblexamlimit where fldexamid=&1", sTestName)
  xx = modControlSub.GetDirectFillresult(res)
  Return xx

End

Public Function GetExaminationType(strTest As String) As String

  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($ExamItemQualiQuanti, strTest, modBasic.$AppCacheExaminationConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldtype from tblexam where fldexamid=&1", strTest)
    If res.Available = True Then
      If res["fldtype"] Then
        xx = res["fldtype"]
        If modBasic.$AppCacheExaminationConstants = "Yes" Then
          $ExamItemQualiQuanti.Add(xx, strTest)
        Endif
      Else
        xx = "Qualitative"
      Endif
    Else
      xx = "Qualitative"
    Endif
  Endif
  Return xx

End

Public Function GetExamSysName(sExam As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldsysconst from tblexam where fldexamid=&1", sExam)
  If res.Available Then
    If res["fldsysconst"] Then
      xx = res["fldsysconst"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetCritValueExam(strTest As String) As Float

  Dim res As Result
  Dim xval As Float
  Dim yy As Variant

  yy = modHelpVariable.GetCollectionValue($ExamCritValue, strTest, modBasic.$AppCacheExaminationConstants)
  If yy Then
    xval = CFloat(yy)
  Else
    xval = 0
  Endif

  If Not xval Then
    res = modDatabase.$medConn.Exec("select fldcritical from tblexam where fldexamid=&1", strTest)
    If res.Available Then
      If res["fldcritical"] Then
        xval = res["fldcritical"]
        If modBasic.$AppCacheExaminationConstants = "Yes" Then
          $ExamCritValue.Add(xval, strTest)
        Endif
      Else
        xval = 0
      Endif
    Else
      xval = 0
    Endif
  Endif

  Return xval

End

Public Function GetExamQualiTextReference(txttest As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldanswer from tblexamoption where fldexamid=&1 and fldanswertype=&2 ORDER BY fldindex", txttest, "Text Reference")
  If res.Available = True Then
    res.MoveFirst
    If res["fldanswer"] Then
      xx = res["fldanswer"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetExamUnitWithOutAgeSex(txtexam As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldunit from tblexamlimit where fldexamid=&1", txtexam)                                                              ''
  If res.Available = True Then
    res.MoveFirst
    If res["fldunit"] Then
      xx = res["fldunit"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function ExamTableValue(sField As String, txtexam As String) As Float

  Dim res1 As Result
  Dim xx As Float

  res1 = modDatabase.$medConn.Exec(Subst("select &1 as fld from tblexam", sField) & " where fldexamid=&1", txtexam)
  If res1.Available Then
    If res1["fld"] Then
      xx = res1["fld"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif

  Return xx

End

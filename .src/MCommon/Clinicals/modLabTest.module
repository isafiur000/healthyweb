' Gambas module file

Public $LabQueryValueColl As Collection

Public $LabIDUnitReference As Collection
Public $LabIDUnitAccepTRange As Collection
Public $LabIDUnitUnitString As Collection

Public $LabIDEncounter As Collection
Public $LabIDTestName As Collection
Public $LabIDTestMethod As Collection

Public Sub LoadPatTestParameters(strTest As String, xgender As String, agegroup As String, sMethod As String)

  Dim xkey As String
  Dim res As Result
  Dim sql As String
  Dim sqstr As String
  Dim sColl As Collection

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) = False Then
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    sql = "SELECT fldminimum,fldmaximum,fldsensitivity,fldspecificity,fldconvfactor,fldsinormal,fldsihigh,fldsilow,fldsiunit,fldmetnormal,fldmethigh,fldmetlow,fldmetunit FROM tbltestlimit WHERE fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    res = modDatabase.$medConn.Exec(sql, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If res.Available Then
      res.MoveFirst
      sColl = New Collection
      sColl.Add(res["fldminimum"], "fldminimum")
      sColl.Add(res["fldmaximum"], "fldmaximum")
      sColl.Add(res["fldsensitivity"], "fldsensitivity")
      sColl.Add(res["fldspecificity"], "fldspecificity")
      sColl.Add(res["fldconvfactor"], "fldconvfactor")
      sColl.Add(res["fldsinormal"], "fldsinormal")
      sColl.Add(res["fldsihigh"], "fldsihigh")
      sColl.Add(res["fldsilow"], "fldsilow")
      sColl.Add(res["fldsiunit"], "fldsiunit")
      sColl.Add(res["fldmetnormal"], "fldmetnormal")
      sColl.Add(res["fldmethigh"], "fldmethigh")
      sColl.Add(res["fldmetlow"], "fldmetlow")
      sColl.Add(res["fldmetunit"], "fldmetunit")

      ''add to collection
      $LabQueryValueColl.Add(sColl, xkey)
    Endif
  Endif

End

''------------------------------------- Procedure by patient ----------------------------------------------------------
Public Function UniLabValueList(encid As String, sTest As String) As String[]

  Dim res As Result
  Dim xx As String[]
  Dim rex As Result

  xx = New String[]
  rex = modDatabase.$syConn.Exec("select fldpatlabtest,fldpatlabsubtest from tblfisclosing where (fldstate=&1 or fldstate IS NULL)", "Active")
  If rex.Available Then
    For Each rex

      res = modDatabase.$myConn.Exec("select fldtime_sample,fldreportquali from " & rex["fldpatlabtest"] & " where fldencounterval=&1 and fldtestid=&2", encid, sTest)
      If res.Available Then
        For Each res
          If res["fldreportquali"] Then
            xx.Add(modReportVar.GetDateTimeReport(res["fldtime_sample"], gb.GeneralDate) & " : " & res["fldreportquali"])
          Endif
        Next
      Endif

    Next
  Endif

  res = modDatabase.$myConn.Exec("select fldtime_sample,fldreportquali from tblpatlabtest where fldencounterval=&1 and fldtestid=&2", encid, sTest)
  If res.Available Then
    For Each res
      If res["fldreportquali"] Then
        xx.Add(modReportVar.GetDateTimeReport(res["fldtime_sample"], gb.GeneralDate) & " : " & res["fldreportquali"])
      Endif
    Next
  Endif

  Return xx

End

Public Function PaientAllTestNameArray(encid As String, Optional sTable As String) As String[]

  Dim res As Result
  Dim xx As String[]

  If sTable Then
    res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from " & sTable & " where fldencounterval=&1 and (fldstatus=&2 or fldstatus=&3) and flvisible=&4", encid, "Reported", "Verified", "Visible")
  Else
    res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and (fldstatus=&2 or fldstatus=&3) and flvisible=&4", encid, "Reported", "Verified", "Visible")
  Endif
  xx = modControlSub.GetDirectFillresult(res)
  If xx Then
    xx.Sort()
  Endif
  Return xx

End

Public Sub GetQualiTestListByPatient(encid As String, Optional sTable As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]

  If sTable Then
    sql = "select distinct(fldtestid) as col from " & sTable & " where fldencounterval=&1 and fldtest_type=&2 and flvisible=&3 and (fldstatus=&4 or fldstatus=&5)"
  Else
    sql = "select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and fldtest_type=&2 and flvisible=&3 and (fldstatus=&4 or fldstatus=&5)"
  Endif
  res = modDatabase.$myConn.Exec(sql, encid, "Qualitative", "Visible", "Reported", "Verified")
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

Public Sub GetQuantiTestListByPatient(encid As String, Optional sTable As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]

  If sTable Then
    sql = "select distinct(fldtestid) as col from " & sTable & " where fldencounterval=&1 and fldtest_type=&2 and flvisible=&3 and (fldstatus=&4 or fldstatus=&5)"
  Else
    sql = "select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and fldtest_type=&2 and flvisible=&3 and (fldstatus=&4 or fldstatus=&5)"
  Endif
  res = modDatabase.$myConn.Exec(sql, encid, "Quantitative", "Visible", "Reported", "Verified")
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

Public Function AllowSampleID(encid As String, sLabNo As String) As Boolean

  Dim res As Result
  Dim xval As Boolean

  res = modDatabase.$myConn.Exec("select distinct(fldencounterval) as col from tblpatlabtest where fldsampleid=&1", sLabNo)
  If res.Available Then
    res.MoveLast
    If res["col"] = encid Then
      xval = True
    Else
      xval = False
    Endif
  Else
    xval = True
  Endif
  Return xval

End

Public Function GetSampleTimeFromLabID(id As Long, Optional sTable As String) As Date

  Dim res As Result
  Dim xx As Date

  If sTable Then
    res = modDatabase.$myConn.Exec("select fldtime_sample from " & sTable & " where fldid=&1", id)
  Else
    res = modDatabase.$myConn.Exec("select fldtime_sample from tblpatlabtest where fldid=&1", id)
  Endif
  If res.Available Then
    If res["fldtime_sample"] Then
      xx = res["fldtime_sample"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetEncIDFromLabID(id As Long, Optional sTable As String) As String

  Dim res As Result
  Dim xx As String

  If sTable Then
    res = modDatabase.$myConn.Exec("select fldencounterval from " & sTable & " where fldid=&1", id)
  Else
    res = modDatabase.$myConn.Exec("select fldencounterval from tblpatlabtest where fldid=&1", id)
  Endif
  If res.Available Then
    If res["fldencounterval"] Then
      xx = res["fldencounterval"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetTestnameFromTestID(id As Long, Optional sTable As String, Optional encid As String) As String

  Dim res As Result
  Dim xx As String
  Dim xappend As String

  If encid Then
    If sTable Then
      res = modDatabase.$myConn.Exec("select fldtestid,fldsampletype from " & sTable & " where fldid=&1 and fldencounterval=&2", id, encid)
    Else
      res = modDatabase.$myConn.Exec("select fldtestid,fldsampletype from tblpatlabtest where fldid=&1 and fldencounterval=&2", id, encid)
    Endif
  Else
    If sTable Then
      res = modDatabase.$myConn.Exec("select fldtestid,fldsampletype from " & sTable & " where fldid=&1", id)
    Else
      res = modDatabase.$myConn.Exec("select fldtestid,fldsampletype from tblpatlabtest where fldid=&1", id)
    Endif
  Endif
  If res.Available Then
    If res["fldtestid"] Then
      xappend = modFixLab.GetLabTestCaption(res["fldtestid"])
      If xappend = "$AppendSpecimen" Then
        xx = res["fldtestid"] & " [" & res["fldsampletype"] & "]"
      Else
        xx = res["fldtestid"]
      Endif
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetTestMethodLabID(id As Long, Optional sTable As String) As String

  Dim res As Result
  Dim xx As String

  If sTable Then
    res = modDatabase.$myConn.Exec("select fldmethod from " & sTable & " where fldid=&1", id)
  Else
    res = modDatabase.$myConn.Exec("select fldmethod from tblpatlabtest where fldid=&1", id)
  Endif
  If res.Available Then
    If res["fldmethod"] Then
      xx = res["fldmethod"]
      If xx = "Regular" Then
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetEncounterFromSampleID(txtsampleid As String, Optional sTable As String) As String

  Dim res As Result
  Dim encid As String

  If sTable Then
    res = modDatabase.$myConn.Exec("select fldencounterval from " & sTable & " where fldsampleid=&1", txtsampleid)
  Else
    res = modDatabase.$myConn.Exec("select fldencounterval from tblpatlabtest where fldsampleid=&1", txtsampleid)
  Endif
  If res.Available = True Then
    res.MoveLast
    If res["fldencounterval"] Then
      encid = res["fldencounterval"]
    Else
      encid = ""
    Endif
  Endif

  Return encid

End

''--------------------- Reference Ranges ------------------------------
Public Function LabBothLimitValue(strTest As String, encid As String, strUnit As String, Optional sMethod As String) As Float[]

  Dim sql As String
  Dim rs As Result
  Dim minLimit As Float
  Dim maxLimit As Float
  Dim sqstr As String
  Dim xval As Float[]

  Dim xgender As String
  Dim agegroup As String
  Dim xkey As String

  xgender = modPatient.GetPatientSex(encid)
  agegroup = modPatient.GetAgeGroupFIxed(encid, Now())

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  LoadPatTestParameters(strTest, xgender, agegroup, sMethod)
  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) Then
    If strUnit = "Metric" Then
      If $LabQueryValueColl[xkey]["fldmetlow"] Then
        minLimit = $LabQueryValueColl[xkey]["fldmetlow"]
      Else
        minLimit = 0
      Endif
      If $LabQueryValueColl[xkey]["fldmethigh"] Then
        maxLimit = $LabQueryValueColl[xkey]["fldmethigh"]
      Else
        maxLimit = 0
      Endif
    Else If strUnit = "SI" Then
      If $LabQueryValueColl[xkey]["fldsilow"] Then
        minLimit = $LabQueryValueColl[xkey]["fldsilow"]
      Else
        minLimit = 0
      Endif
      If $LabQueryValueColl[xkey]["fldsihigh"] Then
        maxLimit = $LabQueryValueColl[xkey]["fldsihigh"]
      Else
        maxLimit = 0
      Endif
    Endif

  Else
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    If strUnit = "Metric" Then
      sql = "select fldmetlow as xlow,fldmethigh as xhigh from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    Else If strUnit = "SI" Then
      sql = "select fldsilow as xlow,fldsihigh as xhigh from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    Endif
    rs = modDatabase.$medConn.Exec(sql, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If rs.Available = True Then
      rs.MoveFirst
      If rs["xlow"] Then
        minLimit = rs["xlow"]
      Else
        minLimit = 0
      Endif
      If rs["xhigh"] Then
        maxLimit = rs["xhigh"]
      Else
        maxLimit = 0
      Endif
    Else
      minLimit = 0
      maxLimit = 0
    Endif

  Endif

  xval = [minLimit, maxLimit]
  Return xval

End

''get as array (use minimal)
Public Function GetTestBothLimits(id As Long, strUnit As String, Optional sTable As String) As Float[]

  Dim res As Result
  Dim sql As String
  Dim LwLimit As Float
  Dim UpLimit As Float
  Dim xlimit As Float[]
  Dim xval As Float[]

  If sTable Then
    sql = "select fldencounterval,fldtestid,fldmethod from " & sTable & " where fldid=&1 and fldtest_type=&2"
  Else
    sql = "select fldencounterval,fldtestid,fldmethod from tblpatlabtest where fldid=&1 and fldtest_type=&2"
  Endif
  res = modDatabase.$myConn.Exec(sql, id, "Quantitative")
  If res.Available = True Then
    If res["fldmethod"] Then
      xlimit = LabBothLimitValue(res["fldtestid"], res["fldencounterval"], strUnit, res["fldmethod"])
      LwLimit = xlimit[0]
      UpLimit = xlimit[1]
    Else
      xlimit = LabBothLimitValue(res["fldtestid"], res["fldencounterval"], strUnit)
      LwLimit = xlimit[0]
      UpLimit = xlimit[1]
    Endif
  Else
    LwLimit = 0
    UpLimit = 0
  Endif

  xval = [LwLimit, UpLimit]
  Return xval

End

''get for report
Public Function GetTestLimitSrting(id As Long, strUnit As String, Optional sTable As String, Optional encid As String) As String

  Dim xx As String
  Dim res As Result
  Dim xmax As Float
  Dim xmin As Float
  Dim xlimit As Float[]
  Dim xunit As String

  If encid Then
    If sTable Then
      res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldtest_type,fldmethod from " & sTable & " where fldid=&1 and fldencounterval=&2", id, encid)
    Else
      res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldtest_type,fldmethod from tblpatlabtest where fldid=&1 and fldencounterval=&2", id, encid)
    Endif
  Else
    If sTable Then
      res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldtest_type,fldmethod from " & sTable & " where fldid=&1", id)
    Else
      res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldtest_type,fldmethod from tblpatlabtest where fldid=&1", id)
    Endif
  Endif
  If res.Available Then
    If res["fldtest_type"] = "Quantitative" Then
      If res["fldmethod"] Then
        xlimit = LabBothLimitValue(res["fldtestid"], res["fldencounterval"], strUnit, res["fldmethod"])
      Else
        xlimit = LabBothLimitValue(res["fldtestid"], res["fldencounterval"], strUnit)
      Endif
      xmin = xlimit[0]
      xmax = xlimit[1]
      If res["fldmethod"] Then
        xunit = LabTestUnit(res["fldtestid"], res["fldencounterval"], strUnit, res["fldmethod"])
      Else
        xunit = LabTestUnit(res["fldtestid"], res["fldencounterval"], strUnit)
      Endif
      If xmin < xmax Then
        If modBasic.$QuantiUnitEnable = "Disable" Then
          xx = CStr(xmin) & "  -  " & CStr(xmax)
        Else
          xx = CStr(xmin) & "  -  " & CStr(xmax) & Space(1) & xunit
        Endif
      Else
        xx = ""
      Endif
    Else
      If sTable Then
        xx = modFixLab.GetLabQualiTestTextReference(GetTestnameFromTestID(id, sTable, res["fldencounterval"]))   ''only for text reference
      Else
        xx = modFixLab.GetLabQualiTestTextReference(GetTestnameFromTestID(id, "tblpatlabtest", res["fldencounterval"]))   ''only for text reference
      Endif
    Endif

  Else
    xx = ""
  Endif

  Return xx

End

''---------------------- Normal Value ------------------------------------
Public Function LabNormalValue(strTest As String, encid As String, strUnit As String, Optional sMethod As String) As Float

  Dim sql As String
  Dim rs As Result
  Dim NormalLimit As Float
  Dim sqstr As String

  Dim xgender As String
  Dim agegroup As String
  Dim xkey As String

  xgender = modPatient.GetPatientSex(encid)
  agegroup = modPatient.GetAgeGroupFIxed(encid, Now())

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  LoadPatTestParameters(strTest, xgender, agegroup, sMethod)
  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) Then
    If strUnit = "Metric" Then
      If $LabQueryValueColl[xkey]["fldmetnormal"] Then
        NormalLimit = $LabQueryValueColl[xkey]["fldmetnormal"]
      Else
        NormalLimit = 0
      Endif
    Else If strUnit = "SI" Then
      If $LabQueryValueColl[xkey]["fldsinormal"] Then
        NormalLimit = $LabQueryValueColl[xkey]["fldsinormal"]
      Else
        NormalLimit = 0
      Endif
    Endif

  Else
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    If strUnit = "Metric" Then
      sql = "select fldmetnormal as xnormal from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    Else If strUnit = "SI" Then
      sql = "select fldsinormal as xnormal from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    Endif
    rs = modDatabase.$medConn.Exec(sql, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If rs.Available = True Then
      rs.MoveFirst
      If rs["xnormal"] Then
        NormalLimit = rs["xnormal"]
      Else
        NormalLimit = 0
      Endif
    Else
      NormalLimit = 0
    Endif

  Endif

  Return NormalLimit

End

''--------------------------- Acceptable Range --------------------------------
Public Function GetLabAcceptableRange(strTest As String, encid As String, strUnit As String, Optional sMethod As String) As Float[]

  Dim sql As String
  Dim rs As Result
  Dim LowerLimit As Float
  Dim UpperLimit As Float
  Dim sqstr As String
  Dim xval As Float[]
  Dim xconv As Float

  Dim xgender As String
  Dim agegroup As String
  Dim xkey As String

  xgender = modPatient.GetPatientSex(encid)
  agegroup = modPatient.GetAgeGroupFIxed(encid, Now())

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  LoadPatTestParameters(strTest, xgender, agegroup, sMethod)
  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) Then
    If $LabQueryValueColl[xkey]["fldminimum"] Then
      LowerLimit = $LabQueryValueColl[xkey]["fldminimum"]
    Else
      LowerLimit = 0
    Endif
    If $LabQueryValueColl[xkey]["fldmaximum"] Then
      UpperLimit = $LabQueryValueColl[xkey]["fldmaximum"]
    Else
      UpperLimit = 0
    Endif

  Else
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    sql = "select fldminimum,fldmaximum from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    rs = modDatabase.$medConn.Exec(sql, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If rs.Available = True Then
      rs.MoveFirst
      If rs["fldminimum"] Then
        LowerLimit = rs["fldminimum"]
      Else
        LowerLimit = 0
      Endif
      If rs["fldmaximum"] Then
        UpperLimit = rs["fldmaximum"]
      Else
        UpperLimit = 0
      Endif
    Else
      LowerLimit = 0
      UpperLimit = 0
    Endif

  Endif

  If strUnit = "Metric" Then
    xval = [LowerLimit, UpperLimit]
  Else If strUnit = "SI" Then
    If sMethod Then
      xconv = LabConversionValue(encid, strTest, sMethod)
    Else
      xconv = LabConversionValue(encid, strTest)
    Endif
    xval = [LowerLimit * xconv, UpperLimit * xconv]
  Endif
  Return xval

End

Public Function GetLabAcceptableLimits(id As Variant, strUnit As String, Optional sTable As String) As Float[]

  Dim res As Result
  Dim LwLimit As Float
  Dim UpLimit As Float
  Dim xlimit As Float[]
  Dim xval As Float[]

  If sTable Then
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldmethod from " & sTable & " where fldid=&1 and fldtest_type=&2", id, "Quantitative")
  Else
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldmethod from tblpatlabtest where fldid=&1 and fldtest_type=&2", id, "Quantitative")
  Endif
  If res.Available = True Then
    If res["fldmethod"] Then
      xlimit = GetLabAcceptableRange(res["fldtestid"], res["fldencounterval"], strUnit, res["fldmethod"])
      LwLimit = xlimit[0]
      UpLimit = xlimit[1]
    Else
      xlimit = GetLabAcceptableRange(res["fldtestid"], res["fldencounterval"], strUnit)
      LwLimit = xlimit[0]
      UpLimit = xlimit[1]
    Endif
  Else
    LwLimit = 0
    UpLimit = 0
  Endif
  xval = [LwLimit, UpLimit]

  Return xval

End

''------------------------ Sensitivity/Specificity ------------------
Private Function LabQuantiTableValue(sField As String, strTest As String, encid As String, Optional sMethod As String) As Float

  Dim sql As String
  Dim rs As Result
  Dim svalue As Float
  Dim sqstr As String

  Dim xgender As String
  Dim agegroup As String
  Dim xkey As String

  xgender = modPatient.GetPatientSex(encid)
  agegroup = modPatient.GetAgeGroupFIxed(encid, Now())

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  LoadPatTestParameters(strTest, xgender, agegroup, sMethod)
  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) Then
    If $LabQueryValueColl[xkey][sField] Then
      svalue = $LabQueryValueColl[xkey][sField]
    Else
      svalue = 0
    Endif

  Else
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    sql = Subst("select &1 as xfld from tbltestlimit", sField) & " where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    rs = modDatabase.$medConn.Exec(sql, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If rs.Available = True Then
      rs.MoveFirst
      If rs["xfld"] Then
        svalue = rs["xfld"]
      Else
        svalue = 0
      Endif
    Else
      svalue = 0
    Endif

  Endif

  If svalue = 0 Then
    svalue = modFixLab.LabFieldValue(sField, strTest)
  Endif

  Return svalue

End

Public Function GetTestSensiSpecArray(id As Long, Optional sTable As String) As Float[]

  Dim xxx As Float[]
  Dim res As Result
  Dim sql As String

  xxx = New Float[]
  If sTable Then
    sql = "select fldencounterval,fldtestid,fldmethod,fldtest_type from " & sTable & " where fldid=&1"
  Else
    sql = "select fldencounterval,fldtestid,fldmethod,fldtest_type from tblpatlabtest where fldid=&1"
  Endif
  res = modDatabase.$myConn.Exec(sql, id)
  If res.Available Then
    If res["fldtest_type"] = "Quantitative" Then
      If res["fldmethod"] Then
        xxx.Add(LabQuantiTableValue("fldsensitivity", res["fldtestid"], res["fldencounterval"], res["fldmethod"]))
        xxx.Add(LabQuantiTableValue("fldspecificity", res["fldtestid"], res["fldencounterval"], res["fldmethod"]))
      Else
        xxx.Add(LabQuantiTableValue("fldsensitivity", res["fldtestid"], res["fldencounterval"]))
        xxx.Add(LabQuantiTableValue("fldspecificity", res["fldtestid"], res["fldencounterval"]))
      Endif

    Else
      xxx.Add(modFixLab.LabFieldValue("fldsensitivity", res["fldtestid"]))
      xxx.Add(modFixLab.LabFieldValue("fldspecificity", res["fldtestid"]))

    Endif
  Endif

  Return xxx

End

''----------------------- Conversion Factor -----------------------------
Public Function LabConversionValue(encid As String, strTest As String, Optional sMethod As String) As Float

  Dim ssl As String
  Dim rs As Result
  Dim ConvFactor As Float
  Dim sqstr As String

  Dim xgender As String
  Dim agegroup As String
  Dim xkey As String

  xgender = modPatient.GetPatientSex(encid)
  agegroup = modPatient.GetAgeGroupFIxed(encid, Now())

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  LoadPatTestParameters(strTest, xgender, agegroup, sMethod)
  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) Then
    If $LabQueryValueColl[xkey]["fldconvfactor"] Then
      ConvFactor = $LabQueryValueColl[xkey]["fldconvfactor"]
    Else
      ConvFactor = 1
    Endif

  Else
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    ssl = "select fldconvfactor from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    rs = modDatabase.$medConn.Exec(ssl, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If rs.Available = True Then
      rs.MoveFirst
      If rs["fldconvfactor"] Then
        ConvFactor = rs["fldconvfactor"]
      Else
        ConvFactor = 1
      Endif
    Else
      ConvFactor = 1
    Endif

  Endif

  Return ConvFactor

End

''----------------------------------- Test Unit ---------------------------------------
Public Function LabTestUnit(strTest As String, encid As String, strUnit As String, Optional sMethod As String) As String

  Dim ssl As String
  Dim rs As Result
  Dim LabUnit As String
  Dim sqstr As String

  Dim xgender As String
  Dim agegroup As String
  Dim xkey As String

  xgender = modPatient.GetPatientSex(encid)
  agegroup = modPatient.GetAgeGroupFIxed(encid, Now())

  If Not sMethod Then
    sMethod = "Regular"
  Endif

  LoadPatTestParameters(strTest, xgender, agegroup, sMethod)
  xkey = strTest & "|" & xgender & "|" & agegroup & "|" & sMethod
  If $LabQueryValueColl.Exist(xkey) Then
    If strUnit = "Metric" Then
      If $LabQueryValueColl[xkey]["fldmetunit"] Then
        LabUnit = $LabQueryValueColl[xkey]["fldmetunit"]
      Else
        LabUnit = ""
      Endif
    Else If strUnit = "SI" Then
      If $LabQueryValueColl[xkey]["fldsiunit"] Then
        LabUnit = $LabQueryValueColl[xkey]["fldsiunit"]
      Else
        LabUnit = ""
      Endif
    Endif

  Else
    If sMethod = "Regular" Then
      sqstr = ""
    Else
      sqstr = " and fldmethod=&6"
    Endif
    If strUnit = "Metric" Then
      ssl = "select fldmetunit as xunit from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    Else If strUnit = "SI" Then
      ssl = "select fldsiunit as xunit from tbltestlimit where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)" & sqstr
    Endif
    rs = modDatabase.$medConn.Exec(ssl, strTest, xgender, "Both Sex", agegroup, "All Age", sMethod)
    If rs.Available = True Then
      rs.MoveFirst
      If rs["xunit"] Then
        LabUnit = rs["xunit"]
      Else
        LabUnit = ""
      Endif
    Else
      LabUnit = ""
    Endif

  Endif

  Return LabUnit

End

Public Function GetTestUnitSrting(id As Long, strUnit As String, Optional sTable As String) As String

  Dim res As Result
  Dim xval As String

  If sTable Then
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldtest_type,fldmethod from " & sTable & " where fldid=&1", id)
  Else
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldtest_type,fldmethod from tblpatlabtest where fldid=&1", id)
  Endif
  If res.Available Then
    If res["fldtest_type"] = "Quantitative" Then
      If res["fldmethod"] Then
        xval = LabTestUnit(res["fldtestid"], res["fldencounterval"], strUnit, res["fldmethod"])
      Else
        xval = LabTestUnit(res["fldtestid"], res["fldencounterval"], strUnit)
      Endif
    Else
      xval = ""
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

''------------------------------------ OBSERVATIONS -----------------------------------
Public Function GetLabQuantiConvert(sValue As Float, sUnit As String, ConvFactor As Float, TargetUnit As String) As Float

  Dim metr As Float

  If TargetUnit = "Metric" Then
    If sUnit = "Metric" Then
      metr = sValue
    Else If sUnit = "SI" Then
      metr = Round(sValue / ConvFactor, -3)
    Endif
  Else If TargetUnit = "SI" Then
    If sUnit = "Metric" Then
      metr = Round(sValue * ConvFactor, -3)
    Else If sUnit = "SI" Then
      metr = sValue
    Endif
  Endif
  Return metr

End

Public Function GetLabQuantiValueAll(encid As String, testName As String, sValue As Float, sUnit As String, sMethod As String, TargetUnit As String) As Float

  Dim metr As Float

  If TargetUnit = "Metric" Then
    If sUnit = "Metric" Then
      metr = sValue
    Else If sUnit = "SI" Then
      If sMethod Then
        metr = Round(sValue / modLabTest.LabConversionValue(encid, testName, sMethod), -3)
      Else
        metr = Round(sValue / modLabTest.LabConversionValue(encid, testName), -3)
      Endif
    Endif
  Else If TargetUnit = "SI" Then
    If sUnit = "Metric" Then
      If sMethod Then
        metr = Round(sValue * modLabTest.LabConversionValue(encid, testName, sMethod), -3)
      Else
        metr = Round(sValue * modLabTest.LabConversionValue(encid, testName), -3)
      Endif
    Else If sUnit = "SI" Then
      metr = sValue
    Endif
  Endif
  Return metr

End

Public Function GetTestQuantiValueLabID(encid As String, id As Long, strUnit As String, Optional sTable As String) As Float

  Dim res As Result
  Dim sql As String
  Dim LabVal As Float

  If sTable Then
    sql = "select fldencounterval,fldtestid,fldreportquanti,fldtestunit,fldmethod from " & sTable & " where fldid=&1 and fldencounterval=&2"
  Else
    sql = "select fldencounterval,fldtestid,fldreportquanti,fldtestunit,fldmethod from tblpatlabtest where fldid=&1 and fldencounterval=&2"
  Endif
  res = modDatabase.$myConn.Exec(sql, id, encid)
  If res.Available = True Then
    LabVal = modLabTest.GetLabQuantiValueAll(encid, res["fldtestid"], res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], strUnit)
  Else
    LabVal = 0
  Endif
  Return LabVal

End

''--------------Observation in RichText Format
''minimal view for lab reports
Public Function GetLabTestValueString(id As Long, strUnit As String, sReport As Boolean, encid As String, Optional sTable As String) As String

  Dim xx As String
  Dim res As Result
  Dim xval As String
  Dim xlab As Float
  Dim xType As String
  Dim xcaption As String
  Dim CParam As CLabParam

  Dim newval As String
  Dim accval As Float[]
  Dim xunit As String
  Dim xconv As Float
  Dim $sTable As String

  If sTable Then
    $sTable = sTable
  Else
    $sTable = "tblpatlabtest"
  Endif
  If encid Then
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldreportquali,fldreportquanti,fldtest_type,fldabnormal,fldtestunit,fldmethod from " & $sTable & " where fldid=&1 and fldencounterval=&2", id, encid)
  Else
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtestid,fldreportquali,fldreportquanti,fldtest_type,fldabnormal,fldtestunit,fldmethod from " & $sTable & " where fldid=&1", id)
  Endif
  If res.Available = True Then
    xcaption = modFixLab.GetLabTestCaption(res["fldtestid"])
    If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
      xx = "****"
    Else

      If res["fldtest_type"] = "Quantitative" Then
        If res["fldmethod"] Then
          CParam = New CLabParam(res["fldencounterval"], res["fldtestid"], strUnit, res["fldmethod"])
        Else
          CParam = New CLabParam(res["fldencounterval"], res["fldtestid"], strUnit)
        Endif
        xunit = CParam.GetLabUnit()
        xconv = CParam.GetConversionFactor()
        xlab = modLabTest.GetLabQuantiConvert(res["fldreportquanti"], res["fldtestunit"], xconv, strUnit)
        If xlab Then
          If sReport = True Then
            accval = CParam.GetAcceptableLimits()
            newval = modReportVar.GetLocaleNumberFormat(xlab, 0)
            If accval Then
              If accval[0] Then
                If xlab And If xlab < accval[0] Then
                  newval = "&lt;" & modString.HTMLBlankSpace(1) & modReportVar.GetLocaleNumberFormat(accval[0], 0)
                Endif
              Endif
              If accval[1] Then
                If xlab > accval[1] Then
                  newval = "&gt;" & modString.HTMLBlankSpace(1) & modReportVar.GetLocaleNumberFormat(accval[1], 0)
                Endif
              Endif
            Endif
            xval = newval & Space(1) & xunit
          Else
            xval = modReportVar.GetLocaleNumberFormat(xlab, 0) & Space(1) & xunit
          Endif
        Else
          If sReport = True Then
            newval = modReportVar.GetLocaleNumberFormat(xlab, 0)
            xval = newval & Space(1) & xunit
          Else
            xval = ""
          Endif
        Endif

      Else
        If res["fldreportquali"] Then
          xType = modAllExam.GetVariableOptionType("Test", res["fldtestid"])
          If xType = "Clinical Scale" Then
            If modBasic.$ShowScaleMedFormat = "GroupWise" Then
              If sReport = True Then
                xval = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
              Else
                xval = Trim(res["fldreportquali"])
              Endif
            Else
              xval = CStr(res["fldreportquanti"])
            Endif
          Else If xType = "Left and Right" Then
            If sReport = True Then
              xval = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
            Else
              xval = Trim(res["fldreportquali"])
            Endif
          Else If xType = "Left/Right Components" Then
            If sReport = True Then
              xval = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
            Else
              xval = Trim(res["fldreportquali"])
            Endif
          Else
            xval = Trim(res["fldreportquali"])
          Endif

        Else
          xval = ""
        Endif

      Endif

      If xval And If sReport = True Then
        If res["fldabnormal"] = True And If modBasic.$AbnFormat Then
          xx = modString.GetAbnormalFormattedString(xval)
        Else
          xx = xval
        Endif
      Else
        xx = xval
      Endif

    Endif
  Else
    xx = ""
  Endif

  Return xx

End

''only for Report Printing (from technician)
Public Function GetLabTestValueGridString(encid As String, sIndex As Variant, strUnit As String, flag As Boolean, Optional sTable As String) As String

  Dim xx As String
  Dim xval As Float
  Dim newval As String
  Dim res As Result
  Dim sql As String
  Dim CParam As CLabParam

  Dim accval As Float[]
  Dim astr As String
  Dim xType As String
  Dim xunit As String
  Dim xconv As Float
  Dim xcaption As String
  Dim xTable As String

  If sTable Then
    xTable = sTable
  Else
    xTable = "tblpatlabtest"
  Endif
  If MMain.$WebEntry = True Then ''remoteoptimized
    sql = "select fldencounterval,fldtestid,fldreportquali,fldreportquanti,fldtest_type,fldabnormal,fldtestunit,fldmethod from " & xTable & " where fldrepoid=&1 andfldencounterval=&2"
  Else
    sql = "select fldencounterval,fldtestid,fldreportquali,fldreportquanti,fldtest_type,fldabnormal,fldtestunit,fldmethod from " & xTable & " where fldid=&1 and fldencounterval=&2"
  Endif
  res = modDatabase.$myConn.Exec(sql, sIndex, encid)
  If res.Available = True Then
    xcaption = modFixLab.GetLabTestCaption(res["fldtestid"])
    If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
      astr = "****"
    Else

      If res["fldtest_type"] = "Quantitative" Then
        If res["fldmethod"] Then
          CParam = New CLabParam(res["fldencounterval"], res["fldtestid"], strUnit, res["fldmethod"])
        Else
          CParam = New CLabParam(res["fldencounterval"], res["fldtestid"], strUnit)
        Endif
        xunit = CParam.GetLabUnit()
        xconv = CParam.GetConversionFactor()
        xval = modLabTest.GetLabQuantiConvert(res["fldreportquanti"], res["fldtestunit"], xconv, strUnit)
        If xval Then
          newval = modReportVar.GetLocaleNumberFormat(xval, 0)
          accval = CParam.GetAcceptableLimits()
          If accval Then
            If accval[0] Then
              If xval And If xval < accval[0] Then
                newval = "&lt;" & modString.HTMLBlankSpace(1) & modReportVar.GetLocaleNumberFormat(accval[0], 0)
              Endif
            Endif
            If accval[1] Then
              If xval > accval[1] Then
                newval = "&gt;" & modString.HTMLBlankSpace(1) & modReportVar.GetLocaleNumberFormat(accval[1], 0)
              Endif
            Endif
          Endif
          If modBasic.$QuantiUnitEnable = "Disable" Then
            xx = newval
          Else
            xx = newval & Space(1) & xunit
          Endif
        Else
          newval = modReportVar.GetLocaleNumberFormat(xval, 0)
          If modBasic.$QuantiUnitEnable = "Disable" Then
            xx = newval
          Else
            xx = newval & Space(1) & xunit
          Endif
        Endif
      Else
        If res["fldreportquali"] Then
          xType = modAllExam.GetVariableOptionType("Test", res["fldtestid"])
          If xType = "Clinical Scale" Then
            If modBasic.$ShowScaleMedFormat = "GroupWise" Then
              xx = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
            Else
              xx = CStr(res["fldreportquanti"])
            Endif
          Else If xType = "Left and Right" Then
            xx = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
          Else If xType = "Left/Right Components" Then
            xx = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
          Else
            xx = Trim(res["fldreportquali"])
          Endif
        Else
          xx = ""
        Endif
      Endif

      If xx And If flag = True Then
        If res["fldabnormal"] = True And If modBasic.$AbnFormat Then
          astr = modString.GetAbnormalFormattedString(xx)
        Else
          astr = xx
        Endif
      Else
        astr = xx
      Endif

    Endif
  Else
    astr = ""
  Endif

  Return astr

End

''only to view (with full subtests)
Public Function GetLabTestValueSubString(id As Variant, strUnit As String, fullView As Boolean, Optional sTableMain As String, Optional sTableSub As String) As String

  Dim res As Result
  Dim res1 As Result
  Dim sql As String
  Dim xval As Float
  Dim xx As String
  Dim xquali As String[]
  Dim xType As String
  Dim xcaption As String
  Dim xTableMain As String
  Dim xTableSub As String

  If sTableMain Then
    xTableMain = sTableMain
  Else
    xTableMain = "tblpatlabtest"
  Endif
  If sTableSub Then
    xTableSub = sTableSub
  Else
    xTableSub = "tblpatlabsubtest"
  Endif
  If MMain.$WebEntry = True Then ''remoteoptimized
    sql = "select fldid,fldencounterval,fldtestid,fldreportquali,fldreportquanti,fldtest_type,fldabnormal,fldtestunit,fldmethod,fldhospcode from " & xTableMain & " where fldrepoid=&1"
  Else
    sql = "select fldid,fldencounterval,fldtestid,fldreportquali,fldreportquanti,fldtest_type,fldabnormal,fldtestunit,fldmethod from " & xTableMain & " where fldid=&1"
  Endif
  res = modDatabase.$myConn.Exec(sql, id)
  If res.Available = True Then
    xcaption = modFixLab.GetLabTestCaption(res["fldtestid"])
    If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
      xx = "****"
    Else

      If res["fldtest_type"] = "Quantitative" Then
        xval = modLabTest.GetLabQuantiValueAll(res["fldencounterval"], res["fldtestid"], res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], strUnit)
        If modBasic.$QuantiUnitEnable = "Disable" Then
          xx = CStr(xval)
        Else
          If res["fldmethod"] Then
            xx = CStr(xval) & Space(1) & LabTestUnit(res["fldtestid"], res["fldencounterval"], strUnit, res["fldmethod"])
          Else
            xx = CStr(xval) & Space(1) & LabTestUnit(res["fldtestid"], res["fldencounterval"], strUnit)
          Endif
        Endif

      Else
        If res["fldreportquali"] Then
          xType = modAllExam.GetVariableOptionType("Test", res["fldtestid"])
          If xType = "Clinical Scale" Then
            If modBasic.$ShowScaleMedFormat = "GroupWise" Then
              xx = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
            Else
              xx = res["fldreportquanti"]
            Endif
          Else If xType = "Left and Right" Then
            xx = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
          Else If xType = "Left/Right Components" Then
            xx = modString.GetJSONToDualHTMLTable(Trim(res["fldreportquali"]))
          Else
            xx = Trim(res["fldreportquali"])
          Endif
        Else
          xx = ""
        Endif

        xquali = New String[]
        If fullView = True Then
          If MMain.$WebEntry = True Then ''remoteoptimized
            res1 = modDatabase.$myConn.Exec("select fldsubtest,fldreport,fldid,fldtestid,fldtanswertype,fldindex,fldhospcode from " & xTableSub & " where fldtestid=&1 and fldencounterval=&2 and fldhospcode=&3", res["fldid"], res["fldencounterval"], res["fldhospcode"])
            If res1.Available = True Then
              For Each res1
                If xType = "Left/Right Components" Then
                  xquali.Add(modString.GetLeftRightTableValue(res1["fldreport"], res1["fldsubtest"]))
                Else
                  If res1["fldtanswertype"] = "Multiple Selection" Or If res1["fldtanswertype"] = "Single Column" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestTableReportString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"], res1["fldhospcode"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Drug Sensitivity" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubSensiTableReportString(res1["fldtanswertype"], res1["fldtestid"], res1["fldid"], res1["fldindex"], False, res1["fldhospcode"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "WHO Sensitivity" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubSensiTableReportString(res1["fldtanswertype"], res1["fldtestid"], res1["fldid"], res1["fldindex"], False, res1["fldhospcode"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Text Table" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestTableReportString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"], res1["fldhospcode"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Dual Columns" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestDualTableString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"], res1["fldhospcode"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Triple Columns" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestTriTableString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"], res1["fldhospcode"]) & gb.NewLine)
                  Else
                    If res1["fldreport"] Then
                      xquali.Add(res1["fldsubtest"] & " : " & res1["fldreport"])
                    Endif
                  Endif
                Endif
              Next
              If xquali.Count Then
                If xType = "Left/Right Components" Then
                  xx = xx & modString.GetLeftRightTableHeader(True) & xquali.Join(gb.NewLine)
                Else
                  xx = xx & gb.NewLine & xquali.Join(gb.NewLine)
                Endif
              Endif
            Endif

          Else
            res1 = modDatabase.$myConn.Exec("select fldsubtest,fldreport,fldid,fldtestid,fldtanswertype,fldindex from " & xTableSub & " where fldtestid=&1 and fldencounterval=&2", res["fldid"], res["fldencounterval"])
            If res1.Available = True Then
              For Each res1
                If xType = "Left/Right Components" Then
                  xquali.Add(modString.GetLeftRightTableValue(res1["fldreport"], res1["fldsubtest"]))
                Else
                  If res1["fldtanswertype"] = "Multiple Selection" Or If res1["fldtanswertype"] = "Single Column" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestTableReportString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Drug Sensitivity" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubSensiTableReportString(res1["fldtanswertype"], res1["fldtestid"], res1["fldid"], res1["fldindex"], False) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "WHO Sensitivity" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubSensiTableReportString(res1["fldtanswertype"], res1["fldtestid"], res1["fldid"], res1["fldindex"], False) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Text Table" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestTableReportString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Dual Columns" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestDualTableString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"]) & gb.NewLine)
                  Else If res1["fldtanswertype"] = "Triple Columns" Then
                    xquali.Add(res1["fldsubtest"] & " : " & gb.NewLine & GetSubTestTriTableString(res1["fldtestid"], res1["fldid"], False, res1["fldindex"]) & gb.NewLine)
                  Else
                    If res1["fldreport"] Then
                      xquali.Add(res1["fldsubtest"] & " : " & res1["fldreport"])
                    Endif
                  Endif
                Endif
              Next
              If xquali.Count Then
                If xType = "Left/Right Components" Then
                  xx = xx & modString.GetLeftRightTableHeader(True) & xquali.Join(gb.NewLine)
                Else
                  xx = xx & gb.NewLine & xquali.Join(gb.NewLine)
                Endif
              Endif
            Endif

          Endif
        Endif

      Endif

    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetLabotarotyValuePosition(encid As String, sTest As String, strUnit As String, sType As String, Optional sTable As String, Optional sTableSub As String) As String[]

  Dim res As Result
  Dim sql As String
  Dim xx As String[]
  Dim xcaption As String
  Dim xTable As String
  Dim xTabSub As String

  If sTable Then
    xTable = sTable
  Else
    xTable = "tblpatlabtest"
  Endif
  If sTableSub Then
    xTabSub = sTableSub
  Else
    xTabSub = "tblpatlabsubtest"
  Endif
  xx = New String[]
  xcaption = modFixLab.GetLabTestCaption(sTest)
  If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
    xx.Add("****")
    xx.Add("****")
    xx.Add("****")
    xx.Add("****")
  Else

    If MMain.$WebEntry = True Then ''remoteoptimized
      sql = "select fldrepoid,fldtime_sample,fldtestid,fldsampletype,flduserid_report from " & xTable & " where fldencounterval=&1 and fldtestid=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5"
    Else
      sql = "select fldid,fldtime_sample,fldtestid,fldsampletype,flduserid_report from " & xTable & " where fldencounterval=&1 and fldtestid=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5"
    Endif
    res = modDatabase.$syConn.Exec(sql, encid, sTest, "Reported", "Verified", "Visible")
    If res.Available Then
      If sType = "FitsrVal" Then
        res.MoveFirst
      Else If sType = "LastVal" Then
        res.MoveLast
      Endif
      xx.Add(modReportVar.GetDateTimeReport(res["fldtime_sample"], gb.GeneralDate))
      If MMain.$WebEntry = True Then ''remoteoptimized
        xx.Add(modLabTest.GetLabTestValueSubString(res["fldrepoid"], strUnit, True, xTable, xTabSub))
      Else
        xx.Add(modLabTest.GetLabTestValueSubString(res["fldid"], strUnit, True, xTable, xTabSub))
      Endif
      If res["fldsampletype"] Then
        xx.Add(res["fldsampletype"])
      Else
        xx.Add("-")
      Endif
      xx.Add(res["flduserid_report"])
    Else
      xx.Add("")
      xx.Add("")
      xx.Add("")
      xx.Add("")
    Endif

  Endif
  Return xx

End

''------------ Nest Level table data ------------------------
Public Function GetLabSubTestQuali(encid As String, sTestName As String, ptTestid As Long, Optional sTableSub As String) As String

  Dim res As Result
  Dim xx As String[]
  Dim xquali As String
  Dim xType As String
  Dim xtable As String

  xx = New String[]
  If sTableSub Then
    res = modDatabase.$myConn.Exec("select fldsubtest,fldreport,fldid,fldtestid,fldtanswertype,fldindex from " & sTableSub & " where fldtestid=&1 and fldsave=&2 and fldencounterval=&3", ptTestid, True, encid)
  Else
    res = modDatabase.$myConn.Exec("select fldsubtest,fldreport,fldid,fldtestid,fldtanswertype,fldindex from tblpatlabsubtest where fldtestid=&1 and fldsave=&2 and fldencounterval=&3", ptTestid, True, encid)
  Endif
  If res.Available = True Then
    xType = modFixLab.GetLabTestOptionType(sTestName)
    For Each res
      If xType = "Left/Right Components" Then
        xx.Add(modString.GetLeftRightTableValue(res["fldreport"], res["fldsubtest"]))
      Else
        If res["fldtanswertype"] = "Label Only" Then
          xx.Add("<b>" & res["fldsubtest"] & "</b>")
        Else
          xquali = ""
          If res["fldtanswertype"] = "Multiple Selection" Or If res["fldtanswertype"] = "Single Column" Then
            xquali = gb.NewLine & GetSubTestTableReportString(res["fldtestid"], res["fldid"], True, res["fldindex"])
          Else If res["fldtanswertype"] = "Drug Sensitivity" Then
            xquali = gb.NewLine & GetSubSensiTableReportString(res["fldtanswertype"], res["fldtestid"], res["fldid"], res["fldindex"], True)
          Else If res["fldtanswertype"] = "WHO Sensitivity" Then
            xquali = gb.NewLine & GetSubSensiTableReportString(res["fldtanswertype"], res["fldtestid"], res["fldid"], res["fldindex"], True)
          Else If res["fldtanswertype"] = "Text Table" Then
            xquali = gb.NewLine & GetSubTestTableReportString(res["fldtestid"], res["fldid"], True, res["fldindex"])
          Else If res["fldtanswertype"] = "Dual Columns" Then
            xquali = gb.NewLine & GetSubTestDualTableString(res["fldtestid"], res["fldid"], True, res["fldindex"])
          Else If res["fldtanswertype"] = "Triple Columns" Then
            xquali = gb.NewLine & GetSubTestTriTableString(res["fldtestid"], res["fldid"], True, res["fldindex"])
          Else
            xquali = Trim(res["fldreport"])
          Endif
          If res["fldsubtest"] Then
            xx.Add(res["fldsubtest"] & " : " & xquali)
          Endif
        Endif
      Endif
    Next

    If xx.Count Then
      If xType = "Left/Right Components" Then
        xtable = modString.GetLeftRightTableHeader(True) & xx.Join(gb.NewLine)
      Else
        xtable = modString.GetHTMLListFormat(xx)
      Endif
    Else
      xtable = ""
    Endif

  Endif

  Return xtable

End

Public Function GetSubSensiTableReportString(sType As String, testid As Long, subtestid As Long, sIndex As String, sTable As Boolean, Optional sHospCode As String) As String

  Dim res As Result
  Dim xx As String[]
  Dim xstr As String[]
  Dim xval As String

  Dim aa As String[]
  Dim bb As String[]

  Dim arDisk As String[]
  Dim arMIC As String[]
  Dim arETest As String[]
  Dim arBiology As String[]
  Dim bsx As String
  Dim asx As String
  Dim alst As String[]

  If sHospCode Then
    If sIndex Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and fldvalue<>&4 and fldhospcode=&5 ORDER BY fldcolm2 DESC", testid, subtestid, sIndex, "Cancelled", sHospCode)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and fldvalue<>&4 and fldhospcode=&5 ORDER BY fldcolm2 DESC", testid, subtestid, Null, "Cancelled", sHospCode)
    Endif
  Else
    If sIndex Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and fldvalue<>&4 ORDER BY fldcolm2 DESC", testid, subtestid, sIndex, "Cancelled")
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and fldvalue<>&4 ORDER BY fldcolm2 DESC", testid, subtestid, Null, "Cancelled")
    Endif
  Endif

  If res.Available = False Then
    xval = ""
  Else

    If sType = "WHO Sensitivity" Then
      If sTable = True Then
        aa = New String[]
        bb = New String[]
        arDisk = New String[]
        arMIC = New String[]
        arETest = New String[]
        arBiology = New String[]
        If res.Available Then
          For Each res
            If res["fldvariable"] Then
              If res["fldcolm2"] Then
                If res["fldvalue"] Then
                  bsx = res["fldvalue"]
                Else
                  bsx = ""
                Endif
                If res["fldcolm2"] = "Disk" Then
                  arDisk.Add(res["fldvariable"] & "|" & bsx)
                Else If res["fldcolm2"] = "MIC" Then
                  arMIC.Add(res["fldvariable"] & "|" & bsx)
                Else If res["fldcolm2"] = "E-Test" Then
                  arETest.Add(res["fldvariable"] & "|" & bsx)
                Else If res["fldcolm2"] = "Biology" Then
                  arBiology.Add(res["fldvariable"] & "|" & bsx)
                Endif
              Else
                ' aa.Add(res["fldvariable"])
                ' If res["fldvalue"] Then
                '   bb.Add(res["fldvalue"])
                ' Else
                '   bb.Add("")
                ' Endif
              Endif
            Endif
          Next
          If arDisk.Count Then
            aa.Add("<b>" & "Disk" & "</b>")
            bb.Add("")
            For Each asx In arDisk
              alst = Split(asx, "|")
              aa.Add("&nbsp;&nbsp;" & alst[0])
              bb.Add(alst[1])
            Next
          Endif
          If arMIC.Count Then
            aa.Add("<b>" & "MIC" & "</b>")
            bb.Add("")
            For Each asx In arMIC
              alst = Split(asx, "|")
              aa.Add("&nbsp;&nbsp;" & alst[0])
              bb.Add(alst[1])
            Next
          Endif
          If arETest.Count Then
            aa.Add("<b>" & "E-Test" & "</b>")
            bb.Add("")
            For Each asx In arETest
              alst = Split(asx, "|")
              aa.Add("&nbsp;&nbsp;" & alst[0])
              bb.Add(alst[1])
            Next
          Endif
          If arBiology.Count Then
            aa.Add("<b>" & "Biology" & "</b>")
            bb.Add("")
            For Each asx In arBiology
              alst = Split(asx, "|")
              aa.Add("&nbsp;&nbsp;" & alst[0])
              bb.Add(alst[1])
            Next
          Endif
        Endif
        xval = modString.GetDualTableFormat(aa, bb)
      Else
        xx = New String[]
        If res.Available Then
          For Each res
            xstr = New String[]
            If res["fldcolm2"] Then
              If res["fldcolm2"] = "Disk" Then
                xstr.Add(res["fldvariable"])
              Else
                xstr.Add(res["fldvariable"] & " [" & res["fldcolm2"] & "]")
              Endif
            Else
              xstr.Add(res["fldvariable"])
            Endif
            If res["fldvalue"] Then
              xstr.Add(res["fldvalue"])
            Endif
            xx.Add(xstr.Join(" : "))
          Next
        Endif
        xval = xx.Join(gb.NewLine)
      Endif

    Else
      If sTable = True Then
        aa = New String[]
        bb = New String[]
        If res.Available Then
          For Each res
            If res["fldvariable"] Then
              aa.Add(res["fldvariable"])
              If res["fldvalue"] Then
                bb.Add(res["fldvalue"])
              Else
                bb.Add("")
              Endif
            Endif
          Next
        Endif
        xval = modString.GetDualTableFormat(aa, bb)
      Else
        xx = New String[]
        If res.Available Then
          For Each res
            xstr = New String[]
            xstr.Add(res["fldvariable"])
            If res["fldvalue"] Then
              xstr.Add(res["fldvalue"])
            Endif
            xx.Add(xstr.Join(" : "))
          Next
        Endif
        xval = xx.Join(gb.NewLine)
      Endif

    Endif

  Endif

  Return xval

End

Public Function GetSubTestTableReportString(testid As Long, subtestid As Long, sTable As Boolean, sIndex As String, Optional sHospCode As String) As String

  Dim res As Result
  Dim xx As String[]
  Dim xstr As String[]
  Dim xval As String

  If sIndex Then
    If sHospCode Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3,fldcolm4 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and (fldhide=&4 or fldhide IS NULL) and fldhospcode=&5", testid, subtestid, sIndex, False, sHospCode)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3,fldcolm4 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and (fldhide=&4 or fldhide IS NULL)", testid, subtestid, sIndex, False)
    Endif
  Else
    If sHospCode Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3,fldcolm4 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and (fldhide=&3 or fldhide IS NULL) and fldhospcode=&4", testid, subtestid, False, sHospCode)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3,fldcolm4 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and (fldhide=&3 or fldhide IS NULL)", testid, subtestid, False)
    Endif
  Endif
  If res.Available Then

    If sTable = True Then
      xval = modRepoTemplete.HTMLTableSyntax()
      For Each res
        If res["fldvalue"] And If res["fldvalue"] = "Cancelled" Then
        Else
          xstr = New String[]
          xval = xval & "<tr>" & gb.NewLine
          xstr.Add("<td>" & res["fldvariable"] & "</td>" & gb.NewLine)
          If res["fldvalue"] Then
            xstr.Add("<td>" & res["fldvalue"] & "</td>" & gb.NewLine)
          Else
            xstr.Add("<td>" & "</td>" & gb.NewLine)
          Endif
          If res["fldcolm2"] Then
            xstr.Add("<td>" & res["fldcolm2"] & "</td>" & gb.NewLine)
          Else
            xstr.Add("<td>" & "</td>" & gb.NewLine)
          Endif
          If res["fldcolm3"] Then
            xstr.Add("<td>" & res["fldcolm3"] & "</td>" & gb.NewLine)
          Else
            xstr.Add("<td>" & "</td>" & gb.NewLine)
          Endif
          If res["fldcolm4"] Then
            xstr.Add("<td>" & res["fldcolm4"] & "</td>" & gb.NewLine)
          Else
            xstr.Add("<td>" & "</td>" & gb.NewLine)
          Endif
          xval = xval & xstr.Join(gb.NewLine)
          xval = xval & "</tr>" & gb.NewLine
        Endif
      Next
      xval = xval & "</table>" & gb.NewLine

    Else
      xx = New String[]
      For Each res
        xstr = New String[]
        If res["fldvalue"] And If res["fldvalue"] = "Cancelled" Then
        Else
          xstr.Add(res["fldvariable"])
          If res["fldvalue"] Then
            xstr.Add(res["fldvalue"])
          Endif
          If res["fldcolm2"] Then
            xstr.Add(res["fldcolm2"])
          Endif
          If res["fldcolm3"] Then
            xstr.Add(res["fldcolm3"])
          Endif
          If res["fldcolm4"] Then
            xstr.Add(res["fldcolm4"])
          Endif
          xx.Add(xstr.Join(" : "))
        Endif
      Next
      xval = xx.Join(gb.NewLine)
    Endif

  Else
    xval = ""
  Endif
  Return xval

End

Private Function GetTestColumnTableHeaders(testid As Long, subtestid As Long, sIndex As String, Optional sHospCode As String) As String[]

  Dim sDefault As String
  Dim asx As String[]
  Dim aCols As String[]
  Dim rsh As Result

  If sHospCode Then
    If sIndex Then
      rsh = modDatabase.$myConn.Exec("select fldparent,fldsubtest from tblpatlabsubtest where fldtestid=&1 and fldid=&2 and fldindex=&3 and fldhospcode=&4", testid, subtestid, sIndex, sHospCode)
    Else
      rsh = modDatabase.$myConn.Exec("select fldparent,fldsubtest from tblpatlabsubtest where fldtestid=&1 and fldid=&2 and fldindex IS &3 and fldhospcode=&4", testid, subtestid, Null, sHospCode)
    Endif
  Else
    If sIndex Then
      rsh = modDatabase.$myConn.Exec("select fldparent,fldsubtest from tblpatlabsubtest where fldtestid=&1 and fldid=&2 and fldindex=&3", testid, subtestid, sIndex)
    Else
      rsh = modDatabase.$myConn.Exec("select fldparent,fldsubtest from tblpatlabsubtest where fldtestid=&1 and fldid=&2 and fldindex IS &3", testid, subtestid, Null)
    Endif
  Endif

  If rsh.Available Then
    rsh.MoveFirst
    sDefault = modAllExam.GetESubxamDefaultValue("Test", rsh["fldparent"], rsh["fldsubtest"])
    asx = Split(sDefault, ":")
    If asx.Count = 2 Then
      If asx[0] = "Columns" Then
        aCols = Split(asx[1], ";")
        Return aCols
      Endif
    Endif
  Endif

End

Public Function GetSubTestTriTableString(testid As Long, subtestid As Long, sTable As Boolean, sIndex As String, Optional sHospCode As String) As String

  Dim aCols As String[]
  Dim res As Result
  Dim xx As String
  Dim aa As String
  Dim bb As String
  Dim cc As String

  If sHospCode Then
    If sIndex Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and (fldhide=&4 or fldhide IS NULL) and fldhospcode=&5", testid, subtestid, sIndex, False, sHospCode)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and (fldhide=&4 or fldhide IS NULL) and fldhospcode=&5", testid, subtestid, Null, False, sHospCode)
    Endif
  Else
    If sIndex Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and (fldhide=&4 or fldhide IS NULL)", testid, subtestid, sIndex, False)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2,fldcolm3 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and (fldhide=&4 or fldhide IS NULL)", testid, subtestid, Null, False)
    Endif
  Endif

  If res.Available Then
    If sHospCode Then
      aCols = GetTestColumnTableHeaders(testid, subtestid, sIndex, sHospCode)
    Else
      aCols = GetTestColumnTableHeaders(testid, subtestid, sIndex)
    Endif

    If sTable = True Then
      xx = modRepoTemplete.HTMLTableSyntax()
      xx = xx & "<tr>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>PARAMETER</td>" & gb.NewLine
      If aCols And If aCols.Count >= 3 Then
        xx = xx & "<td class='reportmid_table_h'>" & aCols[0] & "</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>" & aCols[1] & "</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>" & aCols[2] & "</td>" & gb.NewLine
      Else
        xx = xx & "<td class='reportmid_table_h'>COLUMN-I</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>COLUMN-II</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>COLUMN-III</td>" & gb.NewLine
      Endif
      xx = xx & "</tr>" & gb.NewLine
      For Each res
        If res["fldvalue"] And If res["fldvalue"] = "Cancelled" Then
        Else
          If res["fldvalue"] Then
            aa = res["fldvalue"]
          Else
            aa = ""
          Endif
          If res["fldcolm2"] Then
            bb = res["fldcolm2"]
          Else
            bb = ""
          Endif
          If res["fldcolm3"] Then
            cc = res["fldcolm3"]
          Else
            cc = ""
          Endif
          xx = xx & "<tr>" & gb.NewLine
          xx = xx & "<td>" & res["fldvariable"] & "</td>" & gb.NewLine
          xx = xx & "<td>" & aa & "</td>" & gb.NewLine
          xx = xx & "<td>" & bb & "</td>" & gb.NewLine
          xx = xx & "<td>" & cc & "</td>" & gb.NewLine
          xx = xx & "</tr>" & gb.NewLine
        Endif
      Next
      xx = xx & "</table>" & gb.NewLine

    Else
      xx = ""
      For Each res
        If res["fldvalue"] And If res["fldvalue"] = "Cancelled" Then
        Else
          If res["fldvalue"] Then
            aa = res["fldvalue"]
          Else
            aa = ""
          Endif
          If res["fldcolm2"] Then
            bb = res["fldcolm2"]
          Else
            bb = ""
          Endif
          If res["fldcolm3"] Then
            cc = res["fldcolm3"]
          Else
            cc = ""
          Endif
          If aCols And If aCols.Count >= 3 Then
            xx = xx & res["fldvariable"] & " [" & aCols[0] & ": " & aa & "][" & aCols[1] & ": " & bb & "][" & aCols[2] & ": " & cc & "]" & gb.NewLine
          Else
            xx = xx & res["fldvariable"] & " [COLUMN-I: " & aa & "][COLUMN-II: " & bb & "][COLUMN-III: " & cc & "]" & gb.NewLine
          Endif
        Endif
      Next
    Endif

  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetSubTestDualTableString(testid As Long, subtestid As Long, sTable As Boolean, sIndex As String, Optional sHospCode As String) As String

  Dim aCols As String[]
  Dim res As Result
  Dim xx As String
  Dim aa As String
  Dim bb As String

  If sHospCode Then
    If sIndex Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and (fldhide=&4 or fldhide IS NULL) and fldhospcode=&5", testid, subtestid, sIndex, False, sHospCode)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and (fldhide=&4 or fldhide IS NULL) and fldhospcode=&5", testid, subtestid, Null, False, sHospCode)
    Endif
  Else
    If sIndex Then
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and (fldhide=&4 or fldhide IS NULL)", testid, subtestid, sIndex, False)
    Else
      res = modDatabase.$myConn.Exec("select fldvariable,fldvalue,fldcolm2 from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and (fldhide=&4 or fldhide IS NULL)", testid, subtestid, Null, False)
    Endif
  Endif

  If res.Available Then
    If sHospCode Then
      aCols = GetTestColumnTableHeaders(testid, subtestid, sIndex, sHospCode)
    Else
      aCols = GetTestColumnTableHeaders(testid, subtestid, sIndex)
    Endif

    If sTable = True Then
      xx = modRepoTemplete.HTMLTableSyntax()
      xx = xx & "<tr>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>PARAMETER</td>" & gb.NewLine
      If aCols And If aCols.Count >= 2 Then
        xx = xx & "<td class='reportmid_table_h'>" & aCols[0] & "</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>" & aCols[1] & "</td>" & gb.NewLine
      Else
        xx = xx & "<td class='reportmid_table_h'>LEFT</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>RIGHT</td>" & gb.NewLine
      Endif
      xx = xx & "</tr>" & gb.NewLine
      For Each res
        If res["fldvalue"] And If res["fldvalue"] = "Cancelled" Then
        Else
          If res["fldvalue"] Then
            aa = res["fldvalue"]
          Else
            aa = ""
          Endif
          If res["fldcolm2"] Then
            bb = res["fldcolm2"]
          Else
            bb = ""
          Endif
          xx = xx & "<tr>" & gb.NewLine
          xx = xx & "<td>" & res["fldvariable"] & "</td>" & gb.NewLine
          xx = xx & "<td>" & aa & "</td>" & gb.NewLine
          xx = xx & "<td>" & bb & "</td>" & gb.NewLine
          xx = xx & "</tr>" & gb.NewLine
        Endif
      Next
      xx = xx & "</table>" & gb.NewLine

    Else
      xx = ""
      For Each res
        If res["fldvalue"] And If res["fldvalue"] = "Cancelled" Then
        Else
          If res["fldvalue"] Then
            aa = res["fldvalue"]
          Else
            aa = ""
          Endif
          If res["fldcolm2"] Then
            bb = res["fldcolm2"]
          Else
            bb = ""
          Endif
          If aCols And If aCols.Count >= 2 Then
            xx = xx & res["fldvariable"] & " [" & aCols[0] & ": " & aa & "][" & aCols[1] & ": " & bb & "]" & gb.NewLine
          Else
            xx = xx & res["fldvariable"] & " [LEFT: " & aa & "][RIGHT: " & bb & "]" & gb.NewLine
          Endif
        Endif
      Next
    Endif

  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetLabTATHours(labid As Variant, Optional sTable As String) As Integer

  Dim res As Result
  Dim xval As Integer
  Dim xTable As String

  If sTable Then
    xTable = sTable
  Else
    xTable = "tblpatlabtest"
  Endif
  If MMain.$WebEntry = True Then ''remoteoptimized
    res = modDatabase.$myConn.Exec("select fldtime_sample,fldtime_report from " & xTable & " where fldrepoid=&1", labid)
  Else
    res = modDatabase.$myConn.Exec("select fldtime_sample,fldtime_report from " & xTable & " where fldid=&1", labid)
  Endif
  If res.Available Then
    If res["fldtime_sample"] And If res["fldtime_report"] Then
      xval = DateDiff(res["fldtime_sample"], res["fldtime_report"], gb.Hour)
    Else
      xval = 0
    Endif
  Else
    xval = 0
  Endif
  Return xval

End

''------------------------------------ LAB VALUES ALTERATION -------------------------------------------------
'NOTE:TWO CON
Public Function GetLabTestDrugHypo(labid As Long, sTable As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select distinct(fldchild) from tblcodehypo where fldparent=&1 and fldchild in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid in(select flditem from tblpatdosing where fldencounterval=&2 and fldtime<&3)))", GetTestnameFromTestID(labid, sTable), GetEncIDFromLabID(labid, sTable), GetSampleTimeFromLabID(labid, sTable))                      ''
  xxx = modControlSub.GetDirectFillresult(res)

  Return xxx

End

'NOTE:TWO CON
Public Function GetLabTestDrugHyper(labid As Long, sTable As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select distinct(fldchild) from tblcodehyper where fldparent=&1 and fldchild in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid in(select flditem from tblpatdosing where fldencounterval=&2 and fldtime<&3)))", GetTestnameFromTestID(labid, sTable), GetEncIDFromLabID(labid, sTable), GetSampleTimeFromLabID(labid, sTable))
  xxx = modControlSub.GetDirectFillresult(res)

  Return xxx

End

'NOTE:TWO CON
Public Function GetTestDiseaseHypo(labid As Long, sTable As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select distinct(fldchild) from tblsyndrohypo where fldparent=&1 and fldchild in(select fldcode as col from tblpatfindings where fldencounterval=&2 and (fldtype=&3 or fldtype=&4) and fldsave=&5)", GetTestnameFromTestID(labid, sTable), GetEncIDFromLabID(labid, sTable), "Final Diagnosis", "Provisional Diagnosis", True)                                                         ''
  xxx = modControlSub.GetDirectFillresult(res)

  Return xxx

End

'NOTE:TWO CON
Public Function GetTestDiseaseHyer(labid As Long, sTable As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select distinct(fldchild) from tblsyndrohyper where fldparent=&1 and fldchild in(select fldcode as col from tblpatfindings where fldencounterval=&2 and (fldtype=&3 or fldtype=&4) and fldsave=&5)", GetTestnameFromTestID(labid, sTable), GetEncIDFromLabID(labid, sTable), "Final Diagnosis", "Provisional Diagnosis", True)                                                         ''
  xxx = modControlSub.GetDirectFillresult(res)

  Return xxx

End

Public Function TestInterpretByTestID(labid As Long, Optional sTable As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String
  Dim xval As Float
  Dim encid As String

  sql = "select fldcomment,fldmax,fldmin,fldunit from tbltestcomment where fldtestid=&1 and (fldptsex=&2 or fldptsex=&3) and (fldagegroup=&4 or fldagegroup=&5)"
  If sTable Then
    encid = GetEncIDFromLabID(labid, sTable)
    res = modDatabase.$medConn.Exec(sql, GetTestnameFromTestID(labid, sTable), modPatient.GetPatientSex(encid), "Both Sex", modPatient.GetAgeGroupFIxed(encid, Now()), "All Age")
  Else
    encid = GetEncIDFromLabID(labid, "tblpatlabtest")
    res = modDatabase.$medConn.Exec(sql, GetTestnameFromTestID(labid, "tblpatlabtest"), modPatient.GetPatientSex(encid), "Both Sex", modPatient.GetAgeGroupFIxed(encid, Now()), "All Age")
  Endif

  If res.Available = True Then
    For Each res
      If res["fldcomment"] And If res["fldunit"] Then
        If sTable Then
          xval = GetTestQuantiValueLabID(encid, labid, res["fldunit"], sTable)
        Else
          xval = GetTestQuantiValueLabID(encid, labid, res["fldunit"])
        Endif
        If xval >= res["fldmin"] And If xval <= res["fldmax"] Then
          xx = res["fldcomment"]
          Break
        Endif
      Else
        xx = ""
      Endif
    Next
  Else
    xx = ""
  Endif

  Return xx

End

Private Function GetEBMLabValue(encid As String, sTest As String, sMethod As String, unt As String, sDiagnosis As String, Optional sTable As String) As String

  Dim tstgender As String
  Dim tstdob As Date
  Dim tsdistrict As String
  Dim xdt1 As Integer
  Dim xdt2 As Integer

  Dim sql As String
  Dim res As Result
  Dim xxx As String[]
  Dim xpath As String
  Dim xval As String
  Dim arcmd As String[]

  Dim xmethod As String
  Dim xpatinfo As String
  Dim xjoin As String
  Dim xdiagno As String
  Dim xdiagnoval As String
  Dim xTable As String

  If sTable Then
    xTable = sTable
  Else
    xTable = "tblpatlabtest"
  Endif
  xxx = New String[]
  If modBasic.$EBMMethod = "Yes" Then
    xmethod = " and " & xTable & ".fldmethod like &5"
  Else
    xmethod = ""
  Endif

  If modBasic.$EBMGender = "Yes" Or If modBasic.$EBMDistrict = "Yes" Or If modBasic.$EBMAge = "Yes" Then
    xjoin = " from (" & xTable & " inner join tblencounter on " & xTable & ".fldencounterval=tblencounter.fldencounterval) inner join tblpatientinfo on tblencounter.fldpatientval=tblpatientinfo.fldpatientval"
    xpatinfo = ""
    If modBasic.$EBMGender = "Yes" Then
      tstgender = modPatient.GetPatientSex(encid)
      xpatinfo = xpatinfo & " and tblpatientinfo.fldptsex like &6"
    Endif
    If modBasic.$EBMDistrict = "Yes" Then
      tsdistrict = modPatient.GetPatDistrictByEnc(encid)
      xpatinfo = xpatinfo & " and tblpatientinfo.fldptadddist like &7"
    Endif
    If modBasic.$EBMAge = "Yes" Then
      tstdob = modPatient.GetPatientBirthDay(encid)
      xdt1 = 0 - modBasic.$EBMAgeRange
      xdt2 = modBasic.$EBMAgeRange
      xpatinfo = xpatinfo & " and " & modMedReports.GetAgeStringByTable(xTable, modDatabase.$syConn) & ">= &8 and " & modMedReports.GetAgeStringByTable(xTable, modDatabase.$syConn) & "<&9"
    Endif

  Else
    xjoin = " from " & xTable
    xpatinfo = ""
  Endif

  If modBasic.$EBMDiagno = "Yes" Then
    If sDiagnosis Then
      xdiagno = " and " & xTable & ".fldencounterval in(select fldencounterval from tblpatfindings where fldcodenew like &{10} and fldsave=&{11} and fldcodenew<>&{12})"
      xdiagnoval = modPathology.GetNewDiagnosisValue(sDiagnosis)
    Else
      xdiagno = ""
      xdiagnoval = "%"
    Endif
  Else
    xdiagno = ""
    xdiagnoval = "%"
  Endif

  If modBasic.$EBMEthnic = "Yes" Then
  Endif

  sql = "select " & xTable & ".fldencounterval as fldencounterval," & xTable & ".fldid as fldid," & xTable & ".fldtestid as fldtestid," & xTable & ".fldreportquanti as fldreportquanti," & xTable & ".fldtestunit as fldtestunit," & xTable & ".fldmethod as fldmethod" & xjoin & " where (" & xTable & ".fldstatus=&1 or " & xTable & ".fldstatus=&2) and " & xTable & ".fldtestid=&3 and " & xTable & ".fldtest_type=&4" & xmethod & xpatinfo & xdiagno
  res = modDatabase.$syConn.Exec(sql, "Reported", "Verified", sTest, "Quantitative", sMethod, tstgender, tsdistrict, xdt1, xdt2, xdiagnoval, True, "Other")                                      ''
  If res.Available Then
    xpath = Temp()
    For Each res
      xxx.Add(Format(GetLabQuantiValueAll(res["fldencounterval"], res["fldtestid"], res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], unt), gb.Fixed))
    Next
    File.Save(xpath, xxx.Join(gb.NewLine))
    arcmd = ["qstats", "-s", xpath]
    If System.Exist("qstats") = True Then
      modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
      Exec arcmd To xval
    Else
      modApplSub.InstallSelectedApplication(["qstats"])
    Endif
  Else
    xval = ""
  Endif

  Return xval

End

Public Function GetStatLabReport(labid As Long, unt As String, sDiagnosis As String, Optional sTable As String) As String

  Dim res1 As Result
  Dim xval As String
  Dim xTable As String

  If sTable Then
    xTable = sTable
  Else
    xTable = "tblpatlabtest"
  Endif
  res1 = modDatabase.$syConn.Exec("select fldencounterval,fldtestid,fldmethod from " & xTable & " where fldid=&1", labid)
  If res1.Available Then
    If res1["fldmethod"] Then
      If sDiagnosis Then
        xval = GetEBMLabValue(res1["fldencounterval"], res1["fldtestid"], res1["fldmethod"], unt, sDiagnosis, xTable)
      Else
        xval = GetEBMLabValue(res1["fldencounterval"], res1["fldtestid"], res1["fldmethod"], unt, "", xTable)
      Endif
    Else
      If sDiagnosis Then
        xval = GetEBMLabValue(res1["fldencounterval"], res1["fldtestid"], "Regular", unt, sDiagnosis, xTable)
      Else
        xval = GetEBMLabValue(res1["fldencounterval"], res1["fldtestid"], "Regular", unt, "", xTable)
      Endif
    Endif
  Endif
  Return xval

End

Public Function LabReportCommentPatient(labid As Long, unt As String, sType As String, Optional sTable As String) As String

  Dim xx As String[]

  Dim xrefrange As String
  Dim druglow As String[]
  Dim drughigh As String[]
  Dim syndrolow As String[]
  Dim syndrohigh As String[]
  Dim xintpret As String
  Dim xsenspec As Float[]
  Dim xTable As String
  Dim xtestname As String
  Dim xfooter As String

  If sTable Then
    xTable = sTable
  Else
    xTable = "tblpatlabtest"
  Endif
  If sType = "Qualitative" Then
    xx = New String[]
    ' If modBasic.$CommRefRange = "Yes" Then
    xrefrange = modFixLab.GetLabQualiTestTextReference(GetTestnameFromTestID(labid, xTable))
    If xrefrange Then
      xx.Add("Ref Range: " & xrefrange)
    Endif
    ' Endif

    If modBasic.$CommSensSpec = "Yes" Then
      xsenspec = GetTestSensiSpecArray(labid, xTable)
      If xsenspec And If xsenspec.Count = 2 Then
        If Not xsenspec[0] And If Not xsenspec[1] Then
        Else
          xx.Add("Sens: " & CStr(xsenspec[0]) & modString.HTMLBlankSpace(3) & "Spec: " & CStr(xsenspec[1]))
        Endif
      Endif
    Endif

  Else If sType = "Quantitative" Then
    xx = New String[]
    ' If modBasic.$CommRefRange = "Yes" Then
    xrefrange = GetTestLimitSrting(labid, unt, xTable)
    If xrefrange Then
      xx.Add("Ref Range: " & xrefrange & " " & GetTestUnitSrting(labid, unt, xTable))
    Endif
    ' Endif

    If modBasic.$CommSensSpec = "Yes" Then
      xsenspec = GetTestSensiSpecArray(labid, xTable)
      If xsenspec.Count = 2 Then
        If Not xsenspec[0] And If Not xsenspec[1] Then
        Else
          xx.Add("Sens: " & CStr(xsenspec[0]) & modString.HTMLBlankSpace(3) & "Spec: " & CStr(xsenspec[1]))
        Endif
      Endif
    Endif

    If modBasic.$CommMedEffect = "Yes" Then
      druglow = GetLabTestDrugHypo(labid, xTable)
      If druglow And If druglow.Count Then
        xx.Add("Decreased By:" & gb.NewLine & druglow.Join("; "))
      Endif
      drughigh = GetLabTestDrugHyper(labid, xTable)
      If drughigh And If drughigh.Count Then
        xx.Add("Increased By:" & gb.NewLine & drughigh.Join("; "))
      Endif
    Endif

    If modBasic.$CommCauseSyndro = "Yes" Then
      syndrolow = GetTestDiseaseHypo(labid, xTable)
      If syndrolow And If syndrolow.Count Then
        xx.Add("Decreased In:" & gb.NewLine & syndrolow.Join("; "))
      Endif
      syndrohigh = GetTestDiseaseHyer(labid, xTable)
      If syndrohigh And If syndrohigh.Count Then
        xx.Add("Increased In:" & gb.NewLine & syndrohigh.Join("; "))
      Endif
    Endif

    If modBasic.$CommInterpret = "Yes" Then
      xintpret = TestInterpretByTestID(labid, xTable)
      If xintpret Then
        xx.Add("RESULT: " & xintpret)
      Endif
    Endif

    If modBasic.$CommFooterInfo = "Yes" Then
      xtestname = GetTestnameFromTestID(labid, xTable)
      xfooter = modFixLab.GetLabFooterInfo(xtestname)
      If xfooter Then
        xx.Add("COMMENT: " & xfooter)
      Endif
    Endif

  Endif

  Return xx.Join(gb.Tab)

End

Public Function GetHypoTestList(encid As String) As String[]

  Dim res As Result
  Dim xx As String[]
  Dim xval As Float
  Dim xlimit As Float[]

  xx = New String[]
  res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and (fldstatus=&2 or fldstatus=&3) and fldtest_type=&4", encid, "Reported", "Verified", "Quantitative")
  For Each res
    xval = GetCurrTesValuePos("Last", encid, res["col"])
    If xval Then
      xlimit = LabBothLimitValue(res["col"], encid, MMain.$defUnit)
      If xval < xlimit[0] Then
        xx.Add(res["col"])
      Endif
    Endif
  Next
  xx.Sort(gb.Ascent)
  Return xx

End

Public Function GetHyperTestList(encid As String) As String[]

  Dim res As Result
  Dim xx As String[]
  Dim xval As Float
  Dim xlimit As Float[]

  xx = New String[]
  res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and (fldstatus=&2 or fldstatus=&3) and fldtest_type=&4", encid, "Reported", "Verified", "Quantitative")
  For Each res
    xval = GetCurrTesValuePos("Last", encid, res["col"])
    If xval Then
      xlimit = LabBothLimitValue(res["col"], encid, MMain.$defUnit)
      If xval > xlimit[1] Then
        xx.Add(res["col"])
      Endif
    Endif
  Next
  xx.Sort(gb.Ascent)
  Return xx

End

''=========================================== Drug Sensitivity Table ===========================================
Public Function GetSensitivityTable(encid As String, testid As Long, sTableSub As String) As String

  Dim res As Result
  Dim restab As Result
  Dim xtable As String

  Dim aVar As Variant[]
  Dim aCol As Collection
  Dim xval As String
  Dim xanti As String[]
  Dim xFinal As String[]
  Dim antiName As String
  Dim i As Integer

  aVar = New Variant[]
  xanti = New String[]
  If sTableSub Then
    res = modDatabase.$myConn.Exec("select fldsubtest,fldreport,fldid,fldtestid,fldtanswertype,fldindex from " & sTableSub & " where fldencounterval=&1 and fldtestid=&2 and fldchk=&3 and fldsave=&4 and (fldtanswertype=&5 or fldtanswertype=&6)", encid, testid, True, True, "Drug Sensitivity", "WHO Sensitivity")
  Else
    res = modDatabase.$myConn.Exec("select fldsubtest,fldreport,fldid,fldtestid,fldtanswertype,fldindex from tblpatlabsubtest where fldencounterval=&1 and fldtestid=&2 and fldchk=&3 and fldsave=&4 and (fldtanswertype=&5 or fldtanswertype=&6)", encid, testid, True, True, "Drug Sensitivity", "WHO Sensitivity")
  Endif
  If res.Available Then

    xtable = modRepoTemplete.HTMLTableSyntax()
    xtable = xtable & "<tr>" & gb.NewLine
    xtable = xtable & "<td class='reportmid_table_h'>" & "Antibiotics" & "</td>" & gb.NewLine
    For Each res
      xtable = xtable & "<td class='reportmid_table_h'>" & res["fldsubtest"] & "</td>" & gb.NewLine

      aCol = New Collection
      If res["fldindex"] Then
        restab = modDatabase.$myConn.Exec("select distinct(fldvariable) as antibiotic from tblpatlabsubtable where fldtestid=&1 and fldvalue<>&2 and fldindex=&3 ORDER BY fldvariable ASC", testid, "Cancelled", res["fldindex"])
      Else
        restab = modDatabase.$myConn.Exec("select distinct(fldvariable) as antibiotic from tblpatlabsubtable where fldtestid=&1 and fldvalue<>&2 ORDER BY fldvariable ASC", testid, "Cancelled")
      Endif
      If restab.Available Then
        For Each restab
          xanti.Add(restab["antibiotic"])
          xval = GetSensiValue(res["fldtestid"], res["fldid"], res["fldindex"], restab["antibiotic"])
          aCol.Add(xval, restab["antibiotic"])
        Next
      Endif
      aVar.Add(aCol)

    Next
    xtable = xtable & "</tr>" & gb.NewLine

    xFinal = modString.GetDistinctStringArray(xanti)
    If xFinal Then
      xFinal.Sort()
      For Each antiName In xFinal
        xtable = xtable & "<tr>" & gb.NewLine
        xtable = xtable & "<td>" & antiName & "</td>" & gb.NewLine
        For i = 0 To aVar.Count - 1
          xtable = xtable & "<td>" & aVar[i][antiName] & "</td>" & gb.NewLine
        Next
        xtable = xtable & "</tr>" & gb.NewLine
      Next
    Endif

    xtable = xtable & "</table>" & gb.NewLine
  Endif

  Return xtable

End

Private Function GetSensiValue(testid As Long, subtestid As Long, sIndex As String, antibiotic As String) As String

  Dim res As Result
  Dim xx As String

  If sIndex Then
    res = modDatabase.$myConn.Exec("select distinct(fldvalue) from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex=&3 and fldvariable=&4 and fldvalue<>&5", testid, subtestid, sIndex, antibiotic, "Cancelled")
  Else
    res = modDatabase.$myConn.Exec("select distinct(fldvalue) from tblpatlabsubtable where fldtestid=&1 and fldsubtestid=&2 and fldindex IS &3 and fldvariable=&4 and fldvalue<>&5", testid, subtestid, Null, antibiotic, "Cancelled")
  Endif
  If res.Available Then
    If res["fldvalue"] Then
      xx = res["fldvalue"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

''---------------- Position wise value -------------------
Public Function GetCurrTesValuePos(sPos As String, encid As String, strTest As String, Optional sUnit As String) As Variant

  Dim sql As String
  Dim res As Result
  Dim metr As Variant
  Dim unt As String
  Dim xType As String
  Dim xcaption As String

  If sUnit Then
    unt = sUnit
  Else
    unt = MMain.$defUnit
  Endif

  xcaption = modFixLab.GetLabTestCaption(strTest)
  If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
    metr = "****"
  Else

    sql = "select fldtestid,fldreportquali,fldreportquanti,fldtestunit,fldmethod,fldtest_type from tblpatlabtest where fldencounterval=&1 and (fldstatus=&2 or fldstatus=&3) and fldtestid=&4 and fldreportquali IS NOT &5"
    res = modDatabase.$myConn.Exec(sql, encid, "Reported", "Verified", strTest, Null)
    If res.Available = True Then
      If sPos = "First" Then
        res.MoveFirst
      Else
        res.MoveLast
      Endif

      If res["fldtest_type"] = "Quantitative" Then
        If res["fldreportquanti"] Then
          metr = modLabTest.GetLabQuantiValueAll(encid, strTest, res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], unt)
        Else
          metr = 0
        Endif
      Else
        If res["fldreportquali"] Then
          xType = modAllExam.GetVariableOptionType("Test", res["fldtestid"])
          If xType = "Clinical Scale" Then
            metr = CStr(res["fldreportquanti"])
          Else
            metr = Trim(res["fldreportquali"])
          Endif
        Else
          metr = ""
        Endif
      Endif
    Else
      metr = ""
    Endif
  Endif

  Return metr

End

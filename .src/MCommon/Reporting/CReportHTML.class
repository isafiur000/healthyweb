' Gambas class file

Private TableFile As String[]
Public UserData As New Collection

Private $IndexData As String[]
Private $ChapterID As Integer
Private $commentText As String

Private $TableColumns As String[]
Private $TemplatePath As String
Private $RepoType As String
Private $encid As String
Private $sHideContent As String[]
Private $TranslateFile As String

Private $TextAlignmentColumn1 As String
Private $TextAlignmentColumn2 As String
Private $TextAlignmentColumnAl As String
Private $VerticalAlignmentColumn1 As String
Private $VerticalAlignmentColumn2 As String
Private $VerticalAlignmentColumnAl As String
Private $ReportFontColumn1 As String
Private $ReportFontColumn2 As String
Private $ReportContentFont As String
Private $ReportTitleDisplay As String
Private $ReportTitleUpCase As String
Private $ReportTitleAlignment As String
Private $ReportTitleFont As String
Private $FormatCOlumnID As Integer
Private $ReportTitleLink As String

Private $xSerial As Integer
Private $hash As String

Public Sub _new(hColumns As String[], ReportType As String, encid As String, Optional sHideContent As String[])

  $TableColumns = hColumns
  $TemplatePath = modHelpVariable.$htmlDirectory
  $RepoType = ReportType
  $encid = encid
  $sHideContent = sHideContent
  LoadVariables()
  TableFile = New String[]
  $IndexData = New String[]
  $xSerial = 0

  If modBasic.$CommentColumn Then
    $TableColumns.Add(modBasic.$CommentColumn)
  Endif

  $commentText = ""
  modReportVar.$ReportHash = ""
  If $encid Then
    $hash = modPassword.GetRandomPassword()
    UserData.Add($hash, "QRHashCode")
    modReportVar.$ReportHash = $hash
  Endif
  $ChapterID = 1

End

Private Sub LoadVariables()

  $TextAlignmentColumn1 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment_Column1")
  $TextAlignmentColumn2 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment_Column2")
  $TextAlignmentColumnAl = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment")
  $VerticalAlignmentColumn1 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment_Column1")
  $VerticalAlignmentColumn2 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment_Column2")
  $VerticalAlignmentColumnAl = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment")

  $ReportFontColumn1 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_Font_Column1")
  $ReportFontColumn2 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_Font_Column2")
  $ReportContentFont = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ContentFont")

  $ReportTitleDisplay = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleDisplay")
  $ReportTitleUpCase = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleUpCase")
  $ReportTitleAlignment = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleAlignment")
  $ReportTitleFont = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleFont")
  $ReportTitleLink = modSettings.ShowSettingFromFIle("ReportFormat/ChapterIndex")

  modCustPatient.LoadReportColumnFOrmat()
  If modSettings.ShowSettingFromFIle("ReportColumnFormat/Title") Then
    $FormatCOlumnID = CInt(modSettings.ShowSettingFromFIle("ReportColumnFormat/ColumnID"))
  Endif

End

Public Sub SetTemplatePath(sFolderPath As String)

  If Exist(sFolderPath) Then
    $TemplatePath = sFolderPath
  Endif

End

Public Sub SetTranslationList(sTransPath As String)

  If Exist(sTransPath) Then
    $TranslateFile = sTransPath
  Endif

End

Public Sub Add(colum_content As String[], Optional xColSpan As String)

  Dim counter As Integer
  Dim sDesign1 As String
  Dim sDesign2 As String
  Dim sDesignAl As String
  Dim xline As String
  Dim xspan As String

  Dim i As Integer
  Dim col_content As String[]

  If $FormatCOlumnID > 0 Then
    If $FormatCOlumnID <= colum_content.Max
      col_content = New String[]
      For i = 0 To $FormatCOlumnID - 1
        col_content.Add(colum_content[i])
      Next
      col_content.Add(modCustPatient.ReportCustColumnValue(colum_content[i]))
      For i = $FormatCOlumnID + 1 To colum_content.Count - 1
        col_content.Add(colum_content[i])
      Next
    Else
      col_content = colum_content
    Endif
  Else
    col_content = colum_content
  Endif

  If modBasic.$CommentColumn Then
    col_content.Add("")
  Endif

  If xColSpan Then
    xspan = "colspan='" & xColSpan & "' "
  Else
    xspan = ""
  Endif

  sDesign1 = modString.GetDesignFormatString(, $TextAlignmentColumn1, $VerticalAlignmentColumn1)
  sDesign2 = modString.GetDesignFormatString(, $TextAlignmentColumn2, $VerticalAlignmentColumn2)
  sDesignAl = modString.GetDesignFormatString(, $TextAlignmentColumnAl, $VerticalAlignmentColumnAl)

  ' If Not (col_content.Count = $TableColumns.Count) Then
  '   Error.Raise("col_content must be equivalent to Columns")
  ' Endif

  TableFile.Add("  <tr>")
  For counter = 0 To colum_content.Count - 1
    If modString.GetRichTextMode(col_content[counter]) = True Then
      If counter = 0 Then
        TableFile.Add("    <td " & xspan & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & col_content[counter] & "</span>" & "</td>")
      Else If counter = 1 Then
        TableFile.Add("    <td " & xspan & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & col_content[counter] & "</span>" & "</td>")
      Else
        TableFile.Add("    <td " & xspan & sDesignAl & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & col_content[counter] & "</span>" & "</td>")
      Endif
    Else

      If counter = 0 Then
        If $ReportFontColumn1 Then
          xline = "    <td " & xspan & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportFontColumn1) & "</span>" & "</td>"
        Else
          If $ReportContentFont Then
            xline = "    <td " & xspan & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportContentFont) & "</span>" & "</td>"
          Else
            xline = "    <td " & xspan & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter]) & "</span>" & "</td>"
          Endif
        Endif
      Else If counter = 1 Then
        If $ReportFontColumn2 Then
          xline = "    <td " & xspan & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportFontColumn2) & "</span>" & "</td>"
        Else
          If $ReportContentFont Then
            xline = "    <td " & xspan & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportContentFont) & "</span>" & "</td>"
          Else
            xline = "    <td " & xspan & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter]) & "</span>" & "</td>"
          Endif
        Endif
      Else
        If $ReportContentFont Then
          xline = "    <td " & xspan & sDesignAl & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportContentFont) & "</span>" & "</td>"
        Else
          xline = "    <td " & xspan & sDesignAl & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter]) & "</span>" & "</td>"
        Endif
      Endif
      TableFile.Add(xline)

    Endif
  Next

  TableFile.Add("  </tr>")
  $xSerial = $xSerial + 1

End

Public Sub AddSection(col_content As String, Optional sLink As Boolean)

  Dim chpid As Integer

  If $ReportTitleDisplay And If $ReportTitleDisplay = "No" Then
  Else
    If $ReportTitleAlignment Then
      TableFile.Add("<tr class='row_section' align='" & $ReportTitleAlignment & "'>")
    Else
      TableFile.Add("<tr class='row_section' align='center'>")
    Endif

    If sLink = True And If $ReportTitleLink = "Yes" Then
      chpid = $ChapterID
      $ChapterID = $ChapterID + 1
      $IndexData.Add("<A HREF=" & Quote("#chapter" & CStr(chpid)) & ">" & col_content & "</A>")
      If $ReportTitleFont Then
        TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & "<A NAME=" & Quote("chapter" & CStr(chpid)) & ">" & modString.GetFormatTextFontString(col_content, $ReportTitleFont) & "</A>" & "</td>")                                                 ''
      Else
        If $ReportTitleUpCase = "Yes" Then
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & "<A NAME=" & Quote("chapter" & CStr(chpid)) & ">" & "<span style='text-transform: uppercase;font-weight: bold;'>" & col_content & "</span>" & "</A>" & "</td>")
        Else
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & "<A NAME=" & Quote("chapter" & CStr(chpid)) & ">" & "<span style='font-weight: bold;'>" & col_content & "</span>" & "</A>" & "</td>")
        Endif
      Endif

    Else
      If $ReportTitleFont Then
        TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & modString.GetFormatTextFontString(col_content, $ReportTitleFont) & "</td>")                                                 ''
      Else
        If $ReportTitleUpCase = "Yes" Then
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'><span style='text-transform: uppercase;font-weight: bold;'>" & col_content & "</span></td>")
        Else
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'><span style='font-weight: bold;'>" & col_content & "</span></td>")
        Endif
      Endif

    Endif
    TableFile.Add("</tr>")
  Endif

End

Public Sub AddChapter(col_content As String)

  TableFile.Add("<tr class='row_chapter' align='left'>")
  TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'><span style='font-weight: bold;'>" & col_content & "</span></td>")
  TableFile.Add("</tr>")

End

Public Sub AddSummary(col_content As String)

  TableFile.Add("<tr align='left'>")
  TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & col_content & "</span></td>")
  TableFile.Add("</tr>")

End

Public Sub AddCommentText(txtcomment As String)

  $commentText = $commentText & txtcomment

End

Private Function GetMakeHTMLFile() As String

  Dim hCls As CReportFormat
  Dim TablePath As String
  Dim sPath As String

  TablePath = TableFile.Join(gb.NewLine)
  If $sHideContent Then
    hCls = New CReportFormat($encid, $TableColumns, TablePath, $TemplatePath, $RepoType, $commentText, UserData, $IndexData, $sHideContent)
  Else
    hCls = New CReportFormat($encid, $TableColumns, TablePath, $TemplatePath, $RepoType, $commentText, UserData, $IndexData)
  Endif
  sPath = hCls.GetHTMLFile()

  TableFile.Clear()

  Return sPath

End

Private Function GetMakeHTMLString() As String

  Dim hCls As CStringFormat
  Dim TablePath As String
  Dim sPath As String

  TablePath = TableFile.Join(gb.NewLine)
  If $sHideContent Then
    hCls = New CStringFormat($encid, $TableColumns, TablePath, $TemplatePath, $RepoType, $commentText, UserData, $IndexData, $sHideContent)
  Else
    hCls = New CStringFormat($encid, $TableColumns, TablePath, $TemplatePath, $RepoType, $commentText, UserData, $IndexData)
  Endif
  sPath = hCls.GetHTMLString()

  TableFile.Clear()

  Return sPath

End

Public Function GetReportHash() As String

  Return $hash

End

Public Function NewHTMLPath() As String

  Dim sPath As String

  If modHelpVariable.$ApplKey < 2 Then
    If $TranslateFile Then
      sPath = modControlSub.GetTranslatedFile($TranslateFile, GetMakeHTMLFile())
    Else
      sPath = GetMakeHTMLFile()
    Endif
    Return sPath

  Else
    Message.Warning(("HTML Report disabled. Please insert validation key"), ("OK"))
  Endif

End

Public Function NewHTMLString() As String

  Dim sPath As String

  sPath = GetMakeHTMLString()

  Return sPath

End

' Gambas module file

'NOTE: -------------------------- INSTALLED APPLICATIONS ------------------------------
Public Function EssenAppList() As String[]

  Dim xx As String[]

  xx = New String[]
  'system binaries
  If System.Exist("facter") = False Then
    xx.Add("facter")
  Endif
  If System.Exist("numconv") = False Then
    xx.Add("numconv")
  Endif
  If System.Exist("locale") = False Then
    xx.Add("locales")
  Endif
  If System.Exist("ifconfig") = False And If System.Exist("busybox") = False Then
    xx.Add("net-tools")
  Endif
  If System.Exist("openssl") = False Then
    xx.Add("openssl")
  Endif

  'calculation
  If System.Exist("number") = False Then
    xx.Add("bsdgames")
  Endif
  If System.Exist("num2words") = False Then
    xx.Add("python3-num2words")
  Endif
  If System.Exist("gbs3") = False Then
    xx.Add("gambas3-scripter")
  Endif
  If System.Exist("gnuplot-nox") = False Then
    xx.Add("gnuplot-nox")
  Endif
  If System.Exist("pspp") = False Then
    xx.Add("pspp")
  Endif
  If System.Exist("datamash") = False Then
    xx.Add("datamash")
  Endif
  If Exist("/usr/lib/python3/dist-packages/matplotlib/pyplot.py") = False Then
    xx.Add("python3-matplotlib")
  Endif

  ''ftp
  If System.Exist("wput") = False Or If System.Exist("wdel") = False Then
    xx.Add("wput")
  Endif
  If System.Exist("wget") = False Then
    xx.Add("wget")
  Endif
  If System.Exist("sqlite3") = False Then
    xx.Add("sqlite3")
  Endif
  If System.Exist("curl") = False Then
    xx.Add("curl")
  Endif

  'printing
  If System.Exist("pdftocairo") = False Or If System.Exist("pdfunite") = False Then
    xx.Add("poppler-utils")
  Endif
  If System.Exist("wkhtmltopdf") = False Then
    xx.Add("wkhtmltopdf")
  Endif
  If System.Exist("qpdf") = False Then
    xx.Add("qpdf")
  Endif
  If System.Exist("qrencode") = False Then
    xx.Add("qrencode")
  Endif
  If System.Exist("links") = False Then
    xx.Add("links")
  Endif
  If System.Exist("txt2html") = False Then
    xx.Add("txt2html")
  Endif
  If System.Exist("html2text") = False Then
    xx.Add("html2text")
  Endif
  If System.Exist("convert") = False Then
    xx.Add("imagemagick")
  Endif

  ''compression
  If System.Exist("tar") = False And If System.Exist("busybox") = False Then
    xx.Add("tar")
  Endif
  If System.Exist("gzip") = False Then
    xx.Add("gzip")
  Endif
  If System.Exist("7z") = False Then
    xx.Add("p7zip-full")
  Endif
  If System.Exist("unzip") = False Then
    xx.Add("unzip")
  Endif
  If System.Exist("zip") = False Then
    xx.Add("zip")
  Endif

  'PACS
  If System.Exist("getscu") = False Or If System.Exist("findscu") = False Or If System.Exist("dcmmkdir") = False Or If System.Exist("dcmj2pnm") = False Or If System.Exist("dcmodify") = False Then                       ''
    xx.Add("dcmtk")
  Endif

  Return xx

End

Public Function OptionalAppList() As String[]

  Dim xx As String[]

  xx = New String[]
  If System.Exist("aeskulap") = False Then
    xx.Add("aeskulap")
  Endif
  ' If System.Exist("gdcmanon") = False Then
  '   xx.Add("libgdcm-tools")
  ' Endif
  If System.Exist("xprintidle") = False Then
    xx.Add("xprintidle")
  Endif
  If System.Exist("xset") = False Then
    xx.Add("x11-xserver-utils")
  Endif
  If System.Exist("socat") = False Then
    xx.Add("socat")
  Endif
  If System.Exist("zbarimg") = False Then
    xx.Add("zbar-tools")
  Endif
  If System.Exist("zint") = False Then
    xx.Add("zint")
  Endif
  If System.Exist("streamer") = False Then
    xx.Add("streamer")
  Endif
  If System.Exist("gst-launch-1.0") = False Then
    xx.Add("gstreamer1.0-tools")
  Endif
  If System.Exist("ssh") = False Then
    xx.Add("openssh-client")
  Endif
  If System.Exist("sshd") = False Then
    xx.Add("openssh-server")
  Endif
  If System.Exist("sshpass") = False Then
    xx.Add("sshpass")
  Endif
  If System.Exist("sshfs") = False Then
    xx.Add("sshfs")
  Endif
  If System.Exist("curlftpfs") = False Then
    xx.Add("curlftpfs")
  Endif
  If System.Exist("xwd") = False Then
    xx.Add("x11-apps")
  Endif
  If System.Exist("sqsh") = False Then
    xx.Add("sqsh")
  Endif
  If System.Exist("mmcli") = False Then
    xx.Add("modemmanager")
  Endif
  If System.Exist("kdeconnect-cli") = False Then
    xx.Add("kdeconnect")
    xx.Add("qml-module-org-kde-people")
  Endif
  If System.Exist("qstats") = False Then
    xx.Add("qstats")
  Endif
  If System.Exist("notify-send") = False Then
    xx.Add("libnotify-bin")
  Endif
  If System.Exist("espeak") = False Then
    xx.Add("espeak")
  Endif
  If System.Exist("comparepdf") = False Then
    xx.Add("comparepdf")
  Endif
  If System.Exist("meld") = False Then
    xx.Add("meld")
  Endif
  If System.Exist("trans") = False Then
    xx.Add("translate-shell")
  Endif
  If System.Exist("aspell") = False Then
    xx.Add("aspell")
  Endif
  If System.Exist("lp") = False Then
    xx.Add("cups-client")
  Endif
  If System.Exist("onboard") = False Then
    xx.Add("onboard")
  Endif
  If Exist("/usr/lib/jvm/default-java") = False Then
    xx.Add("default-jre-headless")
    xx.Add("libreoffice-java-common")
  Endif

  Return xx

End

'NOTE: -------------------------- SYSTEM PARAMATERS ------------------------------
Private Function GetFacterValue(cmd As String) As String

  Dim yy As String
  Dim xx As String
  Dim arcmd As String[]

  arcmd = ["facter", cmd]
  If System.Exist("facter") = True Then
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To xx
    If xx Then
      yy = Trim(xx)
    Else
      yy = ""
    Endif
  Else
    modApplSub.InstallSelectedApplication(["facter"])
  Endif

  Return yy

End

Public Function DistributionOSName() As String

  Return GetFacterValue("operatingsystem")

End

Public Function GetKernelDistribution() As String

  Return GetFacterValue("kernelrelease")

End

Public Function DistributionVendor() As String

  Dim xx As String
  Dim yy As String
  Dim zz As String

  xx = DistributionOSName()
  yy = GetFacterValue("operatingsystemrelease")

  zz = xx & yy
  Return zz

End

Public Function GetMACAddress() As String

  Dim xx As String
  Dim xcmd As String

  If modHelpVariable.$SysInterface Then
    If System.Exist("ifconfig") = True Then
      xcmd = Subst("ifconfig &1 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'", modHelpVariable.$SysInterface)
    Else
      xcmd = Subst("busybox ifconfig &1 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'", modHelpVariable.$SysInterface)
    Endif
    modBasic.DebugString("Execute " & xcmd)
    Shell xcmd To xx
    xx = Trim(xx)
    If Not xx Then
      xx = GetFacterValue("macaddress_" & modHelpVariable.$SysInterface)
    Endif

  Else
    xx = GetFacterValue("macaddress")
  Endif
  Return xx

End

Public Function GetLocalIP() As String

  Dim xx As String
  Dim xcmd As String
  Dim xdist As String

  If modHelpVariable.$SysInterface Then
    xdist = modApplication.DistributionVendor()
    If System.Exist("ifconfig") = True Then
      xcmd = Subst("ifconfig &1 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'", modHelpVariable.$SysInterface)
    Else
      xcmd = Subst("busybox ifconfig &1 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1}'", modHelpVariable.$SysInterface)
    Endif
    modBasic.DebugString("Execute " & xcmd)
    Shell xcmd To xx
    xx = Trim(xx)
  Else
    xx = GetFacterValue("ipaddress")
  Endif
  Return xx

End

Public Function GetNetworkInterfaceList() As String[]

  Dim sNetList As String[]
  Dim xx As String
  Dim arcmd As String[]

  arcmd = ["ls", "-1", "/sys/class/net"]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd To xx
  sNetList = Split(Trim(xx), gb.NewLine)
  Return sNetList

End

Public Function GetExternalIP() As String

  Dim xx As String
  Dim xcmd As String

  xcmd = "dig +short myip.opendns.com @resolver1.opendns.com"
  modBasic.DebugString("Execute " & xcmd)
  Shell xcmd To xx
  xx = Trim(xx)
  Return xx

End

Public Function GetApplicationPID(cmd As String) As Long

  Dim xx As String
  Dim yy As Long
  Dim arcmd As String[]

  arcmd = ["pidof", cmd]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd To xx
  yy = Val(xx)
  Return yy

End

Public Function GetPercentCPUUsage(pid As Long) As String

  Dim xx As String
  Dim yy As String
  Dim arcmd As String[]

  arcmd = ["ps", "-p", pid, "-o", "%cpu"]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd To xx
  yy = Replace(xx, "%CPU", "")
  Return Trim(yy)

End

Public Function GetMD5SumFile(sFile As String) As String

  Dim xx As String
  Dim smd As String[]
  Dim arcmd As String[]

  arcmd = ["md5sum", sFile]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd To xx
  smd = Split(xx, Space(1))
  Return Trim(smd[0])

End

Public Function GetMD5SumString(sText As String) As String

  Dim xx As String
  Dim smd As String[]
  Dim arcmd As String

  arcmd = "echo -n '" & sText & "' | md5sum"
  modBasic.DebugString("Execute " & arcmd)
  Shell arcmd To xx
  smd = Split(xx, Space(1))
  Return Trim(smd[0])

End

Public Function GetSha1SumValue(sText As String) As String

  Dim arcmd As String
  Dim xx As String

  arcmd = "echo -n " & Quote(sText) & " | sha1sum | awk '{print $1}'"
  modBasic.DebugString("Execute " & arcmd)
  Shell arcmd To xx
  Return Trim(xx)

End

Public Function GetLocaleList() As String[]

  Dim xx As String
  Dim yy As String[]
  Dim zz As String
  Dim xlocal As String[]
  Dim arcmd As String[]

  xlocal = New String[]
  If System.Exist("locale") Then
    arcmd = ["locale", "-a"]
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To xx
  Else
    modApplSub.InstallSelectedApplication(["locales"])
  Endif

  yy = Split(xx, gb.NewLine)
  For Each zz In yy
    If Len(zz) = 10 And If Right(zz, 4) = "utf8" Then
      xlocal.Add(Mid(zz, 1, -4) & "UTF-8")
    Endif
  Next

  Return xlocal

End

Public Function ConvertToLocalNumber(sNum As String, sToLang As String) As String

  Dim cmd As String
  Dim xx As String

  If System.Exist("numconv") Then
    cmd = "echo " & sNum & " | numconv -f Western_Lower -t " & sToLang
    modBasic.DebugString("Execute " & cmd)
    Shell cmd To xx
  Else
    modApplSub.InstallSelectedApplication(["numconv"])
  Endif
  Return Trim(xx)

End

Public Function GetIsCapsLock() As Boolean

  Dim sState As String
  Dim siCap As Short
  Dim xx As Boolean

  Shell "xset q | grep 'LED mask'" To sState
  siCap = Right(Bin(Right(Trim(sState), 1)))
  If siCap Then
    xx = True
  Else
    xx = False
  Endif
  Return xx

End

Public Function ScannerList() As String[]

  Dim arcmd As String[]
  Dim xval As String
  Dim asx As String[]
  Dim xx As String
  Dim xList As String[]

  xList = New String[]
  arcmd = ["scanimage", "-f", Quote("%d")]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd To xx
  asx = Split(xx, gb.NewLine)
  For Each xval In asx
    xList.Add(Trim(UnQuote(xval)))
  Next
  Return xList

End

Public Function ScannerListString() As String

  Dim arcmd As String[]
  Dim xx As String

  arcmd = ["scanimage", "-L"]
  modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
  Exec arcmd To xx
  Return xx

End

Public Function GetFilesListinFolder(sFolder As String) As String[]

  Dim xcmd As String
  Dim xval As String
  Dim aList As String[]
  Dim aFile As String

  aList = New String[]
  xcmd = "find " & sFolder & "  -type f -follow -print"
  modBasic.DebugString("Execute " & xcmd)
  Shell xcmd To xval

  For Each aFile In Split(xval, gb.NewLine)
    aList.Add(Trim(aFile))
  Next
  Return aList

End

Public Function GetMimeType(sPath As String) As String

  Dim xcmd As String
  Dim xval As String

  xcmd = "file --mime-type -b " & Quote(sPath)
  modBasic.DebugString("Execute " & xcmd)
  Shell xcmd To xval

  Return Trim(xval)

End

' Gambas class file

Private $ReportPath As String
Private ReportFile As File

Public UserData As New Collection
Private $IndexData As String[]
Private $ChapterID As Integer
Private $commentText As String
Private $barCodeStr As String

Private $TableColumns As String[]
Private $TemplatePath As String
Private $RepoType As String
Private $encid As String
Private $sHideContent As String

Private $TextAlignmentColumn1 As String
Private $TextAlignmentColumn2 As String
Private $TextAlignmentColumnAl As String
Private $VerticalAlignmentColumn1 As String
Private $VerticalAlignmentColumn2 As String
Private $VerticalAlignmentColumnAl As String
Private $ReportFontColumn1 As String
Private $ReportFontColumn2 As String
Private $ReportContentFont As String
Private $ReportTitleDisplay As String
Private $ReportTitleUpCase As String
Private $ReportTitleAlignment As String
Private $ReportTitleFont As String
Private $ReportTitleLink As String
Private $FormatColuTitle As String
Private $FormatCOlumnID As Integer

Private TextAlign As String
Private Width As Integer
Private $xSerial As Integer

Private tim1 As Date
Private tim2 As Date

Public Sub _new(hColumns As String[], ReportType As String, encid As String, Optional sHideContent As String)

  $TableColumns = hColumns
  $TemplatePath = modHelpVariable.$htmlDirectory
  $RepoType = ReportType
  $encid = encid
  $sHideContent = sHideContent

  LoadVariables()
  $IndexData = New String[]
  $xSerial = 0

  If modBasic.$CommentColumn Then
    $TableColumns.Add(modBasic.$CommentColumn)
  Endif

  $commentText = ""
  modReportVar.$ReportHash = ""
  tim1 = Now()
  $ChapterID = 1

End

Public Sub CreateHTMLFile()

  $ReportPath = Temp() & ".html"
  ReportFile = Open $ReportPath For Write Create
  CreateUpperPart()

End

Private Function GetMakeHTMLFile() As String

  CreateLowerPart()
  Close #ReportFile
  tim2 = Now()

  Return $ReportPath

End

Public Function NewHTMLPath() As String

  Dim sPath As String

  sPath = GetMakeHTMLFile()
  If modHelpVariable.$ApplKey < 2 Then
    Return sPath
  Else
    Message.Warning(("HTML Report disabled. Please insert validation key"), ("OK"))
  Endif

End

'''======================== Main Procedures =========================
Public Sub AddCommentText(txtcomment As String)

  $commentText = $commentText & txtcomment

End

Public Sub Add(colum_content As String[])

  Dim TableFile As String[]
  Dim sLine As String

  Dim counter As Integer
  Dim sDesign1 As String
  Dim sDesign2 As String
  Dim sDesignAl As String
  Dim xline As String

  Dim i As Integer
  Dim col_content As String[]

  TableFile = New String[]
  If $FormatCOlumnID > 0 Then
    If $FormatCOlumnID <= colum_content.Max
      col_content = New String[]
      For i = 0 To $FormatCOlumnID - 1
        col_content.Add(colum_content[i])
      Next
      col_content.Add(modCustPatient.ReportCustColumnValue(colum_content[i]))
      For i = $FormatCOlumnID + 1 To colum_content.Count - 1
        col_content.Add(colum_content[i])
      Next
    Else
      col_content = colum_content
    Endif
  Else
    col_content = colum_content
  Endif

  If modBasic.$CommentColumn Then
    col_content.Add("")
  Endif

  sDesign1 = modString.GetDesignFormatString(, $TextAlignmentColumn1, $VerticalAlignmentColumn1)
  sDesign2 = modString.GetDesignFormatString(, $TextAlignmentColumn2, $VerticalAlignmentColumn2)
  sDesignAl = modString.GetDesignFormatString(, $TextAlignmentColumnAl, $VerticalAlignmentColumnAl)

  If Not (col_content.Count = $TableColumns.Count) Then
    Error.Raise("col_content must be equivalent to Columns")
  Endif

  TableFile.Add("  <tr>")
  For counter = 0 To $TableColumns.Count - 1
    If modString.GetRichTextMode(col_content[counter]) = True Then
      If counter = 0 Then
        TableFile.Add("    <td " & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & col_content[counter] & "</span>" & "</td>")
      Else If counter = 1 Then
        TableFile.Add("    <td " & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & col_content[counter] & "</span>" & "</td>")
      Else
        TableFile.Add("    <td " & sDesignAl & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & col_content[counter] & "</span>" & "</td>")
      Endif
    Else

      If counter = 0 Then
        If $ReportFontColumn1 Then
          xline = "    <td " & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportFontColumn1) & "</span>" & "</td>"
        Else
          If $ReportContentFont Then
            xline = "    <td " & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportContentFont) & "</span>" & "</td>"
          Else
            xline = "    <td " & sDesign1 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter]) & "</span>" & "</td>"
          Endif
        Endif
      Else If counter = 1 Then
        If $ReportFontColumn2 Then
          xline = "    <td " & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportFontColumn2) & "</span>" & "</td>"
        Else
          If $ReportContentFont Then
            xline = "    <td " & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportContentFont) & "</span>" & "</td>"
          Else
            xline = "    <td " & sDesign2 & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter]) & "</span>" & "</td>"
          Endif
        Endif
      Else
        If $ReportContentFont Then
          xline = "    <td " & sDesignAl & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter], $ReportContentFont) & "</span>" & "</td>"
        Else
          xline = "    <td " & sDesignAl & ">" & "<span data-row='" & $xSerial & "' data-column='" & counter & "' >" & modString.GetFormatTextFontString(col_content[counter]) & "</span>" & "</td>"
        Endif
      Endif
      TableFile.Add(xline)

    Endif
  Next

  TableFile.Add("  </tr>")
  $xSerial = $xSerial + 1

  For Each sLine In TableFile
    Write #ReportFile, sLine & gb.NewLine
  Next

End

Public Sub AddSection(col_content As String, Optional sLink As Boolean)

  Dim TableFile As String[]
  Dim sLine As String
  Dim chpid As Integer

  TableFile = New String[]
  If $ReportTitleDisplay And If $ReportTitleDisplay = "No" Then
  Else
    If $ReportTitleAlignment Then
      TableFile.Add("<tr class='row_chapter' align='" & $ReportTitleAlignment & "'>")
    Else
      TableFile.Add("<tr class='row_chapter' align='center'>")
    Endif

    If sLink = True And If $ReportTitleLink = "Yes" Then
      chpid = $ChapterID
      $ChapterID = $ChapterID + 1
      $IndexData.Add("<A HREF=" & Quote("#chapter" & CStr(chpid)) & ">" & col_content & "</A>")
      If $ReportTitleFont Then
        TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & "<A NAME=" & Quote("chapter" & CStr(chpid)) & ">" & modString.GetFormatTextFontString(col_content, $ReportTitleFont) & "</A>" & "</td>")                                                 ''
      Else
        If $ReportTitleUpCase = "Yes" Then
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & "<A NAME=" & Quote("chapter" & CStr(chpid)) & ">" & "<span style='text-transform: uppercase;font-weight: bold;'>" & col_content & "</span>" & "</A>" & "</td>")
        Else
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & "<A NAME=" & Quote("chapter" & CStr(chpid)) & ">" & "<span style='font-weight: bold;'>" & col_content & "</span>" & "</A>" & "</td>")
        Endif
      Endif

    Else
      If $ReportTitleFont Then
        TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & modString.GetFormatTextFontString(col_content, $ReportTitleFont) & "</td>")                                                 ''
      Else
        If $ReportTitleUpCase = "Yes" Then
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'><span style='text-transform: uppercase;font-weight: bold;'>" & col_content & "</span></td>")
        Else
          TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'><span style='font-weight: bold;'>" & col_content & "</span></td>")
        Endif
      Endif

    Endif
    TableFile.Add("</tr>")
  Endif

  For Each sLine In TableFile
    Write #ReportFile, sLine & gb.NewLine
  Next

End

Public Sub AddChapter(col_content As String)

  Dim TableFile As String[]
  Dim sLine As String

  TableFile = New String[]
  TableFile.Add("<tr class='row_chapter' align='left'>")
  TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'><span style='font-weight: bold;'>" & col_content & "</span></td>")
  TableFile.Add("</tr>")

  For Each sLine In TableFile
    Write #ReportFile, sLine & gb.NewLine
  Next

End

Public Sub AddSummary(col_content As String)

  Dim TableFile As String[]
  Dim sLine As String

  TableFile = New String[]
  TableFile.Add("<tr align='left'>")
  TableFile.Add("<td colspan='" & $TableColumns.Count & "' rowspan='1'>" & col_content & "</span></td>")
  TableFile.Add("</tr>")

  For Each sLine In TableFile
    Write #ReportFile, sLine & gb.NewLine
  Next

End

''======================= Procedures =============================
Private Sub LoadVariables()

  $TextAlignmentColumn1 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment_Column1")
  $TextAlignmentColumn2 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment_Column2")
  $TextAlignmentColumnAl = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TextAlignment")
  $VerticalAlignmentColumn1 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment_Column1")
  $VerticalAlignmentColumn2 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment_Column2")
  $VerticalAlignmentColumnAl = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_VerticalAlignment")

  $ReportFontColumn1 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_Font_Column1")
  $ReportFontColumn2 = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_Font_Column2")
  $ReportContentFont = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ContentFont")

  $ReportTitleDisplay = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleDisplay")
  $ReportTitleUpCase = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleUpCase")
  $ReportTitleAlignment = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleAlignment")
  $ReportTitleFont = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_TitleFont")
  $ReportTitleLink = modSettings.ShowSettingFromFIle("ReportFormat/ChapterIndex")

  modCustPatient.LoadReportColumnFOrmat()
  $FormatColuTitle = modSettings.ShowSettingFromFIle("ReportColumnFormat/Title")
  If $FormatColuTitle Then
    $FormatCOlumnID = CInt(modSettings.ShowSettingFromFIle("ReportColumnFormat/ColumnID"))
  Endif

End

Private Sub CreateUpperPart()

  Dim TableFile As String[]
  Dim sLine As String

  TableFile = New String[]
  TableFile.Add(modRepoTemplete.TitleHTMLScript())
  TableFile.Add(modReportVar.$HTMLStart)
  TableFile.Add("<section id='printable@report' class='printable@report'>") '''used to locate printable text
  TableFile.Add(modReportVar.$CSSStart)
  TableFile.Add(TempleteString())
  TableFile.Add(modReportVar.$CSSEnd)
  TableFile.Add(modReportVar.$TitleStart)
  TableFile.Insert(ReportTitle())
  TableFile.Add(modReportVar.$TitleEnd)
  TableFile.Add(modReportVar.$HeaderStart)
  TableFile.Insert(ReportHeader())
  TableFile.Add(modReportVar.$HeaderEnd)
  TableFile.Insert(ExtraHeader())
  TableFile.Add(modReportVar.$BodyStart)
  TableFile.Insert(ReportBody())

  For Each sLine In TableFile
    Write #ReportFile, sLine & gb.NewLine
  Next

End

Private Sub CreateLowerPart()

  Dim hForm As FmSigna
  Dim TableFile As String[]
  Dim sLine As String

  TableFile = New String[]
  If modBasic.$SignaPopUp = "Yes" Then
    If $RepoType = "PatientReport" Or If $RepoType = "LaboratoryReport" Then
      hForm = New FmSigna
      hForm.ShowModal
    Endif
  Endif

  TableFile.Insert(GetReportTableEnd())
  TableFile.Add(modReportVar.$BodyEnd)
  TableFile.Add(modReportVar.$FooterStart)
  TableFile.Insert(ReportFooter())
  TableFile.Add(modReportVar.$FooterEnd)
  TableFile.Add(modReportVar.$FootImageStart)
  TableFile.Add(modRepoTemplete.ReportFootImage())
  TableFile.Add(modReportVar.$FootImageEnd)
  TableFile.Add("</section>")
  TableFile.Add(modReportVar.$HTMLEnd)
  TableFile.Add(modRepoTemplete.EndTemplete())

  For Each sLine In TableFile
    Write #ReportFile, sLine & gb.NewLine
  Next

End

Private Function TempleteString() As String

  Dim xx As String

  If $RepoType = "LaboratoryReport" Then
    xx = File.Load($TemplatePath &/ "labtemplate.tpl")
  Else
    xx = File.Load($TemplatePath &/ "template.tpl")
  Endif
  Return xx

End

Private Function ReportTitle() As String[]

  Dim repo As String[]
  Dim xdeftitle As String

  repo = New String[]
  xdeftitle = modSettings.ShowSettingFromFIle("ReportFormat/Default_Title")
  If xdeftitle And If xdeftitle = "BuiltIn" Then
    repo.Add(GetReplaceString(modRepoTemplete.GetReportTitleTemplete()))
  Else
    repo.Add(GetLoadReplace("report_title.tpl"))
  Endif

  Return repo

End

Private Function ReportHeader() As String[]

  Dim repo As String[]
  Dim xdefhead As String

  repo = New String[]
  repo.Add(modReportVar.BlankLinesAccSetting("ReportFormat/BlankLines_Department_Header"))
  xdefhead = modSettings.ShowSettingFromFIle("ReportFormat/Default_Header")
  If $RepoType = "PatientReport" Then
    $barCodeStr = modReportVar.GetBarcodeImage($encid)
    If xdefhead And If xdefhead = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetPatientHeaderTemplete()))
    Else
      repo.Add(GetLoadReplace("patient_header.tpl"))
    Endif

  Else If $RepoType = "LaboratoryReport" Then
    $barCodeStr = modReportVar.GetBarcodeImage($encid)
    If xdefhead And If xdefhead = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetPatientHeaderTemplete()))
    Else
      repo.Add(GetLoadReplace("patient_header.tpl"))
    Endif

  Else If $RepoType = "PurchaseReport" Then
    If xdefhead And If xdefhead = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetPurchaseHeaderTemplete()))
    Else
      repo.Add(GetLoadReplace("purchase_header.tpl"))
    Endif

  Else
    If xdefhead And If xdefhead = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetGeneralHeaderTemplete()))
    Else
      repo.Add(GetLoadReplace("general_header.tpl"))
    Endif

  Endif

  If $IndexData.Count Then
    repo.Add("<p>")
    repo.Add($IndexData.Join("<br>"))
    repo.Add("</p>")
  Endif

  Return repo

End

Private Function ExtraHeader() As String[]

  Dim repo As String[]

  repo = New String[]
  If $RepoType = "LaboratoryReport" Then
    If modSettings.ShowSettingFromFIle("Laboratory/EXTRA3") Or If modSettings.ShowSettingFromFIle("Laboratory/EXTRA4") Or If modSettings.ShowSettingFromFIle("Laboratory/EXTRA2") Or If modSettings.ShowSettingFromFIle("Laboratory/EXTRA1") Or If modSettings.ShowSettingFromFIle("Laboratory/EXTRA5") Or If modSettings.ShowSettingFromFIle("Laboratory/EXTRA6") Then                     ''
      repo.Add(GetLoadReplace("lab_extra.tpl"))
    Endif
  Endif

  Return repo

End

Private Function ReportFooter() As String[]

  Dim repo As String[]
  Dim xdeffoot As String

  repo = New String[]
  xdeffoot = modSettings.ShowSettingFromFIle("ReportFormat/Default_Footer")
  If $RepoType = "PatientReport" Or If $RepoType = "LaboratoryReport" Then
    If xdeffoot And If xdeffoot = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetPatientFooterTemplete()))
    Else
      repo.Add(GetLoadReplace("patient_footer.tpl"))
    Endif

  Else If $RepoType = "PurchaseReport" Then
    If xdeffoot And If xdeffoot = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetGeneralFooterTemplete()))
    Else
      repo.Add(GetLoadReplace("general_footer.tpl"))
    Endif

  Else
    If xdeffoot And If xdeffoot = "BuiltIn" Then
      repo.Add(GetReplaceString(modRepoTemplete.GetGeneralFooterTemplete()))
    Else
      repo.Add(GetLoadReplace("general_footer.tpl"))
    Endif

  Endif

  Return repo

End

Private Function ReportBody() As String[]

  Dim counter As Integer = 0
  Dim colStr As String
  Dim xx As String
  Dim repo As String[]

  Dim xbackpic As String
  Dim xshowlabel As String
  Dim xcollabel As String
  Dim xcolwid As String
  Dim xcolwid_col As String

  repo = New String[]

  If (TextAlign = "") Then
    TextAlign = "left"
  Endif

  If (Width = 0) Then
    Width = 100
  Endif

  xbackpic = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_BackgroundPicture")
  If xbackpic Then
    xx = " background=" & xbackpic
  Else
    xx = ""
  Endif

  repo.Add(modReportVar.BlankLinesAccSetting("ReportFormat/BlankLines_Header_Body"))
  repo.Add("  <table " & xx & " class='report_table' style='text-align: " & TextAlign & "; width: " & Width & "%;' id='bodytable'>")

  repo.Add("    <thead>")     ''use when webkit bug is solved
  repo.Add("    <tr>")

  xshowlabel = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ShowLabel")
  xcolwid = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ColWidth")
  For counter = 0 To $TableColumns.Count - 1
    colStr = $TableColumns[counter]
    If $FormatColuTitle Then
      If $FormatCOlumnID = counter Then
        colStr = $FormatColuTitle
      Endif
    Endif

    xcollabel = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ShowLabel_Column" & CStr(counter + 1))
    If xcollabel And If xcollabel = "No" Then
      colStr = ""
    Else
      If xshowlabel And If xshowlabel = "No" Then
        colStr = ""
      Endif
    Endif

    xcolwid_col = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_ColWidth_Column" & CStr(counter + 1))
    If xcolwid_col Then
      repo.Add("      <td class='report_table_h' style='width: " & CInt(xcolwid_col) & "%;'>" & colStr & "</td>")
    Else
      If xcolwid Then
        If counter = $TableColumns.Count - 1 Then
          repo.Add("      <td class='report_table_h' style='width: " & CInt(100 - ($TableColumns.Count - 1) * xcolwid) & "%;'>" & colStr & "</td>")
        Else
          repo.Add("      <td class='report_table_h' style='width: " & CInt(xcolwid) & "%;'>" & colStr & "</td>")
        Endif
      Else
        repo.Add("      <td class='report_table_h'>" & colStr & "</td>")
      Endif
    Endif

  Next
  repo.Add("    </tr>")
  repo.Add("    </thead>")

  repo.Add("    <tbody>")
  ' ' repo.Add($TableData)
  ' ' repo.Insert(GetReportTableEnd())

  Return repo

End

Private Function GetReportTableEnd() As String[]

  Dim repo As String[]

  repo = New String[]
  repo.Add("    </tbody>")
  repo.Add("  </table>")
  repo.Add(modReportVar.BlankLinesAccSetting("ReportFormat/BlankLines_Body_Footer"))
  Return repo

End

Private Function GetLoadReplace(sFile As String) As String

  Dim sLine As String
  Dim repo As String

  If Exist($TemplatePath &/ sFile) Then
    sLine = File.Load($TemplatePath &/ sFile)
    repo = GetReplaceString(sLine)
  Endif

  Return repo

End

Private Function GetReplaceString(sLine As String) As String

  Dim KeyValue As String

  sLine = modReportVar.GetReportVarTitle(sLine)
  sLine = modReportVar.GetReportVarImages($encid, sLine)

  If $RepoType = "PurchaseReport" Then
  Else
    If $encid Then
      sLine = modReportVar.GetReportVarPatient($encid, sLine)
      sLine = modReportVar.GetReportVarEncounter($encid, sLine)

      If (String.InStr(sLine, "barcodelink") > 0) Then                    ''
        sLine = Replace(sLine, "{barcodelink}", $barCodeStr)
      Endif

      If modBasic.$CustomConsult = "Yes" Then
        sLine = modReportVar.GetReportLastConsult($encid, sLine)
      Endif
      If modBasic.$CustomBirth = "Yes" Then
        sLine = modReportVar.GetReportBirthDetail($encid, sLine)
      Endif
      If modBasic.$CustomHistory = "Yes" Then
        sLine = modReportVar.GetReportVarHistory($encid, sLine)
      Endif
      If modBasic.$CustomSelExam = "Yes" Then
        sLine = modReportVar.GetReportVarExam($encid, sLine)
      Endif

      ''use of loop
      If modBasic.$CustomTest = "Yes" Then
        While (String.InStr(sLine, "$Last_Test:") > 0)
          sLine = modReportVar.GetReportTestLastVal($encid, sLine)
        Wend
      Endif
      If modBasic.$CustomExam = "Yes" Then
        While (String.InStr(sLine, "$Last_Exam:") > 0)
          sLine = modReportVar.GetReporExamLastVal($encid, sLine)
        Wend
      Endif
      If modBasic.$CustomDemog = "Yes" Then
        While (String.InStr(sLine, "$Last_Demog:") > 0)
          sLine = modReportVar.GetReporDemogLastVal($encid, sLine)
        Wend
      Endif
      If modBasic.$CustomParagraph = "Yes" Then
        While (String.InStr(sLine, "$Last_History:") > 0)
          sLine = modReportVar.GetReporHistoryLastVal($encid, sLine)
        Wend
        While (String.InStr(sLine, "$Last_Discharge:") > 0)
          sLine = modReportVar.GetReporDischargeLastVal($encid, sLine)
        Wend
        While (String.InStr(sLine, "$ColumnTable:") > 0)
          sLine = modReportVar.GetColumnTableLastVal($encid, sLine)
        Wend
      Endif

    Endif

    ''to be done at last
    If modBasic.$CustomSQLQuery = "Yes" Then
      While (String.InStr(sLine, "$SQLValue[") > 0)
        sLine = modReportVar.GetReporQueryCustom(sLine)
      Wend
      While (String.InStr(sLine, "$SQLArray[") > 0)
        sLine = modReportVar.GetReporQueryArrayCustom(sLine)
      Wend
      While (String.InStr(sLine, "$SQLTable[") > 0)
        sLine = modReportVar.GetReporQueryTableCustom(sLine)
      Wend
      While (String.InStr(sLine, "$SQLAutoTable[") > 0)
        sLine = modReportVar.GetReporQuerySerialTableCustom(sLine)
      Wend
    Endif
    If (String.InStr(sLine, "$InvoiceData[") > 0) Then
      sLine = modReportVar.GetInvoiceDetailSpcificPrint(sLine)
    Endif

    If modBasic.$CustomExec = "Yes" Then
      While (String.InStr(sLine, "$Exec[") > 0)
        sLine = modReportVar.GetReportExecArgs(sLine)
      Wend
      While (String.InStr(sLine, "$Format[") > 0)
        sLine = modReportVar.GetCustFormatValue(sLine)
      Wend
    Endif

    If modBasic.$CustomScript = "Yes" Then
      sLine = modReportVar.GetReportScript(sLine)
    Endif

    If modBasic.$CustomCalc = "Yes" Then
      While (String.InStr(sLine, "$Calc[") > 0)
        sLine = modReportVar.GetReportCalculation(sLine)
      Wend
    Endif

    If modBasic.$CustomImage = "Yes" Then
      While (String.InStr(sLine, "$BarCode[") > 0)
        sLine = modReportVar.GetBarCodeCustom(sLine)
      Wend
      While (String.InStr(sLine, "$QRCode[") > 0)
        sLine = modReportVar.GetQRCodeCustom(sLine)
      Wend
      While (String.InStr(sLine, "$PatImage[") > 0)
        sLine = modReportVar.GetPatImageCustom(sLine)
      Wend
    Endif

    If modBasic.$CustomUser = "Yes" Then
      While (String.InStr(sLine, "$UserProfile[") > 0)
        sLine = modReportVar.GetUserProfileCustom(sLine)
      Wend
    Endif

    ''only for web
    While (String.InStr(sLine, "$WebPath[") > 0)
      sLine = modReportVar.GetImagePath(sLine)
    Wend

    ''Footer info
    sLine = modReportVar.GetReportFooterSetting(sLine, $commentText)
  Endif

  'collection
  For Each KeyValue In UserData
    If (String.InStr(sLine, UserData.Key) > 0) Then
      sLine = Replace(sLine, "{" & UserData.Key & "}", KeyValue)
    Endif
  Next
  sLine = modReportVar.ClearRemainingString(sLine)

  Return sLine

End

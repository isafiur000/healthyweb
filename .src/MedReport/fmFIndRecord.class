' Gambas class file

Private $rData As Result
Private $aMyFields As String[]
Private $SSQLFields As String[]

Private $ColCount As Integer
Private $newColumn As String[]
Private $RepoStr As String
Private $RepoStrA As String

Public Sub _new()

  If MMain.$WebReport = "Multiple" Then
    If modBasic.$HospCode Then
      ' cmblocation.Text = "Hospital"
      cmblocation.Text = modDataRepo.$RepositoryMode
      cmbvalue.Text = modBasic.$HospCode
      pnlocat.Enabled = False
    Else
      cmblocation.List = ["Hospital", "Municipality", "Category", "District", "Province"]
    Endif
  Else
    pnlocat.Visible = False
  Endif

  cmbtable.List = modDBApp.FillDBTables(modDatabase.$syConn, False)
  cmbrelation.List = ["=", "<", "<=", ">", ">=", "LIKE", "NOT LIKE", "IS NULL", "IS NOT NULL"]
  cmbrelation2.List = ["=", "<", "<=", ">", ">=", "LIKE", "NOT LIKE", "IS NULL", "IS NOT NULL"]
  cmbrelation3.List = ["=", "<", "<=", ">", ">=", "LIKE", "NOT LIKE", "IS NULL", "IS NOT NULL"]
  cmbrelation4.List = ["=", "<", "<=", ">", ">=", "LIKE", "NOT LIKE", "IS NULL", "IS NOT NULL"]
  cmbsortype.Add("ASC")
  cmbsortype.Add("DESC")

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

Public Sub cmblocation_Click()

  cmbvalue.Clear()
  If cmblocation.Text Then
    cmbvalue.List = modDataRepo.GetRepoValueListType(cmblocation.Text)
  Endif

End

Public Sub mnurepotable_Click()

  If mnurepotable.Title = "Repo Tables" Then
    mnurepotable.Title = "All Tables"
    cmbtable.List = modDatabase.GetRepositoryTables(modDatabase.$syConn)
  Else If mnurepotable.Title = "All Tables" Then
    mnurepotable.Title = "Repo Tables"
    cmbtable.List = modDBApp.FillDBTables(modDatabase.$syConn, False)
  Endif

End

Public Sub btnshowtable_Click()

  Dim xList As String[]

  ListView1.Clear
  cmbfield.Clear()
  cmbfield2.Clear()
  cmbfield3.Clear()
  cmbfield4.Clear()
  cmbgroupfield.Clear()
  cmbsortfield.Clear()
  cmbdistinct.Clear()
  chkall.Value = False

  If cmbtable.Text And If cmbtable.List.Exist(cmbtable.Text) Then
    xList = modDBApp.GetFIeldsinTable(cmbtable.Text, True, modDatabase.$syConn)
    If xList.Exist("fldpassword") Then
      xList.Remove(xList.Find("fldpassword"))
    Endif
    If xList.Exist("fldpass") Then
      xList.Remove(xList.Find("fldpass"))
    Endif
    ListView1.List = xList
    cmbfield.List = xList
    cmbfield2.List = xList
    cmbfield3.List = xList
    cmbfield4.List = xList
    cmbgroupfield.List = xList
    cmbsortfield.List = xList
    cmbdistinct.List = xList
    If MMain.$WebReport = "Multiple" Then
      If xList.Exist("fldhospcode") = True Then
        $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
        $RepoStrA = modDataRepo.GetWhereStringRepoWhr(cmblocation.Text, cmbvalue.Text)
      Else
        $RepoStr = ""
        $RepoStrA = ""
      Endif
    Else
      $RepoStr = ""
      $RepoStrA = ""
    Endif
  Endif

  cmbfield.Text = ""
  cmbfield2.Text = ""
  cmbfield3.Text = ""
  cmbfield4.Text = ""
  cmbgroupfield.Text = ""
  cmbsortfield.Text = ""
  cmbdistinct.Text = ""

End

Public Sub ListView1_Select()

  If ListView1.Text Then
    cmbdistinct.Add(ListView1.Text)
    cmbdistinct.Text = ""
  Endif

End

Public Sub chkall_Click()

  If chkall.Value = True Then
    ListView1.SelectAll()
  Else If chkall.Value = False Then
    ListView1.UnselectAll()
  Endif

End

Public Sub chkwhere_Click()

  If chkwhere.Value = True Then
    TabStrip1.Enabled = True
  Else If chkwhere.Value = False Then
    TabStrip1.Enabled = False
  Endif

End

Public Sub chkgroup_Click()

  If chkgroup.Value = True Then
    cmbgroupfield.Enabled = True
  Else If chkgroup.Value = False Then
    cmbgroupfield.Enabled = False
  Endif

End

Public Sub chksort_Click()

  If chksort.Value = True Then
    cmbsortfield.Enabled = True
  Else If chksort.Value = False Then
    cmbsortfield.Enabled = False
  Endif

End

Private Function GetGuidedSqlString() As String

  Dim aa As String
  Dim xx As String

  aa = ""
  xx = ""
  If cmbfield.Text Then
    If cmbrelation.Text = "IS NULL" Or If cmbrelation.Text = "IS NOT NULL" Then
      aa = cmbfield.Text & Space(1) & cmbrelation.Text
    Else
      aa = cmbfield.Text & Space(1) & cmbrelation.Text & "  &1"
    Endif
    xx = " and "
  Endif

  If cmbfield2.Text Then
    If cmbrelation2.Text = "IS NULL" Or If cmbrelation2.Text = "IS NOT NULL" Then
      aa = aa & xx & cmbfield2.Text & Space(1) & cmbrelation2.Text
    Else
      aa = aa & xx & cmbfield2.Text & Space(1) & cmbrelation2.Text & "  &2"
    Endif
    xx = " and "
  Endif

  If cmbfield3.Text Then
    If cmbrelation3.Text = "IS NULL" Or If cmbrelation3.Text = "IS NOT NULL" Then
      aa = aa & xx & cmbfield3.Text & Space(1) & cmbrelation3.Text
    Else
      aa = aa & xx & cmbfield3.Text & Space(1) & cmbrelation3.Text & "  &3"
    Endif
    xx = " and "
  Endif

  If cmbfield4.Text Then
    If cmbrelation4.Text = "IS NULL" Or If cmbrelation4.Text = "IS NOT NULL" Then
      aa = aa & xx & cmbfield4.Text & Space(1) & cmbrelation4.Text
    Else
      aa = aa & xx & cmbfield4.Text & Space(1) & cmbrelation4.Text & "  &4"
    Endif
    xx = " and "
  Endif

  Return aa

End

Private Sub GetFieldDataType(cmb As WebComboBox, txtbox As WebTextBox, vlubox As WebValueBox, dtbox As WebDateBox)

  Dim ref As Field
  Dim hTable As Table
  Dim xx As Integer

  For Each hTable In modDatabase.$syConn.Tables
    If hTable.Name = cmbtable.Text Then
      For Each ref In hTable.Fields
        If ref.Name = cmb.Text Then
          xx = ref.Type
        Endif
      Next
    Endif
  Next

  Select xx
    Case db.Float, db.Long, db.Integer, db.Serial
      cmb.Tag = "Value"
      txtbox.Visible = False
      vlubox.Visible = True
      dtbox.Visible = False
    Case db.Date
      cmb.Tag = "Date"
      txtbox.Visible = False
      vlubox.Visible = False
      dtbox.Visible = True
    Case db.String
      cmb.Tag = "String"
      txtbox.Visible = True
      vlubox.Visible = False
      dtbox.Visible = False
    Case db.Boolean
      cmb.Tag = "Value"
      txtbox.Visible = False
      vlubox.Visible = True
      dtbox.Visible = False
  End Select

End

Public Sub cmbfield_Click()

  GetFieldDataType(cmbfield, txtvalue1, ValueBox1, DateBox1)

End

Public Sub cmbfield2_Click()

  GetFieldDataType(cmbfield2, txtvalue2, ValueBox2, DateBox2)

End

Public Sub cmbfield3_Click()

  GetFieldDataType(cmbfield3, txtvalue3, ValueBox3, DateBox3)

End

Public Sub cmbfield4_Click()

  GetFieldDataType(cmbfield4, txtvalue4, ValueBox4, DateBox4)

End

Private Sub GetFieldList()

  Dim i As Integer
  Dim xList As String[]

  xList = New String[]
  For i = 0 To ListView1.List.Count - 1
    If ListView1.IsSelected(i) Then
      If ListView1.List[i] = cmbdistinct.Text Then
        xList.Add("DISTINCT(" & ListView1.List[i] & ")")
      Else
        xList.Add(ListView1.List[i])
      Endif
    Endif
  Next
  $SSQLFields = xList

End

Private Function GetSQLColumns() As String[]

  Dim xFldList As String[]
  Dim i As Integer

  GetFieldList()
  modCustPatient.FillNewCOlumnCollection(Me.Tag)
  $newColumn = modCustPatient.CustomNewColumnsTitle(Me.Tag)
  xFldList = $SSQLFields.Copy()
  If modDBApp.GetFIeldsinTable(cmbtable.Text, True, modDatabase.$syConn).Exist("fldencounterval") = True Then
    If $newColumn.Count Then
      For i = 0 To $newColumn.Count - 1
        xFldList.Add("fldencounterval")
      Next
    Endif
  Endif
  Return xFldList

End

Private Function ExecuteQuery(xFldList As String[]) As Result

  Dim res As Result
  Dim sql As String
  Dim xx1 As Variant
  Dim xx2 As Variant
  Dim xx3 As Variant
  Dim xx4 As Variant
  Dim xList As String[]
  Dim xtables As String[] = ["tblkey", "tblnewkey", "tbluser"]
  Dim xtbl As String
  Dim xextra As String

  sql = ""
  If chkselect.Value = True Then
    sql = modDBApp.GetSecureSQL(Trim(txtselect.Text))
    sql = Replace(sql, "fldpic", "CONVERT(fldpic USING utf8) as fldpic")
  Else
    sql = Subst("&1 FROM &2", xFldList.Join(","), cmbtable.Text)
    sql = Replace(sql, "fldpic", "CONVERT(fldpic USING utf8) as fldpic")
    txtselect.Text = sql
  Endif
  For Each xtbl In xtables
    If InStr(sql, xtbl) Then
      Message.Warning("Unauthorised access", ("OK"))
      sql = Replace(sql, xtbl, "")
    Endif
  Next

  If cmbfield.Tag = "Value" Then
    xx1 = ValueBox1.Value
  Else If cmbfield.Tag = "String" Then
    xx1 = txtvalue1.Text
  Else If cmbfield.Tag = "Date" Then
    xx1 = DateBox1.Value
  Endif
  If cmbfield2.Tag = "Value" Then
    xx2 = ValueBox2.Value
  Else If cmbfield2.Tag = "String" Then
    xx2 = txtvalue2.Text
  Else If cmbfield2.Tag = "Date" Then
    xx2 = DateBox2.Value
  Endif
  If cmbfield3.Tag = "Value" Then
    xx3 = ValueBox3.Value
  Else If cmbfield3.Tag = "String" Then
    xx3 = txtvalue3.Text
  Else If cmbfield3.Tag = "Date" Then
    xx3 = DateBox3.Value
  Endif
  If cmbfield4.Tag = "Value" Then
    xx4 = ValueBox4.Value
  Else If cmbfield4.Tag = "String" Then
    xx4 = txtvalue4.Text
  Else If cmbfield4.Tag = "Date" Then
    xx4 = DateBox4.Value
  Endif

  If MMain.$WebReport = "Multiple" Then
    xList = modDBApp.GetFIeldsinTable(cmbtable.Text, True, modDatabase.$syConn)
    If xList.Exist("fldhospcode") = True Then
      $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
      $RepoStrA = modDataRepo.GetWhereStringRepoWhr(cmblocation.Text, cmbvalue.Text)
    Else
      $RepoStr = ""
      $RepoStrA = ""
    Endif
  Else
    $RepoStr = ""
    $RepoStrA = ""
  Endif

  xextra = ""
  If chkgroup.Value = True And If cmbgroupfield.Text Then
    xextra = xextra & " GROUP BY " & cmbgroupfield.Text
  Endif
  If chksort.Value = True And If cmbsortfield.Text Then
    If cmbsortype.Text Then
      xextra = xextra & " ORDER BY " & cmbsortfield.Text & " " & cmbsortype.Text
    Else
      xextra = xextra & " ORDER BY " & cmbsortfield.Text
    Endif
  Endif

  If chkwhere.Value = True Then
    If txtwhere.Text Then
      If modMisc.CheckRestrictedKeyStrict(txtwhere.Text) = 0 Then
        res = modDatabase.$syConn.Exec(Subst("select &1 where &2" & $RepoStr & xextra, sql, Trim(txtwhere.Text)))
      Endif
    Else
      res = modDatabase.$syConn.Exec(Subst("select &1 where &2" & $RepoStr & xextra, sql, GetGuidedSqlString()), xx1, xx2, xx3, xx4)                                                                          ''
    Endif
  Else If chkwhere.Value = False
    res = modDatabase.$syConn.Exec(Subst("select &1" & $RepoStrA & xextra, sql))
  Endif

  Return res

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant
  Dim i As Integer

  xxx = xVariable
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      If Column = $ColCount + i Then
        xxx = modCustPatient.NewColValue(Me.Tag, $newColumn[i], xVariable)
      Endif
    Next
  Endif
  Return xxx

End

Public Sub btnshow_Click()

  Dim j As Integer
  Dim ref As ResultField
  Dim xFldList As String[]
  Dim i As Integer

  xFldList = GetSQLColumns()
  $rData = ExecuteQuery(xFldList)

  If $rData.Available Then
    lblrecordcount.Text = "Count: " & $rData.Count
  Else
    lblrecordcount.Text = "Count: 0"
  Endif

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  $ColCount = $SSQLFields.Count

  j = 0
  For Each ref In $rData.Fields
    GridView1.Columns[j].Text = ref.Name
    j = j + 1
  Next
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      GridView1.Columns[$ColCount + i].Text = $newColumn[i]
      GridView1.Columns[$ColCount + i].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    Next
  Endif

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column > $SSQLFields.Count - 1 Then
    If $aMyFields[Column] = "fldpassword" Or If $aMyFields[Column] = "fldpass" Then
      Data.Text = ""
    Else
      Data.Html = modString.TextToHTML(GetGridViewValue(Column, $rData[$aMyFields[Column]]))
    Endif
  Else
    If $aMyFields[Column] = "fldpassword" Or If $aMyFields[Column] = "fldpass" Then
      Data.Text = ""
    Else
      Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])
    Endif
  Endif

End

Public Sub btnexport_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer
  Dim xcol As Integer
  Dim xFldList As String[]

  xcol = InputValue("Encounter Column (if present) is ", "Export GridView", 2)
  If xcol Then
    xHeader = New String[]
    xhide = New Integer[]
    For Column = 0 To GridView1.Columns.Count - 1
      xHeader.Add(GridView1.Columns[Column].Text)
      If GridView1.Columns[Column].Hidden = True Then
        xhide.Add(Column)
      Endif
    Next
    xparam1 = "DB Query"
    xparam2 = modReportVar.GetDateTimeReport(Now(), gb.GeneralDate)
    encColumn = xcol - 1
    $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

    xFldList = GetSQLColumns()

    For Each $rData
      xCollRow = New Collection
      For xColum = 0 To xFldList.Count - 1
        xCollRow.Add(GetGridViewValue(xColum, $rData[xFldList[xColum]]), CStr(xColum))
      Next
      $hGridExportTable.Add($rData.Index, xCollRow)
    Next

    modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())
  Endif

End

Public Sub btnexpoexcel_Click()

  Me.Exec("ExportToExcel('" & GridView1.Name & "', 'xlsx')")

End

Public Sub mnujson_Click()

  Dim xfile As String

  If modBasic.$ExpoRepoUser = True Then
    Message.Info(("Generating Data ...."), ("OK"))
    xfile = modTextDB.ConvertResultToJSON($rData)
    Me.Exec("window.open('" & modPrint.GetFileWebURL(xfile) & "'); ")
  Endif

End

Public Sub mnucsv_Click()

  Dim xfile As String

  If modBasic.$ExpoRepoUser = True Then
    Message.Info(("Generating Data ...."), ("OK"))
    xfile = modTextDB.ConvertResultToCSV($rData, ";", True)
    Me.Exec("window.open('" & modPrint.GetFileWebURL(xfile) & "'); ")
  Endif

End

Public Sub mnusql_Click()

  Dim xfile As String

  If modBasic.$ExpoRepoUser = True Then
    Message.Info(("Generating Data ...."), ("OK"))
    xfile = modTextDB.ConvertResultToSQL($rData, cmbtable.Text)
    Me.Exec("window.open('" & modPrint.GetFileWebURL(xfile) & "'); ")
  Endif

End

Public Sub mnuColumns_Click()

  ' If Message.Question(modGridView.GetColumnsListString(GridView1), ("OK"), ("Setting")) = 2 Then
  '   fmChartSetting.ShowModal
  ' Endif

End

Public Sub mnuenchart_Click()

  Dim xcol As Float
  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim xFldList As String[]
  Dim sOrder As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  xcol = InputValue("Encounter Column (if present) is ", "Univariate Analysis", 2)
  If xcol Then
    hFile = New CUnivariate
    Column = modCustPatient.GetUnivariateColumn(CInt(xcol - 1))
    xFldList = GetSQLColumns()
    xField = xFldList[Column]
    res = ExecuteQuery([xField])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Column, res[xField])
        If xval Then
          hFile.Add(xval)
        Endif
      Next
    Endif

    If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
      sOrder = ListOrder("Select Order", hFile.DistinctValues())
    Endif
    xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
    If xx Then
      modControlSub.OpenBrowser(xx)
    Endif
  Endif

End

Public Sub mnucrosstab_Click()

  Dim xcol As Float
  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant
  Dim xFldList As String[]

  Dim hFile As CBivariate
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  xcol = InputValue("Encounter Column (if present) is ", "CrossTab Analysis", 2)
  If xcol Then
    hFile = New CBivariate
    xFldList = GetSQLColumns()
    Row = modCustPatient.GetCrossVarRow(CInt(xcol - 1))
    xFieRow = xFldList[Row]
    Column = modCustPatient.GetCrossVarColumn(CInt(xcol - 1))
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieRow, xFieColm])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          hFile.Add([xval, yval])
        Endif
      Next
    Endif

    If modCustPatient.$CrossOutcomeType = "Ordinal" Then
      sOrder = ListOrder("Select Order", hFile.DistinctValues())
    Endif
    xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
    If xx Then
      modControlSub.OpenBrowser(xx)
    Endif
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant
  Dim xFldList As String[]

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab

    xFldList = GetSQLColumns()
    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = xFldList[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieRow, xFieColm])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif
      Next
    Endif

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    'modExternal.$ExecValueColl.Clear()
  Endif

End

Public Sub mnugridsummary_Click()

  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String
  Dim xFldList As String[]
  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal
  If Not modCustPatient.$SumGroupColumn Or If Not modCustPatient.$SumValueColumn Then Return

  xFieldList = New String[]
  xFldList = GetSQLColumns()
  If modCustPatient.$SumChapterColumn Then
    ChapCol = xFldList[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = xFldList[modCustPatient.$SumGroupColumn - 1]
  valCol = xFldList[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  res = ExecuteQuery(xFieldList)
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif

  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Table", cmbtable.Text, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Table", cmbtable.Text, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Table", cmbtable.Text, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Table", cmbtable.Text, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

Public Sub mnuaddcolumn_Click()

  Dim hForm As FmAddNewColumn

  hForm = New FmAddNewColumn(Me.Tag)
  hForm.ShowModal

End

Public Sub mnucountuni_Click()

  Dim Column As Integer
  Dim xFieColm As String
  Dim res As Result
  Dim yval As Variant

  Dim xColl As Collection
  Dim xFldList As String[]
  Dim xPath As String

  Column = ListIndex("Column Index", modGridView.GetGridViewColumns(GridView1))
  If Column + 1 > 0 Then
    xFldList = GetSQLColumns()
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieColm])
    xColl = New Collection
    If res.Available Then
      For Each res
        yval = GetGridViewValue(Column, res[xFieColm])
        If yval Then
          If xColl.Exist(CStr(yval)) Then
            xColl[CStr(yval)] = xColl[CStr(yval)] + 1
          Else
            xColl[CStr(yval)] = 1
          Endif
        Endif
      Next
    Endif
    If xColl.Count Then
      xPath = modCHTMLReport.CreateHTMLReportFromCollection(["Variable", "Count"], xColl, GridView1.Columns[Column].Text, modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
    Endif

    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnuexpocolumn_Click()

  Dim hForm As FmCustColumnSet

  hForm = New FmCustColumnSet(Me.Tag)
  hForm.ShowModal

End

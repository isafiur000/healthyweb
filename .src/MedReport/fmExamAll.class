' Gambas class file

Private $ItemList As String[]
Private $rData As Result
Private $aMyFields As String[]
Private $chartLimit As Float[]
Private $SSQLFields As String[]

Private $ColCount As Integer
Private $newColumn As String[]
Private $RepoStr As String
Private $MapColl As Collection

Public Sub _new()

  Dim xhospfld As String

  If MMain.$WebReport = "Multiple" Then
    If modBasic.$HospCode Then
      ' cmblocation.Text = "Hospital"
      cmblocation.Text = modDataRepo.$RepositoryMode
      cmbvalue.Text = modBasic.$HospCode
      pnlocat.Enabled = False
    Else
      cmblocation.List = ["Hospital", "Municipality", "Category", "District", "Province"]
    Endif
    mnuhospsumm.Visible = True
    mnuhospdate.Visible = True
    If MMain.$RepoReportMode = True Then
      mnusearname.Visible = False
    Endif

  Else
    pnlocat.Visible = False
  Endif

  cmbcomp.List = modBasic.$AllCompPerList
  cmbcomp.Text = "%"

  cmbflag.List = ["%", "Normal", "Abnormal"]
  cmbflag.Text = "%"

  cmbcategory.List = GetExtProcExams()
  cmbcategory.Text = "%"

  cmbgender.List = ["Male", "Female", "Other", "%"]
  cmbgender.Text = "%"

  dtfir.Value = Now()
  dtlast.Value = Now()
  rball.Value = True

  xhospfld = modDataRepo.HospitalField()
  $SSQLFields = ["fldid", "fldencounterval", "fldencounterval", modDataRepo.SerialField(), "fldencounterval", "fldencounterval", "fldhead", "fldtime", "fldcomp", modDataRepo.SerialField(), "fldtype", "fldid", "fldabnormal"]
  If xhospfld Then
    $SSQLFields.Add(xhospfld)
  Endif
  chkgrid.Value = True

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

Public Sub cmblocation_Click()

  cmbvalue.Clear()
  If cmblocation.Text Then
    cmbvalue.List = modDataRepo.GetRepoValueListType(cmblocation.Text)
  Endif

End

Private Sub FillListBox()

  Dim xList As String[]

  If $ItemList Then
    If txtcustom.Text Then
      xList = modString.SelectStringArrayToText(txtcustom.Text, $ItemList)
    Else
      xList = $ItemList
    Endif
    If xList Then
      cmbtest.List = xList.Sort()
    Else
      cmbtest.Clear()
    Endif
  Endif

End

Public Sub txtcustom_Change()

  FillListBox()

End

Private Function GetExtProcExams() As String[]

  Dim xlist As String[]
  Dim xx As String
  Dim exmlst As String[]

  exmlst = ["%", "General Parameters", "Triage Examinations", "Essential Examinations", "Physician Examinations", "Nursing Examinations", "Discharge Examinations", "IP Monitoring:%", "---Major Procedure---", "Pre-Operative Exam:%", "Operative Exam:%", "Anaesthesia:%", "Post-Operative Exam:%", "----Delivery----", "Pre Delivery Exam", "On Delivery Exam", "Post Delivery Exam", "Baby Examination", "--Extra Procedure---"]
  xlist = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldprocname) as col from tblgroupproc"))
  If xlist Then
    xlist.Sort()
    For Each xx In xlist
      exmlst.Add("Pre:" & xx & ":%")
      exmlst.Add("On:" & xx & ":%")
      exmlst.Add("Post:" & xx & ":%")
    Next
  Endif
  Return exmlst

End

Public Sub cmbtest_Select()

  If cmbtest.Text Then
    cmbsubtest.List = modFixClinic.GetSubExamArray(cmbtest.Text)
  Endif

End

Public Sub btnload_Click()

  Dim xList As String[]

  cmbtest.Clear()
  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If MMain.$SISHAppMode = "REP" Then
    xList = modControlSub.GetDirectFillresultNoNull(modDatabase.$myConn.Exec("select distinct(flditem) as col from tblrepomapping where fldcategory=&1", "Examination"))
    If xList And If xList.Count Then
      $ItemList = xList
      $MapColl = modDataRepo.GetVariableMappingColl("Examination")
    Else
      $ItemList = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldhead) as col from tblpatientexam where fldsave=&1" & $RepoStr, True))
    Endif

  Else
    If cmbcategory.Text Then
      If cmbcategory.Text = "%" Then
        $ItemList = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldhead) as col from tblpatientexam where fldsave=&1" & $RepoStr, True))
      Else
        $ItemList = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(fldhead) as col from tblpatientexam where fldinput like &1 and fldsave=&2" & $RepoStr, cmbcategory.Text, True))
      Endif
    Endif
  Endif
  FillListBox()

End

Private Function FlagValue() As Boolean

  Dim xx As Boolean

  If cmbflag.Text = "Normal" Then
    xx = False
  Else If cmbflag.Text = "Abnormal" Then
    xx = True
  Endif
  Return xx

End

Private Function GetSQLColumns() As String[]

  Dim xFldList As String[]
  Dim i As Integer

  modCustPatient.FillNewCOlumnCollection(Me.Tag)
  $newColumn = modCustPatient.CustomNewColumnsTitle(Me.Tag)
  xFldList = $SSQLFields.Copy()
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      xFldList.Add("fldencounterval")
    Next
  Endif
  Return xFldList

End

Public Sub mnusearch_Click()

  Dim encid As String
  Dim sql As String
  Dim xFldList As String[]

  encid = GetEncid()
  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If encid Then
    xFldList = GetSQLColumns()
    sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldencounterval=&1 and fldsave=&2" & $RepoStr
    $rData = modDatabase.$syConn.Exec(sql, encid, True)
    FillPatientGrid()
  Endif

End

Public Sub mnusearname_Click()

  Dim xname As String[]
  Dim sql As String
  Dim xFldList As String[]

  xname = InputDoubleText(("Search Patient Name"), ["First Name", "SurName"], ["%", "%"], modBasic.$SurNameList)
  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If xname Then
    xFldList = GetSQLColumns()
    sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldencounterval in(select fldencounterval from tblencounter where fldpatientval in(select fldpatientval from tblpatientinfo where lower(fldptnamefir) like &1 and lower(fldptnamelast) like &2)) and fldsave=&3" & $RepoStr
    $rData = modDatabase.$syConn.Exec(sql, LCase(xname[0]), LCase(xname[1]), True)
    FillPatientGrid()
  Endif

End

Private Function ExecuteQuery(xFldList As String[]) As Result

  Dim sql As String
  Dim xstr As String
  Dim xsql As String

  Dim res As Result
  Dim xradioname As String
  Dim xitem As String

  If rball.Value = True Then
    xradioname = "%"
    xitem = " and fldhead like &3"
  Else
    If chkcustom.Value = True Then
      xradioname = Trim(txtcustom.Text) & "%"
    Else
      xradioname = cmbtest.Text
    Endif
    If $MapColl And If $MapColl.Count Then
      xitem = " and fldhead in(select fldvalue from tblrepomapping where flditem=&3)"
    Else
      xitem = " and fldhead like &3"
    Endif
  Endif

  If xradioname Then
    If Not txtfromage.Value And If Not txttoage.Value And If cmbgender.Text = "%" Then
      xsql = ""

    Else
      If Not txtfromage.Value And If Not txttoage.Value Then
        xsql = " and fldencounterval in(select fldencounterval from tblencounter where fldpatientval in(select fldpatientval from tblpatientinfo where fldptsex like &8))"
      Else
        xstr = modMedReports.GetAgeStringByTable("tblpatientexam", modDatabase.$syConn)
        xsql = " and fldencounterval in(select fldencounterval from tblencounter where fldpatientval in(select fldpatientval from tblpatientinfo where fldptsex like &8 and fldptbirday like &9 and " & xstr & ">=&{10} and " & xstr & "<&{11}))"
      Endif
    Endif

    $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
    If txtsearch.Text Or If chknull.Value Then
      If cmbsubtest.Text Then
        If chknull.Value Then
          sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldtime>=&1 and fldtime<=&2" & xitem & " and fldinput like &4 and fldabnormal like &5 and fldcomp like &6 and fldsave=&7" & xsql & " and fldid in(select fldtestid from tblpatradiosubtest where fldsubtest like &{11} and fldreport IS NULL)" & $RepoStr
        Else
          sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldtime>=&1 and fldtime<=&2" & xitem & " and fldinput like &4 and fldabnormal like &5 and fldcomp like &6 and fldsave=&7" & xsql & " and fldid in(select fldtestid from tblpatradiosubtest where fldsubtest like &{11} and lower(fldreport) like &{12})" & $RepoStr                              ''
        Endif
        res = modDatabase.$syConn.Exec(sql, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), xradioname, cmbcategory.Text, FlagValue(), cmbcomp.Text, True, cmbgender.Text, "%", 365 * txtfromage.Value, 365 * txttoage.Value, cmbsubtest.Text, LCase(txtsearch.Text))
      Else
        If chknull.Value Then
          sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldtime>=&1 and fldtime<=&2" & xitem & " and fldinput like &4 and fldabnormal like &5 and fldcomp like &6 and fldsave=&7" & xsql & " and fldreportquali IS NULL" & $RepoStr
        Else
          sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldtime>=&1 and fldtime<=&2" & xitem & " and fldinput like &4 and fldabnormal like &5 and fldcomp like &6 and fldsave=&7" & xsql & " and lower(fldreportquali) like &{11}" & $RepoStr                              ''
        Endif
        res = modDatabase.$syConn.Exec(sql, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), xradioname, cmbcategory.Text, FlagValue(), cmbcomp.Text, True, cmbgender.Text, "%", 365 * txtfromage.Value, 365 * txttoage.Value, LCase(txtsearch.Text))
      Endif
    Else
      sql = "select " & xFldList.Join(",") & " from tblpatientexam where fldtime>=&1 and fldtime<=&2" & xitem & " and fldinput like &4 and fldabnormal like &5 and fldcomp like &6 and fldsave=&7" & xsql & $RepoStr                            ''
      res = modDatabase.$syConn.Exec(sql, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), xradioname, cmbcategory.Text, FlagValue(), cmbcomp.Text, True, cmbgender.Text, "%", 365 * txtfromage.Value, 365 * txttoage.Value)
    Endif
  Endif
  Return res

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant
  Dim i As Integer

  If Column = 2 Then
    xxx = modPatient.GetPatientNameByEnc(xVariable, modDatabase.$syConn)
  Else If Column = 3 Then
    xxx = modMedReports.GetPatientPastAgeString("tblpatientexam", xVariable)
  Else If Column = 4 Then
    xxx = modPatient.GetPatientSex(xVariable, modDatabase.$syConn)
  Else If Column = 5 Then
    xxx = modPatient.GetPatientNoByEnc(xVariable)
  Else If Column = 6 Then
    If $MapColl And If $MapColl.Count Then
      If $MapColl[xVariable] Then
        xxx = $MapColl[xVariable]
      Else
        xxx = xVariable
      Endif
    Else
      xxx = xVariable
    Endif
  Else If Column = 7 Then
    xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
  Else If Column = 9 Then
    If cmbsubtest.Text Then
      If chkquanti.Value = True Then
        xxx = GetSubExamValue(xVariable, cmbsubtest.Text)
      Else
        xxx = modString.TextToHTML(GetSubExamValue(xVariable, cmbsubtest.Text))
      Endif
    Else
      If chkquanti.Value = True Then
        xxx = modClinic.GetExamValueSubString(xVariable)
      Else
        xxx = modString.TextToHTML(modClinic.GetExamValueSubString(xVariable))
      Endif
    Endif
  Else If Column = 12 Then
    xxx = modMisc.GetGridIcon(xVariable)
  Else If Column = 13 Then
    xxx = modDataRepo.GetHospitalTextLabel(xVariable)
  Else
    xxx = xVariable
  Endif

  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      If Column = $ColCount + i Then
        xxx = modCustPatient.NewColValue(Me.Tag, $newColumn[i], xVariable)
      Endif
    Next
  Endif
  Return xxx

End

Public Sub btnrefresh_Click()

  Dim xFldList As String[]

  TabStrip1.Index = 0
  If chkexcoutlier.Value = True Then
    $chartLimit = InputDoubleVal(("Select Limits for Frequency Chart"), ["Lower Value", "Upper Value"], [0, 0])
  Endif
  xFldList = GetSQLColumns()
  $rData = ExecuteQuery(xFldList)
  If $rData.Available Then
    lblrecordcount.Text = "Count: " & $rData.Count
  Else
    lblrecordcount.Text = "Count: 0"
  Endif

  If chkgrid.Value = True Then
    FillPatientGrid()
  Endif

  If chkchart.Value = True Then
    FillItemChartQTY()
  Endif

  If chkchfreq.Value = True Then
    FillItemFreqChart()
  Endif

End

Private Sub FillPatientGrid()

  Dim i As Integer

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  $ColCount = $SSQLFields.Count
  With GridView1
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(200 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Width = CStr(200 * modBasic.$AppWidthRatio) & "px"
    .Columns[10].Hidden = True
    .Columns[11].Hidden = True
    .Columns[12].Width = CStr(25 * modBasic.$AppWidthRatio) & "px"

    .Columns[1].Text = "EncID"
    .Columns[2].Text = "Name"
    .Columns[3].Text = "Age"
    .Columns[4].Text = "Gender"
    .Columns[5].Text = "PatientNo"
    .Columns[6].Text = "Examination"
    .Columns[7].Text = "DateTime"
    .Columns[8].Text = "Location"
    .Columns[9].Text = "Observation"
    .Columns[12].Text = "Flag"

    If $newColumn.Count Then
      For i = 0 To $newColumn.Count - 1
        .Columns[$ColCount + i].Text = $newColumn[i]
        .Columns[$ColCount + i].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      Next
    Endif
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 9 Then
    Data.Html = GetGridViewValue(Column, $rData[$aMyFields[Column]])
  Else If Column = 12 Then
    Data.Html = modString.GetImageForHTMLGrid(GetGridViewValue(Column, $rData[$aMyFields[Column]]), "50%", "50%")
    Data.Text = ""
  Else
    If Column > $SSQLFields.Count - 1 Then
      Data.Html = modString.TextToHTML(GetGridViewValue(Column, $rData[$aMyFields[Column]]))
    Else
      Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])
    Endif
  Endif

End

''---------------------------------------------- Chart --------------------------------------------------
Private Sub FillItemChartQTY()

  Dim xLst As String[]
  Dim sFile As String

  xLst = New String[]
  For Each $rData
    If Not modBasic.$HospCode And If MMain.$WebReport = "Multiple" Then
      If $rData["fldabnormal"] = True Then
        xLst.Add($rData["fldhospcode"] & gb.Tab & "Abnormal")
      Else
        xLst.Add($rData["fldhospcode"] & gb.Tab & "Normal")
      Endif
    Else
      If $rData["fldabnormal"] = True Then
        xLst.Add(Format(DateDiff(dtfir.Value, $rData["fldtime"], modChart.GetDateIntegerFromSetting()), "0#.#") & gb.Tab & "Abnormal")
      Else
        xLst.Add(Format(DateDiff(dtfir.Value, $rData["fldtime"], modChart.GetDateIntegerFromSetting()), "0#.#") & gb.Tab & "Normal")
      Endif
    Endif
  Next

  sFile = Temp()
  File.Save(sFile, xLst.Join(gb.NewLine))
  btnstats.Tag = sFile
  ' PictureBox1.Tag = "ExamQTY"
  If modBasic.$ChartExecStat = "PSPP" Then
    modImage.StretchtPictureToBox(PictureBox1, modChart.ProportionChart(sFile, "Exam Count"))
  Else
    modImage.StretchtPictureToBox(PictureBox1, modChart.ProportionChart(sFile, "Exam Count"))
  Endif

End

Public Sub btnexport_Click()

  ' Me.Exec("printJS('" & PictureBox1.Tag & "', 'image')")
  Me.Exec("window.open('" & PictureBox1.Image & "'); ")

End

Public Sub btnstats_Click()

  If modBasic.$ChartExecStat = "PSPP" Then
    modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("crosstab", btnstats.Tag))
  Else
    modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("crosstab", btnstats.Tag))
  Endif

End

''-------------------------- freq chart -------------------------------
Private Sub FillItemFreqChart()

  Dim xLst As String[]
  Dim xval As String

  xLst = New String[]
  For Each $rData
    If $rData["fldtype"] = "Quantitative" Then
      xval = modClinic.GetExamValueByID($rData["fldid"])
      If chkexcoutlier.Value = True Then
        If $chartLimit Then
          If CFloat(xval) >= $chartLimit[0] And If CFloat(xval) <= $chartLimit[1] Then
            xLst.Add(Format(xval, gb.Fixed))
          Endif
        Else
          xLst.Add(Format(xval, gb.Fixed))
        Endif
      Else
        xLst.Add(Format(xval, gb.Fixed))
      Endif
    Endif
  Next
  If xLst.Count Then
    MakeFreqIntervalData(cmbtest.Text, xLst, PictureBox2)
  Endif

End

Private Sub MakeFreqIntervalData(sItem As String, xLst As String[], pictbox As WebImage)

  Dim sFile As String
  Dim ximg As String

  sFile = Temp()
  File.Save(sFile, xLst.Join(gb.NewLine))
  ' pictbox.Tag = sItem
  If modBasic.$ChartExecStat = "PSPP" Then
    ximg = modPSPP.CreatePSPPStatFIle("frequency", sFile)
  Else
    ximg = modChart.FrequencyChart(sFile, sItem & " : Frequency Distribution")
  Endif
  modImage.StretchtPictureToBox(pictbox, ximg)
  btnstats2.Tag = sFile

End

Public Sub btnexport2_Click()

  ' Me.Exec("printJS('" & PictureBox2.Tag & "', 'image')")
  Me.Exec("window.open('" & PictureBox2.Image & "'); ")

End

Public Sub btnstats2_Click()

  Dim hForm As Fmgnustat

  If modBasic.$ChartExecStat = "PSPP" Then
    modControlSub.OpenBrowser(modPSPP.CreatePSPPStatFIle("statistics", btnstats2.Tag))
  Else
    hForm = New Fmgnustat(btnstats2.Tag)
    hForm.ShowModal
  Endif

End

''----------------------------------------- Gridview menu ---------------------------
' Public Sub GridView1_Menu()
'
'   mnugrid.Popup
'
' End
'
Public Sub mnuColumns_Click()

  If Message.Question(modGridView.GetColumnsListString(GridView1), ("OK"), ("Setting")) = 2 Then
    fmChartSetting.ShowModal
  Endif

End

Public Sub mnuenchart_Click()

  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim xFldList As String[]
  Dim sOrder As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  xFldList = GetSQLColumns()
  hFile = New CUnivariate
  Column = modCustPatient.GetUnivariateColumn(1)
  xField = xFldList[Column]
  res = ExecuteQuery([xField])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Column, res[xField])
      If xval Then
        hFile.Add(xval)
      Endif
    Next
  Endif

  If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrosstab_Click()

  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hFile As CBivariate
  Dim xFldList As String[]
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  xFldList = GetSQLColumns()
  hFile = New CBivariate
  Row = modCustPatient.GetCrossVarRow(1)
  xFieRow = xFldList[Row]
  Column = modCustPatient.GetCrossVarColumn(1)
  xFieColm = xFldList[Column]
  res = ExecuteQuery([xFieRow, xFieColm])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Row, res[xFieRow])
      yval = GetGridViewValue(Column, res[xFieColm])
      If xval And If yval Then
        hFile.Add([xval, yval])
      Endif
    Next
  Endif

  If modCustPatient.$CrossOutcomeType = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnuregression_Click()

  Dim xx As String
  Dim res As Result
  Dim xFieldList As String[]

  Dim DepCol As Integer
  Dim Indep1Col As Integer
  Dim Indep2Col As Integer
  Dim Indep3Col As Integer
  Dim Indep4Col As Integer
  Dim Indep5Col As Integer

  Dim xDepField As String
  Dim xIndep1Field As String
  Dim xIndep2Field As String
  Dim xIndep3Field As String
  Dim xIndep4Field As String
  Dim xIndep5Field As String

  Dim Depvalue As Variant
  Dim Indep1Val As Variant
  Dim Indep2Val As Variant
  Dim Indep3Val As Variant
  Dim Indep4Val As Variant
  Dim Indep5Val As Variant

  Dim DepData As Variant[]
  Dim Indep1Data As Variant[]
  Dim Indep2Data As Variant[]
  Dim Indep3Data As Variant[]
  Dim Indep4Data As Variant[]
  Dim Indep5Data As Variant[]
  Dim xFldList As String[]

  xFldList = GetSQLColumns()
  Message.Info(("Generating Report ...."), ("OK"))
  xFieldList = New String[]
  DepData = New Variant[]
  Indep1Data = New Variant[]
  Indep2Data = New Variant[]
  Indep3Data = New Variant[]
  Indep4Data = New Variant[]
  Indep5Data = New Variant[]

  DepCol = modCustPatient.GetRegressionDepVal(1)
  xDepField = xFldList[DepCol]
  xFieldList.Add(xDepField)

  If modCustPatient.$RegVar1UseGridVal = "Yes" Or If modCustPatient.$RegVar1Variable Or If modCustPatient.$RegVar1SQLText Then
    Indep1Col = modCustPatient.GetRegressionVar1Val(1)
    xIndep1Field = xFldList[Indep1Col]
    xFieldList.Add(xIndep1Field)
  Endif
  If modCustPatient.$RegVar2UseGridVal = "Yes" Or If modCustPatient.$RegVar2Variable Or If modCustPatient.$RegVar2SQLText Then
    Indep2Col = modCustPatient.GetRegressionVar2Val(1)
    xIndep2Field = xFldList[Indep2Col]
    xFieldList.Add(xIndep2Field)
  Endif
  If modCustPatient.$RegVar3UseGridVal = "Yes" Or If modCustPatient.$RegVar3Variable Or If modCustPatient.$RegVar3SQLText Then
    Indep3Col = modCustPatient.GetRegressionVar3Val(1)
    xIndep3Field = xFldList[Indep3Col]
    xFieldList.Add(xIndep3Field)
  Endif
  If modCustPatient.$RegVar4UseGridVal = "Yes" Or If modCustPatient.$RegVar4Variable Or If modCustPatient.$RegVar4SQLText Then
    Indep4Col = modCustPatient.GetRegressionVar4Val(1)
    xIndep4Field = xFldList[Indep4Col]
    xFieldList.Add(xIndep4Field)
  Endif
  If modCustPatient.$RegVar5UseGridVal = "Yes" Or If modCustPatient.$RegVar5Variable Or If modCustPatient.$RegVar5SQLText Then
    Indep5Col = modCustPatient.GetRegressionVar5Val(1)
    xIndep5Field = xFldList[Indep5Col]
    xFieldList.Add(xIndep5Field)
  Endif

  res = ExecuteQuery(xFieldList)

  If res.Available Then
    For Each res
      Depvalue = GetGridViewValue(DepCol, res[xDepField])
      If xIndep1Field Then
        Indep1Val = GetGridViewValue(Indep1Col, res[xIndep1Field])
      Else
        Indep1Val = "__"
      Endif
      If xIndep2Field Then
        Indep2Val = GetGridViewValue(Indep2Col, res[xIndep2Field])
      Else
        Indep2Val = "__"
      Endif
      If xIndep3Field Then
        Indep3Val = GetGridViewValue(Indep3Col, res[xIndep3Field])
      Else
        Indep3Val = "__"
      Endif
      If xIndep4Field Then
        Indep4Val = GetGridViewValue(Indep4Col, res[xIndep4Field])
      Else
        Indep4Val = "__"
      Endif
      If xIndep5Field Then
        Indep5Val = GetGridViewValue(Indep5Col, res[xIndep5Field])
      Else
        Indep5Val = "__"
      Endif

      If Depvalue And If Indep1Val And If Indep2Val And If Indep3Val And If Indep4Val And If Indep5Val Then
        modCustPatient.AddFormatRegressionDepToList(DepData, Depvalue)
        modCustPatient.AddFormatRegressionVar1ToList(Indep1Data, Indep1Val)
        modCustPatient.AddFormatRegressionVar2ToList(Indep2Data, Indep2Val)
        modCustPatient.AddFormatRegressionVar3ToList(Indep3Data, Indep3Val)
        modCustPatient.AddFormatRegressionVar4ToList(Indep4Data, Indep4Val)
        modCustPatient.AddFormatRegressionVar5ToList(Indep5Data, Indep5Val)
      Endif
    Next
  Endif

  xx = modPSPP.RegressionChartGridNew(DepData, Indep1Data, Indep2Data, Indep3Data, Indep4Data, Indep5Data)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim xFldList As String[]
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  xFldList = GetSQLColumns()
  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab

    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = xFldList[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieRow, xFieColm])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif
      Next
    Endif

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    'modExternal.$ExecValueColl.Clear()
  Endif

End

Public Sub mnugridsummary_Click()

  Dim xx As String
  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String
  Dim xFldList As String[]
  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal
  If Not modCustPatient.$SumGroupColumn Or If Not modCustPatient.$SumValueColumn Then Return

  xFldList = GetSQLColumns()
  xFieldList = New String[]
  If modCustPatient.$SumChapterColumn Then
    ChapCol = xFldList[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = xFldList[modCustPatient.$SumGroupColumn - 1]
  valCol = xFldList[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  res = ExecuteQuery(xFieldList)
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif

  xx = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Report Summary", xx, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

Public Sub mnurepo_Click()

  Dim xPath As String

  If GridView1.Selection.Count Then
    $rData.MoveTo(GridView1.Selection[0])
    xPath = modCHTMLPatient.ShowPatientExaminationgReport($rData["fldencounterval"])
    modControlSub.OpenHTMLPreview($rData["fldencounterval"], xPath, "ReportSize")
  Endif

End

''--------------------------------------- Report ------------------------------------
Public Sub btnfullrep_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer
  Dim xcellval As Variant

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer

  Dim xFldList As String[]

  xHeader = New String[]
  xhide = New Integer[]
  For Column = 0 To GridView1.Columns.Count - 1
    xHeader.Add(GridView1.Columns[Column].Text)
    If GridView1.Columns[Column].Hidden = True Then
      xhide.Add(Column)
    Endif
  Next
  xparam1 = "Examination Report : " & cmbcomp.Text
  xparam2 = modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  encColumn = 1
  $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

  xFldList = GetSQLColumns()

  For Each $rData
    xCollRow = New Collection
    For xColum = 0 To xFldList.Count - 1
      xcellval = GetGridViewValue(xColum, $rData[xFldList[xColum]])
      If xcellval = "icons/true.svg" Then
        xCollRow.Add("Abnormal", CStr(xColum))
      Else If xcellval = "icons/false.svg" Then
        xCollRow.Add("Normal", CStr(xColum))
      Else
        xCollRow.Add(xcellval, CStr(xColum))
      Endif
    Next
    $hGridExportTable.Add($rData.Index, xCollRow)
  Next

  modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())

End

Public Sub btnexpoexcel_Click()

  Me.Exec("ExportToExcel('" & GridView1.Name & "', 'xlsx')")

End

Public Sub dtnepfir_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfir.Value))
  If xx Then
    dtfir.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub dtneplast_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtlast.Value))
  If xx Then
    dtlast.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Private Sub ShowSummReport(sField As String)

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Examination", [dtfir.Value, dtlast.Value])
  If xdate Then
    xPath = modCHTMLDate.SummaryStatReport(modDatabase.$syConn, "tblpatientexam", "fldid", sField, "fldtime", xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text, "fldsave", True)
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnusection_Click()

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Examination", [dtfir.Value, dtlast.Value])
  If xdate Then
    xPath = modCHTMLDate.SummarySectionStatReport(modDatabase.$syConn, "tblpatientexam", modDataRepo.SerialField(), "fldhead", "fldcategory", "tblexam", "fldexamid", "fldtime", xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text, "fldsave", True)
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnusumtestname_Click()

  ShowSummReport("fldhead")

End

Public Sub mnusumtype_Click()

  ShowSummReport("fldabnormal")

End

Public Sub mnusumrepouser_Click()

  ShowSummReport("flduserid")

End

Public Sub mnusumethod_Click()

  ShowSummReport("fldmethod")

End

Public Sub mnuhospsumm_Click()

  ShowSummReport("fldhospcode")

End

Private Sub ShowSummDateReport(sField As String)

  Dim xPath As String
  Dim xdate As Date[]

  xdate = DoubleDates("Select Dates", "Examination", [dtfir.Value, dtlast.Value], 1)
  If xdate Then
    xPath = modCHTMLDate.SummaryStatDateWiseReport(modDatabase.$syConn, "tblpatientexam", modDataRepo.SerialField(), sField, "fldtime", xdate[0], xdate[1], cmblocation.Text, cmbvalue.Text, "fldsave", True)
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnudtexamname_Click()

  ShowSummDateReport("fldhead")

End

Public Sub mnudtmethod_Click()

  ShowSummDateReport("fldmethod")

End

Public Sub mnudtobserv_Click()

  ShowSummDateReport("fldabnormal")

End

Public Sub mnudtrepouser_Click()

  ShowSummDateReport("flduserid")

End

Public Sub mnuhospdate_Click()

  ShowSummDateReport("fldhospcode")

End

Public Sub mnufulldata_Click()

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xType As String
  Dim xList As String[]
  Dim Column As Integer
  Dim hdr As String[]
  Dim xFldList As String[]

  Dim xcol As String
  Dim xval As String
  Dim res As Result

  Dim j As Integer
  Dim fldList As String[]

  If cmbtest.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    fldList = GetSQLColumns()
    xFldList = fldList.Copy(0, 10)

    xType = modFixClinic.GetExamtOptionType(cmbtest.Text)
    If xType = "Clinical Scale" Then
      xlist = modAllExam.GetCLinicalScaleGroups("Exam", cmbtest.Text)
    Else If xType = "Left and Right" Then
      xlist = ["LEFT", "RIGHT"]
    Else
      xlist = modFixClinic.GetSubExamArray(cmbtest.Text)
    Endif

    hdr = ["SNo", "EncID", "Name", "Age", "Gender", "PatientNo", "Examination", "DateTime", "Location", "Observation"]
    If xList Then
      hdr.Insert(xList)
    Endif
    If $newColumn.Count Then
      For j = 0 To $newColumn.Count - 1
        hdr.Add($newColumn[j])
      Next
    Endif

    $BillingReport = New CReportHTML(hdr, "", "")
    $BillingReport.UserData.Add("Examination Report : " & cmbtest.Text, "PARAM1")
    $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate), "PARAM2")

    res = ExecuteQuery(xFldList)
    If res.Available Then
      For Each res
        With asx
          .Add(res.Index + 1)
          For Column = 1 To xFldList.Count - 1
            .Add(GetGridViewValue(Column, res[xFldList[Column]]))
          Next
          If xList Then
            For Each xcol In xlist
              If xType = "Clinical Scale" Or If xType = "Left and Right" Then
                xval = GetSubComponentJSON(res[xFldList[9]], xcol)
              Else
                xval = GetSubExamValue(res[xFldList[9]], xcol)
              Endif
              .Add(xval)
            Next
          Endif

          If $newColumn.Count Then
            For j = 0 To $newColumn.Count - 1
              .Add(modCustPatient.NewColValue(Me.Tag, $newColumn[j], res["fldencounterval"]))
            Next
          Endif
        End With
        $BillingReport.Add(asx)
        asx.Clear()
      Next
    Endif

    modControlSub.DisplayReportExport($BillingReport.NewHTMLPath())
  Endif

End

Private Function GetSubComponentJSON(testid As Variant, subtest As String) As String

  Dim res As Result
  Dim xxx As Variant
  Dim xcoll As JSONCollection
  Dim xval As String

  If MMain.$WebEntry = True Then
    res = modDatabase.$syConn.Exec("select fldrepquali from tblpatientexam where fldrepoid=&1", testid)
  Else
    res = modDatabase.$syConn.Exec("select fldrepquali from tblpatientexam where fldid=&1", testid)
  Endif
  If res.Available Then
    If IsNumber(res["fldrepquali"]) Then
      xval = ""
    Else

      Try xxx = JSON.Decode(res["fldrepquali"], True)
      If xxx Then
        If xxx Is JSONCollection Then
          xcoll = xxx
          xval = CStr(xcoll[subtest])
        Else
          xval = ""
        Endif
      Else
        xval = ""
      Endif

    Endif
  Endif
  Return xval

End

Private Function GetSubExamValue(testid As Variant, subtest As String) As String

  Dim res As Result
  Dim res1 As Result
  Dim xx As String

  If MMain.$WebEntry = True Then ''remoteoptimized
    res1 = modDatabase.$syConn.Exec("select fldid,fldhospcode from tblpatientexam where fldrepoid=&1", testid)
    If res1.Available Then
      res = modDatabase.$syConn.Exec("select fldreport from tblpatientsubexam where fldheadid=&1 and fldsubtexam=&2 and fldhospcode=&3", res1["fldid"], subtest, res1["fldhospcode"])
      If res.Available Then
        If res["fldreport"] Then
          xx = res["fldreport"]
        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif
    Endif

  Else
    res = modDatabase.$syConn.Exec("select fldreport from tblpatientsubexam where fldheadid=&1 and fldsubtexam=&2", testid, subtest)
    If res.Available Then
      If res["fldreport"] Then
        xx = res["fldreport"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif

  Endif
  Return xx

End

Public Sub chkchart_Click()

  TabStrip1.Index = 1

End

Public Sub chkchfreq_Click()

  TabStrip1.Index = 2

End

Public Sub mnuaddcolm_Click()

  Dim hForm As FmAddNewColumn

  hForm = New FmAddNewColumn(Me.Tag)
  hForm.ShowModal

End

Public Sub mnucountuni_Click()

  Dim Column As Integer
  Dim xFieColm As String
  Dim res As Result
  Dim yval As Variant
  Dim xList As String[]

  Dim xVar As Variant[]
  Dim xFldList As String[]
  Dim xPath As String

  Column = ListIndex("Column Index", modGridView.GetGridViewColumns(GridView1))
  If Column + 1 > 0 Then
    xFldList = GetSQLColumns()
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieColm])
    xList = New String[]
    If res.Available Then
      For Each res
        yval = GetGridViewValue(Column, res[xFieColm])
        If yval Then
          xList.Add(yval)
        Endif
      Next
    Endif
    If xList.Count Then
      xVar = modString.GetUnivariateSummary(xList)
      xPath = modCHTMLReport.CreateHTMLReportFromArray(["Variable", "Count"], xVar, GridView1.Columns[Column].Text, modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
    Endif

    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnurepomap_Click()

  Dim hForm As FmAddRepMap

  If MMain.$SISHAppMode = "REP" Then
    hForm = New FmAddRepMap("Examination")
    hForm.ShowModal
  Endif

End

Public Sub mnuexpocolumn_Click()

  Dim hForm As FmCustColumnSet

  hForm = New FmCustColumnSet(Me.Tag)
  hForm.ShowModal

End

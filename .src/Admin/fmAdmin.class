' Gambas class file

Private $LockType As String[] = ["Registration", "Invoice", "TempBill", "Journal", "Reference", "Stock", "Voucher", "AdmissionFile", "Backup", "ExecScript", "Purchase", "DataUpload"]
Private $xPath As String

Public Sub _new()

  Me.AddHeader("<meta name='viewport' content='width=device-width, initial-scale=1'>")
  Me.AddJavascriptFile("js/webcontrols.js")
  Me.AddJavascriptFile("js/jquery.min.js")
  Me.AddJavascriptFile("js/print.min.js")
  Me.AddJavascriptFile("js/toastify.js")
  Me.AddJavascriptFile("js/Chart.js")
  Me.AddJavascriptFile("js/tribute.js")
  Me.AddJavascriptFile("js/download.js")
  Me.AddJavascriptFile("js/select2.min.js")

  Me.AddJavascriptFile("js/sketchpad.js")
  ''slow js
  Me.AddJavascriptFile("js/html2pdf.bundle.min.js")
  ' Me.AddJavascriptFile("js/xlsx.full.min.js")
  Me.Font = MMain.$AppFontName
  WebImage1.Image = modHelpVariable.$headerImage
  WebForm.Debug = MMain.$isdebug

  If MMain.$SISHAppMode = "REP" Then  ''remoteoptimized
    mnurepo.Enabled = True
    mnurepomenu.Enabled = True
  Endif

End

Public Sub WebForm_Open()

  If MMain.$WebEntry = True Then
    modDataRepo.$RepositoryMode = MMain.$AppLogCategory
    modBasic.$HospCode = MMain.$AppLogString
  Endif
  modHelpVariable.SetApplicationGUI()
  MMain.GetApplVersionType()

End

Public Sub mnuexit_Click()

  Session.Abandon()
  WebForm.Current = fmLogIn
  Me.Close()

End

Public Sub WebForm_Close()

  modDevice.CamOnClose()
  modDatabase.CloseDatabase()
  modExternal.DeleteFolderRecursive("/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode)
  modExternal.DeleteFolderRecursive(modHelpVariable.AppCacheDir)

End

' Public Sub WebContainer2_Render()
'
'   Print "<iframe src='" & modBasic.$FormLeftURL & "' width='100%' height='100%'></iframe>";
'
' End
'
' Public Sub WebContainer3_Render()
'
'   Print "<iframe src='" & modBasic.$FormRightURL & "' width='100%' height='100%'></iframe>";
'
' End

Public Sub btnquit_Click()

  Session.Abandon()
  WebForm.Current = fmLogIn
  Me.Close()

End

Public Sub btnfullscreen_Click()

  If btnfullscreen.Image = "icon:/small/zoom-normal" Then
    btnfullscreen.Image = "icon:/small/zoom-fit"
    Me.Exec("openFullscreen()")

  Else If btnfullscreen.Image = "icon:/small/zoom-fit" Then
    btnfullscreen.Image = "icon:/small/zoom-normal"
    Me.Exec("closeFullscreen()")

  Endif

End

Public Sub mnuopen_Click()

  If $xPath Then
    Me.Exec("window.open('" & $xPath & "'); ")
  Endif

End

Public Sub btnumlock_Click()

  Dim xPass As String

  xPass = InputPassword("Provide Root Password", "Verification", "")
  If modPassword.GetSuperVerification(modBasic.$lbluser, xPass) = True Then
    mnuSett.Visible = True
    mnuexecute.Visible = True
    mnudbactibity.Visible = True
  Else
    Message.Info("Incorrect Root Password", ("OK"))
  Endif

End

''-------------------------------- Backup --------------------------------
Public Sub mnubackup_Click()

  Dim aPath As String

  Message.Info(("Executing Request ...."), ("OK"))
  aPath = modDatabase.BackUpCurrentDB()
  If aPath Then
    $xPath = modPrint.GetFileWebURL(aPath)
    mnuopen_Click()
  Endif

End

''------------------------------ Update DB ----------------------------------------------------
Public Sub mnupdate_Click()

  modDBTables.$DbFormat = MMain.$SISHAppMode
  Message.Info(("Executing Request ...."), ("OK"))
  modDBGroup.CreateDatabaseForSish(modDatabase.$myConn)
  Me.Exec("Toastify({text: 'Table Creation completed', duration: 3000}).showToast()")

End

Public Sub mnualter_Click()

  modDatabase.AlterDBTablesAdmin()

End

Public Sub mnufiscal_Click()

  Dim sType As String[] = ["Master", "Indoor", "Consult", "Emergency", "LiveBaby", "Delivery"]
  Dim xx As String
  Dim sRange As String[]
  Dim yy As String

  sRange = modLongVar.$FiscalYearFixList
  For Each xx In sType
    For Each yy In sRange
      modAccount.InsertFiscalRangeSelected(xx, yy)
    Next
  Next
  Message.Info(("Update complete"), ("OK"))

End

Public Sub mnualterfields_Click()

  fmAlterTable.ShowModal

End

Public Sub mnuautoid_Click()

  Dim xList As String[] = ["PatientNo", "EncounterID", "InvoiceNo", "ReceiptSaleNo", "InvoiceReturnNo", "ReceiptReturnNo", "DueClearanceNo", "DepositAdjustment", "AdmitFileNo", "BookingNo", "StockNo", "ReferenceNo", "VoucherNo", "LabSampleNo", "RadioSampleNo", "PurchaseRefNo", "JournalNo", "WebPayment", "SSFClaim"]
  Dim xitem As String
  Dim xfiscal As String
  Dim res As Result
  Dim res1 As Result
  Dim res2 As Result
  Dim res3 As Result

  If MMain.$AutoIDFiscal = True Then
    xfiscal = modDate.GetNepaliFiscalYear(Now())
    For Each xitem In xList
      res1 = modDatabase.$myConn.Exec("select fldtype,fldvalue from tblautoid where fldtype=&1 and fldfiscal=&2", xitem, xfiscal)
      If res1.Available = False Then
        res = modDatabase.$myConn.Create("tblautoid")
        res["fldtype"] = xitem
        res["fldfiscal"] = xfiscal
        res["fldvalue"] = 1
        res.Update
      Endif
    Next
    res2 = modDatabase.$myConn.Exec("select MAX(fldstockno) as fldstockno from tblentry")
    If res2.Available Then
      res3 = modDatabase.$myConn.Edit("tblautoid", "fldtype=&1 and fldfiscal=&2", "StockNo", xfiscal)
      res3["fldvalue"] = res2["fldstockno"] + 1
      res3.Update
    Endif

  Else
    For Each xitem In xList
      res1 = modDatabase.$myConn.Exec("select fldtype,fldvalue from tblautoid where fldtype=&1", xitem)
      If res1.Available = False Then
        res = modDatabase.$myConn.Create("tblautoid")
        res["fldtype"] = xitem
        res["fldvalue"] = 1
        res.Update
      Endif
    Next
    res2 = modDatabase.$myConn.Exec("select MAX(fldstockno) as fldstockno from tblentry")
    If res2.Available Then
      res3 = modDatabase.$myConn.Edit("tblautoid", "fldtype=&1", "StockNo")
      res3["fldvalue"] = res2["fldstockno"] + 1
      res3.Update
    Endif
  Endif

  Message.Info(("Update complete"), ("OK"))

End

''collation
Public Sub mnumychanges_Click()

  If Message.Question("All tables collation will be changed to " & modHelpVariable.$SysCollation, ("No"), ("Yes")) = 2 Then
    modDatabase.MySQLSpecificCollation(modDatabase.$myConn)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnucollatsel_Click()

  Dim xList As String[]
  Dim xx As String

  xList = SelectListView("Selected Tables will be changed to " & modHelpVariable.$SysCollation, modDBApp.FillDBTables(modDatabase.$myConn, True), False)
  If xList Then
    For Each xx In xList
      modDBApp.AlterMySQLSpecCollationTable(modDatabase.$myConn, xx)
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

''Repository
Public Sub mnurepo_Click()

  Dim doTables As String[]
  Dim goTables As String[]

  If Message.Question(("Do you really want to update Database structure at your own risk?"), ("No"), ("Yes")) = 2 Then
    doTables = modDatabase.GetRepositoryTables(modDatabase.$myConn)
    goTables = SelectListView("Select Tables to alter", doTables, False)
    If goTables.Count Then
      modDatabase.AlterTableRepository(modDatabase.$myConn, goTables)
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
    Endif
  Endif

End

Public Sub mnuautoindex_Click()

  Dim doTables As String[]
  Dim goTables As String[]
  Dim sTable As String

  doTables = modDBApp.DBRegularTablesSelField(modDatabase.$myConn, ["fldrepoid"])
  goTables = SelectListView("Select Tables to alter", doTables, False)
  For Each sTable In goTables
    modDatabase.SetNewIndexRepository(modDatabase.$myConn, sTable)
  Next
  Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))

End

Public Sub mnuhaisurveil_Click()

  If Message.Question(("Do you really want to update Database structure at your own risk?"), ("No"), ("Yes")) = 2 Then
    modDatabase.AlterTableHAIParam(modDatabase.$myConn, "Add")
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnudrophai_Click()

  If Message.Question(("Do you really want to update Database structure at your own risk?"), ("No"), ("Yes")) = 2 Then
    modDatabase.AlterTableHAIParam(modDatabase.$myConn, "Drop")
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

''IRD Compliance
Public Sub mnuird_Click()

  If Message.Question(("Do you really want to update Database structure at your own risk?"), ("No"), ("Yes")) = 2 Then
    modDatabase.CreateIRDTriggerBilling(modDatabase.$myConn)
    modDatabase.CreateIRDTriggerLockEvent(modDatabase.$myConn)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnuyearlyalter_Click()

  modDatabase.AlterAutoIDToYearly(modDatabase.$myConn)
  Message.Info(("Table Altered"), ("OK"))

End

Public Sub mnuyearlyfiscal_Click()

  Dim xList As String[] = ["InvoiceNo", "ReceiptSaleNo", "InvoiceReturnNo", "ReceiptReturnNo", "DueClearanceNo", "DepositAdjustment"]
  Dim xitem As String
  Dim xfiscal As String
  Dim res2 As Result

  xfiscal = modDate.GetNepaliFiscalYear(Now())
  If xfiscal Then
    For Each xitem In xList
      res2 = modDatabase.$myConn.Edit("tblautoid", "fldtype=&1 and fldfiscal IS NULL", xitem)
      If res2.Available Then
        res2["fldfiscal"] = xfiscal
        res2.Update
      Endif
    Next
    Message.Info(("Completed"), ("OK"))
  Endif

End

Public Sub mnuaddyearval_Click()

  Dim sRange As String[]
  Dim xfiscal As String
  Dim xList As String[] = ["InvoiceNo", "ReceiptSaleNo", "InvoiceReturnNo", "ReceiptReturnNo", "DueClearanceNo", "DepositAdjustment"]
  Dim xitem As String
  Dim res As Result
  Dim res1 As Result

  sRange = modLongVar.$FiscalYearFixList
  xfiscal = InputCombo("Select Fiscal Year", "Fiscal Auto ID", sRange, "", True)
  If xfiscal Then
    For Each xitem In xList
      res1 = modDatabase.$myConn.Exec("select fldtype,fldvalue from tblautoid where fldtype=&1 and fldfiscal=&2", xitem, xfiscal)
      If res1.Available = False Then
        res = modDatabase.$myConn.Create("tblautoid")
        res["fldtype"] = xitem
        res["fldfiscal"] = xfiscal
        res["fldvalue"] = 1
        res.Update
      Endif
    Next
    Message.Info(("Completed"), ("OK"))
  Endif

End

''----------------- Repository ---------------------
Public Sub mnupattag_Click()

  Dim res1 As Result
  Dim res2 As Result
  Dim res3 As Result
  Dim res As Result
  Dim xhospcode As String

  If Message.Question(("Do you really want to update Data in bulk at your own risk?"), ("No"), ("Yes")) = 2 Then
    res = modDatabase.$myConn.Exec("select fldid,fldhospcode from tblpatsubs")
    If res.Available Then
      res.MoveLast
      If res!fldhospcode Then
        xhospcode = res!fldhospcode
        res1 = modDatabase.$myConn.Exec("UPDATE tblpatientinfo SET fldpatientval=CONCAT(tblpatientinfo.fldpatientval,&1) WHERE fldpatientval NOT LIKE &2", xhospcode, "%" & xhospcode)                                      ''
        res2 = modDatabase.$myConn.Exec("UPDATE tblencounter SET fldpatientval=CONCAT(tblencounter.fldpatientval,&1) WHERE fldpatientval NOT LIKE &2", xhospcode, "%" & xhospcode)
        res3 = modDatabase.$myConn.Exec("UPDATE tblpatientbook SET fldpatientval=CONCAT(tblpatientbook.fldpatientval,&1) WHERE fldpatientval NOT LIKE &2", xhospcode, "%" & xhospcode)
      Endif
    Endif
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnucheckold_Click()

  Dim sTabList As String[]
  Dim res As Result
  Dim sTable As String

  If Message.Question(("Do you really want to update Data in bulk at your own risk?"), ("No"), ("Yes")) = 2 Then
    sTabList = modDBApp.DBRegularTablesSelField(modDatabase.$myConn, ["fldencounterval", "xyz"])
    For Each sTable In sTabList
      res = modDatabase.$myConn.Exec(db.Subst("UPDATE &1 SET &2", sTable, "xyz") & "=&1", True)
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

''----------------------------- Repair DB ---------------------------------------
Public Sub mnufixdate_Click()

  Dim tbl As String[] = ["tblentry", "tblpurchase", "tblpurchasebill", "tblstockreturn", "tbltenderlist", "tblpayment", "tblbulksale", "tblpatientinfo", "tblencounter", "tblpatbilldetail"]
  Dim fld As String[] = ["fldexpiry", "fldtime", "fldpurdate", "fldtime", "fldtime", "fldtime", "fldtime", "fldptadmindate", "fldregdate", "fldtime"]
  Dim i As Integer

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    For i = 0 To tbl.Count - 1
      modDBApp.CHnageUniFIeldDefaultDateTime(modDatabase.$myConn, tbl[i], fld[i])
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnuremodate_Click()

  Dim tbl As String[] = ["tblentry", "tblpurchase", "tblpurchasebill", "tblstockreturn", "tbltenderlist", "tblpayment", "tblbulksale", "tblpatientinfo", "tblencounter", "tblpatbilling", "tblpatbilldetail"]
  Dim fld As String[] = ["fldexpiry", "fldtime", "fldpurdate", "fldtime", "fldtime", "fldtime", "fldtime", "fldptadmindate", "fldregdate", "fldtime", "fldtime"]
  Dim i As Integer

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    For i = 0 To tbl.Count - 1
      modDBApp.CHnageUniFIeldNullDefault(modDatabase.$myConn, tbl[i], fld[i])
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnulower_Click()

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    modDBApp.ChangeToLowerCase(modDatabase.$myConn)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnudropnull_Click()

  If Message.Question(("Do you really want to DROP Empty Tables at your own risk?"), ("No"), ("Yes")) = 2 Then
    modDBApp.GetDropEmptyTables(modDatabase.$myConn)
  Endif

End

''----------------------------------------- Index ------------------------------------------
Public Sub mnucrindex_Click()

  Dim hTable As Table

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    For Each hTable In modDatabase.$myConn.Tables
      modDBGroup.UpdateDBIndexes(modDatabase.$myConn, hTable.Name)
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnuselectindex_Click()

  Dim xList As String[]
  Dim xx As String

  xList = SelectListView("Selected Tables will have secondary Index", modDBApp.FillDBTables(modDatabase.$myConn, True), False)
  If xList Then
    For Each xx In xList
      modDBGroup.UpdateDBIndexes(modDatabase.$myConn, xx)
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

Public Sub mnuclrindex_Click()

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    modDBApp.DeleteAllIndex(modDatabase.$myConn)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))
  Endif

End

''--------------- DB Template --------------
Public Sub mnutemp_Click()

  Dim aPath As String

  aPath = Temp()
  Message.Info(("Executing Request ...."), ("OK"))
  File.Save(aPath, modDatabase.$myConn.GetTemplate())
  $xPath = modPrint.GetFileWebURL(aPath)
  mnuopen_Click()

End

Public Sub mnudumpdown_Click()

  fmDumpfile.ShowModal

End

''-------------------------------- Lock-------------------------------------------
Public Sub mnuclock_Click()

  Dim sItem As String

  sItem = InputCombo(("Select Lock Type"), ("Clear Lock"), $LockType, "", True)
  If sItem Then
    modDatabase.$myConn.Delete("tbllock", "fldlock=&1", sItem)
    Message.Info(("Lock Deleted"), ("OK"))
  Endif

End

Public Sub mnulockall_Click()

  Dim res As Result
  Dim xval As String

  If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
    For Each xval In $LockType
      res = modDatabase.$myConn.Create("tbllock")
      res["fldlock"] = xval
      res.Update
    Next
  Endif

Catch
  Message.Warning(Error.Text, ("OK"))

End

''------------------------------------------- DB warming ----------------------------------
Public Sub mnuwarm_Click()

  Message.Info(("Executing Request ...."), ("OK"))
  modDBApp.WarmUpDatabase(modDatabase.$myConn)
  Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Process completed", modBasic.$BalloonDelay))

End

'--------------------------- Create DB ----------------
Public Sub mnusample_Click()

  fmDCreate.ShowModal

End

Public Sub mnudatrans_Click()

  fmDTransfer.ShowModal

End

Public Sub mnudbactiv_Click()

  fmDBChange.ShowModal

End

Public Sub mnucsvimport_Click()

  fmCSVImport.ShowModal

End

Public Sub mnutrans_Click()

  ' fmDataExport.ShowModal

End

Public Sub mnulogview_Click()

  fmLogInfo.ShowModal

End

''----------------- Information ------------------
Public Sub mnucgiall_Click()

  fmCGIInfo.ShowModal

End

Public Sub mnudbvalues_Click()

  fmDBValues.ShowModal

End

Public Sub mnufiledata_Click()

  fmFileValues.ShowModal

End

Public Sub mnualterdrugtable_Click()

  Dim aList As String[]
  Dim xtable As String

  aList = New String[]
  aList.Insert(modRepoSync.$sBrandData)
  aList.Insert(modRepoSync.$sMedSuppData)
  aList.Insert(modRepoSync.$sPrecauData)

  For Each xtable In aList
    modDatabase.UpdateTableDrugInformation(modDatabase.$myConn, xtable)
  Next
  Message.Info("Complete", "OK")

End

Public Sub mnusetup_Click()

  Dim hForm As FmShowSqlite

  If Workspace1.Children.Count Then
    Workspace1.DeleteChildren()
  Endif
  hForm = New FmShowSqlite(Workspace1)

End

' Gambas module file

'NOTE: ------------- Generate ID for from tblautoid
Private Function GetAutoID(sType As String) As Long

  Dim xList As String[] = ["InvoiceNo", "ReceiptSaleNo", "InvoiceReturnNo", "ReceiptReturnNo", "DueClearanceNo", "DepositAdjustment"]
  Dim res As Result
  Dim xx As Long

  If MMain.$AutoIDFiscal = True And If xList.Exist(sType) = True Then
    res = modDatabase.$myConn.Edit("tblautoid", "fldtype=&1 and fldfiscal=&2", sType, modBasic.$FiscalCurYear)
  Else
    res = modDatabase.$myConn.Edit("tblautoid", "fldtype=&1", sType)
  Endif
  xx = res["fldvalue"]
  res["fldvalue"] = xx + 1
  res.Update()
  Return xx
  'donot catch error. Error will rollback

End

Private Function RefSubscript(sCode As String) As String

  Dim xList As String[] = ["DEP", "CAS", "CRE", "PHM", "RET", "DCL", "XXX", "DET", "TMP", "TRE", "TPM", "TPR", "TCL", "TDA", "ARC"]
  Dim xx As String
  Dim rs As Result

  If MMain.$AutoIDFiscal = True And If xList.Exist(sCode) = True Then
    xx = modBasic.$FiscalCurSymbol
  Else
    xx = modBasic.$ReferenceSubs[sCode & ":" & CStr(Date())]
    If Not xx Then
      rs = modDatabase.$myConn.Exec("select fldinvsub from tblinvid where fldinvcode=&1", sCode)
      If rs.Available Then
        If rs["fldinvsub"] Then
          xx = rs["fldinvsub"]
        Else
          xx = ""
        Endif
      Else
        xx = ""
      Endif
    Endif
  Endif
  Return xx

End

''----------- General ----------------------
Private Function CurrentEncounter() As Long

  Dim xx As Long

  xx = GetAutoID("EncounterID")
  Return xx

End

Private Function CurrentPatientNo() As Long

  Dim xx As Long

  xx = GetAutoID("PatientNo")
  Return xx

End

Private Function CurrentVoucherNo() As Long

  Dim xx As Long

  xx = GetAutoID("VoucherNo")
  Return xx

End

Private Function CurrentPurchaseRefNO() As Long

  Dim xx As Long

  xx = GetAutoID("PurchaseRefNo")
  Return xx

End

Private Function CurrentJournalNo() As Long

  Dim xx As Long

  xx = GetAutoID("JournalNo")
  Return xx

End

''----------- Invoice Related ------------------
Private Function CurrentAdvReceiptNo() As Long

  Dim xx As Long

  xx = GetAutoID("ReferenceNo")
  Return xx

End

Private Function CurrentInnvoiceNo() As Long

  Dim xx As Long

  xx = GetAutoID("InvoiceNo")
  Return xx

End

Private Function CurrentTempBillNo() As Long

  Dim xx As Long

  xx = GetAutoID("ReceiptSaleNo")
  Return xx

End

Private Function CurrentInnvoiceReturnNo() As Long

  Dim xx As Long

  xx = GetAutoID("InvoiceReturnNo")
  Return xx

End

Private Function CurrentTempReturnNo() As Long

  Dim xx As Long

  xx = GetAutoID("ReceiptReturnNo")
  Return xx

End

Private Function CurrentClearanceNo() As Long

  Dim xx As Long

  xx = GetAutoID("DueClearanceNo")
  Return xx

End

Private Function CurrentDepoAdjustment() As Long

  Dim xx As Long

  xx = GetAutoID("DepositAdjustment")
  Return xx

End

''--------------- Directly used --------------------
''Public: used in sampling
Public Function CurrentLabNo() As Long

  Dim xx As Long

  xx = GetAutoID("LabSampleNo")
  Return xx

End

''Public: used in Radio referencing
Public Function CurrentRadioNo() As Long

  Dim xx As Long

  xx = GetAutoID("RadioSampleNo")
  Return xx

End

''Public: directly used in stockno
Public Function CurrentStockNo() As Long

  Dim xx As Long

  xx = GetAutoID("StockNo")
  Return xx

End

''Public: directly used as File No
Public Function CurrentAdmitFile() As Long

  Dim xx As Long

  xx = GetAutoID("AdmitFileNo")
  Return xx

End

''Public: directly used in web billing
Public Function CurrentWebPayment() As Long

  Dim xx As Long

  xx = GetAutoID("WebPayment")
  Return xx

End

''Public: directly used in SSF claim
Public Function CurrentSSFClaim() As Long

  Dim xx As Long

  xx = GetAutoID("SSFClaim")
  Return xx

End

'----------- Reference/Invoice Subscript
Private Function InventoryRefSign(BilType As String) As String

  Dim Bll As String

  If BilType = "Stock Transfer" Then
    Bll = "TRN"
  Else If BilType = "Bulk Dispensing" Then
    Bll = "BUL"
  Else If BilType = "Stock Return" Then
    Bll = "SRE"
  Else If BilType = "Stock Adjustment" Then
    Bll = "SAJ"
  Else If BilType = "General" Then
    Bll = "GEN"
  Endif
  Return Bll
  'donot catch error. Error will rollback

End

Private Function AdvReferSign(BilType As String) As String

  Dim Bll As String

  If BilType = "Advance Receipt" Then
    Bll = "ARC"
  Endif
  Return Bll
  'donot catch error. Error will rollback

End

''Public: also used to get Invoice type
Public Function InvSign(BilType As String) As String

  Dim Bll As String

  If BilType = "Cash Deposit" Then
    Bll = "DEP"
  Else If BilType = "Counter Sales" Then
    Bll = "CAS"
  Else If BilType = "Counter Return" Then
    Bll = "CRE"
  Else If BilType = "Pharmacy Sales" Then
    Bll = "PHM"
  Else If BilType = "Pharmacy Return" Then
    Bll = "RET"
  Else If BilType = "Due Clearance" Then
    Bll = "DCL"
  Else If BilType = "Deposit Adjustment" Then  ''not used: just to misguide query
    Bll = "XXX"
  Endif
  Return Bll
  'donot catch error. Error will rollback

End

Public Function ReceiptSign(BilType As String) As String

  Dim Bll As String

  If BilType = "Cash Deposit" Then
    Bll = "DET"
  Else If BilType = "Counter Sales" Then
    Bll = "TMP"
  Else If BilType = "Counter Return" Then
    Bll = "TRE"
  Else If BilType = "Pharmacy Sales" Then
    Bll = "TPM"
  Else If BilType = "Pharmacy Return" Then
    Bll = "TPR"
  Else If BilType = "Due Clearance" Then
    Bll = "TCL"
  Else If BilType = "Deposit Adjustment" Then
    Bll = "TDA"
  Endif
  Return Bll
  'donot catch error. Error will rollback

End

'NOTE:--------------- FINAL STRING TO USE --------------------
Public Function AdvanceReceiptString(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = AdvReferSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentAdvReceiptNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function DepoAdjustmentValue(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = modBillLock.ReceiptSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentDepoAdjustment()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function InvoiceClearanceValue(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = modBillLock.InvSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentClearanceNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function InvoiceSaleString(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = modBillLock.InvSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentInnvoiceNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function ReceiptSaleValue(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = modBillLock.ReceiptSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentTempBillNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function InvoiceReturnString(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = modBillLock.InvSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentInnvoiceReturnNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function ReceiptReturnValue(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = modBillLock.ReceiptSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentTempReturnNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function GetWebReceiptValue(sPref As String) As String

  Dim inv As String

  inv = sPref & "-" & CurrentWebPayment() & modBasic.$HospCode
  Return inv

End

''---------- General -------------------
Public Function ReferenceString(BilType As String) As String

  Dim inv As String
  Dim sCode As String

  sCode = InventoryRefSign(BilType)
  inv = sCode & RefSubscript(sCode) & "-" & CStr(CurrentJournalNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function PurchaseReference() As String

  Dim inv As String

  inv = "PUR" & RefSubscript("PUR") & "-" & CStr(CurrentPurchaseRefNO()) & modBasic.$HospCode
  Return inv

End

Public Function VoucherNumber() As String

  Dim inv As String

  inv = "VNO-" & CStr(CurrentVoucherNo()) & modBasic.$HospCode
  Return inv
  'donot catch error. Error will rollback

End

Public Function EncounterIDValue() As String

  Dim xx As String

  xx = modBasic.$EncIdPrefix & modString.GetZeroStringText(CStr(CurrentEncounter()), modBasic.$EncIdLen) & modBasic.$HospCode
  Return xx

End

Public Function PatientNoValue() As String

  Dim xx As String

  xx = modBasic.$PatNoPrefix & modString.GetZeroStringText(CStr(CurrentPatientNo()), modBasic.$PatNoLen) & modBasic.$HospCode
  Return xx

End

Public Function BookingNoValue() As String

  Dim xx As String

  xx = modBasic.$BookNoPrefix & modString.GetZeroStringText(CStr(GetAutoID("BookingNo")), modBasic.$BookNoLen) & modBasic.$HospCode
  Return xx

End

''----------------- Transection lock
Public Function LockTableForID(sType As String) As Boolean

  Dim res As Result
  Dim xx As Boolean

  res = modDatabase.$myConn.Create("tbllock")
  res["fldlock"] = sType
  res.Update
  xx = True
  modBasic.DebugString("Process Locked for " & sType)
  Return xx

Catch
  xx = False
  If MMain.$IsGUIApp = True Then
    Message.Warning(("Transaction Locked. Type: ") & sType, ("OK"))
  Endif
  Return xx

End

Public Sub ReleaseLockTable(sType As String)

  modDatabase.$myConn.Delete("tbllock", "fldlock=&1", sType)
  modBasic.DebugString("Lock Released for " & sType)

End

Public Function GetCopyBillTypeFromBillNo(billno As String) As String

  Dim xx As String
  Dim xcount As Integer

  If modHelpVariable.$IRDLevel = "Yes" Then
    xcount = modNonMedical.GetInvoicePrintCount(billno)
    If modHelpVariable.$VATBill = "Yes" Then
      If xcount = 1 Then
        xx = "INVOICE"
      Else
        xx = "COPY OF ORIGINAL (" & CStr(xcount - 1) & ")"
      Endif
    Else
      xx = "COPY OF ORIGINAL (" & CStr(xcount) & ")"
    Endif
  Else
    xx = "COPY OF ORIGINAL"
  Endif
  Return xx

End

Public Function FormatFromInvoiceNo(sBillNo As String) As String

  Dim BilType As String

  If sBillNo Like "DEP" & "*" Then
    BilType = "Cash Deposit"
  Else If sBillNo Like "CAS" & "*" Then
    BilType = "Counter Sales"
  Else If sBillNo Like "CRE" & "*" Then
    BilType = "Counter Return"
  Else If sBillNo Like "PHM" & "*" Then
    BilType = "Pharmacy Sales"
  Else If sBillNo Like "RET" & "*" Then
    BilType = "Pharmacy Return"
  Else If sBillNo Like "DCL" & "*" Then
    BilType = "Due Clearance"

  Else If sBillNo Like "DET" & "*" Then
    BilType = "Cash Deposit"
  Else If sBillNo Like "TMP" & "*" Then
    BilType = "Counter Sales"
  Else If sBillNo Like "TRE" & "*" Then
    BilType = "Counter Return"
  Else If sBillNo Like "TPM" & "*" Then
    BilType = "Pharmacy Sales"
  Else If sBillNo Like "TPR" & "*" Then
    BilType = "Pharmacy Return"
  Else If sBillNo Like "TCL" & "*" Then
    BilType = "Due Clearance"
  Else If sBillNo Like "TDA" & "*" Then
    BilType = "Deposit Adjustment"

  Endif
  Return BilType

End

Public Function GetInvoiceFormatNo(sBillNo As String) As String

  Dim BilType As String

  If sBillNo Like "DEP" & "*" Then
    BilType = "Invoice"
  Else If sBillNo Like "CAS" & "*" Then
    BilType = "Invoice"
  Else If sBillNo Like "CRE" & "*" Then
    BilType = "Invoice"
  Else If sBillNo Like "PHM" & "*" Then
    BilType = "Invoice"
  Else If sBillNo Like "RET" & "*" Then
    BilType = "Invoice"
  Else If sBillNo Like "DCL" & "*" Then
    BilType = "Invoice"

  Else If sBillNo Like "DET" & "*" Then
    BilType = "Receipt"
  Else If sBillNo Like "TMP" & "*" Then
    BilType = "Receipt"
  Else If sBillNo Like "TRE" & "*" Then
    BilType = "Receipt"
  Else If sBillNo Like "TPM" & "*" Then
    BilType = "Receipt"
  Else If sBillNo Like "TPR" & "*" Then
    BilType = "Receipt"
  Else If sBillNo Like "TCL" & "*" Then
    BilType = "Receipt"
  Else If sBillNo Like "TDA" & "*" Then
    BilType = "Receipt"

  Endif
  Return BilType

End

''---------- For HMIS Regd ----
Public Function GetHMISRegVal(sType As String) As String

  Dim res As Result
  Dim xx As Long
  Dim xval As String

  res = modDatabase.$myConn.Edit("tblfiscalid", "fldtype=&1 and fldfrom<=&2 and fldend>&2", sType, Now())
  If res.Available Then
    xx = res["fldvalue"]
    xval = res["fldlabel"] & "-" & CStr(xx) & modBasic.$HospCode
    res["fldvalue"] = xx + 1
    res.Update()
  Else
    xval = ""
  Endif
  Return xval
  'donot catch error. Error will rollback

End

''---------- Prefix for Enc box
Public Sub GetInvoicePrefixEnc(sType As String)

  Dim sCode As String

  sCode = modBillLock.InvSign(sType)
  modBasic.$InvoicePrefix = sCode & RefSubscript(sCode) & "-"

End

' Gambas class file

''PATIENT PROFILE
Private $UserRestrictPat As String[]

''MAIN FORM
Private hPatient1 As FmBillingEntry
Private $rData As Result
Private $aMyFields As String[]
Private $rData1 As Result
Private $aMyFields1 As String[]
Private $HideErr As Boolean
Private $HideDos As Boolean
Private $F12Lock As Boolean
Private $MiniCalc As String

Private $BillingOption As String
' Private $DefaultBillingMode As String
Private $sTatus As String
Private $DiscPackage As String
Private $PatientNum As String
Private $xNHISCode As String
Private $xFinClear As Boolean

Private $MSurgicalLst As String[]
Private $ExtraItemLst As String[]
Private $OralBrandLst As String[]
Private $OralGenricLst As String[]
Private $InjBrandLst As String[]
Private $InjGenricLst As String[]
Private $LiqBrandLst As String[]
Private $LiqGenricLst As String[]

Private $OPDRoute As String[]
Private $ShowReview As String
Private xYear As Integer
' Private $xBillType As String
Private $AdvPayment As String
Private $DefaultPharmType As String
Private $pharmLock As Boolean
Private $ClinicianLst As String[]
Private $HiCappingVar As Collection
Private $HiCapAPIView As Variant[]

Public Sub _new()

  Dim xcomp As String

  $BillingOption = modBasic.$BillPharmSalesOption
  hPatient1 = New FmBillingEntry(Panel4)
  If modBasic.$AppCachePatientDemographics = "Yes" Then
  Else
    modGeneralMain.RemovePatientCacheSelected("PatientData")
  Endif

  ''PATIENT PROFILE
  cmbpatheightunit.List = ["cm", "inch", "foot"]
  $UserRestrictPat = modBasic.$ClinicDisableCompo
  If MMain.$SISHAppMode = "HIS" Then
    txtbedno.ReadOnly = True
  Endif

  ''MAIN FORM
  $OPDRoute = modMedicine.AllComboRoute()
  cmbroute.List = $OPDRoute
  cmbfreq.List = modMedicine.FrequencyCombo()
  cmbbillmode.List = modBasic.$BillBillingMode
  If modBasic.$BillAlterPackage = "Yes" Then
    cmbdisctype.List = modBasic.$BillDiscountAll
  Else
    cmbdisctype.List = modBasic.$BillDiscountCash
  Endif
  $ClinicianLst = modGeneral.GetClinicianCodeList()
  modStockSub.DisplayDefaultDispensingMode(rbrand, rbgeneric)
  $ShowReview = modBasic.$MedErrorEnable
  If modBasic.$BillPharmacyOrigin Then
    cmborigin.Text = modBasic.$BillPharmacyOrigin
    cmborigin.Enabled = False
  Else
    cmborigin.List = modBasic.$AllCompList
    xcomp = modSettings.ShowSettingFromFIle("Pharmacy/OriginCompID")
    If xcomp Then
      cmborigin.Text = xcomp
    Else
      cmborigin.Text = "%"
    Endif
  Endif
  If modBasic.$BillAddDiagnosis = "Yes" Or If modBasic.$BillAddDiagnosis = "Force" Or If modBasic.$BillAddDiagnosis = "ForceAll" Then
    pnldiagnosis.Visible = True
    If modBasic.$BillLockDiagnosis = "Yes" Then
      pnldiagnosis.Enabled = False
    Endif
  Endif
  If modBasic.$BillPharmSelection = "Multiple" Then
    btngroup.Visible = False
  Endif

  rborder.Value = True
  rbvalue.Value = True
  IniateCategoryPharmArray()

  If $UserRestrictPat Then
    RestrictUserAccessPat()
  Endif
  $F12Lock = False
  $DefaultPharmType = modSettings.ShowSettingFromFIle("BillingSettings/DefaultPharmacyType")
  $HiCappingVar = New Collection

  If modBasic.$MedNoRegimen = "Enable" Then
    txtmeddose.Visible = False
    btnmedfreq.Visible = False
    btnmeddays.Visible = False
    btnadvice.Visible = False
  Endif

  txtencid.SetFocus

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

''====================== PATIENT PROFILE =================================
Public Sub txtencid_Activate()

  GetEncounterValue()

End

Public Sub btnwebcam_Click()

  If txtencid.Text Then
    GetEncounterValue()
  Else
    txtencid.Text = GetEncid()
  Endif

End

Public Sub btnipnum_Click()

  Dim res As Result
  Dim xx As String

  xx = InputBox("Provide Inpatient (IP) Number of Patient", "Encounter", "")
  If xx Then
    res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldadmitid=&1 ORDER BY fldregdate", xx)
    If res.Available Then
      res.MoveLast
      txtencid.Text = res["fldencounterval"]
      txtencid.SetFocus
    Else
      Message.Info("IP Number Not Registered", "OK")
    Endif
  Endif

End

Private Sub GetEncounterValue()

  Dim res As Result
  Dim xbirdate As Date

  If Not txtpatientname.Text Then
    If Not txtencid.Text Then Return
    If modBasic.$EncIdPrefix And If txtencid.Text = modBasic.$EncIdPrefix Then
      txtencid.SetFocus
      Return
    Endif

    ' If modPatientSub.LockEncounterDesk(Trim(txtencid.Text)) = False Then
    '   txtencid.Text = ""
    '   Message.Warning(("Encounter Locked"), ("OK"))
    '   ' Balloon.Delay = modBasic.$BalloonDelay
    '   txtencid.SetFocus
    ' Endif

    dtdob.Tag = ""
    If txtencid.Text Then
      If txtencid.Text = modBasic.$EncIdPrefix Then
      Else
        modSettings.SaveValuesToLog("LastValue/Encounter", Trim(txtencid.Text))
      Endif
      res = modDatabase.$myConn.Exec("select fldpatientval from tblencounter where fldencounterval=&1", Trim(txtencid.Text))
      If res.Available = False Then
        modLinkDB.CheckEncDataRemote(Trim(txtencid.Text))
        txtencid.SetFocus
      Else
        txtpatientname.Text = modPatient.GetPatientNameByEnc(Trim(txtencid.Text))
        If txtpatientname.Text Then
          txtgender.Text = modPatient.GetPatientSex(Trim(txtencid.Text))
          txtpatientaddress.Text = modPatient.GetPatientAddressByEnc(Trim(txtencid.Text))
          xbirdate = modPatient.GetPatientBirthDay(Trim(txtencid.Text))
          dtdob.Tag = xbirdate
          modDateSub.GetAgeControlFromDate(dtdob.Tag, txtpatage, cmbpatageunit)

          xYear = DateDiff(xbirdate, Now(), gb.Year)
          txtnow.Text = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
          txtbedno.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), txtnow.Text)
          txtpatdoa.Text = modReportVar.GetDateTimeReport(modPatient.GetRecordDate(Trim(txtencid.Text)), gb.GeneralDate)
          txtpatweight.Value = modClinic.GetBodyWeight(Trim(txtencid.Text))
          btnconsult.Tag = modPatient.GetAttendingConsultant(Trim(txtencid.Text))
          btnconsult.Text = modGeneral.GetUserFullName(btnconsult.Tag)
          modClinSub.GetPatientHeight(Trim(txtencid.Text), txtpatheight, cmbpatheightunit)
          modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
          UpdateTriage()
          Wait
          If modPatientSub.AllowEncIDHistory(Trim(txtencid.Text), modDatabase.$myConn) = True Then
            BlockDCButton()
            modImage.ShowPhotoSplash("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)))
            ''MAIN FORM
            BasicInfoPatient()
            txtencid.ReadOnly = True
          Else
            Me.Enabled = False
          Endif
        Else
          Message.Warning(("Encounter ID not found"), ("OK"))
          ' Balloon.Delay = modBasic.$BalloonDelay
          txtencid.SetFocus
        Endif
      Endif
    Endif
  Endif

End

Public Sub UpdateTriage()

  txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))

End

Private Sub BlockDCButton()

  Dim xx As Boolean

  xx = modPatient.EnableClinicForm(txtnow.Text)
  tlbtnaddheight.Enabled = xx
  tlbtnaddbed.Enabled = xx
  tlbtnadwt.Enabled = xx
  dtdob.Enabled = xx
  btnpic.Enabled = xx
  btnselectuser.Enabled = xx

End

Private Sub RestrictUserAccessPat()

  If $UserRestrictPat.Exist("Bed Assignment") Then
    tlbtnaddbed.Visible = False
  Endif
  If $UserRestrictPat.Exist("Body Weight") Then
    tlbtnadwt.Visible = False
  Endif
  If $UserRestrictPat.Exist("Body Height") Then
    tlbtnaddheight.Visible = False
  Endif

End

''------- Basic Parameters
Public Sub btnpic_Click()

  Dim hForm As FmPersonImage

  If txtencid.Text Then
    hForm = New FmPersonImage("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)), False)
    hForm.ShowModal
  Endif

End

Public Sub tlbtnaddheight_Click()

  If txtencid.Text Then
    If txtpatheight.Value Then
      If cmbpatheightunit.Text Then
        modClinSub.UpdatePatientHeight(Trim(txtencid.Text), txtpatheight.Value, cmbpatheightunit.Text)
        tlbtnaddheight.Enabled = False
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information updated", modBasic.$BalloonDelay))
      Endif
    Endif
  Endif

End

Public Sub tlbtnadwt_Click()

  If txtencid.Text Then
    If txtpatweight.Value Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", txtpatweight.Value)
      tlbtnadwt.Enabled = False
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

Public Sub dtdob_Click()

  Dim dtdate As Date

  If txtencid.Text Then
    dtdate = GetDateValue("Date of Birth of " & txtpatientname.Text, "DOBirth", dtdob.Tag)
    If dtdate Then
      modPatientSub.UpdatePatDOB(Trim(txtencid.Text), dtdate)
      modDateSub.GetAgeControlFromDate(dtdate, txtpatage, cmbpatageunit)
      dtdob.Tag = dtdate
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information updated", modBasic.$BalloonDelay))
    Endif
  Endif

End

''------------Hospital related parameters
Public Sub btnselectuser_Click()

  Dim xMedUser As String[]

  If txtencid.Text Then
    xMedUser = MedicalSelectedValue(("Select Consultant"), modBasic.$IPConsultUserList)
    If xMedUser And If xMedUser.Count Then
      btnconsult.Tag = xMedUser[0]
      btnconsult.Text = xMedUser[1]
    Else
      btnconsult.Tag = ""
      btnconsult.Text = ""
    Endif
    If btnconsult.Tag Then
      modPatientSub.UpdateAttendingConsultant(Trim(txtencid.Text), btnconsult.Tag)
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

Public Sub btnsms_Click()

  Dim xval As String

  If btnconsult.Tag Then
    xval = modDevice.SendSMSToInpatDoc(Trim(txtencid.Text), modGeneral.GetUserContact(btnconsult.Tag))
    If xval Then
      Message.Info(xval, ("OK"))
    Endif
  Endif

End

Public Sub tlbtnaddbed_Click()

  If txtencid.Text Then
    If MMain.$SISHAppMode = "HIS" Then
      If modHelpVariable.$LogInCategory = "Clinician" Then
        If txtnow.Text = "Admitted" Then
          txtbedno.Text = GetBedNumber(Trim(txtencid.Text))
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnconsult_Change()

  If btnconsult.Text = "" Then
    btnconsult.Tag = ""
  Endif

End

Public Sub tlbtnpayment_Click()

  If txtencid.Text Then
    modNonMedical.CurrentPayStatusMsg(Trim(txtencid.Text))
  Endif

End

Public Sub btnprofile_Click()

  Dim hForm As FmMinProfile

  hForm = New FmMinProfile(Trim(txtencid.Text))
  hForm.ShowModal()

End

''============================== MAIN FORM ================================
Private Function ShowBilling() As Boolean

  Dim xx As Boolean

  If txtencid.Text Then
    If $BillingOption = "All" Then
      Panel4.Visible = True
      xx = True
    Else If $BillingOption = "OPD" Then
      Panel4.Visible = True
      If $sTatus = "Admitted" Then
        xx = False
      Else
        xx = True
      Endif
    Else
      Panel4.Visible = False
      xx = False
    Endif
  Else
    xx = False
  Endif
  Return xx

End

Private Sub BasicInfoPatient()

  Dim xx As Boolean
  Dim def As String
  Dim xledger As String
  Dim xbilltype As String
  Dim resx As Result
  Dim xlock As Boolean
  Dim frmshow As Boolean
  Dim xallow As Boolean

  modSettings.SaveSettingsToFile("Pharmacy/OriginCompID", cmborigin.Text)
  If txtencid.Text Then
    frmshow = True
    modRepository.$RepoDataStatus = False
    $sTatus = txtnow.Text
    $PatientNum = modPatient.GetPatientNoByEnc(Trim(txtencid.Text))
    $xFinClear = modNonMedical.GetFinanceClearance(Trim(txtencid.Text))

    hPatient1.$encid = Trim(txtencid.Text)
    hPatient1.$billtype = "PharmBilling"
    If ShowBilling() = False Then
      hPatient1.Enabled = False
    Endif
    $xNHISCode = modPatient.GetPatientExtCOdebyEnc(Trim(txtencid.Text))
    $DiscPackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
    If Not cmbdisctype.List.Exist($DiscPackage) Then
      cmbdisctype.Add($DiscPackage)
    Endif
    cmbdisctype.Text = $DiscPackage
    If modBasic.$BillAlterPackage = "Yes" Then
      cmbdisctype.Enabled = True
    Else If modBasic.$BillAlterPackage = "Partial" Then
      cmbdisctype.Enabled = True
    Else
      cmbdisctype.Enabled = False
    Endif
    xlock = False
    resx = modDatabase.$myConn.Exec("select fldmode,fldbillingmode,fldacledger,fldbilltype,fldreference,fldlimit,fldlockstate from tbldiscount where fldtype=&1", $DiscPackage)
    If resx.Available Then
      ''billingmode
      If resx["fldbillingmode"] Then
        cmbbillmode.Text = resx["fldbillingmode"]
        If modBasic.$BillFixBillMode = "Yes" Then
          cmbbillmode.Enabled = False
        Endif
      Else
        cmbbillmode.Enabled = True
        cmbbillmode.Text = modBasic.$BillDefaultMode
      Endif
      ''claim code button
      If resx["fldreference"] Then
        If resx["fldreference"] = "Staff List" Then
          txtreference.ReadOnly = False
        Else
          If resx["fldreference"] = "Claim Code" Then
            txtreference.Text = modClaim.GetClaimCidePatient(Trim(txtencid.Text), modNonMedical.GetLastCLaimType(Trim(txtencid.Text)))
            If txtreference.Text Then
              txtreference.Tag = modClaim.GetHIClaimState(txtreference.Text)
              If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
                GetHImedicineCappingVar()
              Endif
            Endif
          Else If resx["fldreference"] = "Accident SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Accident SSF")
          Else If resx["fldreference"] = "Critical SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Critical SSF")
          Else If resx["fldreference"] = "MedExtra SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "MedExtra SSF")
          Else If resx["fldreference"] = "Medical SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Medical SSF")
          Endif
          If txtreference.Text Then
            txtreference.ReadOnly = True
          Else
            frmshow = False
          Endif
        Endif
      Endif
      ''ledger A/C
      xledger = resx["fldacledger"]
      If xledger Then
        cmbledgerac.Text = xledger
        cmbledgerac.Enabled = False
      Else
        cmbledgerac.Enabled = True
      Endif
      ''BillType
      xbilltype = resx["fldbilltype"]
      If xbilltype Then
        xlock = True
      Endif
      ''limit
      If resx["fldlimit"] = "PatientCreditAMT" Then
        lbllimit.Text = "Crdt Limit"
        txtcreditlimit.Value = modNonMedical.ShowCreditLimitEnc(Trim(txtencid.Text))
      Else If resx["fldlimit"] = "PatientDiscount" Then
        lbllimit.Text = "Disc Limit"
        txtcreditlimit.Value = modNonMedical.GetPatCharityLimit(Trim(txtencid.Text))
      Endif
      ''lock to state
      Select $sTatus
        Case "Registered"
          If resx["fldlockstate"] And If resx["fldlockstate"] <> "OPD" Then
            xallow = False
          Else
            xallow = True
          Endif
        Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
          If resx["fldlockstate"] And If resx["fldlockstate"] <> "IPD" Then
            xallow = False
          Else
            xallow = True
          Endif
        Case Else
          xallow = True
      End Select
      If xallow = False Then
        Panel10.Enabled = False
      Else
        Panel10.Enabled = True
      Endif
    Endif
    If Not xbilltype Then
      If cmbledgerac.Text Then
        xbilltype = modNonMedical.GetDefaultACBillType(cmbledgerac.Text)
      Endif
    Endif
    ' If modNonMedical.GetFixedReference(Trim(txtencid.Text)) = "Claim Code" Then
    '   btnlastclaim.Enabled = True
    ' Endif
    ' xledger = modNonMedical.GetFixedLedgerAC(Trim(txtencid.Text))
    ' If xledger Then
    '   cmbledgerac.Text = xledger
    ' Endif
    ' If cmbledgerac.Text Then
    '   xbilltype = modNonMedical.GetDefaultACBillType(cmbledgerac.Text)
    ' Endif

    If $xFinClear = True Then
      frmshow = False
    Endif

    If xbilltype Then
      hPatient1.SetDefaultModeCashCredit(xbilltype, xlock)
    Else
      hPatient1.SetDefaultModeCashCredit(modBasic.$BillFixBilling, xlock)
    Endif
    hPatient1.$PatStatus = $sTatus
    ShowCashCreditMode()

    If xledger Then
      cmbledgerac.Enabled = False
    Endif
    If $sTatus = "Admitted" Then
      hPatient1.$LockToInvOwn = modBasic.$BillLockInvoiceToOwnIPD
      If modBasic.$BillLockAdmitted = "Yes" Then
        If hPatient1 Then
          hPatient1.Enabled = False
        Endif
      Endif
    Else
      hPatient1.$LockToInvOwn = modBasic.$BillLockInvoiceToOwnOPD
      If hPatient1 Then
        hPatient1.ShowDepositButton()
      Endif
    Endif

    xx = modPatient.EnableClinicForm($sTatus)
    mnuclininfo.Enabled = xx
    def = modSettings.ShowSettingFromFIle("Labeling/Dispensing")
    If def Then
      If def = "OutPatient" Then
        rbout.Value = True
      Else If def = "InPatient" Then
        rbin.Value = True
      Else If def = "Aseptic" Then
        rbasep.Value = True
      Endif
    Else
      rbout.Value = True
    Endif

    SHowDiagnosis()
    modPatientSub.PopUpPatientForm(Trim(txtencid.Text), Me.Tag)
    If modPharmacy.DisableEncounterForReview(Trim(txtencid.Text)) = True Then
      $ShowReview = "No"
    Endif
    ShowOldEntry
    FillDosingGrid()
    cmbroute.Text = ""
    BlankDosingBox()

  Endif

  If frmshow = True Then
    TabPanel1.Enabled = True
    Panel4.Enabled = True
    If cmbledgerac.Text Then
      cmbroute.SetFocus
    Else
      cmbledgerac.SetFocus
    Endif
  Else If frmshow = False Then
    TabPanel1.Enabled = False
    Panel4.Enabled = False
    txtencid.SetFocus
  Endif

End

Public Sub cmbdisctype_Click()

  IniateCategoryPharmArray()
  LoadDiscCreditVal()

End

Public Sub cmbbillmode_Click()

  IniateCategoryPharmArray()

End

Private Sub LoadDiscCreditVal()

  Dim resx As Result
  Dim xbilltype As String
  Dim xledger As String
  Dim xlock As Boolean
  Dim xallow As Boolean

  If cmbdisctype.Text Then
    cmbbillmode.Text = ""
    BlankDosingBox()
    txtreference.Text = ""
    txtreference.Tag = ""
    txtreference.ReadOnly = False
    xlock = False
    resx = modDatabase.$myConn.Exec("select fldmode,fldbillingmode,fldacledger,fldbilltype,fldreference,fldlimit,fldlockstate from tbldiscount where fldtype=&1", cmbdisctype.Text)
    If resx.Available Then
      ''billingmode
      If resx["fldbillingmode"] Then
        cmbbillmode.Text = resx["fldbillingmode"]
        If modBasic.$BillFixBillMode = "Yes" Then
          cmbbillmode.Enabled = False
        Endif
      Else
        cmbbillmode.Enabled = True
        cmbbillmode.Text = modBasic.$BillDefaultMode
      Endif
      ''claim code button
      If resx["fldreference"] Then
        If resx["fldreference"] = "Staff List" Then
          txtreference.ReadOnly = False
        Else
          If resx["fldreference"] = "Claim Code" Then
            txtreference.Text = modClaim.GetClaimCidePatient(Trim(txtencid.Text), modNonMedical.GetLastCLaimType(Trim(txtencid.Text)))
            If txtreference.Text Then
              txtreference.Tag = modClaim.GetHIClaimState(txtreference.Text)
              If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
                GetHImedicineCappingVar()
              Endif
            Endif
          Else If resx["fldreference"] = "Accident SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Accident SSF")
          Else If resx["fldreference"] = "Critical SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Critical SSF")
          Else If resx["fldreference"] = "MedExtra SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "MedExtra SSF")
          Else If resx["fldreference"] = "Medical SSF" Then
            txtreference.Text = modSSF.GetSSFClaimCodePatient(Trim(txtencid.Text), "Medical SSF")
          Endif
          If txtreference.Text Then
            txtreference.ReadOnly = True
          Endif
        Endif
      Endif
      ''ledger A/C
      xledger = resx["fldacledger"]
      If xledger Then
        cmbledgerac.Text = xledger
        cmbledgerac.Enabled = False
      Else
        cmbledgerac.Enabled = True
      Endif
      ''BillType
      xbilltype = resx["fldbilltype"]
      If xbilltype Then
        xlock = True
      Endif
      ''limit
      If resx["fldlimit"] = "PatientCreditAMT" Then
        lbllimit.Text = "Crdt Limit"
        txtcreditlimit.Value = modNonMedical.ShowCreditLimitEnc(Trim(txtencid.Text))
      Else If resx["fldlimit"] = "PatientDiscount" Then
        lbllimit.Text = "Disc Limit"
        txtcreditlimit.Value = modNonMedical.GetPatCharityLimit(Trim(txtencid.Text))
      Endif
      ''lock to state
      Select $sTatus
        Case "Registered"
          If resx["fldlockstate"] And If resx["fldlockstate"] <> "OPD" Then
            xallow = False
          Else
            xallow = True
          Endif
        Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
          If resx["fldlockstate"] And If resx["fldlockstate"] <> "IPD" Then
            xallow = False
          Else
            xallow = True
          Endif
        Case Else
          xallow = True
      End Select
      If xallow = False Then
        Panel10.Enabled = False
      Else
        Panel10.Enabled = True
      Endif
    Endif
    If Not xbilltype Then
      If cmbledgerac.Text Then
        xbilltype = modNonMedical.GetDefaultACBillType(cmbledgerac.Text)
      Endif
    Endif

    If xbilltype Then
      hPatient1.SetDefaultModeCashCredit(xbilltype, xlock)
    Else
      hPatient1.SetDefaultModeCashCredit(modBasic.$BillFixBilling, xlock)
    Endif

  Endif

End

Public Sub cmbledgerac_Change()

  hPatient1.$ACLedger = cmbledgerac.Text

End

Public Sub txtreference_Change()

  hPatient1.$ACReference = Trim(txtreference.Text)

End

Public Sub txtreference_Activate()

  cmbroute.SetFocus

End

Public Sub rbgeneric_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Dispensing", "Generic")

End

Public Sub rbrand_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Dispensing", "Brand")

End

Private Function GetLabelMode() As String

  Dim xx As String

  If rbout.Value = True Then
    xx = "Outpatient"
  Else If rbin.Value = True Then
    xx = "Inpatient"
  Else If rbasep.Value = True Then
    xx = "Aseptic"
  Endif

  Return xx

End

Public Sub rbout_Click()

  modSettings.SaveSettingsToFile("Labeling/Dispensing", "OutPatient")
  cmbroute.List = $OPDRoute

End

Public Sub rbin_Click()

  modSettings.SaveSettingsToFile("Labeling/Dispensing", "InPatient")
  cmbroute.List = modMedicine.InpatientRoute(True)

End

Public Sub rbasep_Click()

  modSettings.SaveSettingsToFile("Labeling/Dispensing", "Aseptic")
  cmbroute.List = modMedicine.InpatientRoute(True)

End

Private Function GetBrandGenerricType() As String

  Dim brandOrGeneric As String

  If rbrand.Value = True Then
    brandOrGeneric = "Brand"
  Else
    brandOrGeneric = "Generic"
  Endif
  Return brandOrGeneric

End

' Private Sub BlinkOnPunch(stockid As String)
'
'   If modBasic.$ShowStorage = "Punching" Then
'     modDevice.SendDataToSerialPort(modStock.GetStorageCodeFromStockName(stockid))
'   Endif
'
' End
'
' Private Sub BlinkOnSave(stockno As Integer)
'
'   If modBasic.$ShowStorage = "OnSave" Then
'     modDevice.SendDataToSerialPort(modStock.GetStorageCodeFromStockNo(stockno))
'   Endif
'
' End

Public Sub rborder_Click()

  If txtencid.Text Then
    FillDosingGrid()
  Endif

End

Public Sub rbdisp_Click()

  If txtencid.Text Then
    FillDosingGrid()
  Endif

End

Public Sub rbvalue_Click()

  FillDosingGrid()

End

Public Sub rblabel_Click()

  FillDosingGrid()

End

Public Sub ShowCashCreditMode()

  Dim xList As String[]
  Dim xType As String

  xType = hPatient1.GetCashCreditMode()
  If xType = "Cash" Then
    xList = modBasic.$ACLedgerListCash
  Else If xType = "Credit" Then
    xList = modBasic.$ACLedgerListCredit
  Endif
  If xList Then
    cmbledgerac.Enabled = True
    cmbledgerac.List = xList
  Endif

End

Public Sub btncrdstate_Click()

  Dim xrefer As String
  Dim xmsg As String

  If cmbdisctype.Text Then
    xrefer = modNonMedical.GetFixedReferenceScheme(cmbdisctype.Text)
    If xrefer = "Claim Code" Then
      xmsg = modClaim.CheckIMISStatus(Trim(txtencid.Text))
    Else If xrefer = "Accident SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "Accident SSF")
    Else If xrefer = "Critical SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "Critical SSF")
    Else If xrefer = "MedExtra SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "MedExtra SSF")
    Else If xrefer = "Medical SSF" Then
      xmsg = modSSF.CheckSSFStatus(Trim(txtencid.Text), "Medical SSF")
    Endif
    If xmsg Then
      Message.Warning(xmsg, "OK")
    Endif
  Endif

End

''-------------------- Menu ----------------------
Public Sub mnublank_Click()

  ' Me.Close
  ' Wait
  ' modAppSupport.AddNewFormToWorkspace(fmPatPharmacy)

End

Public Sub mnusearchpat_Click()

  If Not txtencid.Text Then
    txtencid.Text = PatSearch("Encounter")
  Endif

End

Public Sub mnupatacc_Click()

  Dim hForm As FmPatAccEdit

  If txtencid.Text Then
    If $xFinClear = False Then
      hForm = New FmPatAccEdit(Trim(txtencid.Text), True)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnulastenc_Click()

  txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")

End

Public Sub mnuregister_Click()

  If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
    If MMain.$SISHAppMode = "HIS" Then
      If modBasic.$regF1Dispensing = "Yes" Or If modBasic.$regF1Dispensing = "Partial" Then
        txtencid.Text = RegistrationNewForm()
      Else If modBasic.$regF1Dispensing = "Full" Then
        txtencid.Text = RegistrationForm(False)
      Endif
    Else
      txtencid.Text = RegistrationForm(False)
    Endif
  Endif

End

Public Sub mnuonline_Click()

  Dim sOutstr As String

  If Not txtencid.Text Or If txtencid.Text = modBasic.$EncIdPrefix Then
    If modBasic.$DispPrescibeSource = "RemoteDB" Then
      If modDatabase.$pharmConn.Opened Then
        ' txtencid.Text = PharmacyRequest(modDatabase.$pharmConn)
      Endif
    Else
      If modGlobalSetting.ShowSettingFromDB("GeneralSettings/OnlineAccess_DispensingForm") = "Yes" Then
        sOutstr = RemoteRequest("Pharmacy")
        If sOutstr Then
          txtencid.Text = Split(sOutstr, "@")[0]
          cmborigin.Text = Split(sOutstr, "@")[1]
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnuscanimage_Click()

  Dim hForm As FmScanForm

  If txtencid.Text Then
    hForm = New FmScanForm(Trim(txtencid.Text), "Scanned Images", "")
    hForm.ShowModal
  Endif

End

Public Sub mnumed_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Medicines")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusurg_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Surgicals")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuextra_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Extra Items")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuhistmed_Click()

  Dim xPath As String

  If txtencid.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    xPath = modCHTMLInvoice.ShowItemDispensedByPatientAllEnc(modDatabase.$syConn, Trim(txtencid.Text), "Medicines")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuhistsurg_Click()

  Dim xPath As String

  If txtencid.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    xPath = modCHTMLInvoice.ShowItemDispensedByPatientAllEnc(modDatabase.$syConn, Trim(txtencid.Text), "Surgicals")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuhistextra_Click()

  Dim xPath As String

  If txtencid.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    xPath = modCHTMLInvoice.ShowItemDispensedByPatientAllEnc(modDatabase.$syConn, Trim(txtencid.Text), "Extra Items")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpensealllocal_Click()

  Dim xPath As String

  If txtencid.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    xPath = modCHTMLInvoice.ShowTotalExpenseAllEncPatient(modDatabase.$syConn, Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucodemed_Click()

  Dim xPath As String
  Dim xpatno As String

  If $xNHISCode Then
    xpatno = $xNHISCode
    xPath = modCHTMLInvoice.ShowItemDispensedByPatCodeAllEnc(modDatabase.$syConn, xpatno, "Medicines")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucodesurgical_Click()

  Dim xPath As String
  Dim xpatno As String

  If $xNHISCode Then
    xpatno = $xNHISCode
    xPath = modCHTMLInvoice.ShowItemDispensedByPatCodeAllEnc(modDatabase.$syConn, xpatno, "Surgicals")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucodeextra_Click()

  Dim xPath As String
  Dim xpatno As String

  If $xNHISCode Then
    xpatno = $xNHISCode
    xPath = modCHTMLInvoice.ShowItemDispensedByPatCodeAllEnc(modDatabase.$syConn, xpatno, "Extra Items")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuremotemed_Click()

  modPatReports.ShowRepoPharmExpensePatient(Trim(txtencid.Text), "Medicines")

End

Public Sub mnuremotesurg_Click()

  modPatReports.ShowRepoPharmExpensePatient(Trim(txtencid.Text), "Surgicals")

End

Public Sub mnuremoteextra_Click()

  modPatReports.ShowRepoPharmExpensePatient(Trim(txtencid.Text), "Extra Items")

End

Public Sub mnuexpenseallremote_Click()

  modPatReports.ShowRepoExpensePatient(Trim(txtencid.Text))

End

Public Sub mnumedreturn_Click()

  Dim xPath As String

  If txtencid.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    xPath = modCHTMLPatient.PatientMedicationForReturn(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpo_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowMedicationOrder(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuarchived_Click()

  Dim xxx As String[]

  If txtencid.Text Then
    xxx = AddReports(Trim(txtencid.Text), False)
  Endif

End

Public Sub mnuclininfo_Click()

  ' Dim hForm As FmClinicRetail
  '
  ' If txtencid.Text Then
  '   hForm = New FmClinicRetail(Trim(txtencid.Text))
  '   hForm.ShowModal
  ' Endif

End

''---------------------- Data Entry --------------------
Private Sub IniateCategoryPharmArray()

  $MSurgicalLst = New String[]
  $ExtraItemLst = New String[]
  $OralBrandLst = New String[]
  $OralGenricLst = New String[]
  $InjBrandLst = New String[]
  $InjGenricLst = New String[]
  $LiqBrandLst = New String[]
  $LiqGenricLst = New String[]

End

Private Function GetCategoryArray(sRoute As String, sMode As String) As String[]

  Dim xarry As String[]

  If sRoute = "oral" Then
    If sMode = "Brand" Then
      If Not $OralBrandLst.Count Then
        $OralBrandLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
      Endif
      xarry = $OralBrandLst
    Else If sMode = "Generic" Then
      If Not $OralGenricLst.Count Then
        $OralGenricLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
      Endif
      xarry = $OralGenricLst
    Endif

  Else If sRoute = "liquid" Then
    If sMode = "Brand" Then
      If Not $LiqBrandLst.Count Then
        $LiqBrandLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
      Endif
      xarry = $LiqBrandLst
    Else If sMode = "Generic" Then
      If Not $LiqGenricLst.Count Then
        $LiqGenricLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
      Endif
      xarry = $LiqGenricLst
    Endif

  Else If sRoute = "injection" Then
    If sMode = "Brand" Then
      If Not $InjBrandLst.Count Then
        $InjBrandLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
      Endif
      xarry = $InjBrandLst
    Else If sMode = "Generic" Then
      If Not $InjGenricLst.Count Then
        $InjGenricLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
      Endif
      xarry = $InjGenricLst
    Endif

  Else If sRoute = "msurg" Then
    If Not $MSurgicalLst.Count Then
      $MSurgicalLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
    Endif
    xarry = $MSurgicalLst

  Else If sRoute = "extra" Then
    If Not $ExtraItemLst.Count Then
      $ExtraItemLst.Insert(modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text))
    Endif
    xarry = $ExtraItemLst

  Else
    xarry = modStock.FillMedicinesDispensingArrayList(sRoute, sMode, "", cmbbillmode.Text)
  Endif

  Return xarry

End

''------------------medicine entry ---------------------------------------
Private Sub BlankDosingBox()

  cmbmedicine.Text = ""
  txtdose.Enabled = True
  txtdose.Value = 0
  cmbfreq.Enabled = True
  cmbfreq.Text = ""
  txtday.Enabled = True
  txtday.Value = 0
  lblqty.Text = ""
  txtqty.Value = 0
  txtqty.Tag = ""
  txtinventory.Value = 0
  txtitemrate.Value = 0
  $HideErr = False
  $HideDos = False
  txtitemrate.Background = Color.Default
  txtinventory.Background = Color.Default
  txtlastdispdate.Text = ""
  txtlastdispdate.Foreground = Color.Default
  txttotalqty.Value = 0
  lbldose.Text = ""

End

Public Sub cmbroute_Activate()

  If cmbroute.Text Then
    cmbmedicine.Text = ""
    cmbmedicine.SetFocus
  Endif

End

Public Sub cmbroute_Click()

  cmbmedicine.Text = ""
  cmbmedicine.SetFocus

End

Public Sub cmbmedicine_Activate()

  If Not cmbroute.Text Then
    cmbroute.SetFocus
  Else
    If Not cmbmedicine.Text Then
      btncompList_Click()
    Else
      ControlServiceName()
    Endif
  Endif

End

Public Sub btncompList_Click()

  Dim xList As String[]
  Dim stockno As String

  $HideErr = False
  If modBasic.$BillPharmSelection = "Multiple" Then
    xList = modStock.FillMedicinesDispensingArrayAllBatch(cmbroute.Text, GetBrandGenerricType(), "", cmbbillmode.Text)
    stockno = PharmGridList("Select Particulars", cmbroute.Text, GetBrandGenerricType(), xList)
    If stockno Then
      SHowInventoryAllBatch(CInt(stockno))
    Endif
  Else
    If modBasic.$AppCacheGridViewData = "Yes" Then
      cmbmedicine.Text = PharmGridList("Select Particulars", cmbroute.Text, GetBrandGenerricType(), GetCategoryArray(cmbroute.Text, GetBrandGenerricType()))
    Else
      xList = modStock.FillMedicinesDispensingArrayList(cmbroute.Text, GetBrandGenerricType(), "", cmbbillmode.Text)
      cmbmedicine.Text = PharmGridList("Select Particulars", cmbroute.Text, GetBrandGenerricType(), xList)
    Endif
  Endif
  $pharmLock = False
  ControlServiceName()

End

Public Sub cmbmedicine_Change()

  If $pharmLock = True Then
    cmbmedicine.Text = ""
  Endif

End

Private Sub ControlServiceName()

  ' ' Dim hForm As FmDiseaseDose

  If cmbmedicine.Text Then
    If modStockSub.GetComboStockControl(cmbroute.Text, cmbmedicine.Text, rbgeneric, rbrand, modDatabase.$medConn) = False Then
      cmbmedicine.Text = ""
      Me.Exec("Toastify({text: 'Item not listed', duration: 3000}).showToast()")
      cmbroute.SetFocus
    Else

      $pharmLock = True
      If cmbroute.Text = "suture" Or If cmbroute.Text = "msurg" Or If cmbroute.Text = "ortho" Or If cmbroute.Text = "extra" Then
        SHowInventoryStatus()
        txtdose.Enabled = False
        cmbfreq.Enabled = False
        txtday.Enabled = False
        If $HideDos = False Then  '' First pass to textbox
          $HideDos = True
          If CheckDuplicate() = True Then
            txtqty.SetFocus
            Me.Exec("$_(" & JS(txtqty.Name & ":entry") & ").select()")
          Endif
        Endif

      Else
        SHowInventoryStatus()
        If modBasic.$MedNoRegimen = "Enable" Then
          txtdose.Enabled = False
          cmbfreq.Enabled = False
          txtday.Enabled = False
          If $HideDos = False Then  '' First pass to textbox
            $HideDos = True
            CheckLastDispensing(cmbmedicine.Text)
            If CheckDuplicate() = True Then
              txtqty.SetFocus
              Me.Exec("$_(" & JS(txtqty.Name & ":entry") & ").select()")
            Endif
          Endif

        Else
          txtdose.Enabled = True
          cmbfreq.Enabled = True
          txtday.Enabled = True
          lbldose.Text = modMedConstant.GetDrugDosingUnit(cmbmedicine.Text)

          If modBasic.$MedDoseRecommend = "Yes" Then
            txtdose.Value = modMedDosing.RecommendedDoseDrug(Trim(txtencid.Text), xYear, cmbmedicine.Text)
            cmbfreq.Text = modMedDosing.RecommendedFrequencyDrug(xYear, cmbmedicine.Text)
          Endif

          If $HideDos = False Then  '' First pass to textbox
            $HideDos = True
            CheckLastDispensing(cmbmedicine.Text)
            If CheckDuplicate() = True Then
              txtdose.SetFocus()
              Me.Exec("$_(" & JS(txtdose.Name & ":entry") & ").select()")
            Endif
          Endif

        Endif  ''if dose regimen enabled
      Endif  ''med/surg/extra

    Endif
  Endif

End

Private Sub CheckLastDispensing(xmedicine As String)

  Dim cForm As CLastDispensing
  Dim xdate As Date
  Dim xdays As Integer

  If modBasic.$SalesHistoryAlert Then
    cForm = New CLastDispensing(xmedicine, $PatientNum, $xNHISCode, cmbdisctype.Text)
    txttotalqty.Value = cForm.GetLastQty()
    xdate = cForm.GetLastDate()
    xdays = cForm.GetLastDays()

    If xdate Then
      txtlastdispdate.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
      If DateDiff(xdate, Now(), gb.Month) <= 3 Then
        txtlastdispdate.Foreground = Color.Red
      Endif

      If xdays Then
        If DateAdd(xdate, gb.Day, xdays) > Now() Then
          Message.Warning("Dispensed for " & xdays & " Days On " & modReportVar.GetDateTimeReport(xdate, gb.GeneralDate), ("OK"))
        Endif
      Endif
    Endif

  Endif

End

Private Sub SHowInventoryStatus()

  ' Dim xvarfix As Variant[]
  Dim xcateg As String
  Dim CPharmFix As CFixRatePharmacy

  txtinventory.Value = modStock.TotalQTYbyBrand(cmbmedicine.Text, modBasic.$compID)
  If cmbroute.Text = "All" Then
    xcateg = modStock.GetPharmCategoryFromStockName(cmbmedicine.Text, modBasic.$compID)
  Else
    xcateg = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
  Endif

  CPharmFix = New CFixRatePharmacy(xcateg, cmbmedicine.Text, cmbbillmode.Text)
  txtitemrate.Value = CPharmFix.GetFixRate()
  txtitemrate.Tag = CPharmFix.GetFixItem()
  If Not txtitemrate.Tag Then
    txtqty.Tag = ""
    txtitemrate.Value = modStock.GetCurrentSellingPrice(cmbmedicine.Text, modBasic.$compID)
  Else
    If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
      If $HiCappingVar.Exist(CPharmFix.GetFixCode()) Then
        txtqty.Tag = CStr($HiCappingVar[CPharmFix.GetFixCode()] - modNonMedical.GetPatientItemSavedSalesPackage(Trim(txtencid.Text), txtitemrate.Tag, cmbdisctype.Text))
      Else
        If CPharmFix.GetFixCapQTY() Then
          txtqty.Tag = CStr(CPharmFix.GetFixCapQTY() - modNonMedical.GetPatientItemAllSalesPackage(Trim(txtencid.Text), txtitemrate.Tag, cmbdisctype.Text))
        Else
          txtqty.Tag = ""
        Endif
      Endif
    Else
      txtqty.Tag = ""
    Endif
    txtitemrate.Background = Color.Yellow
  Endif
  ' xvarfix = modStock.GetSellingPriceFixByStockID(xcateg, cmbmedicine.Text, cmbbillmode.Text)
  ' If Not xvarfix Then
  '   txtitemrate.Value = modStock.GetCurrentSellingPrice(cmbmedicine.Text, modBasic.$compID)
  ' Else
  '   txtitemrate.Background = Color.Yellow
  '   txtitemrate.Value = xvarfix[1]
  '   txtitemrate.Tag = xvarfix[0]
  ' Endif

  If modStock.GetCurrentExpiredStockOneComp(cmbmedicine.Text, modBasic.$compID) = True Then
    txtinventory.Background = Color.Orange
  Endif

End

Private Sub SHowInventoryAllBatch(stockNo As Integer)

  Dim res As Result
  ' Dim xvarfix As Variant[]
  Dim xcateg As String
  Dim CPharmFix As CFixRatePharmacy

  If stockno Then
    res = modDatabase.$myConn.Exec("select fldstockid,fldcategory,fldbatch,fldexpiry,fldqty,fldsellpr from tblentry where fldstockno=&1", CInt(stockno))
    If res.Available Then

      txtstockno.Value = stockNo
      cmbmedicine.Text = res["fldstockid"]
      txtinventory.Value = res["fldqty"]
      xcateg = res["fldcategory"]

      CPharmFix = New CFixRatePharmacy(xcateg, cmbmedicine.Text, cmbbillmode.Text)
      txtitemrate.Value = CPharmFix.GetFixRate()
      txtitemrate.Tag = CPharmFix.GetFixItem()
      If Not txtitemrate.Tag Then
        txtqty.Tag = ""
        txtitemrate.Value = res["fldsellpr"]
      Else
        If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
          If $HiCappingVar.Exist(CPharmFix.GetFixCode()) Then
            txtqty.Tag = CStr($HiCappingVar[CPharmFix.GetFixCode()] - modNonMedical.GetPatientItemSavedSalesPackage(Trim(txtencid.Text), txtitemrate.Tag, cmbdisctype.Text))
          Else
            If CPharmFix.GetFixCapQTY() Then
              txtqty.Tag = CStr(CPharmFix.GetFixCapQTY() - modNonMedical.GetPatientItemAllSalesPackage(Trim(txtencid.Text), txtitemrate.Tag, cmbdisctype.Text))
            Else
              txtqty.Tag = ""
            Endif
          Endif
        Else
          txtqty.Tag = ""
        Endif
        txtitemrate.Background = Color.Yellow
      Endif
      ' xvarfix = modStock.GetSellingPriceFixByStockID(xcateg, cmbmedicine.Text, cmbbillmode.Text)
      ' If Not xvarfix Then
      '   txtitemrate.Value = res["fldsellpr"]
      ' Else
      '   txtitemrate.Background = Color.Yellow
      '   txtitemrate.Value = xvarfix[1]
      '   txtitemrate.Tag = xvarfix[0]
      ' Endif

      If modStock.GetCurrentExpiredStockOneComp(cmbmedicine.Text, modBasic.$compID) = True Then
        txtinventory.Background = Color.Orange
      Endif

    Endif
  Endif

End

Private Function CheckDuplicate() As Boolean

  Dim xbool As Boolean

  If modGridView.GetItemPresentGrid($rData, "flditem", cmbmedicine.Text) = True Then
    Select modBasic.$BillDuplication
      Case "Inform"
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Item already punched", modBasic.$BalloonDelay))
        xbool = True
      Case "Warn"
        Message.Warning("Duplicate Entry", ("OK"))
        xbool = True
      Case "Disable"
        Message.Warning("Duplicate Entry not allowed", ("OK"))
        cmbmedicine.Text = ""
        cmbroute.SetFocus
        xbool = False
      Case Else
        xbool = True
    End Select
  Else
    xbool = True
  Endif

  Return xbool

End

Public Sub txtdose_Activate()

  cmbfreq.SetFocus

End

Public Sub cmbfreq_Activate()

  If cmbfreq.Text Then
    txtday.SetFocus
  Endif

End

Public Sub cmbfreq_Click()

  txtday.SetFocus
  If txtdose.Value Then
    Me.Exec("$_(" & JS(txtday.Name & ":entry") & ").select()")
  Endif

End

Public Sub txtday_Activate()

  Dim xval As Float

  Dim opt As String[]
  Dim aval As String
  Dim xcount As Integer

  If Not txtday.Value Then
    If rbasep.Value = True Then
      txtday.Value = 1
    Else
      txtday.SetFocus
    Endif
  Else
    If txtdose.Value And If cmbfreq.Text Then
      xcount = 0
      If $HideErr = False Then
        If txtdose.Value And If cmbfreq.Text Then
          If $ShowReview = "Yes" Then
            opt = New String[]
            For Each $rData
              Select $rData["fldroute"]
                Case "suture", "msurg", "ortho", "extra", "topical"
                Case Else
                  aval = modMedConstant.GetDrugFromStockID($rData["flditem"])
                  If opt.Count = 0 Then
                    opt.Add(aval)
                  Else
                    If opt.Exist(aval) = False Then
                      opt.Add(aval)
                    Endif
                  Endif
              End Select
            Next

            Select cmbroute.Text
              Case "suture", "msurg", "ortho", "extra", "topical"
              Case Else
                $HideErr = True
                xcount = modMedError.ShowMedicationReviewPunching(Trim(txtencid.Text), cmbroute.Text, cmbmedicine.Text, txtdose.Value, cmbfreq.Text, opt, "Message Box")
            End Select
          Endif
        Endif
      Endif

      xval = modMedConstant.GetQuantityDosing(cmbmedicine.Text, txtdose.Value, cmbfreq.Text, txtday.Value)
      lblqty.Text = Round(xval, -1)
      txtqty.Value = Ceil(xval)
      txtqty.SetFocus
      Me.Exec("$_(" & JS(txtqty.Name & ":entry") & ").select()")
    Endif
  Endif

End

Public Sub txtqty_Change()

  If modBasic.$BillFractionQty = "Disable" Then
    If Frac(txtqty.Value) Then
      txtqty.Value = Fix(txtqty.Value)
    Endif
  Endif

End

Public Sub txtqty_Activate()

  chksave_Click()

End

Public Sub btnshoworigin_Click()

  If txtencid.Text Then
    FillDosingGrid()
  Endif

End

Public Sub chksave_Click()

  Dim xx As Float
  Dim xmax As Float
  Dim xmsg1 As String
  Dim xmsg2 As String
  Dim xroute As String

  If cmbdisctype.Text And If cmbledgerac.Text Then
    If txtencid.Text And If cmbroute.Text And If cmbmedicine.Text And If txtqty.Value > 0 Then

      If cmbroute.Text = "All" Then
        xroute = modStock.GetPharmCategoryFromStockName(cmbmedicine.Text, modBasic.$compID)
      Else
        xroute = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
      Endif

      If txtqty.Tag Then
        If txtqty.Value > CFloat(txtqty.Tag) Then
          txtqty.Value = CFloat(txtqty.Tag)
        Endif
      Else
        xmax = modStock.GetMaximumSales(cmbmedicine.Text, xroute)
        If xmax And If xmax < txtqty.Value Then
          xmsg1 = ("Max Sale Allowed : ") & xmax & gb.NewLine
          ' Me.Exec("Toastify({text: '" & xmsg1 & "', duration: 3000}).showToast()")
        Endif
      Endif

      xx = modStock.GetToDispenseStockOneComp(cmbmedicine.Text, modBasic.$compID, txtday.Value)
      If txtqty.Value > xx Then
        xmsg2 = ("Max Stock available : ") & xx
        Message.Warning(xmsg2, ("OK"))
        txtqty.SetFocus
      Else

        If AllowLockCheckPunching() = True Then
          EnterDosingRecord()
          cmbroute.SetFocus
        Else
          Me.Exec("Toastify({text: 'Encounter Locked', duration: 3000}).showToast()")
        Endif

      Endif
    Endif

  Endif

End

Private Sub AllowLockCheckPunching() As Boolean

  Dim xallow As Boolean
  Dim dtlast As Date

  If hPatient1.GetCashCreditMode() = "Cash" Then
    xallow = True
    If modBasic.$BillAddDiagnosis = "ForceAll" Then
      If txtsearch.Text And If txtcode.Text Then
      Else
        xallow = False
      Endif
    Endif

  Else

    If modBasic.$BillPunchingLock Then
      Select $sTatus
        Case "Admitted"
          xallow = True
        Case "Discharged", "LAMA", "Death", "Refer", "Absconder"
          dtlast = modPatient.GetDischargeDate(Trim(txtencid.Text))
          If DateDiff(dtlast, Now(), gb.Hour) > modBasic.$BillPunchingLock Then
            xallow = False
          Else
            xallow = True
          Endif
        Case Else
          dtlast = modPatient.GetRecordDate(Trim(txtencid.Text))
          If DateDiff(dtlast, Now(), gb.Hour) > modBasic.$BillPunchingLock Then
            xallow = False
          Else
            xallow = True
          Endif
      End Select
    Else
      xallow = True
    Endif
    If modBasic.$BillAddDiagnosis = "Force" And If txtreference.Text Then
      If txtsearch.Text And If txtcode.Text Then
      Else
        xallow = False
      Endif
    Else If modBasic.$BillAddDiagnosis = "ForceAll" Then
      If txtsearch.Text And If txtcode.Text Then
      Else
        xallow = False
      Endif
    Endif

  Endif
  Return xallow

End

Public Sub btngroup_Click()

  Dim sType As String
  Dim xList As String[]
  Dim xgroup As String
  Dim txprescriber As String
  Dim txpresno As String
  Dim dispmode As String
  Dim res As Result
  Dim xdose As Float
  Dim xtax As Float
  Dim discval As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  sType = $sTatus
  If rbout.Value = True Then
    dispmode = "OPD"
  Else If rbin.Value = True Then
    dispmode = "IPD"
  Else If rbasep.Value = True Then
    dispmode = "Aseptic"
  Endif

  If AllowLockCheckPunching() = True Then

    xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldmedgroup) as col from tblproductgroup"))
    xgroup = GridViewNew("select Protocol", xList, False)
    If xgroup Then
      res = modDatabase.$myConn.Exec("select fldroute,flditem,flddose,flddoseunit,fldfreq,fldday,fldqty,fldstart,fldadvice from tblproductgroup where fldmedgroup=&1", xgroup)
      If res.Available Then
        For Each res

          itemtype = modNonMedical.GetBillItemCategoryFromCombo(res["fldroute"])
          CPharmFix = New CFixRatePharmacy(itemtype, res["flditem"], cmbbillmode.Text)
          xfixrate = CPharmFix.GetFixRate()
          xfixname = CPharmFix.GetFixItem()

          itemmode = cmbbillmode.Text
          xtax = modNonMedical.ShowTaxValues(itemtype, res["flditem"])
          discval = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, itemtype, res["flditem"], itemmode)
          If res["fldroute"] = "suture" Or If res["fldroute"] = "msurg" Or If res["fldroute"] = "ortho" Then
            modPharmSub.InsertNonMedDosingEntry("Surgicals", Trim(txtencid.Text), hPatient1.GetCashCreditMode(), cmbbillmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["fldroute"], res["flditem"], res["fldqty"], sType, res["fldstart"], xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, res["fldadvice"], False)
          Else If res["fldroute"] = "extra" Then
            modPharmSub.InsertNonMedDosingEntry("Extra Items", Trim(txtencid.Text), hPatient1.GetCashCreditMode(), cmbbillmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["fldroute"], res["flditem"], res["fldqty"], sType, res["fldstart"], xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, res["fldadvice"], False)
          Else
            xdose = modMedDosing.GetDoseInMg(res["flddose"], res["flddoseunit"], Trim(txtencid.Text))
            If modMedConstant.GetNarcoticType(res["flditem"]) = "Yes" Then
              xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
              If xnarcotic Then
                txprescriber = xnarcotic[1]
                txpresno = xnarcotic[0]
              Endif
            Else
              txprescriber = ""
              txpresno = ""
            Endif
            modPharmSub.InsertDosingEntry(Trim(txtencid.Text), hPatient1.GetCashCreditMode(), cmbbillmode.Text, cmbdisctype.Text, cmbledgerac.Text, res["fldroute"], res["flditem"], xdose, res["fldfreq"], res["fldday"], res["fldqty"], sType, txprescriber, txpresno, res["fldstart"], xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, res["fldadvice"], False)
          Endif

        Next
        FillDosingGrid()
      Endif
    Endif

  Else
    Me.Exec("Toastify({text: 'Encounter Locked', duration: 3000}).showToast()")
  Endif

End

''----------------------------- save entry and display grid ------------------------------
Private Sub EnterDosingRecord()

  Dim sType As String
  Dim txprescriber As String
  Dim txpresno As String
  Dim dispmode As String
  Dim xtax As Float
  Dim discval As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  sType = $sTatus
  If rbout.Value = True Then
    dispmode = "OPD"
  Else If rbin.Value = True Then
    dispmode = "IPD"
  Else If rbasep.Value = True Then
    dispmode = "Aseptic"
  Endif

  If txtencid.Text And If cmbroute.Text And If cmbmedicine.Text And If txtqty.Value Then
    If modStockSub.GetComboStockControl(cmbroute.Text, cmbmedicine.Text, rbgeneric, rbrand, modDatabase.$medConn) = False Then
      cmbmedicine.Text = ""
    Else
      If cmbroute.Text = "All" Then
        itemtype = modStock.GetPharmCategoryFromStockName(cmbmedicine.Text, modBasic.$compID)
      Else
        itemtype = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
      Endif

      If itemtype = "Surgicals" Or If itemtype = "Extra Items" Then
        CPharmFix = New CFixRatePharmacy(itemtype, cmbmedicine.Text, cmbbillmode.Text)
        xfixrate = CPharmFix.GetFixRate()
        xfixname = CPharmFix.GetFixItem()
        ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, cmbmedicine.Text, cmbbillmode.Text)
        ' If xvarfix Then
        '   xfixrate = xvarfix[1]
        '   xfixname = xvarfix[0]
        ' Else
        '   xfixrate = 0
        '   xfixname = ""
        ' Endif
        itemmode = cmbbillmode.Text
        xtax = modNonMedical.ShowTaxValues(itemtype, cmbmedicine.Text)
        discval = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, itemtype, cmbmedicine.Text, itemmode)
        modPharmSub.InsertNonMedDosingEntry(itemtype, Trim(txtencid.Text), hPatient1.GetCashCreditMode(), cmbbillmode.Text, cmbdisctype.Text, cmbledgerac.Text, cmbroute.Text, cmbmedicine.Text, txtqty.Value, sType, 0, xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, "", False)

      Else
        If modMedConstant.GetNarcoticType(cmbmedicine.Text) = "Yes" Then
          xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
          If xnarcotic Then
            txprescriber = xnarcotic[1]
            txpresno = xnarcotic[0]
          Endif
        Else
          txprescriber = ""
          txpresno = ""
        Endif
        CPharmFix = New CFixRatePharmacy(itemtype, cmbmedicine.Text, cmbbillmode.Text)
        xfixrate = CPharmFix.GetFixRate()
        xfixname = CPharmFix.GetFixItem()
        ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, cmbmedicine.Text, cmbbillmode.Text)
        ' If xvarfix Then
        '   xfixrate = xvarfix[1]
        '   xfixname = xvarfix[0]
        ' Else
        '   xfixrate = 0
        '   xfixname = ""
        ' Endif
        itemmode = cmbbillmode.Text
        xtax = modNonMedical.ShowTaxValues(itemtype, cmbmedicine.Text)
        discval = modNonMedical.DiscPercentForCategoryValue(Trim(txtencid.Text), cmbdisctype.Text, itemtype, cmbmedicine.Text, itemmode)
        modPharmSub.InsertDosingEntry(Trim(txtencid.Text), hPatient1.GetCashCreditMode(), cmbbillmode.Text, cmbdisctype.Text, cmbledgerac.Text, cmbroute.Text, cmbmedicine.Text, txtdose.Value, cmbfreq.Text, txtday.Value, txtqty.Value, sType, txprescriber, txpresno, 0, xtax, discval, xfixname, xfixrate, "UseOwn", dispmode, "", False)                    '
      Endif

      ' BlinkOnPunch(cmbmedicine.Text)
      If $DefaultPharmType Then
        If $DefaultPharmType = "No Change" Then
        Else
          cmbroute.Text = $DefaultPharmType
        Endif
      Else
        cmbroute.Text = ""
      Endif
      BlankDosingBox()
      FillDosingGrid()
    Endif
  Endif

End

Public Sub TabPanel1_Click()

  If txtencid.Text Then
    If TabPanel1.Index = 0 Then
      FillDosingGrid()
    Else If TabPanel1.Index = 1 Then
      ShowOldEntry()
    Endif
  Endif

End

Public Sub FillDosingGrid()

  Dim sql As String

  If rborder.Value = True Then
    If rblabel.Value = True Then
      sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldqtydisp as qty,fldlabel,flduserid_order,flddiscper,fldtaxper,fldstarttime,fldfixrate,flddirection,flduserid_order,fldcomp_order,flditemtype,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldcurval=&3 and fldcomp_order like &4 ORDER BY fldid DESC"
    Else
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp as qty,fldlabel,flduserid_order,flddiscper,fldtaxper,fldstarttime,fldfixrate,flddirection,flduserid_order,fldcomp_order,flditemtype,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldcurval=&3 and fldcomp_order like &4 ORDER BY fldid DESC"                                                   ''
    Endif
    $rData = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, "Continue", cmborigin.Text)
    ' mnulabel.Visible = False
    ' mnudel.Visible = True
    ' mnudelall.Visible = True
    ' mnutaper.Visible = True
    ' mnualterdisc.Visible = True
  Else If rbdisp.Value = True Then
    If rblabel.Value = True Then
      sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,(fldqtydisp-fldqtyret) as qty,fldlabel,flduserid_order,flddiscper,fldtaxper,fldstarttime,fldfixrate,flddirection,flduserid,fldcomp,flditemtype,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 ORDER BY fldid DESC"
    Else
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,(fldqtydisp-fldqtyret) as qty,fldlabel,flduserid_order,flddiscper,fldtaxper,fldstarttime,fldfixrate,flddirection,flduserid,fldcomp,flditemtype,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 ORDER BY fldid DESC"                                                   ''
    Endif
    $rData = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True)
    ' mnulabel.Visible = True
    ' mnudel.Visible = False
    ' mnudelall.Visible = False
    ' mnutaper.Visible = False
    ' mnualterdisc.Visible = False
  Endif
  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)

  With GridView1
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    If modBasic.$MedNoRegimen = "Enable" Then
      .Columns[3].Width = CStr(400 * modBasic.$AppWidthRatio) & "px"
      .Columns[4].Hidden = True
      .Columns[5].Hidden = True
      .Columns[6].Hidden = True
    Else
      .Columns[3].Width = CStr(300 * modBasic.$AppWidthRatio) & "px"
      .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
      .Columns[5].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
      .Columns[6].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    Endif
    .Columns[7].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Width = CStr(25 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Hidden = True
    .Columns[10].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[11].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[12].Hidden = True
    .Columns[13].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    If modBasic.$MedNoRegimen = "Enable" Then
      .Columns[14].Hidden = True
    Else
      .Columns[14].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    Endif
    .Columns[15].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[16].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[17].Hidden = True
    .Columns[18].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[19].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[20].Hidden = True
    .Columns[21].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"

    .Columns[1].Text = "StartDate"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Particulars"
    If modBasic.$MedNoRegimen = "Enable" Then
    Else
      .Columns[4].Text = "Dose"
      .Columns[5].Text = "Freq"
      .Columns[6].Text = "Day"
    Endif
    .Columns[7].Text = "QTY"
    .Columns[10].Text = "Disc%"
    .Columns[11].Text = "Tax%"
    .Columns[13].Text = "FixRate"
    If modBasic.$MedNoRegimen = "Enable" Then
    Else
      .Columns[14].Text = "Direction"
    Endif
    If rborder.Value = True Then
      .Columns[15].Text = "Requested"
    Else If rbdisp.Value = True Then
      .Columns[15].Text = "Dispensed"
    Endif
    .Columns[16].Text = "CompID"
    .Columns[18].Text = "Package"
    .Columns[19].Text = "Mode"
    .Columns[21].Text = "Cash%"
  End With
  TotalDispensedAmount()

  hPatient1.ShowBillingDatainBox()

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rData[$aMyFields[Column]], gb.GeneralDate)
  Else If Column = 4 Then
    If rblabel.Value = True Then
      Data.Text = modPharmacy.GetMedicineDoseInFormat($rData[$aMyFields[Column]], "Label")
    Else
      Data.Text = $rData[$aMyFields[Column]]
    Endif
  Else If Column = 8 Then
    Data.Html = modString.GetImageForHTMLGrid(modMisc.GetGridIcon($rData[$aMyFields[Column]]), "75%", "75%")
    Data.Text = ""
  Else If Column = 15 Then
    Data.Text = modGeneral.GetUserFullName($rData[$aMyFields[Column]])
  Else
    Data.Text = $rData[$aMyFields[Column]]
  Endif

End

Private Sub TotalDispensedAmount()

  Dim amt As Float
  Dim subtot As Float
  Dim xtax As Float
  Dim xdisc As Float
  Dim xval As Float
  Dim discper As Float
  Dim taxper As Float
  Dim xCashCrd As Float
  Dim xCrdForm As Float
  Dim xrate As Float

  amt = 0
  subtot = 0
  xtax = 0
  xdisc = 0
  xCashCrd = 0
  For Each $rData
    If $rData["fldtaxper"] Then
      taxper = $rData["fldtaxper"]
    Else
      taxper = 0
    Endif
    If $rData["flddiscper"] Then
      discper = $rData["flddiscper"]
    Else
      discper = 0
    Endif
    xval = 0
    If $rData["fldfixrate"] Then
      xval = $rData["fldfixrate"] * $rData["qty"]
    Else
      If modBasic.$BillPharmSelection = "Multiple" Then
        xrate = modStock.GetCurrSellingPriceByStockNo(modPharmacy.GetStockNoFromDosing($rData["fldid"]))
        xval = xrate * CFloat($rData["qty"])
      Else
        xval = modStock.GetToDispenseCostOneComp(cmbbillmode.Text, $rData["flditem"], modBasic.$compID, $rData["flddays"], $rData["qty"])
      Endif
    Endif

    subtot = subtot + xval
    xdisc = xdisc + (xval * (discper / 100))
    xtax = xtax + (xval * (1 - discper / 100) * (taxper / 100))
    amt = amt + (xval * (1 - discper / 100) * (1 + taxper / 100))

    If $rData["fldbilltype"] = "Cash" Then
      xCashCrd = xCashCrd + (xval * (1 - discper / 100) * (1 + taxper / 100))
    Else If $rData["fldbilltype"] = "Credit" Then
      If $rData["fldcashincredit"] Then
        xCrdForm = $rData["fldcashincredit"]
      Else
        xCrdForm = 0
      Endif
      If xCrdForm Then
        xCashCrd = xCashCrd + ((xCrdForm / 100) * xval * (1 - discper / 100) * (1 + taxper / 100))
      Endif
    Endif
  Next

  txtsubtotalnew.Value = Round(subtot, -2)
  txtdiscnew.Value = Round(xdisc, -2)
  txttotaxnew.Value = Round(xtax, -2)
  txttotaldisp.Value = Round(amt, -2)
  txtpaynew.Value = Round(xCashCrd, -2)

End

''--------------------------------- billing---------------------------
Private Function GetHICapGo(sFixCode As String, sFixItem As String, sQty As Float, sDiscType As String) As Boolean

  Dim xgo As Boolean
  Dim xmax As Float

  xgo = True
  If sFixCode Then
    If $HiCappingVar.Exist(sFixCode) Then

      If Not $HiCappingVar[sFixCode] Then
        xgo = False
      Else
        xmax = $HiCappingVar[sFixCode] - modNonMedical.GetPatientItemSavedSalesPackage(Trim(txtencid.Text), sFixItem, sDiscType)
        If xmax < sQty Then
          xgo = False
        Endif
      Endif

    Endif
  Endif

  Return xgo

End

Public Sub mnusave_Click()

  If txtencid.Text Then
    If modBasic.$BillTwoStepBilling = "Yes" Then
      If modBasic.$BillPharmSelection = "Multiple" Then
        PharmacySaveSelect()
      Else
        PharmacySave()
      Endif
      Wait

      RefresgOldData()

      hPatient1.$ACLedger = cmbledgerac.Text
      hPatient1.$ACReference = Trim(txtreference.Text)
      hPatient1.txtdiscamt.SetFocus

    Endif
  Endif

End

' Public Sub chkqrscan_Click()
'
'   If chkqrscan.Value = True Then
'If Message.Optional("<h1>Terms of Use of QR Scan Payment</h1><br>" & modLongVar.$AppLegalWarning, ("Accept"), ("Always Accept Terms of Use of QR Scan Payment")) = 1 Then
'     $AdvPayment = "Advance"
'   Else
'     $AdvPayment = ""
'   Endif
'
' End

Public Sub RefresgOldData()

  FillDosingGrid()
  ShowOldEntry()

End

Public Sub btnsaveall_Click()

  Dim CPayForm As GetQRSCanPay
  Dim xtraceid As String

  If txtencid.Text Then

    xtraceid = ""
    If $AdvPayment = "Advance" Then
      If $F12Lock = False Then
        $F12Lock = True
        CPayForm = New GetQRSCanPay(Trim(txtencid.Text), hPatient1.$billtype, cmbledgerac.Text, Trim(txtreference.Text), $sTatus, hPatient1.$LockToComp)
        xtraceid = CPayForm.GetTransactionDone()
        If xtraceid Then
          hPatient1.$AdvTraceID = xtraceid
          GetF12KeyPress()
          $F12Lock = False
        Else
          ClearQRCodeExt()
          $F12Lock = False
        Endif
      Endif
    Else
      GetF12KeyPress()
    Endif

  Endif

End

Private Sub GetF12KeyPress()

  Dim xline As String
  ' Dim hForm As FmMiniCalc
  ' Dim hForm1 As FmCalcSource

  Dim xtotamt As Float
  Dim xinvlst As String[]
  Dim xinvno As String

  If modBasic.$BillPharmSelection = "Multiple" Then
    PharmacySaveSelect()
  Else
    PharmacySave()
  Endif
  Wait

  If ShowBilling() = True Then
    If hPatient1.Enabled = True Then
      hPatient1.$ACLedger = cmbledgerac.Text
      hPatient1.$ACReference = Trim(txtreference.Text)
      hPatient1.DirectCashBilling()
      Wait
      RefresgOldData()

      xinvlst = New String[]
      xtotamt = 0
      xinvlst = hPatient1.GetInvoiceList()
      xtotamt = hPatient1.GetBillTotal()
      $MiniCalc = hPatient1.$DisplayMiniCalc
      If cmbdisctype.Text = modBasic.$SSFAccident Or If cmbdisctype.Text = modBasic.$SSFMedical Or If cmbdisctype.Text = modBasic.$SSFCritical Then
        If modBasic.$SSFBookLock = "Enable" Then
          For Each xinvno In xinvlst
            GetSSFBookingLock(xinvno)
          Next
        Endif

      Else If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
        UploadHIClaimAuto()

      Endif

      If modBasic.$BillCashSource = "Enable" Then
      Else
        If $MiniCalc = "BlankForm" Then
          hPatient1.GetBillingFormBlank()
        Else If $MiniCalc = "Calculator" Then
          ' hForm = New FmMiniCalc(xtotamt)
          ' hForm.ShowModal
        Else If $MiniCalc = "InvoiceInfo" Then
          xline = "<b>EncID:</b> " & Trim(txtencid.Text) & "<br>"
          xline = xline & "<b>Name:</b> " & txtpatientname.Text & "<br>"
          xline = xline & "<b>Invoice:</b> " & xinvlst.Join("; ") & "<br>"
          xline = xline & "<b>RecvAMT:</b> " & modReportVar.GetLocaleNumberFormat(xtotamt, gb.Currency)
          If Message.Question(xline, ("Close"), ("Blank")) = 2 Then
            hPatient1.GetBillingFormBlank()
          Endif
        Endif
      Endif

    Else
      RefresgOldData()
    Endif
  Else
    RefresgOldData()
  Endif

End

Private Sub GetSSFBookingLock(sInvoice As String)

  Dim aForm As CssfAPIBooking
  Dim xmsg As String

  Dim res As Result
  Dim invType As String
  Dim sTable As String

  invType = modBillLock.GetInvoiceFormatNo(sInvoice)
  If invType = "Invoice" Then
    sTable = "tblpatbilldetail"
  Else If invType = "Receipt" Then
    sTable = "tbltempbilldetail"
  Endif

  If cmbdisctype.Text = modBasic.$SSFAccident Or If cmbdisctype.Text = modBasic.$SSFMedical Or If cmbdisctype.Text = modBasic.$SSFCritical Then
    res = modDatabase.$myConn.Exec(Subst("select fldencounterval,fldbillno,fldchequeno,flduserid,flditemamt from &1", sTable) & " where fldbillno=&1 and fldencounterval=&2 and fldbankname in(select fldacledger from tbldiscount where (fldreference=&3 or fldreference=&4 or fldreference=&5 or fldreference=&6))", sInvoice, Trim(txtencid.Text), "Accident SSF", "Medical SSF", "MedExtra SSF", "Critical SSF")
    If res.Available And If res["flditemamt"] Then

      aForm = New CssfAPIBooking($xNHISCode, Trim(txtencid.Text), res["fldchequeno"], sInvoice, res["flditemamt"])
      xmsg = aForm.GetAPIErrorOutput()
      If xmsg Then
        $MiniCalc = ""
        If xmsg = "Success" Then
          modBillings.AddInvoiceBooking(sInvoice)
        Else
          Message.Warning(xmsg, "OK")
        Endif
      Endif

    Endif
  Endif

End

Public Sub mnussfBooking_Click()

  Dim res As Result
  Dim xinvlst As String[]
  Dim xinvno As String

  res = modDatabase.$myConn.Exec("select fldbillno,flduserid,flditemamt from tblpatbilldetail where fldencounterval=&1 and fldbankname in(select fldacledger from tbldiscount where (fldreference=&2 or fldreference=&3 or fldreference=&4 or fldreference=&5)) and fldbillno not in(select fldbillno from tblpatbillbooking) UNION ALL select fldbillno,flduserid,flditemamt from tbltempbilldetail where fldencounterval=&1 and fldbankname in(select fldacledger from tbldiscount where (fldreference=&2 or fldreference=&3 or fldreference=&4 or fldreference=&5)) and fldbillno not in(select fldbillno from tblpatbillbooking)", Trim(txtencid.Text), "Accident SSF", "Medical SSF", "MedExtra SSF", "Critical SSF")
  xinvlst = SelectListView("Select Invoices for SSF Booking", modControlSub.GetDirectFillresultNoNull(res), False)
  If xinvlst And If xinvlst.Count Then
    For Each xinvno In xinvlst
      GetSSFBookingLock(xinvno)
    Next
  Endif

End

Public Sub mnusaveall_Click()

  btnsaveall_Click()

End

Private Sub PharmacySave()

  Dim sql1 As String
  Dim res1 As Result

  Dim tax As Float
  Dim disc As Float
  Dim xrate As Float
  Dim xitem As String

  Dim res2 As Result
  Dim sql2 As String

  Dim qtynew As Float
  Dim sList As Long[]
  Dim xerr As String
  Dim xallow As Boolean
  Dim xCshCrd As Float
  Dim xfixcode As String

  xerr = ""
  If txtencid.Text Then
    sList = New Long[]

    If rborder.Value = True Then
      sql1 = "select fldid,fldtime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlabel,flditemtype,fldfixname,fldfixrate,fldtaxper,flddiscper,fldbillingmode,flddisctype,fldacledger,fldbilltype,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldcurval=&3 and fldqtydisp>&4 and fldbilltype=&5 and fldacledger=&6 and fldcomp_order like &7"                                                   ''
      res1 = modDatabase.$myConn.Exec(sql1, Trim(txtencid.Text), False, "Continue", 0, hPatient1.GetCashCreditMode(), cmbledgerac.Text, cmborigin.Text)
      If res1.Available = True Then

        For Each res1
          'get tax and discount percentages
          If res1["fldtaxper"] Then
            tax = res1["fldtaxper"]
          Else
            tax = 0
          Endif
          If res1["flddiscper"] Then
            disc = res1["flddiscper"]
          Else
            disc = 0
          Endif
          If res1["fldcashincredit"] Then
            xCshCrd = res1["fldcashincredit"]
          Else
            xCshCrd = 0
          Endif

          If res1["fldfixrate"] Then
            xrate = res1["fldfixrate"]
          Else
            xrate = modStock.GetCurrentSellingPrice(res1["flditem"], modBasic.$compID)
          Endif
          xallow = modNonMedical.AllowPharmProceedPreBill(Trim(txtencid.Text), res1["flddisctype"], res1["fldqtydisp"], xrate, res1["flddiscper"], res1["fldbilltype"], xCshCrd, res1["fldroute"], res1["flditem"])
          If xallow = True Then
            xfixcode = modNonMedical.GetBillItemHIAbbv(res1["fldfixname"], res1["flditemtype"])
            If GetHICapGo(xfixcode, res1["fldfixname"], res1["fldqtydisp"], res1["flddisctype"]) = True Then
              If xfixcode And If $HiCappingVar.Exist(xfixcode) Then
                $HiCappingVar[xfixcode] = $HiCappingVar[xfixcode] - res1["fldqtydisp"]
              Endif

              qtynew = res1["fldqtydisp"]
              modDatabase.$myConn.Begin
              While qtynew > 0
                'get stockno, rate and quantity based on expiry check
                If modBasic.$SkipExpiry = "ExpireOnUse" Then
                  sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldexpiry>&4 and fldqty>&5"
                  res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], modBasic.$compID, 1, DateAdd(modDate.StartSqlDate(Now()), gb.Day, CInt(res1["flddays"])), 0)
                Else If modBasic.$SkipExpiry = "Expired" Then
                  sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldexpiry>&4 and fldqty>&5"
                  res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], modBasic.$compID, 1, modDate.StartSqlDate(Now()), 0)
                Else
                  sql2 = "select fldstockno,fldqty from tblentry where fldstockid=&1 and fldcomp=&2 and fldstatus=&3 and fldqty>&4"
                  res2 = modDatabase.$myConn.Exec(sql2, res1["flditem"], modBasic.$compID, 1, 0)
                Endif
                If res2.Available Then
                  res2.MoveFirst

                  xitem = res1["flditem"]
                  If res1["fldfixname"] Then
                    xitem = res1["fldfixname"]
                    If res1["fldfixrate"] Then
                      xrate = res1["fldfixrate"]
                    Else
                      xrate = 0
                    Endif
                  Else
                    xrate = modStock.GetSellingPriceByStockNo(res2["fldstockno"], res1["fldbillingmode"])
                  Endif

                  If qtynew <= res2["fldqty"] Then
                    modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, qtynew, tax, disc, xCshCrd, "Done", res1["fldid"], True, False, modBasic.$compID)
                    modStockSub.AddToExistEntry(res2["fldstockno"], (0 - qtynew), modBasic.$compID)
                    qtynew = 0
                  Else If qtynew > res2["fldqty"] Then
                    modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, res2["fldqty"], tax, disc, xCshCrd, "Done", res1["fldid"], True, False, modBasic.$compID)
                    modStockSub.AddToExistEntry(res2["fldstockno"], (0 - res2["fldqty"]), modBasic.$compID)
                    qtynew = qtynew - res2["fldqty"]
                  Endif
                  Wait
                  If res1["flddose"] And If res1["fldfreq"] And If res1["flddays"] And If res1["fldqtydisp"] Then
                    If res1["fldlabel"] = True Then
                      sList.Add(res1["fldid"])
                    Endif
                  Endif
                Else
                  Break
                Endif
              Wend
              If res1["fldqtydisp"] > qtynew Then
                If qtynew > 0 Then
                  modPharmSub.DuplicateRecordWithQTY(res1["fldid"], qtynew)
                  modPharmSub.UpdateQTYBefDispensing(res1["fldid"], res1["fldqtydisp"] - qtynew)
                Endif
                modPharmSub.UpdateDispensing(res1["fldid"], True)
              Endif
              modDatabase.$myConn.Commit

            Else
              xerr = xerr & "Cap Limit exceeded for " & res1["fldfixname"] & gb.NewLine
            Endif
          Else
            xerr = xerr & res1["fldfixname"] & gb.NewLine
          Endif
        Next

        If xerr Then
          Message.Warning("<b>Over Set Discount/Credit Limit:</b>" & gb.NewLine & xerr, "OK")
        Endif

      Endif
    Endif

    modPharmSub.PrintLabelSelList(sList, GetLabelMode())
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

Private Sub PharmacySaveSelect()

  Dim sql1 As String
  Dim res1 As Result

  Dim tax As Float
  Dim disc As Float
  Dim xrate As Float
  Dim xitem As String

  Dim res2 As Result
  Dim sql2 As String

  Dim qtynew As Float
  Dim xerr As String
  Dim xallow As Boolean
  Dim xCshCrd As Float
  Dim xfixcode As String

  xerr = ""
  If txtencid.Text Then

    If rborder.Value = True Then
      sql1 = "select fldid,fldtime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlabel,flditemtype,fldfixname,fldfixrate,fldtaxper,flddiscper,fldbillingmode,flddisctype,fldacledger,fldbilltype,fldcashincredit,flditemno from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldcurval=&3 and fldqtydisp>&4 and fldbilltype=&5 and fldacledger=&6 and fldcomp_order like &7"                                                   ''
      res1 = modDatabase.$myConn.Exec(sql1, Trim(txtencid.Text), False, "Continue", 0, hPatient1.GetCashCreditMode(), cmbledgerac.Text, cmborigin.Text)
      If res1.Available = True Then
        For Each res1

          'get tax and discount percentages
          If res1["fldtaxper"] Then
            tax = res1["fldtaxper"]
          Else
            tax = 0
          Endif
          If res1["flddiscper"] Then
            disc = res1["flddiscper"]
          Else
            disc = 0
          Endif
          If res1["fldcashincredit"] Then
            xCshCrd = res1["fldcashincredit"]
          Else
            xCshCrd = 0
          Endif

          xallow = modNonMedical.AllowPharmProceedPreBill(Trim(txtencid.Text), res1["flddisctype"], res1["fldqtydisp"], xrate, res1["flddiscper"], res1["fldbilltype"], xCshCrd, res1["fldroute"], res1["flditem"])
          If xallow = True Then
            xfixcode = modNonMedical.GetBillItemHIAbbv(res1["fldfixname"], res1["flditemtype"])
            If GetHICapGo(res1["fldfixname"], res1["fldqtydisp"], res1["flddisctype"]) = True Then
              If xfixcode And If $HiCappingVar.Exist(xfixcode) Then
                $HiCappingVar[res1["fldfixname"]] = $HiCappingVar[res1["fldfixname"]] - res1["fldqtydisp"]
              Endif

              qtynew = res1["fldqtydisp"]
              modDatabase.$myConn.Begin
              If qtynew > 0 Then
                sql2 = "select fldstockno,fldqty,fldsellpr from tblentry where fldstockno=&1 and fldcomp=&2 and fldqty>&3"
                res2 = modDatabase.$myConn.Exec(sql2, res1["flditemno"], modBasic.$compID, 0)

                If res2.Available Then
                  res2.MoveFirst

                  xitem = res1["flditem"]
                  If res1["fldfixname"] Then
                    xitem = res1["fldfixname"]
                    If res1["fldfixrate"] Then
                      xrate = res1["fldfixrate"]
                    Else
                      xrate = 0
                    Endif
                  Else
                    xrate = res2["fldsellpr"]
                  Endif

                  If qtynew <= res2["fldqty"] Then
                    modBillings.InsertBlankBillItemNewApp(Trim(txtencid.Text), res1["fldbilltype"], res1["fldbillingmode"], res1["flddisctype"], res1["fldacledger"], res1["flditemtype"], res2["fldstockno"], xitem, xrate, qtynew, tax, disc, xCshCrd, "Done", res1["fldid"], True, False, modBasic.$compID)
                    modStockSub.AddToExistEntry(res2["fldstockno"], (0 - qtynew), modBasic.$compID)
                    modPharmSub.UpdateDispensing(res1["fldid"], True)
                    qtynew = 0
                  Endif
                  Wait

                Else
                  Break
                Endif
              Endif
              modDatabase.$myConn.Commit

            Else
              xerr = xerr & "Cap Limit exceeded for " & res1["fldfixname"] & gb.NewLine
            Endif
          Else
            xerr = xerr & res1["fldfixname"] & gb.NewLine
          Endif

        Next

        If xerr Then
          Message.Warning("<b>Over Set Discount/Credit Limit:</b>" & gb.NewLine & xerr, ("OK"))
        Endif
      Endif
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

''-----edit buttons for ordered only ---------------
Public Sub btnmeddate_Click()

  Dim xdate As Date

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If modGeneral.AllowClinicalEdit($rData["flduserid_order"]) = True Then
        xdate = GetDateValue($rData["flditem"], ("Alter Starting Date"), $rData["fldstarttime"])
        If xdate Then
          modPharmSub.UpdateStartBefDispensing($rData["fldid"], xdate)
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

Public Sub txtmeddose_Click()

  Dim xval As Float

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If modGeneral.AllowClinicalEdit($rData["flduserid_order"]) = True Then
        xval = InputValue($rData["flditem"], ("Alter Unit Dose"), $rData["flddose"])
        If xval Then
          modPharmSub.UpdateDoseBefDispensing($rData["fldid"], xval)
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnutaper_Click()

  Dim hForm As Fmtaperdose

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If $rData["fldfreq"] = "Tapering" Then
        hForm = New Fmtaperdose($rData["fldid"])
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub btnmedfreq_Click()

  Dim yval As String

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If modGeneral.AllowClinicalEdit($rData["flduserid_order"]) = True Then
        yval = InputCombo($rData["flditem"], ("Alter Frequency"), modMedicine.FrequencyCombo(), $rData["fldfreq"], True)
        If yval Then
          modPharmSub.UpdateFreqBefDispensing($rData["fldid"], yval)
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnmeddays_Click()

  Dim xval As Float

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If modGeneral.AllowClinicalEdit($rData["flduserid_order"]) = True Then
        xval = InputValue($rData["flditem"], ("Alter Duration"), $rData["flddays"])
        If xval Then
          modPharmSub.UpdateDaysBefDispensing($rData["fldid"], xval)
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnmedqty_Click()

  Dim xval As Float

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      xval = InputValue($rData["flditem"], ("Alter Quantity"), $rData["qty"])
      modPharmSub.UpdateQTYBefDispensing($rData["fldid"], xval)
      FillDosingGrid()
    Endif
  Endif

End

Public Sub btnadvice_Click()

  Dim yval As String

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If modGeneral.AllowClinicalEdit($rData["flduserid_order"]) = True Then
        yval = InputBox($rData["flditem"], ("Alter Direction"), $rData["flddirection"])
        If yval Then
          modPharmSub.UpdateAdviceBefDispensing($rData["fldid"], yval)
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnuphmcashper_Click()

  Dim res As Result
  Dim xcshCrd As Float

  If GridView1.Selection.Count Then
    $rData.MoveTo(GridView1.Selection[0])
    If $rData["fldbilltype"] = "Credit" Then
      xcshCrd = InputValue("Provide percentage of Cash from this item", "Cash in Credit", $rData["fldcashincredit"])
      If xcshCrd <= 100 And If xcshCrd >= $rData["fldcashincredit"] Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rData["fldid"])
        If res.Available Then
          res["fldcashincredit"] = xcshCrd
          res["xyz"] = False
          res.Update
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnucashpharm_Click()

  Dim sql As String
  Dim res As Result
  Dim xcrdt As Float
  Dim xtotal As Float

  Dim xnewval As Float
  Dim xperc As Float
  Dim res1 As Result

  Dim taxper As Float
  Dim discper As Float
  Dim xval As Float

  xcrdt = 0
  xtotal = 0
  sql = "select fldid,flditemtype,flditem,flddays,fldqtydisp,flddiscper,fldtaxper,fldfixrate,flddisctype,fldbilltype,fldbillingmode,fldcashincredit from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldcurval=&3 and fldcomp_order like &4 and flddisctype=&5 and fldbilltype=&6"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), False, "Continue", cmborigin.Text, cmbdisctype.Text, "Credit")
  If res.Available Then
    For Each res
      If res["fldtaxper"] Then
        taxper = res["fldtaxper"]
      Else
        taxper = 0
      Endif
      If res["flddiscper"] Then
        discper = res["flddiscper"]
      Else
        discper = 0
      Endif

      xval = 0
      If res["fldfixrate"] Then
        xval = CFloat(res["fldfixrate"]) * CFloat(res["fldqtydisp"])
      Else
        xval = modStock.GetToDispenseCostOneComp(cmbbillmode.Text, res["flditem"], modBasic.$compID, CFloat(res["flddays"]), CFloat(res["fldqtydisp"]))
      Endif

      If res["fldcashincredit"] Then
        xcrdt = xcrdt + (res["fldcashincredit"] / 100) * xval
      Endif
      xtotal = xtotal + xval
    Next
  Endif

  If xtotal Then
    xnewval = InputValue("Total Cash Amount to collect from Credit Invoice of this scheme", "Cash in Credit Amount", xcrdt)
    If xnewval <= xtotal And If xnewval >= xcrdt Then
      xperc = Round((xnewval * 100) / xtotal, -2)
      For Each res
        res1 = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", res["fldid"])
        res1["fldcashincredit"] = xperc
        res1["xyz"] = False
        res1.Update
      Next
      FillDosingGrid()
    Endif
  Else
    Message.Warning("No Credit Amount", "OK")
  Endif

End

Public Sub btnmeddelete_Click()

  Dim res As Result

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1 and fldsave_order=&2", $rData["fldid"], False)
        If modGeneral.AllowClinicalEdit(res["flduserid_order"]) = True Then
          modDatabase.$myConn.Delete("tblpatdosing", "fldid=&1 and fldsave_order=&2", $rData["fldid"], False)
        Else
          res["fldcurval"] = "Cancelled"
          res["flduserid_order"] = modBasic.$lbluser
          res["xyz"] = False
          res.Update
        Endif
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub btntax_Click()

  Dim xval As Float
  Dim fixtax As String

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      fixtax = modBasic.$BillFixTax
      If fixtax = "No" Then
        If modBasic.$BillEditTaxDiscForm = "Amount" Then
        Else
          xval = InputValue($rData["flditem"], ("Change Tax Percentage"), $rData["fldtaxper"])
          If xval >= 0 And If xval <= 100 Then
            modPharmSub.UpdateTaxPerDispensing($rData["fldid"], xval)
            FillDosingGrid()
          Endif
        Endif
      Endif
    Endif
  Endif

End

Public Sub btndisc_Click()

  Dim xval As Float
  Dim xrate As Float
  Dim xamt As Float
  Dim fixdisc As String

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      fixdisc = modBasic.$BillFixDisc
      If fixdisc = "No" Then
        If modBasic.$BillEditTaxDiscForm = "Amount" Then
          xrate = modStock.GetToDispenseRateOneComp(cmbbillmode.Text, $rData["flditem"], modBasic.$compID, $rData["flddays"])
          xamt = InputValue($rData["flditem"], ("Change Discount Amount"), xrate * $rData["qty"] * ($rData["flddiscper"] / 100))
          If xamt >= 0 And If xamt <= xrate * $rData["qty"] Then
            xval = Round(xamt * 100 / (xrate * $rData["qty"]), -2)
            modPharmSub.UpdateDiscPerDispensing($rData["fldid"], xval)
            FillDosingGrid()
          Endif

        Else
          xval = InputValue($rData["flditem"], ("Change Discount Percentage"), $rData["flddiscper"])
          If xval >= 0 And If xval <= 100 Then
            modPharmSub.UpdateDiscPerDispensing($rData["fldid"], xval)
            FillDosingGrid()
          Endif

        Endif
      Endif
    Endif
  Endif

End

Public Sub btndiscall_Click()

  Dim fixdisc As String
  Dim xval As Float

  If rborder.Value = True Then
    fixdisc = modBasic.$BillFixDisc
    If fixdisc = "No" Then
      If modBasic.$BillEditTaxDiscForm = "Amount" Then
      Else
        xval = InputValue(("Edit Discount Percentage for all Rows"), ("Change Discount Percentage"), 0)
        If xval > 0 And If xval <= 100 Then
          For Each $rData
            modPharmSub.UpdateDiscPerDispensing($rData["fldid"])
          Next
        Endif
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub btnrate_Click()

  Dim xval As Float
  Dim res As Result
  Dim xx As Float

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      If modBasic.$BillEditRate = "Yes" Then
        If $rData["fldfixrate"] Then
          xx = $rData["fldfixrate"]
        Else
          xx = 0
        Endif
        xval = InputValue(("Set Fixed Rate for ") & $rData["flditem"], ("Edit Rate"), xx)
        If xval Then
          res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rData["fldid"])
          res["fldfixrate"] = xval
          res["xyz"] = False
          res.Update
          FillDosingGrid()
        Endif
      Endif
    Endif
  Endif

End

''--------------- alter buttons for all ---------------
Public Sub mnuclear_Click()

  If GridView1.Selection.Count Then
    If Message.Question(("Do you want to send out of pharmacy ?"), ("No"), ("Yes")) = 2 Then
      $rData.MoveTo(GridView1.Selection[0])
      modPharmSub.UpdateDispensing($rData["fldid"], True)
      FillDosingGrid()
    Endif
  Endif

End

Public Sub btnmedlabel_Click()

  Dim hClabel As CLabelSize

  If GridView1.Selection.Count Then
    If rborder.Value = True Then
      $rData.MoveTo(GridView1.Selection[0])
      hClabel = New CLabelSize($rData["fldid"], GetLabelMode())
      ' modPrint.PrintPopUp(CStr($rData["fldid"], hClabel.LabelPath(), "LabelSize")
    Endif
  Endif

End

Public Sub mnureview_Click()

  Dim opt As String[]
  Dim xval As String

  opt = New String[]
  For Each $rData
    Select $rData["fldroute"]
      Case "suture", "msurg", "ortho", "extra", "topical"
      Case Else
        xval = modMedConstant.GetDrugFromStockID($rData["flditem"])
        If opt.Count = 0 Then
          opt.Add(xval)
        Else
          If opt.Exist(xval) = False Then
            opt.Add(xval)
          Endif
        Endif
    End Select
  Next

  If GridView1.Selection.Count Then
    $rData.MoveTo(GridView1.Selection[0])
    modMedError.ShowMedicationReviewSingleDosID($rData["fldid"], opt, "Report")
  Endif

End

Public Sub mnureviewall_Click()

  Dim opt As Long[]

  If GridView1.Count Then
    opt = New Long[]
    For Each $rData
      Select $rData["fldroute"]
        Case "suture", "msurg", "ortho", "extra", "topical"
        Case Else
          opt.Add($rData["fldid"])
      End Select
    Next
    modMedError.ShowMedicationReviewMultipleDosID(Trim(txtencid.Text), opt, "Report")
  Endif

End

Public Sub btncounsel_Click()

  Dim xPath As String

  If GridView1.Selection.Count Then
    $rData.MoveTo(GridView1.Selection[0])
    xPath = modCHTMLPatient.ShowSingleCounselingReport($rData["fldid"])
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnuhelp_Click()

  Dim xx As String
  Dim cstamt As Float
  Dim discper As Float
  Dim taxper As Float

  If GridView1.Selection.Count Then
    $rData.MoveTo(GridView1.Selection[0])
    If $rData["fldfixrate"] Then
      cstamt = $rData["fldfixrate"] * $rData["qty"]
    Else
      cstamt = modStock.GetToDispenseCostOneComp(cmbbillmode.Text, $rData["flditem"], modBasic.$compID, $rData["flddays"], $rData["qty"])
    Endif
    taxper = $rData["fldtaxper"]
    discper = $rData["flddiscper"]

    xx = "<b>" & $rData["flditem"] & "</b>" & "<br>"
    xx = xx & "SubTotal: " & modReportVar.GetLocaleNumberFormat(cstamt, gb.Currency) & "<br>"
    xx = xx & "Disc AMT: " & modReportVar.GetLocaleNumberFormat(cstamt * discper / 100, gb.Currency) & "<br>"
    xx = xx & "Tax AMT : " & modReportVar.GetLocaleNumberFormat(cstamt * (1 - discper / 100) * (taxper / 100), gb.Currency) & "<br>"
    xx = xx & "TOTAL   : " & modReportVar.GetLocaleNumberFormat(cstamt * (1 - discper / 100) * (1 + taxper / 100), gb.Currency)
    Message.Info(xx, ("OK"))
  Endif

End

' Public Sub mnustock_Click()
'
'   Dim hForm As FRequest
'   Dim sql As String
'   Dim res As Result
'
'   If GridView1.Selection.Count > 0 Then
'     sql = "select fldstockno,fldstockid,fldbatch,fldexpiry,fldqty,fldsellpr,fldstatus,fldcomp from tblentry where fldstockid=&1"
'     res = modDatabase.$myConn.Exec(sql, GridView1[GridView1.Row, 3].Text)
'     If res.Available Then
'       hForm = New FRequest(res, GridView1[GridView1.Row, 3].Text, "StockDB", False)
'       hForm.ShowModal
'     Endif
'   Endif
'
' End
'
' Public Sub mnucounsel_Click()
'
'   Dim doslst As Long[]
'   Dim i As Integer
'   Dim xPath As String
'
'   If txtencid.Text Then
'     doslst = New Long[]
'     For i = 0 To GridView1.Count - 1
'       doslst.Add(GridView1[i, 0].Text)
'     Next
'
'     xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
'
'     modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
'   Endif
'
' End
'
'
'
' Public Sub mnualternative_Click()
'
'   Dim xx As String
'
'   xx = CAlternative("", "", GetBrandGenerricType())
'
' End
'
'
' Public Sub mnualtern_Click()
'
'   Dim xx As String
'   Dim res As Result
'
'   xx = CAlternative(GridView1[GridView1.Row, 2].Text, GridView1[GridView1.Row, 3].Text, GetBrandGenerricType())
'   If xx Then
'     res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", GridView1[GridView1.Row, 0].Text)
'     res["flditem"] = xx
'     res["xyz"] = False
'     res.Update
'     FillDosingGrid()
'   Endif
'
' End
'

''============================ saved entry ============================
Private Sub ExecuteOldQuery()

  Dim sql As String
  Dim cashsubt As Float
  Dim cashtax As Float
  Dim cashdisc As Float
  Dim cashtot As Float
  Dim cashpay As Float

  Dim crdtsubt As Float
  Dim crdttax As Float
  Dim crdtdisc As Float
  Dim crdttot As Float
  Dim crdtpay As Float

  cashsubt = 0
  cashtax = 0
  cashdisc = 0
  cashtot = 0
  cashpay = 0

  crdtsubt = 0
  crdttax = 0
  crdtdisc = 0
  crdttot = 0
  crdtpay = 0

  If modBasic.$BillSeparateReturn = "No" Then
    sql = "select fldid,fldtime,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscper,fldtaxper,fldditemamt,fldpayto,fldrefer,fldtaxamt,flddiscamt,fldbillingmode,fldsample,fldbilltype,flddisctype,fldacledger,fldretqty,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and fldcomp=&4 and (flditemtype=&5 or flditemtype=&6 or flditemtype=&7)"
  Else
    sql = "select fldid,fldtime,flditemtype,flditemno,flditemname,flditemrate,flditemqty,flddiscper,fldtaxper,fldditemamt,fldpayto,fldrefer,fldtaxamt,flddiscamt,fldbillingmode,fldsample,fldbilltype,flddisctype,fldacledger,fldretqty,fldcashincredit from tblpatbilling where fldencounterval=&1 and fldsave=&2 and fldprint=&3 and fldcomp=&4 and (flditemtype=&5 or flditemtype=&6 or flditemtype=&7) and flditemqty>&8"                         ''
  Endif
  $rData1 = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, False, modBasic.$compID, "Medicines", "Surgicals", "Extra Items", 0)

  For Each $rData1
    If $rData1["fldbilltype"] = "Cash" Then
      cashsubt = cashsubt + $rData1["flditemrate"] * $rData1["flditemqty"]
      cashtax = cashtax + $rData1["fldtaxamt"]
      cashdisc = cashdisc + $rData1["flddiscamt"]
      cashtot = cashtot + $rData1["fldditemamt"]
      cashpay = cashpay + $rData1["fldditemamt"]
    Else If $rData1["fldbilltype"] = "Credit" Then
      crdtsubt = crdtsubt + $rData1["flditemrate"] * $rData1["flditemqty"]
      crdttax = crdttax + $rData1["fldtaxamt"]
      crdtdisc = crdtdisc + $rData1["flddiscamt"]
      crdttot = crdttot + $rData1["fldditemamt"]
      If $rData1["fldcashincredit"] Then
        crdtpay = crdtpay + ($rData1["fldcashincredit"] / 100) * $rData1["fldditemamt"]
      Endif
    Endif
  Next

  txtsubtotasave.Value = cashsubt
  txttotaxsave.Value = cashtax
  txtdiscsave.Value = cashdisc
  txtnetotalsave.Value = cashtot
  txtpaysavecash.Value = cashpay

  txtsubtotasavecredit.Value = crdtsubt
  txtdiscsavecredit.Value = crdttax
  txttotaxsavecredit.Value = crdtdisc
  txtnetotalsavecredit.Value = crdttot
  txtpaysavecredit.Value = crdtpay

End

Private Sub ShowOldEntry()

  ExecuteOldQuery()
  $aMyFields1 = New String[]
  modGridView.ReadSmallData(GridView2, $rData1, $aMyFields1)

  With GridView2
    .Columns[1].Text = "DateTime"
    .Columns[4].Text = "Particulars"
    .Columns[5].Text = "Rate"
    .Columns[6].Text = "QTY"
    .Columns[7].Text = "Disc%"
    .Columns[8].Text = "Tax%"
    .Columns[9].Text = "Total"
    .Columns[10].Text = "Payable"
    .Columns[11].Text = "Referral"
    .Columns[16].Text = "Mode"
    .Columns[17].Text = "Package"
    .Columns[18].Text = "Account"

    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Hidden = True
    .Columns[3].Hidden = True
    .Columns[4].Width = CStr(300 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[10].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[11].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[12].Hidden = True
    .Columns[13].Hidden = True
    .Columns[14].Hidden = True
    .Columns[15].Hidden = True
    .Columns[16].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[17].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[18].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[19].Hidden = True
    .Columns[20].Hidden = True
  End With

  hPatient1.ShowBillingDatainBox()

End

Public Sub GridView2_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData1.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rData1[$aMyFields1[Column]], gb.GeneralDate)
  Else If Column = 10 Then
    Data.Text = modGeneral.GetUserFullName($rData1[$aMyFields1[Column]])
  Else If Column = 11 Then
    Data.Text = modGeneral.GetUserFullName($rData1[$aMyFields1[Column]])
  Else
    Data.Text = $rData1[$aMyFields1[Column]]
  Endif

End

Public Sub btnsavedcash_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Cash"])
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btnsavedcredit_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit"])
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusaverate_Click()

  Dim res As Result
  Dim xamt As Float
  Dim allowRate As Boolean

  If GridView2.Selection.Count Then
    $rData1.MoveTo(GridView2.Selection[0])
    If $rData1["fldretqty"] = 0 Then
      If modBasic.$BillEditRateSaved = "Yes" Then
        allowRate = modNonMedical.GetAllowRateEdit($rData1["flditemname"], $rData1["flditemtype"])
        If allowRate = True Then
          xamt = InputValue($rData1["flditemname"], ("Change Particular Rate"), $rData1["flditemrate"])
          If xamt > 0 Then
            res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", $rData1["fldid"])
            If res.Available Then
              res["flditemrate"] = xamt
              res["flddiscamt"] = xamt * res["flditemqty"] * (res["flddiscper"] / 100)
              res["fldtaxamt"] = xamt * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (res["fldtaxper"] / 100)
              res["fldditemamt"] = xamt * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (1 + res["fldtaxper"] / 100)
              res["xyz"] = False
              res.Update
              ShowOldEntry()
            Endif
          Endif
        Else
          Message.Warning(("Rate alteration not allowed"), ("OK"))
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnusavetax_Click()

  Dim res As Result
  Dim xval As Float
  Dim fixtax As String

  If GridView2.Selection.Count Then
    $rData1.MoveTo(GridView2.Selection[0])
    If $rData1["fldretqty"] = 0 Then
      fixtax = modBasic.$BillFixTaxSaved
      If fixtax = "No" Then
        If modBasic.$BillEditTaxDiscForm = "Amount" Then
        Else
          xval = InputValue($rData1["flditemname"], ("Change Tax Percentage"), $rData1["fldtaxper"])
          If xval >= 0 And If xval <= 100 Then
            res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", $rData1["fldid"])
            If res.Available Then
              res["fldtaxper"] = xval
              res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (xval / 100)
              res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - res["flddiscper"] / 100) * (1 + xval / 100)
              res["xyz"] = False
              res.Update
              ShowOldEntry()
            Endif
          Endif
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnusavedisc_Click()

  Dim res As Result
  Dim xval As Float
  Dim xamt As Float

  Dim fixdisc As String
  Dim allowDisc As Boolean

  If GridView2.Selection.Count Then
    $rData1.MoveTo(GridView2.Selection[0])
    If $rData1["fldretqty"] = 0 Then
      fixdisc = modBasic.$BillFixDiscSaved
      If fixdisc = "No" Then
        allowDisc = modNonMedical.GetAllowDiscEdit($rData1["flditemname"], $rData1["flditemtype"])
        If allowDisc = True Then

          If modBasic.$BillEditTaxDiscForm = "Amount" Then
            xamt = InputValue($rData1["flditemname"], ("Change Discount Amount"), $rData1["flditemrate"] * $rData1["flditemqty"] * ($rData1["flddiscper"] / 100))
            If xamt >= 0 And If xamt <= $rData1["flditemrate"] * $rData1["flditemqty"] Then
              res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", $rData1["fldid"])
              If res.Available Then
                xval = Round(xamt * 100 / (res["flditemrate"] * res["flditemqty"]), -2)
                res["flddiscper"] = xval
                res["flddiscamt"] = Round(xamt, -2)
                res["fldtaxamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (res["fldtaxper"] / 100)
                res["fldditemamt"] = ((res["flditemrate"] * res["flditemqty"]) - xamt) * (1 + res["fldtaxper"] / 100)
                res["xyz"] = False
                res.Update
                ShowOldEntry()
              Endif
            Endif
          Else
            xval = InputValue($rData1["flditemname"], ("Change Discount Percentage"), $rData1["flddiscper"])
            If xval >= 0 And If xval <= 100 Then
              res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", $rData1["fldid"])
              If res.Available Then
                res["flddiscper"] = xval
                res["flddiscamt"] = res["flditemrate"] * res["flditemqty"] * (xval / 100)
                res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (res["fldtaxper"] / 100)
                res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (1 + res["fldtaxper"] / 100)
                res["xyz"] = False
                res.Update
                ShowOldEntry()
              Endif
            Endif
          Endif

        Else
          Message.Warning(("Discount alteration not allowed"), ("OK"))
        Endif
      Endif
    Endif
  Endif

End

Public Sub mnusavepayable_Click()

  Dim res As Result
  Dim xx As String

  If GridView2.Selection.Count Then
    $rData1.MoveTo(GridView2.Selection[0])
    If modBasic.$BillEditPayable = "Yes" Then
      xx = MedicalSelectedUser(("Select Payable User"), modBasic.$PayUserList)
      If xx Then
        res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", $rData1["fldid"])
        res["fldpayto"] = xx
        res["xyz"] = False
        res.Update
        ShowOldEntry()
      Endif
    Endif
  Endif

End

Private Sub UpdateSelectedDiscount(sType As String, xval As Float)

  Dim res As Result

  If xval >= 0 And If xval <= 100 Then
    For Each $rData1
      res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1 and flditemtype=&2 and fldretqty=&3", $rData1["fldid"], sType, 0)
      If res.Available Then
        res["flddiscper"] = xval
        res["flddiscamt"] = res["flditemrate"] * res["flditemqty"] * (xval / 100)
        res["fldtaxamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (res["fldtaxper"] / 100)
        res["fldditemamt"] = res["flditemrate"] * res["flditemqty"] * (1 - xval / 100) * (1 + res["fldtaxper"] / 100)
        res["xyz"] = False
        res.Update
      Endif
    Next
  Endif

End

Public Sub mnusavediscount_Click()

  Dim hForm As FmDiscLevel

  If modBasic.$BillFixDiscSaved = "No" Then
    hForm = New FmDiscLevel(Trim(txtencid.Text))
    hForm.ShowModal()

    If modNonMedical.$DiscLaboratory Then
      UpdateSelectedDiscount("Diagnostic Tests", modNonMedical.$DiscLaboratory)
    Endif
    If modNonMedical.$DiscRadiology Then
      UpdateSelectedDiscount("Radio Diagnostics", modNonMedical.$DiscRadiology)
    Endif
    If modNonMedical.$DiscProcedure Then
      UpdateSelectedDiscount("Procedures", modNonMedical.$DiscProcedure)
    Endif
    If modNonMedical.$DiscEquipment Then
      UpdateSelectedDiscount("Equipment", modNonMedical.$DiscEquipment)
    Endif
    If modNonMedical.$DiscServices Then
      UpdateSelectedDiscount("General Services", modNonMedical.$DiscServices)
    Endif
    If modNonMedical.$DiscOthers Then
      UpdateSelectedDiscount("Other Items", modNonMedical.$DiscOthers)
    Endif
    If modNonMedical.$DiscMedicine Then
      UpdateSelectedDiscount("Medicines", modNonMedical.$DiscMedicine)
    Endif
    If modNonMedical.$DiscSurgical Then
      UpdateSelectedDiscount("Surgicals", modNonMedical.$DiscSurgical)
    Endif
    If modNonMedical.$DiscExtraItem Then
      UpdateSelectedDiscount("Extra Items", modNonMedical.$DiscExtraItem)
    Endif
    ShowOldEntry()
    modNonMedical.$DiscLaboratory = 0
    modNonMedical.$DiscRadiology = 0
    modNonMedical.$DiscProcedure = 0
    modNonMedical.$DiscEquipment = 0
    modNonMedical.$DiscServices = 0
    modNonMedical.$DiscOthers = 0
    modNonMedical.$DiscMedicine = 0
    modNonMedical.$DiscSurgical = 0
    modNonMedical.$DiscExtraItem = 0
  Endif

End

''necessary to use it
Public Sub mnusharesaved_Click()

  Dim hForm As FmDiffShare

  If GridView2.Selection.Count Then
    If modBasic.$BillEditPayable = "Yes" Then
      $rData1.MoveTo(GridView2.Selection[0])
      If Not $rData1["fldpayto"] Then
        hForm = New FmDiffShare($rData1["fldid"])
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub mnueditcashcredit_Click()

  Dim res As Result
  Dim res1 As Result
  Dim xpack As String

  If GridView2.Selection.Count Then
    If modBasic.$BillEditSavePack = "Yes" Or If modBasic.$BillEditSavePack = "Partial" Then
      If Message.Question(("Are you sure ?"), ("No"), ("OK")) = 2 Then
        $rData1.MoveTo(GridView2.Selection[0])

        If $rData1["fldretqty"] = 0 Then
          If modBasic.$BillEditSavePack = "Yes" Then
            xpack = InputCombo("Select Package", Trim(txtencid.Text), modBasic.$BillDiscountAll, $rData1["flddisctype"], True)
          Else If modBasic.$BillEditSavePack = "Partial" Then
            xpack = InputCombo("Select Package", Trim(txtencid.Text), modBasic.$BillDiscountCash, $rData1["flddisctype"], True)
          Endif
          If xpack Then
            res1 = modDatabase.$myConn.Exec("select fldbillingmode,fldacledger,fldreference,fldbilltype from tbldiscount where fldtype=&1", xpack)
            If res1.Available Then
              res = modDatabase.$myConn.Edit("tblpatbilling", "fldid=&1", $rData1["fldid"])
              res["flddisctype"] = xpack
              If res1["fldbilltype"] Then
                res["fldbilltype"] = res1["fldbilltype"]
              Endif
              If res1["fldbillingmode"] Then
                res["fldbillingmode"] = res1["fldbillingmode"]
              Endif
              If res1["fldacledger"] Then
                res["fldacledger"] = res1["fldacledger"]
              Endif
              If res1["fldbilltype"] = "Cash" Then
                res["fldcashincredit"] = 0
              Else
                res["fldcashincredit"] = modNonMedical.CashInCreditPerForCategory(xpack, res["flditemtype"], res["flditemname"], res1["fldbillingmode"])
              Endif
              res.Update
              ShowOldEntry()
            Endif
          Endif

        Endif
      Endif
    Endif
  Endif

End

''------------------- For Diagnosis ----------------
Public Sub btndiselectuser_Click()

  Dim xMedUser As String[]

  xMedUser = MedicalSelectedValue(("Select Consultant User"), modBasic.$OPConsultCodeList)
  If xMedUser And If xMedUser.Count Then
    btndiuser.Tag = xMedUser[0]
    btndiuser.Text = xMedUser[1]
  Else
    btndiuser.Tag = ""
    btndiuser.Text = ""
  Endif

End

Public Sub btndiuser_Activate()

  btndiselectuser_Click()

End

Public Sub btndiuser_Change()

  If btndiuser.Text = "" Then
    btndiuser.Tag = ""
  Endif

End

Public Sub btnaddicd_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If btndiuser.Tag Then
      sName = ICDGridView("Select Diseases")
      If sName Then
        txtsearch.Text = sName[0]
        txtcode.Text = sName[1]
        txtcodeold.Text = sName[2]
        If txtsearch.Text And If txtcode.Text Then
          If btndiuser.Tag Then
            modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), txtsearch.Text, txtcode.Text, txtcodeold.Text, btndiuser.Tag)
          Else
            modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), txtsearch.Text, txtcode.Text, txtcodeold.Text)
          Endif
          If txtreference.Tag = "Consultation" Or If txtreference.Tag = "Patient Ward" Then
            GetHImedicineCappingVar()
          Endif
          Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
        Endif
      Endif
    Endif
  Endif

End

Public Sub txtsearch_Activate()

  btnaddicd_Click()

End

Private Sub SHowDiagnosis()

  Dim res As Result

  If txtencid.Text Then
    res = modDatabase.$syConn.Exec("select fldcode,fldcodeid,fldcodenew,flduserid from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3", Trim(txtencid.Text), "Provisional Diagnosis", True)
    If res.Available Then
      res.MoveLast
      txtsearch.Text = res["fldcode"]
      txtcode.Text = res["fldcodenew"]
      txtcodeold.Text = res["fldcodeid"]
      btndiuser.Tag = res["flduserid"]
      If res["flduserid"] Then
        btndiuser.Text = modGeneral.GetUserFullName(res["flduserid"])
      Endif
    Endif
  Endif

End

Public Sub mnuclearqrcode_Click()

  ClearQRCodeExt()
  Message.Info("QR Code cleared", "OK")

End

Private Sub ClearQRCodeExt()

  Dim Row As Integer
  Dim res As Result

  For Row = 0 To GridView1.Count - 1
    $rData.MoveTo(Row)
    res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1 and fldsave_order=&2", $rData["fldid"], False)
    If res.Available Then
      res["fldextracol"] = ""
      res.Update
    Endif
  Next

End

''===================== HI Claim Upload =================
Public Sub mnuimisclaim_Click()

  If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
    UploadHIClaimAuto()
  Endif

End

Private Sub AutoClaimProcedure(sType As String[])

  Dim hForm As FmScanForm
  ' Dim hForm1 As FmCreateReport
  ' Dim hForm2 As FmUploadReport

  AutoClaimIMIS(cmbdisctype.Text, sType)
  If modBasic.$ClaimAutoDocs = "Enable" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
  Else If modBasic.$ClaimAutoDocs = "AutoScan" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
    hForm = New FmScanForm(Trim(txtencid.Text), "Scanned Images", cmbdisctype.Text & "|" & txtreference.Text)
    hForm.ShowModal
  Else If modBasic.$ClaimAutoDocs = "AutoDocs" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
    ' hForm1 = New FmCreateReport(Trim(txtencid.Text), cmbdisctype.Text & "|" & txtreference.Text)
    ' hForm1.ShowModal
  Else If modBasic.$ClaimAutoDocs = "AddDocs" Then
    AutoUploadClaimDocs(cmbdisctype.Text, txtreference.Text, sType)
    ' hForm2 = New FmUploadReport(Trim(txtencid.Text), cmbdisctype.Text & "|" & txtreference.Text)
    ' hForm2.ShowModal
  Endif

End

Private Sub UploadHIClaimAuto()

  If modBasic.$IMISAutoClaim = "Consultation" Then
    If modClaim.GetHIClaimState(txtreference.Text) = "Consultation" Then
      If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
        AutoClaimProcedure(["Consultation"])
      Endif
    Endif

  Else If modBasic.$IMISAutoClaim = "Emergency" Then
    If modClaim.GetHIClaimState(txtreference.Text) = "Emergency" Then
      If cmbdisctype.Text = modBasic.$HIPackageER Then
        AutoClaimProcedure(["Emergency"])
      Endif
    Endif

  Else If modBasic.$IMISAutoClaim = "Both" Then
    AutoClaimProcedure(["Consultation", "Emergency"])

  Endif

End

Private Sub AutoUploadClaimDocs(sPackage As String, sClaim As String, TypeLst As String[])

  Dim sType As String
  Dim xacc As String
  Dim res As Result
  Dim sInvList As String[]

  Dim aOutPath As String
  Dim xinvoice As String
  Dim xFilePath As String

  For Each sType In TypeLst
    xacc = ""
    xacc = modNonMedical.GetLedgerFromDiscount(sPackage)

    sInvList = New String[]
    res = modDatabase.$myConn.Exec("select fldbillno from tblpatbilldetail where fldencounterval=&1 and fldbankname=&2 and fldchequeno=&3 and fldchequeno in(select fldclaimid from tblclaimcode where fldstatus=&4) and fldbillno not in(select fldbillno from tblbillupload)", Trim(txtencid.Text), xacc, sClaim, sType)
    If res.Available Then
      For Each res
        sInvList.Add(res["fldbillno"])
      Next

      aOutPath = ""
      xinvoice = ""
      xFilePath = ""
      xFilePath = modClaimAPI.GetHIInvoiceReceiptData(sInvList)
      Wait
      If Exist(xFilePath) Then
        aOutPath = modClaimAPI.UploadImagesFilesClaimServerHI(sClaim, xFilePath)
        If aOutPath = xFilePath Then
          For Each xinvoice In sInvList
            modAccount.InsertClaimInvoice(xinvoice)
          Next
        Endif
      Endif

    Endif
  Next

End

Private Sub AutoClaimIMIS(sPackage As String, TypeList As String[])

  Dim sType As String
  Dim xfldList As String[]
  Dim xacc As String
  Dim rex As Result
  Dim sql As String
  Dim res1 As Result

  Dim aCode As String
  Dim sColl As Collection
  Dim xSNo As Variant[]
  Dim hForm As CimisAPIClaim
  Dim xout As String
  Dim xmsg As String

  Dim ySNo As Variant[]
  Dim hForm1 As CimisAPIClaim
  Dim xout1 As String
  Dim xmsg1 As String

  Dim xdiagno As String
  Dim regLst As String[] = ["EMRT", "OPD4", "ER01", "OPD01"]

  xfldList = ["flditemname", "CONCAT(flditemtype,'|', flditemname) as flditemcode", "flditemname", "AVG(flditemrate) as flditemrate", "SUM(flditemqty) as flditemqty", "SUM(fldditemamt) as fldditemamt", "GROUP_CONCAT(DISTINCT fldid) as fldid", "flditemtype"]
  For Each sType In TypeList
    xacc = ""
    xacc = modNonMedical.GetLedgerFromDiscount(sPackage)
    If xacc Then
      If modBasic.$IMISICDForm = "ICD10" Then
        rex = modDatabase.$myConn.Exec("select fldcode,flduserid from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4 and fldcodeid<>&5 and fldcodeid<>&6 and flduserid in(select flduserid from tbluser where fldusercode like &7)", Trim(txtencid.Text), "Provisional Diagnosis", "Final Diagnosis", True, "Obstetrics", "Other", "%")
      Else
        rex = modDatabase.$myConn.Exec("select fldcode,flduserid from tblpatfindings where fldencounterval=&1 and (fldtype=&2 or fldtype=&3) and fldsave=&4 and fldcodenew<>&5 and fldcodenew<>&6 and flduserid in(select flduserid from tbluser where fldusercode like &7)", Trim(txtencid.Text), "Provisional Diagnosis", "Final Diagnosis", True, "Obstetrics", "Other", "%")
      Endif
      If rex.Available Then
        rex.MoveLast
        If rex["fldcode"] And If rex["flduserid"] Then
          xdiagno = "Diagnosis"
        Else
          xdiagno = ""
        Endif
      Else
        xdiagno = "No Diagnosis"
      Endif  ''diagnosis

      If xdiagno Then
        sql = "select " & xfldList.Join(",") & " from tblpatbilling where fldencounterval=&1 and fldbillno in(select fldbillno from tblpatbilldetail where fldbankname=&2 and fldbilltype like &3 and fldchequeno=&4 and fldchequeno in(select fldclaimid from tblclaimcode where fldtime>=&5 and fldtime<=&6 and fldstatus like &7)) and fldclaimstate IS NULL GROUP BY flditemname HAVING SUM(flditemqty)>&8"
        res1 = modDatabase.$syConn.Exec(sql, Trim(txtencid.Text), xacc, "Credit", txtreference.Text, modDate.StartSqlDate(Now()), modDate.EndSqlDate(Now()), sType, 0)
        If res1.Available Then

          xSNo = New Variant[]
          ySNo = New Variant[]
          For Each res1
            aCode = ""
            aCode = modClaimAPI.GetBillingItemAbbvName(res1["flditemcode"])
            If aCode Then
              If res1["flditemqty"] Then
                sColl = New Collection
                sColl.Add(aCode, "code")
                sColl.Add(res1["flditemname"], "item")
                sColl.Add(res1["flditemrate"], "rate")
                sColl.Add(res1["flditemqty"], "qty")
                sColl.Add(res1["fldditemamt"], "total")
                sColl.Add(res1["fldid"], "index")
                sColl.Add(res1["flditemtype"], "type")
                sColl.Add("tblpatbilling", "table")
                If regLst.Exist(aCode) Then
                  ySNo.Add(sColl)
                Else
                  xSNo.Add(sColl)
                Endif
              Endif
            Endif
          Next

          If ySNo.Count Then
            hForm1 = New CimisAPIClaim($xNHISCode, Trim(txtencid.Text), txtreference.Text, True)
            hForm1.AddBilling(ySNo)
            xout1 = hForm1.UploadClaim()
            xmsg1 = modClaimAPI.GetClaimOutRecording(ySNo, xout1, "tblpatbilling")
          Endif
          If xSNo.Count Then
            If xdiagno = "Diagnosis" Then
              hForm = New CimisAPIClaim($xNHISCode, Trim(txtencid.Text), txtreference.Text, False)
              hForm.AddBilling(xSNo)
              xout = hForm.UploadClaim()
              xmsg = modClaimAPI.GetClaimOutRecording(xSNo, xout, "tblpatbilling")
            Endif
          Endif

        Endif
      Endif  ''diagnosis

    Endif  ''Ledger
  Next   ''category

End

Private Sub GetHImedicineCappingVar()

  Dim hForm As CimisAPICap

  If cmbdisctype.Text = modBasic.$HIPackage Or If cmbdisctype.Text = modBasic.$HIPackageER Then
    If modBasic.$IMISValidateURL Then

      If modClaim.GetChronicClaimStatus(Trim(txtencid.Text)) = True Then
        If $HiCappingVar.Count Then
          $HiCappingVar.Clear()
        Endif
      Else
        If Not $HiCappingVar.Count Then
          hForm = New CimisAPICap($xNHISCode)
          $HiCappingVar = hForm.GetMedicineLimits()
          $HiCapAPIView = hForm.GetCapValidationItems()
        Endif
      Endif

    Endif
  Endif

End

Public Sub mnumedhilimit_Click()

  Dim xx As String

  xx = GetTextArea("API Output", modDevAll.GetJsonFormat(JSON.Encode($HiCapAPIView)))

End

Public Sub btndiagnolist_Click()

  Dim xList As String[]
  Dim xx As String

  xList = modPathoSub.GetSelectedDiagnosisList("Provisional Diagnosis", Trim(txtencid.Text))
  If xList.Count Then
    xx = MessageHtml(Trim(txtencid.Text), "<h4>Provisional Diagnosis</h4>" & xList.Join("<br>"), ["OK"])
  Endif

End

' Gambas module file

Public $FoottUser1 As String
Public $FoottUser2 As String
Public $FoottUser3 As String
Public $ReportHash As String

Public Const $HTMLStart As String = "<!-- HTML START -->"
Public Const $HTMLEnd As String = "<!-- HTML END -->"
Public Const $TitleStart As String = "<!-- TITLE START -->"
Public Const $TitleEnd As String = "<!-- TITLE END -->"
Public Const $CSSStart As String = "<!-- CSS TEMPLATE START -->"
Public Const $CSSEnd As String = "<!-- CSS TEMPLATE END -->"
Public Const $HeaderStart As String = "<!-- HEADER START -->"
Public Const $HeaderEnd As String = "<!-- HEADER END -->"
Public Const $BodyStart As String = "<!-- BODY START -->"
Public Const $BodyEnd As String = "<!-- BODY END -->"
Public Const $FooterStart As String = "<!-- FOOTER START -->"
Public Const $FooterEnd As String = "<!-- FOOTER END -->"
Public Const $FootImageStart As String = "<!-- FOOTIMAGE START -->"
Public Const $FootImageEnd As String = "<!-- FOOTIMAGE END -->"

Public Const $AbnStart As String = "<!-- ABNORMAL -->"
Public Const $AbnEnd As String = "<!-- /ABNORMAL -->"

Public Function SQLAllowTableList() As String[]

  Dim hTable As Table
  Dim xx As String[]
  Dim xPrivAccTable As String[]

  xPrivAccTable = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldvalue as col from tbltabsettings where fldcomp=&1 and fldcategory=&2", modBasic.$compID, "DisableSQLQuery/TableList"))
  xx = New String[]
  For Each hTable In modDatabase.$myConn.Tables
    If hTable.System = True Then
    Else
      If modLongVar.$PrivSystemTable.Exist(hTable.Name) = True Then
      Else If xPrivAccTable.Exist(hTable.Name) = True Then
      Else
        xx.Add(hTable.Name)
      Endif
    Endif
  Next
  xx.Sort(gb.Ascent)
  Return xx

End

''----------------------------------- Formating ----------------------------------------------
'##DATE FUNCTION##
Public Function GetDateTimeReport(sDate As Date, sMode As Integer) As String

  Dim xx As String
  Dim yy As String

  If sDate Then

    If sMode = gb.GeneralDate Then
      xx = modDate.GetDateTimeInFormatForAll(sDate, modBasic.$DateFormat, modBasic.$DateContent)
    Else If sMode = gb.MediumDate Then
      xx = modDate.GetDateOnlyInFormatForAll(sDate, modBasic.$DateFormat, modBasic.$DateContent)

    Else If sMode = gb.LongTime Then
      xx = Format(sDate, gb.LongTime)
    Else If sMode = gb.MediumTime Then
      xx = Format(sDate, gb.MediumTime)
    Else If sMode = gb.ShortTime Then
      xx = Format(sDate, gb.ShortTime)
    Endif

    If modBasic.$NumFont Then
      yy = modString.GetLocalNumber(xx)
    Else
      yy = xx
    Endif

  Else
    yy = ""
  Endif

  Return yy

End

Public Function GetLocaleNumberFormat(sAmt As Float, sFormat As Integer) As String

  Dim xx As String
  Dim sVal As String

  If Not sAmt And If modBasic.$NullOnZero = "Enable" Then
    xx = ""
  Else

    If sFormat = gb.Currency Then
      If modBasic.$QuantiUnitEnable = "Disable" Then
        sVal = Format(sAmt, gb.Fixed)
        If modBasic.$NumFont Then
          xx = modString.GetLocalNumber(sVal)
        Else
          xx = sVal
        Endif
      Else
        If modBasic.$currency Then
          sVal = Format(sAmt, gb.Fixed)
          If modBasic.$NumFont Then
            xx = modBasic.$currency & Space(1) & modString.GetLocalNumber(sVal)
          Else
            xx = modBasic.$currency & Space(1) & sVal
          Endif
        Else
          sVal = Format(sAmt, gb.Currency)
          If modBasic.$NumFont Then
            xx = modString.GetLocalNumber(sVal)
          Else
            xx = sVal
          Endif
        Endif
      Endif

    Else
      If modBasic.$NumFormat Then
        sVal = Format(sAmt, modBasic.$NumFormat)
      Else
        If sFormat = gb.Fixed Then
          sVal = Format(sAmt, sFormat)
        Else If sFormat = 0 Then
          sVal = CStr(sAmt)
        Else
          sVal = CStr(Round(sAmt, sFormat))
        Endif
      Endif
      If modBasic.$NumFont Then
        xx = modString.GetLocalNumber(sVal)
      Else
        xx = sVal
      Endif

    Endif
  Endif

  Return xx

End

''-------------- For Custom Report (two columns output) --------------------
Public Function GetCustomReportValue(sType As String, encid As String, sHead As String, Optional sUnit As String) As String[]

  Dim xval As String[]
  Dim asx As String[]
  Dim xunit As String

  If sUnit Then
    xunit = sUnit
  Else
    xunit = "Metric"
  Endif

  If sType = "Course of Treatment" Then
    xval = modPatReports.AddCourseOfTreatment(encid, sHead)
  Else If sType = "Bed Transitions" Then
    xval = modPatReports.AddBedTransition(encid, sHead)
  Else If sType = "Demographics" Then
    xval = modPatReports.AddPatDemographics(encid, sHead)
  Else If sType = "Cause of Admission" Then
    xval = modPatReports.AddCauseofAdmission(encid, sHead)
  Else If sType = "Chief Complaints" Then
    xval = modPatReports.AddChiefComplaints(encid, sHead)
  Else If sType = "Presenting Complaints" Then
    xval = modPatReports.AddPresentingComplaints(encid, sHead)
  Else If sType = "General Complaints" Then
    xval = modPatReports.AddGenComplaints(encid, sHead)

  Else If sType = "History of Illness" Then
    xval = modPatReports.AddHistoryOfIllness(encid, sHead)
  Else If sType = "Past History" Then
    xval = modPatReports.AddPastHistory(encid, sHead)
  Else If sType = "Treatment History" Then
    xval = modPatReports.AddTreatmentHistory(encid, sHead)
  Else If sType = "Medication History" Then
    xval = modPatReports.AddMedicatHistory(encid, sHead)
  Else If sType = "Family History" Then
    xval = modPatReports.AddFamilyHistory(encid, sHead)
  Else If sType = "Personal History" Then
    xval = modPatReports.AddPersonalHistory(encid, sHead)
  Else If sType = "Surgical History" Then
    xval = modPatReports.AddSurgicalHistory(encid, sHead)
  Else If sType = "Occupational History" Then
    xval = modPatReports.AddOccupationalHistory(encid, sHead)
  Else If sType = "Social History" Then
    xval = modPatReports.AddSocialHistory(encid, sHead)

  Else If sType = "Provisional Diagnosis" Then
    xval = modPatReports.AddProvisionalDiagnosis(encid, sHead)
  Else If sType = "Final Diagnosis" Then
    xval = modPatReports.AddFinalDiagnosis(encid, sHead)
  Else If sType = "Drug Allergy" Then
    xval = modPatReports.AddDrugAllergy(encid, sHead)
  Else If sType = "Investigation Advised" Then
    xval = modPatReports.AddInvestigationAdvised(encid, sHead)
  Else If sType = "Treatment Advised" Then
    xval = modPatReports.AddTreatmentAdvised(encid, sHead)
  Else If sType = "Surgicals Requests" Then
    xval = modPatReports.AddSurgicalsRequests(encid, sHead)
  Else If sType = "Extra Items Requests" Then
    xval = modPatReports.AddExtraItemsRequests(encid, sHead)

  Else If sType = "Medicines Dispensed" Then
    xval = modPatReports.AddMedicineDispensed(encid, sHead)
  Else If sType = "Surgicals Dispensed" Then
    xval = modPatReports.AddSurgicalsDispensed(encid, sHead)
  Else If sType = "Extra Items Dispensed" Then
    xval = modPatReports.AddExtraDispensed(encid, sHead)
  Else If sType = "Nutrition Approved" Then
    xval = modPatReports.AddNutritionApproved(encid, sHead)

  Else If sType = "Initial Planning" Then
    xval = modPatReports.AddOPDAdvice(encid, sHead)
  Else If sType = "OPD Advice" Then
    xval = modPatReports.AddOPDAdvice(encid, sHead)
  Else If sType = "Final Planning" Then
    xval = modPatReports.AddExpertAdvice(encid, sHead)
  Else If sType = "Expert Advice" Then
    xval = modPatReports.AddExpertAdvice(encid, sHead)

  Else If sType = "Prominent Symptoms" Then
    xval = modPatReports.AddProminientSymptoms(encid, sHead)
  Else If sType = "Major Procedures" Then
    xval = modPatReports.AddMajorProcedures(encid, sHead)
  Else If sType = "Minor Procedures" Then
    xval = modPatReports.AddMinorProcedures(encid, sHead)
  Else If sType = "Consultations" Then
    xval = modPatReports.AddConsultationAll(encid, sHead)
  Else If sType = "Equipments Used" Then
    xval = modPatReports.AddEquipmentsUsed(encid, sHead)
  Else If sType = "Event Timings" Then
    xval = modPatReports.AddEventProfile(encid, sHead)
  Else If sType = "Devices Used" Then
    xval = modPatReports.AddDevicesUsed(encid, sHead)
  Else If sType = "Medication Used" Then
    xval = modPatReports.AddMedicationUsed(encid, sHead)
  Else If sType = "Indoor Medication" Then
    xval = modPatReports.AddIndoorMedication(encid, sHead)
  Else If sType = "Nutrition Consumed" Then
    xval = modPatReports.AddNutritionUsed(encid, sHead)
  Else If sType = "Delivery Profile" Then
    xval = modPatReports.AddDeliveryProfile(encid, sHead)
  Else If sType = "Extra Procedures" Then
    xval = modPatReports.AddExtraProcedures(encid, sHead)

  Else If sType = "Clinical Notes" Then
    xval = modPatReports.AddClinicalNotes(encid, sHead)
  Else If sType = "Progress Note" Then
    xval = modPatReports.AddProgressNotes(encid, sHead)
  Else If sType = "Clinicians Note" Then
    xval = modPatReports.AddCliniciansNotes(encid, sHead)
  Else If sType = "Nurses Note" Then
    xval = modPatReports.AddNursesNotes(encid, sHead)
  Else If sType = "Transfer Note" Then
    xval = modPatReports.AddTransferNotes(encid, sHead)

  Else If sType = "IP Monitoring" Then
    xval = modPatReports.AddIPMonitoring(encid, sHead)
  Else If sType = "Therapeutic Planning" Then
    xval = modPatReports.AddTherapeuticPlanning(encid, sHead)
  Else If sType = "Planned Procedures" Then
    xval = modPatReports.AddPlannedProcedures(encid, sHead)
  Else If sType = "Discharge Medication" Then
    xval = modPatReports.AddDischargeMedication(encid, sHead)
    '--------- Discharge (see below)
  Else If sType = "Condition at Discharge" Then
    xval = modPatReports.AddConditionAtDischarge(encid, sHead)
  Else If sType = "Advice on Discharge" Then
    xval = modPatReports.AddAdviceDischarge(encid, sHead)

  Else If sType = "Clinical Findings" Then
    xval = modPatReports.AddClinFindingsAll(encid, "Non-Vital")
  Else If sType = "Physician Examinations" Then
    xval = modPatReports.AddPhysicianFindings(encid, "Physician Examinations")
  Else If sType = "Essential Examinations" Then
    xval = modPatReports.AddEssentialFindings(encid, "Essential Examinations")
  Else If sType = "Triage Examinations" Then
    xval = modPatReports.AddTriageFindings(encid, "Triage Examinations")
  Else If sType = "Nursing Examinations" Then
    xval = modPatReports.AddNursingFindings(encid, "Nursing Examinations")
  Else If sType = "Physician Structured" Then
    xval = modPatReports.AddPhysicianStructured(encid, "Physician Examinations")
  Else If sType = "Department Structured" Then
    xval = modPatReports.AddDepartmentStructured(encid, "Departmental Examinations")
  Else If sType = "Discharge Examinations" Then
    xval = modPatReports.AddDischargeFindings(encid, "Discharge Examinations")

  Else If sType = "Laboratory Tests" Then
    xval = modPatReports.AddSelectedTest(encid, modLabTest.PaientAllTestNameArray(encid), xunit)
  Else If sType = "Radiological Findings" Then
    xval = modPatReports.AddSelectedRadio(encid, modRadioTest.PaientAllRadioNameArray(encid))

  Else If sType Like "History@" & "*" Then
    asx = Split(sType, "@")
    xval = modPatReports.AddSelectedHistory(encid, UnQuote(asx[1]))
  Else If sType Like "Discharge@" & "*" Then
    asx = Split(sType, "@")
    xval = modPatReports.AddSelectedDischarge(encid, UnQuote(asx[1]))

  Else
    xval = modPatReports.AddCustomParam(sType)
  Endif

  Return xval

End

''---------- Value for Add Column to Grids -----------------------------------
Public Function GetPatientVariableValue(sVariable As String, encid As String) As Variant

  Dim xval As Variant

  If sVariable = "{PatientNo}" Then
    xval = modPatient.GetPatientNoByEnc(encid)
  Else If sVariable = "{PatientFileNo}" Then
    xval = modPatient.GetPatientFileByEnc(encid)
  Else If sVariable = "{PatientName}" Then
    xval = modPatient.GetPatientNameByEnc(encid)
  Else If sVariable = "{PatientEthnicity}" Then
    xval = modPatient.GetPatientEthnicity(encid)

  Else If sVariable = "{PatientGender}" Then
    xval = modPatient.GetPatientSex(encid)
  Else If sVariable = "{Age/Sex}" Then
    xval = modPatient.GetPatientAgeString(encid, Now()) & "/" & modPatient.GetPatientSex(encid)
  Else If sVariable = "{PatientDOB}" Then
    xval = GetDateTimeReport(modPatient.GetPatientBirthDay(encid), gb.MediumDate)
  Else If sVariable = "{PatientAge}" Then
    xval = modPatient.GetPatientAgeString(encid, Now())
  Else If sVariable = "{AgeGroup}" Then
    xval = modPatient.GetAgeGroup(encid)
  Else If sVariable = "{AgeGroupCustom}" Then
    xval = modPatient.GetAgeGroupCustom(encid)
  Else If sVariable = "{AgeInDays}" Then
    xval = DateDiff(modPatient.GetPatientBirthDay(encid), Now(), gb.Day)

  Else If sVariable = "{PatientMunicipality}" Then
    xval = modPatient.GetPatFirAddressByEnc(encid)
  Else If sVariable = "{PatientWardAddress}" Then
    xval = modPatient.GetPatWardAddressByEnc(encid)
  Else If sVariable = "{PatientAddress}" Then
    xval = modPatient.GetPatientAddressByEnc(encid)
  Else If sVariable = "{PatientDistrict}" Then
    xval = modPatient.GetPatDistrictByEnc(encid)
  Else If sVariable = "{PatientProvince}" Then
    xval = xval = modDataRepo.GetProvinceFromDistrict(modPatient.GetPatDistrictByEnc(encid))
  Else If sVariable = "{PatientGuardian}" Then
    xval = modPatient.GetPatientGuardianByEnc(encid)
  Else If sVariable = "{PatientRelation}" Then
    xval = modPatient.GetPatientReltionByEnc(encid)
  Else If sVariable = "{E-Mail}" Then
    xval = modPatient.GetPatientEmail(encid)
  Else If sVariable = "{ContactNo}" Then
    xval = modPatient.GetPatientContactByEnc(encid)
  Else If sVariable = "{PatientCode}" Then
    xval = modPatient.GetPatientExtCOdebyEnc(encid)

  Else If sVariable = "{ServiceType}" Then
    xval = modPatient.GetPatServiceType(encid)
  Else If sVariable = "{ServiceRank}" Then
    xval = modPatient.GetPatServiceRank(encid)
  Else If sVariable = "{ServiceUnit}" Then
    xval = modPatient.GetPatServiceUnit(encid)

  Else If sVariable = "{VisitMode}" Then
    xval = modPatient.GetPatVisitType(encid)
  Else If sVariable = "{DiscountPackae}" Then
    xval = modPatient.ShowDiscountCategEnc(encid)
  Else If sVariable = "{RegdBillMode}" Then
    xval = modPatient.GetPatBillingMode(encid)
  Else If sVariable = "{RegdDepartment}" Then
    xval = modPatient.GetAdmitLocation(encid)
  Else If sVariable = "{Consultant}" Then
    xval = modGeneral.GetUserFullName(modPatient.GetAttendingConsultant(encid))
  Else If sVariable = "{ConsultantID}" Then
    xval = modPatient.GetAttendingConsultant(encid)
  Else If sVariable = "{RegistrationDateTime}" Then
    xval = GetDateTimeReport(modPatient.GetRecordDate(encid), gb.GeneralDate)
  Else If sVariable = "{RegistrationDate}" Then
    xval = GetDateTimeReport(modPatient.GetRecordDate(encid), gb.MediumDate)
  Else If sVariable = "{RegistrationTime}" Then
    xval = GetDateTimeReport(modPatient.GetRecordDate(encid), gb.MediumTime)
  Else If sVariable = "{AdmissionDateTime}" Then
    xval = GetDateTimeReport(modPatient.GetAdmissionDate(encid), gb.GeneralDate)
  Else If sVariable = "{AdmissionDate}" Then
    xval = GetDateTimeReport(modPatient.GetAdmissionDate(encid), gb.MediumDate)
  Else If sVariable = "{AdmissionTime}" Then
    xval = GetDateTimeReport(modPatient.GetAdmissionDate(encid), gb.MediumTime)
  Else If sVariable = "{DischargeDateTime}" Then
    xval = GetDateTimeReport(modPatient.GetDischargeDate(encid), gb.GeneralDate)
  Else If sVariable = "{DischargeDate}" Then
    xval = GetDateTimeReport(modPatient.GetDischargeDate(encid), gb.MediumDate)
  Else If sVariable = "{DischargeTime}" Then
    xval = GetDateTimeReport(modPatient.GetDischargeDate(encid), gb.MediumTime)
  Else If sVariable = "{ClearanceDateTime}" Then
    xval = GetDateTimeReport(modPatient.GetClearanceDateTime(encid), gb.GeneralDate)
  Else If sVariable = "{AdmitDurationHour}" Then
    xval = modPatient.GetHospitalStayInHours(encid)
  Else If sVariable = "{FollowUpDate}" Then
    xval = GetDateTimeReport(modPatient.GetFollowUpDate(encid), gb.MediumDate)
  Else If sVariable = "{ReferLocation}" Then
    xval = modPatient.GetReferLocation(encid)
  Else If sVariable = "{CurrentStatus}" Then
    xval = modPatient.CurrentAdmissionStatus(encid)
  Else If sVariable = "{CurrentStatusComment}" Then
    xval = modPatient.CurrentStatuswithComment(encid)
  Else If sVariable = "{BedNo}" Then
    xval = modPatient.GetPatientLocation(encid)
  Else If sVariable = "{WardName}" Then
    xval = modPatient.GetPatientWardName(encid)
  Else If sVariable = "{WardCaption}" Then
    xval = modPatient.GetPatientWardCaption(encid)
  Else If sVariable = "{FirstWardName}" Then
    xval = modPatient.GetPatientFirstWard(encid)
  Else If sVariable = "{CurrDepartment}" Then
    xval = modPatient.GetPatientCurrDepartment(encid)
  Else If sVariable = "{BedOxygen}" Then
    xval = modPatient.GetPatientBedOxygen(encid)
  Else If sVariable = "{BedVentilator}" Then
    xval = modPatient.GetPatientBedVentilator(encid)
  Else If sVariable = "{PatientTriageColor}" Then
    xval = Hex(modPatient.GetPatientColor(encid), 6)
  Else If sVariable = "{PatientTriageSymbol}" Then
    xval = modMisc.GetColorValSymbol(modPatient.GetPatientColor(encid))

  Else If sVariable = "{RegistrationUser}" Then
    xval = modPatient.GetPptientImpDateUser(encid, "Consultation")
  Else If sVariable = "{AdmissionUser}" Then
    xval = modPatient.GetPptientImpDateUser(encid, "Admission")
  Else If sVariable = "{DischargeUser}" Then
    xval = modPatient.GetPptientImpDateUser(encid, "Discharge")
  Else If sVariable = "{ClearanceUser}" Then
    xval = modPatient.GetPptientImpDateUser(encid, "Clearance")

  Else If sVariable = "{MotherEncounter}" Then
    xval = modPatient.GetMotherEncounter(encid)
  Else If sVariable = "{MotherPatientNo}" Then
    xval = modPatient.GetPatientNoByEnc(modPatient.GetMotherEncounter(encid))
  Else If sVariable = "{MotherName}" Then
    xval = modPatient.GetPatientNameByEnc(modPatient.GetMotherEncounter(encid))
  Else If sVariable = "{Gravida}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Gravida"), encid)
  Else If sVariable = "{Parity}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Parity"), encid)
  Else If sVariable = "{Abortion}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Abortion"), encid)
  Else If sVariable = "{Living}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Living"), encid)
  Else If sVariable = "{LMP}" Then
    xval = modReportVar.GetDateTimeReport(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("LMP"), encid), gb.MediumDate)
  Else If sVariable = "{EDD}" Then
    xval = modReportVar.GetDateTimeReport(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("EDD"), encid), gb.MediumDate)
  Else If sVariable = "{Gestation}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Gestation"), encid)
  Else If sVariable = "{ObsPresentation}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Presentation"), encid)
  Else If sVariable = "{ObsStatus}" Then
    xval = modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Status"), encid)

  Else If sVariable = "{LastConsultDate}" Then
    xval = GetDateTimeReport(GetLastValue("tblconsult", "fldconsulttime", "fldencounterval", encid), gb.MediumDate)
  Else If sVariable = "{LastConsultDept}" Then
    xval = GetLastValue("tblconsult", "fldconsultname", "fldencounterval", encid)
  Else If sVariable = "{LastConsultant}" Then
    xval = modGeneral.GetUserFullName(GetLastValue("tblconsult", "flduserid", "fldencounterval", encid))
  Else If sVariable = "{LastConsultBillMode}" Then
    xval = GetLastValue("tblconsult", "fldbillingmode", "fldencounterval", encid)
  Else If sVariable = "{LastVisitDate}" Then
    xval = GetDateTimeReport(modPatient.GetLastVisitDate(encid), gb.MediumDate)
  Else If sVariable = "{LastVisitTime}" Then
    xval = GetDateTimeReport(modPatient.GetLastVisitDate(encid), gb.MediumTime)
  Else If sVariable = "{LastVisitLocation}" Then
    xval = modPatient.GetLastVisitLocation(encid)

  Else If sVariable = "{TotalExpense}" Then
    xval = modNonMedical.TotalExpenseAmountbyPatient(modDatabase.$myConn, encid)
  Else If sVariable = "{TotalPayment}" Then
    xval = modNonMedical.TotalPaidAmountbyPatient(modDatabase.$myConn, encid)
  Else If sVariable = "{CurrentDeposit}" Then
    xval = modNonMedical.GetPatientDeposit(modDatabase.$myConn, encid)
  Else If sVariable = "{NonInvoicedExpenses}" Then
    xval = modNonMedical.TotalUnpaidValuePatient(modDatabase.$myConn, encid)
  Else If sVariable = "{BalanceDeposit}" Then
    xval = modNonMedical.GetPatientDeposit(modDatabase.$myConn, encid) - modNonMedical.TotalUnpaidValuePatient(modDatabase.$myConn, encid)

  Else If sVariable = "{LastInvoiceNumber}" Then
    xval = modNonMedical.GetSelectedBillNo(encid, "Last")
  Else If sVariable = "{FirstInvoiceNumber}" Then
    xval = modNonMedical.GetSelectedBillNo(encid, "First")
  Else If sVariable = "{LastInvoiceAmount}" Then
    xval = modNonMedical.GetSelectedBillAmt(encid, "Last")
  Else If sVariable = "{FirstInvoiceAmount}" Then
    xval = modNonMedical.GetSelectedBillAmt(encid, "First")
  Else If sVariable = "{LastReceiptNumber}" Then
    xval = modNonMedical.GetSelectedReceiptNo(encid, "Last")
  Else If sVariable = "{FirstReceiptNumber}" Then
    xval = modNonMedical.GetSelectedReceiptNo(encid, "First")
  Else If sVariable = "{LastInvReference}" Then
    xval = modNonMedical.GetLastInvoiceReference(encid)
  Else If sVariable = "{LastClaimCode}" Then
    xval = modClaim.GetCurrentClaimCodePrint(encid)
  Else If sVariable = "{FirstClaimCode}" Then
    xval = modClaim.GetCurrentClaimCodePrint(encid)

  Else If sVariable = "{HepaticStatus}" Then
    xval = modClinic.GetHepaticStatus(encid)
  Else If sVariable = "{PregnancyStatus}" Then
    xval = modClinic.GetPregnancyStatus(encid)
  Else If sVariable = "{Weight}" Then
    xval = modClinic.GetBodyWeight(encid)
  Else If sVariable = "{ProvisionalDiagnosis}" Then
    xval = modPatient.PatientFindingList(encid, "Provisional Diagnosis").Join(gb.NewLine)
  Else If sVariable = "{FinalDiagnosis}" Then
    xval = modPatient.PatientFindingList(encid, "Final Diagnosis").Join(gb.NewLine)
  Else If sVariable = "{ProvisionalDiagnosisClass}" Then
    xval = modPatient.PatientDiagnoClassList(encid, "Provisional Diagnosis").Join(gb.NewLine)
  Else If sVariable = "{FinalDiagnosisClass}" Then
    xval = modPatient.PatientDiagnoClassList(encid, "Final Diagnosis").Join(gb.NewLine)
  Else If sVariable = "{PatientDiagnosis}" Then
    xval = modPatient.PatientDiagnoCurrentList(encid).Join(gb.NewLine)
  Else If sVariable = "{PatientDiagnosisClass}" Then
    xval = modPatient.PatientDiagnoCurClassList(encid).Join(gb.NewLine)
  Else If sVariable = "{DrugAllergy}" Then
    xval = modPatient.PatientFindingList(encid, "Allergic Drugs").Join(gb.NewLine)

  Else If sVariable = "{AdmissionCause}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Cause of Admission"))
  Else If sVariable = "{HistoryofIllness}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "History of Illness"))
    ''-------- for backward compatibility -------------------
  Else If sVariable = "{GeneralComplaints}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "General Complaints"))
  Else If sVariable = "{PastHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Past History"))
  Else If sVariable = "{FamilyHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Family History"))
  Else If sVariable = "{TreatmentHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Treatment History"))
  Else If sVariable = "{MedicationHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Medication History"))
  Else If sVariable = "{PersonalHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Personal History"))
  Else If sVariable = "{SurgicalHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Surgical History"))
  Else If sVariable = "{OccupationalHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Occupational History"))
  Else If sVariable = "{SocialHistory}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedHistory(encid, "Social History"))
    ''---------------- end backward compatibility ------------------------

  Else If sVariable = "{OPDRecommendation}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedNotes(encid, "Initial Planning"))
  Else If sVariable = "{ExpertRecommendation}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedNotes(encid, "Final Planning"))
  Else If sVariable = "{DischargeCondition}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedNotes(encid, "Condition of Discharge"))
  Else If sVariable = "{DischargeNote}" Then
    xval = modString.TextToHTML(modPatPatho.ShowSelectedNotes(encid, "Advice on Discharge"))
  Else If sVariable = "{DischargeOutcome}" Then
    xval = modPatient.GetPatExitComment(encid, "Discharged")
  Else If sVariable = "{CauseOfDeath}" Then
    xval = modPatient.GetPatExitComment(encid, "Death")
  Else If sVariable = "{BSISummary}" Then
    xval = modPatient.GetHaiClassificationSet(encid, "BSI")
  Else If sVariable = "{UTISummary}" Then
    xval = modPatient.GetHaiClassificationSet(encid, "UTI")

  Else If sVariable = "{ProgressImpression}" Then
    xval = modPatPatho.ShowSelNoteImpression(encid, "Progress Note")
  Else If sVariable = "{ClinicianImpression}" Then
    xval = modPatPatho.ShowSelNoteImpression(encid, "Clinicians Note")
  Else If sVariable = "{NurseImpression}" Then
    xval = modPatPatho.ShowSelNoteImpression(encid, "Nurses Note")
  Else If sVariable = "{TransferImpression}" Then
    xval = modPatPatho.ShowSelNoteImpression(encid, "Transfer Note")

  Else
    xval = GetCalcValue(sVariable, encid)
  Endif
  Return xval

End

''------------------ Add table as Add Column (without HTML for AI) --------------
Public Function GetColumnValueRaw(sType As String, encid As String, Optional sUnit As String) As String

  Dim xval As String
  Dim asx As String[]
  Dim xunit As String

  If sUnit Then
    xunit = sUnit
  Else
    xunit = "Metric"
  Endif

  If sType = "Course of Treatment" Then
    xval = modPatReports.GetCourseOfTreatment(encid).Join(gb.NewLine)
  Else If sType = "Bed Transitions" Then
    xval = modPatPatho.GetPatientTransition(encid).Join(gb.NewLine)
  Else If sType = "Demographics" Then
    xval = modPatReports.GetPatientDemographicReport(encid).Join(gb.NewLine)
  Else If sType = "Chief Complaints" Then
    xval = modPatReports.GetPatientPresentingSymptomReport(encid).Join(gb.NewLine) & gb.NewLine & modPatPatho.ShowSelectedHistory(encid, "General Complaints")
  Else If sType = "Presenting Complaints" Then
    xval = modPatReports.GetPatientPresentingSymptomReport(encid).Join(gb.NewLine)
  Else If sType = "Provisional Diagnosis" Then
    xval = modPatient.PatientFindingList(encid, "Provisional Diagnosis").Join(gb.newline)
  Else If sType = "Final Diagnosis" Then
    xval = modPatient.PatientFindingList(encid, "Final Diagnosis").Join(gb.newline)
  Else If sType = "Drug Allergy" Then
    xval = modPatient.PatientFindingList(encid, "Allergic Drugs").Join(gb.NewLine)
  Else If sType = "Investigation Advised" Then
    xval = modPatReports.OPDOrderLabRequest(encid).Join(gb.NewLine)

    ''History
  Else If sType = "Cause of Admission" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Cause of Admission")
  Else If sType = "General Complaints" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "General Complaints")
  Else If sType = "History of Illness" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "History of Illness")
  Else If sType Like "History@" & "*" Then
    asx = Split(sType, "@")
    xval = modPatPatho.ShowSelectedHistory(encid, UnQuote(asx[1]))

  Else If sType = "Past History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Past History")
  Else If sType = "Treatment History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Treatment History")
  Else If sType = "Medication History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Medication History")
  Else If sType = "Family History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Family History")
  Else If sType = "Personal History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Personal History")
  Else If sType = "Surgical History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Surgical History")
  Else If sType = "Occupational History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Occupational History")
  Else If sType = "Social History" Then
    xval = modPatPatho.ShowSelectedHistory(encid, "Social History")

    ''Notes
  Else If sType = "Initial Planning" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Initial Planning")
  Else If sType = "Final Planning" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Final Planning")
  Else If sType = "OPD Advice" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Initial Planning")
  Else If sType = "Expert Advice" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Final Planning")

  Else If sType = "Progress Note" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Progress Note")
  Else If sType = "Clinicians Note" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Clinicians Note")
  Else If sType = "Nurses Note" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Nurses Note")
  Else If sType = "Transfer Note" Then
    xval = modPatReports.GetPatientNoteReport(encid, "Transfer Note")
  Else If sType Like "Discharge@" & "*" Then
    asx = Split(sType, "@")
    xval = modPatPatho.ShowSelectedNotes(encid, UnQuote(asx[1]))

    ''Examinations
  Else If sType = "Clinical Findings" Then
    xval = modPatReports.GetSelectFindingReport(encid, "Non-Vital").Join(gb.NewLine)
  Else If sType = "Physician Examinations" Then
    xval = modPatReports.GetSelectFindingReport(encid, "Physician Examinations").Join(gb.NewLine)
  Else If sType = "Essential Examinations" Then
    xval = modPatReports.GetSelectFindingReport(encid, "Essential Examinations").Join(gb.NewLine)
  Else If sType = "Triage Examinations" Then
    xval = modPatReports.GetSelectFindingReport(encid, "Triage Examinations").Join(gb.NewLine)
  Else If sType = "Nursing Examinations" Then
    xval = modPatReports.GetSelectFindingReport(encid, "Nursing Examinations").Join(gb.NewLine)
  Else If sType = "Discharge Examinations" Then
    xval = modPatReports.GetSelectFindingReport(encid, "Discharge Examinations").Join(gb.NewLine)

  Endif

  Return xval

End

''---------{$ColumnTable:<Variable>$}
Private Function GetColumnTableValue(sType As String, encid As String, Optional sUnit As String) As String

  Dim xfinal As String
  Dim asx As String[]

  If sUnit Then
    ' xval = GetColumnValueRaw(sType, encid, sUnit)
    asx = GetCustomReportValue(sType, encid, sType, sUnit)
  Else
    ' xval = GetColumnValueRaw(sType, encid)
    asx = GetCustomReportValue(sType, encid, sType)
  Endif
  If asx And If asx.Count = 2 Then
    xfinal = modString.TextToHTML(UnQuote(asx[1]))
  Else
    xfinal = ""
  Endif
  Return xfinal

End

Private Function GetLastValue(sTable As String, sField As String, sOption As String, sValue As Variant) As Variant

  Dim res As Result
  Dim sql As String
  Dim xx As Variant

  sql = Subst("select &1 from &2 where &3", sField, sTable, sOption) & "=&1"
  res = modDatabase.$myConn.Exec(sql, sValue)
  If res.Available Then
    res.MoveLast
    xx = res[sField]
  Else
    xx = ""
  Endif
  Return xx

End

Private Function GetSelectedValue(sTable As String, sField As String, sOption As String, sValue As Long, Optional encid As String) As Variant

  Dim res As Result
  Dim sql As String
  Dim xx As Variant

  If encid Then
    sql = Subst("select &1 from &2 where &3", sField, sTable, sOption) & "=&1 and fldencounterval=&2"
    res = modDatabase.$myConn.Exec(sql, sValue, encid)
  Else
    sql = Subst("select &1 from &2 where &3", sField, sTable, sOption) & "=&1"
    res = modDatabase.$myConn.Exec(sql, sValue)
  Endif
  If res.Available Then
    xx = res[sField]
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetReportNumber($encid As String, $Line As String) As String

  If (String.InStr($Line, "RegdConsultationFree") > 0) Then
    $Line = Replace($Line, "{RegdConsultationFree}", GetLocaleNumberFormat(modBillings.GetRegistrationCost($encid), -2))
  Endif

  If (String.InStr($Line, "TotalExpense") > 0) Then
    $Line = Replace($Line, "{TotalExpense}", GetLocaleNumberFormat(modNonMedical.TotalExpenseAmountbyPatient(modDatabase.$myConn, $encid), -2))
  Endif
  If (String.InStr($Line, "TotalPayment") > 0) Then
    $Line = Replace($Line, "{TotalPayment}", GetLocaleNumberFormat(modNonMedical.TotalPaidAmountbyPatient(modDatabase.$myConn, $encid), -2))
  Endif
  If (String.InStr($Line, "CurrentDeposit") > 0) Then
    $Line = Replace($Line, "{CurrentDeposit}", GetLocaleNumberFormat(modNonMedical.GetPatientDeposit(modDatabase.$myConn, $encid), -2))
  Endif
  If (String.InStr($Line, "NonInvoicedExpenses") > 0) Then
    $Line = Replace($Line, "{NonInvoicedExpenses}", GetLocaleNumberFormat(modNonMedical.TotalUnpaidValuePatient(modDatabase.$myConn, $encid), -2))
  Endif
  If (String.InStr($Line, "BalanceDeposit") > 0) Then
    $Line = Replace($Line, "{BalanceDeposit}", GetLocaleNumberFormat(modNonMedical.GetPatientDeposit(modDatabase.$myConn, $encid) - modNonMedical.TotalUnpaidValuePatient(modDatabase.$myConn, $encid), -2))
  Endif

  If (String.InStr($Line, "LastInvoiceAmount") > 0) Then
    $Line = Replace($Line, "{LastInvoiceAmount}", CStr(modNonMedical.GetSelectedBillAmt($encid, "Last")))
  Endif
  If (String.InStr($Line, "FirstInvoiceAmount") > 0) Then
    $Line = Replace($Line, "{FirstInvoiceAmount}", CStr(modNonMedical.GetSelectedBillAmt($encid, "First")))
  Endif

  If (String.InStr($Line, "AdmitDurationHour") > 0) Then
    $Line = Replace($Line, "{AdmitDurationHour}", Format(modPatient.GetHospitalStayInHours($encid) / 24, gb.Fixed))
  Endif

  If (String.InStr($Line, "Gravida") > 0) Then
    $Line = Replace($Line, "{Gravida}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Gravida"), $encid)))
  Endif
  If (String.InStr($Line, "Parity") > 0) Then
    $Line = Replace($Line, "{Parity}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Parity"), $encid)))
  Endif
  If (String.InStr($Line, "Abortion") > 0) Then
    $Line = Replace($Line, "{Abortion}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Abortion"), $encid)))
  Endif
  If (String.InStr($Line, "Living") > 0) Then
    $Line = Replace($Line, "{Living}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Living"), $encid)))
  Endif
  If (String.InStr($Line, "Gestation") > 0) Then
    $Line = Replace($Line, "{Gestation}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Gestation"), $encid)))
  Endif

  If (String.InStr($Line, "Weight") > 0) Then
    $Line = Replace($Line, "{Weight}", CStr(modClinic.GetBodyWeight($encid)))
  Endif
  If (String.InStr($Line, "Height") > 0) Then
    $Line = Replace($Line, "{Height}", CStr(modClinic.GetPatientHeightinCm($encid)))
  Endif

  If (String.InStr($Line, "Pulse_Rate") > 0) Then
    $Line = Replace($Line, "{Pulse_Rate}", modClinic.GetCurrExamValueSysConst($encid, "Pulse_Rate", "Last"))
  Endif
  If (String.InStr($Line, "Pulse_Rhythm") > 0) Then
    $Line = Replace($Line, "{Pulse_Rhythm}", modClinic.GetCurrExamValueSysConst($encid, "Pulse_Rhythm", "Last"))
  Endif
  If (String.InStr($Line, "BloodPressure_Systolic") > 0) Then
    $Line = Replace($Line, "{BloodPressure_Systolic}", modClinic.GetCurrExamValueSysConst($encid, "BloodPressure_Systolic", "Last"))
  Endif
  If (String.InStr($Line, "BloodPressure_Diastolic") > 0) Then
    $Line = Replace($Line, "{BloodPressure_Diastolic}", modClinic.GetCurrExamValueSysConst($encid, "BloodPressure_Diastolic", "Last"))
  Endif
  If (String.InStr($Line, "Oxygen_Saturation") > 0) Then
    $Line = Replace($Line, "{Oxygen_Saturation}", modClinic.GetCurrExamValueSysConst($encid, "Oxygen_Saturation", "Last"))
  Endif
  If (String.InStr($Line, "Respiration_Rate") > 0) Then
    $Line = Replace($Line, "{Respiration_Rate}", modClinic.GetCurrExamValueSysConst($encid, "Respiration_Rate", "Last"))
  Endif
  If (String.InStr($Line, "Temperature_System") > 0) Then
    $Line = Replace($Line, "{Temperature_System}", modClinic.GetCurrExamValueSysConst($encid, "Temperature_System", "Last"))
  Endif

  Return $Line

End

Public Function GetCalcValue(sVariable As String, encid As String) As String

  Dim sLine As String

  sLine = sVariable
  If (String.InStr(sLine, "AgeInDays") > 0) Then
    sLine = Replace(sLine, "{AgeInDays}", CStr(DateDiff(modPatient.GetPatientBirthDay(encid), Now(), gb.Day)))
  Endif
  If (String.InStr(sLine, "Ideal_Body_Weight") > 0) Then
    sLine = Replace(sLine, "{Ideal_Body_Weight}", CStr(modSysCons.GetCalculationAValue("Ideal_Body_Weight", encid)))
  Endif
  If (String.InStr(sLine, "Body_Surface_Area") > 0) Then
    sLine = Replace(sLine, "{Body_Surface_Area}", CStr(modSysCons.GetCalculationAValue("Body_Surface_Area", encid)))
  Endif
  If (String.InStr(sLine, "Body_Mass_Index") > 0) Then
    sLine = Replace(sLine, "{Body_Mass_Index}", CStr(modSysCons.GetCalculationAValue("Body_Mass_Index", encid)))
  Endif

  While (String.InStr(sLine, "$Last_Exam:") > 0)
    sLine = modReportVar.GetReporExamLastVal(encid, sLine)
  Wend
  While (String.InStr(sLine, "$First_Exam:") > 0)
    sLine = modReportVar.GetReporExamFirstVal(encid, sLine)
  Wend
  While (String.InStr(sLine, "$Struct_Exam:") > 0)
    sLine = modReportVar.GetReporExamStructured(encid, sLine)
  Wend
  While (String.InStr(sLine, "$Triage_Exam:") > 0)
    sLine = modReportVar.GetReporExamTriage(encid, sLine)
  Wend
  While (String.InStr(sLine, "$Discharge_Exam:") > 0)
    sLine = modReportVar.GetReporExamDischarge(encid, sLine)
  Wend
  While (String.InStr(sLine, "$Left_Exam:") > 0)
    sLine = modReportVar.GetReporExamLeft(encid, sLine)
  Wend
  While (String.InStr(sLine, "$Right_Exam:") > 0)
    sLine = modReportVar.GetReporExamRight(encid, sLine)
  Wend

  While (String.InStr(sLine, "$Last_Test:") > 0)
    sLine = modReportVar.GetReportTestLastVal(encid, sLine)
  Wend
  While (String.InStr(sLine, "$First_Test:") > 0)
    sLine = modReportVar.GetReportTestFirstVal(encid, sLine)
  Wend

  While (String.InStr(sLine, "$Last_Radio:") > 0)
    sLine = modReportVar.GetReporRadioLastVal(encid, sLine)
  Wend

  While (String.InStr(sLine, "$First_Radio:") > 0)
    sLine = modReportVar.GetReporRadioFirstVal(encid, sLine)
  Wend

  While (String.InStr(sLine, "$Last_Demog:") > 0)
    sLine = modReportVar.GetReporDemogLastVal(encid, sLine)
  Wend

  While (String.InStr(sLine, "$Last_History:") > 0)
    sLine = modReportVar.GetReporHistoryLastVal(encid, sLine)
  Wend
  While (String.InStr(sLine, "$Last_Discharge:") > 0)
    sLine = modReportVar.GetReporDischargeLastVal(encid, sLine)
  Wend

  While (String.InStr(sLine, "$ColumnTable:") > 0)
    sLine = modReportVar.GetColumnTableLastVal(encid, sLine)
  Wend

  While (String.InStr(sLine, "$Calc[") > 0)
    sLine = modReportVar.GetReportCalculation(sLine)
  Wend

  Return sLine

End

Public Function GetCalcValueFloat(sVariable As String, encid As String) As Float

  Dim xxx As String
  Dim xval As Float

  sVariable = GetReportNumber(encid, sVariable)
  xxx = GetCalcValue(sVariable, encid)
  If xxx Then
    If IsNumber(xxx) Then
      xval = CFloat(Trim(xxx))
    Else
      xval = 0
    Endif
  Else
    xval = 0
  Endif
  Return xval

End

Public Function GetCalcValueString(sVariable As String, encid As String) As String

  Dim xxx As String

  xxx = sVariable
  xxx = GetReportVarTitle(xxx)
  xxx = GetReportVarPatient(encid, xxx)
  xxx = GetReportVarEncounter(encid, xxx)
  xxx = GetReportLastConsult(encid, xxx)
  xxx = GetReportBirthDetail(encid, xxx)
  xxx = GetReportVarExam(encid, xxx)

  Return xxx

End

Public Function GetCalcValueVariant(sVariable As String, encid As String) As Variant

  Dim xxx As String
  Dim xval As Variant

  xxx = sVariable
  xxx = GetCalcValueString(xxx, encid)
  xxx = GetCalcValue(xxx, encid)
  If xxx Then
    If IsNumber(xxx) Then
      xval = CFloat(Trim(xxx))
    Else
      xval = Trim(xxx)
    Endif
  Else
    xval = ""
  Endif
  Return xval

End

Public Function GetSysConstantValue(sType As String, sysconst As String, encid As String) As String

  Dim xval As String

  If sType = "Exam" Then
    xval = modClinic.GetCurrExamValueSysConst(encid, sysconst, "Last")
  Else If sType = "Radio" Then
    xval = modRadioTest.GetCurrRadioValueSysConst(encid, sysconst, "Last")
  Else If sType = "Test" Then
    xval = modLabTest.GetCurrTesValuePos("Last", encid, modFixLab.GetLabTestIDFromSysConst(sysconst), MMain.$defUnit)
  Else If sType = "Demog" Then
    xval = modPatPatho.GetDemographicValue(encid, sysconst)
  Endif

  Return xval

End

Public Function GetLastQuantiParamValue(sType As String, sExam As String, encid As String) As Float

  Dim xval As Variant
  Dim xfloat As Float

  If sType = "Exam" Then
    xval = modClinic.GetCurrExamValueFromID("Last", encid, sExam)
  Else If sType = "Radio" Then
    xval = modRadioTest.GetCurrRadioValuePos("Last", encid, sExam)
  Else If sType = "Test" Then
    xval = modLabTest.GetCurrTesValuePos("Last", encid, sExam, MMain.$defUnit)
  Else If sType = "Demog" Then
    xval = modPatPatho.GetDemographicValue(encid, sExam)
  Endif

  If xval Then
    xfloat = xval
  Else
    xfloat = 0
  Endif

  Return xfloat

End

Public Function GetLastQualiParamValue(sType As String, sExam As String, encid As String) As Variant

  Dim xval As Variant

  If sType = "Exam" Then
    xval = modClinic.GetCurrExamValueFromID("Last", encid, sExam)
  Else If sType = "Radio" Then
    xval = modRadioTest.GetCurrRadioValuePos("Last", encid, sExam)
  Else If sType = "Test" Then
    xval = modLabTest.GetCurrTesValuePos("Last", encid, sExam, MMain.$defUnit)
  Else If sType = "Demog" Then
    xval = modPatPatho.GetDemographicValue(encid, sExam)
  Endif

  Return xval

End

''--------------------------------- Variables --------------------------------------------------
''used by all report
Public Function GetReportVarTitle($Line As String) As String

  'Hospital Related
  If (String.InStr($Line, "HospitalName") > 0) Then
    $Line = Replace($Line, "{HospitalName}", modHelpVariable.$HospitalName)
  Endif
  If (String.InStr($Line, "HospitalAddress") > 0) Then
    $Line = Replace($Line, "{HospitalAddress}", modString.GetConfTextToHTML(modHelpVariable.$HospitalAddress))
  Endif
  If (String.InStr($Line, "Department") > 0) Then
    $Line = Replace($Line, "{Department}", modGeneral.GetCompNameFromCompID(modBasic.$compID))
  Endif
  If (String.InStr($Line, "HospLogo") > 0) Then
    $Line = Replace($Line, "{HospLogo}", modHelpVariable.$HospLogo)
  Endif
  If (String.InStr($Line, "CurrentTime") > 0) Then
    $Line = Replace($Line, "{CurrentTime}", modReportVar.GetDateTimeReport(Now(), gb.MediumTime))
  Endif
  If (String.InStr($Line, "CurrentDate") > 0) Then
    $Line = Replace($Line, "{CurrentDate}", GetDateTimeReport(Date(), gb.MediumDate))
  Endif
  If (String.InStr($Line, "CurrentUser") > 0) Then
    $Line = Replace($Line, "{CurrentUser}", modBasic.$lbluser)
  Endif
  If (String.InStr($Line, "PatPortalURL") > 0) Then
    $Line = Replace($Line, "{PatPortalURL}", modBasic.$PatPortalURL)
  Endif

  Return $Line

End

''used by all reports
Public Function GetReportVarPatient($encid As String, $Line As String) As String

  ' Patient Related
  If (String.InStr($Line, "Encounter") > 0) Then
    $Line = Replace($Line, "{Encounter}", $encid)
  Endif
  If (String.InStr($Line, "PatientNo") > 0) Then
    $Line = Replace($Line, "{PatientNo}", modPatient.GetPatientNoByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientCode") > 0) Then
    $Line = Replace($Line, "{PatientCode}", modPatient.GetPatientExtCOdebyEnc($encid))
  Endif
  If (String.InStr($Line, "PatientFileNo") > 0) Then
    $Line = Replace($Line, "{PatientFileNo}", modPatient.GetPatientFileByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientName") > 0) Then
    $Line = Replace($Line, "{PatientName}", modPatient.GetPatientNameByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientEthnicity") > 0) Then
    $Line = Replace($Line, "{PatientEthnicity}", modPatient.GetPatientEthnicity($encid))
  Endif

  If (String.InStr($Line, "PatientMunicipality") > 0) Then
    $Line = Replace($Line, "{PatientMunicipality}", modPatient.GetPatFirAddressByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientWardAddress") > 0) Then
    $Line = Replace($Line, "{PatientWardAddress}", modPatient.GetPatWardAddressByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientAddress") > 0) Then
    $Line = Replace($Line, "{PatientAddress}", modPatient.GetPatientAddressByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientDistrict") > 0) Then
    $Line = Replace($Line, "{PatientDistrict}", modPatient.GetPatDistrictByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientGender") > 0) Then
    $Line = Replace($Line, "{PatientGender}", modPatient.GetPatientSex($encid))
  Endif
  If (String.InStr($Line, "PatientProvince") > 0) Then
    $Line = Replace($Line, "{PatientProvince}", modDataRepo.GetProvinceFromDistrict(modPatient.GetPatDistrictByEnc($encid)))
  Endif
  If (String.InStr($Line, "PatientGuardian") > 0) Then
    $Line = Replace($Line, "{PatientGuardian}", modPatient.GetPatientGuardianByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientRelation") > 0) Then
    $Line = Replace($Line, "{PatientRelation}", modPatient.GetPatientReltionByEnc($encid))
  Endif
  If (String.InStr($Line, "PatientAge") > 0) Then
    $Line = Replace($Line, "{PatientAge}", modPatient.GetPatientAgeString($encid, Now()))
  Endif
  If (String.InStr($Line, "AgeGroup") > 0) Then
    $Line = Replace($Line, "{AgeGroup}", modPatient.GetAgeGroup($encid))
  Endif
  If (String.InStr($Line, "AgeGroupCustom") > 0) Then
    $Line = Replace($Line, "{AgeGroupCustom}", modPatient.GetAgeGroupCustom($encid))
  Endif
  If (String.InStr($Line, "E-Mail") > 0) Then
    $Line = Replace($Line, "{E-Mail}", modPatient.GetPatientEmail($encid))
  Endif
  If (String.InStr($Line, "ContactNo") > 0) Then
    $Line = Replace($Line, "{ContactNo}", modPatient.GetPatientContactByEnc($encid))
  Endif
  If (String.InStr($Line, "Age/Sex") > 0) Then
    $Line = Replace($Line, "{Age/Sex}", modPatient.GetPatientAgeString($encid, Now()) & "/" & modPatient.GetPatientSex($encid))
  Endif
  If (String.InStr($Line, "PatientDOB") > 0) Then
    $Line = Replace($Line, "{PatientDOB}", GetDateTimeReport(modPatient.GetPatientBirthDay($encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "DiscountPackae") > 0) Then
    $Line = Replace($Line, "{DiscountPackae}", modPatient.ShowDiscountCategEnc($encid))
  Endif

  If (String.InStr($Line, "MotherEncounter") > 0) Then
    $Line = Replace($Line, "{MotherEncounter}", modPatient.GetMotherEncounter($encid))
  Endif
  If (String.InStr($Line, "MotherPatientNo") > 0) Then
    $Line = Replace($Line, "{MotherPatientNo}", modPatient.GetPatientNoByEnc(modPatient.GetMotherEncounter($encid)))
  Endif
  If (String.InStr($Line, "MotherName") > 0) Then
    $Line = Replace($Line, "{MotherName}", modPatient.GetPatientNameByEnc(modPatient.GetMotherEncounter($encid)))
  Endif

  ''Service variables
  If (String.InStr($Line, "ServiceType") > 0) Then
    $Line = Replace($Line, "{ServiceType}", modPatient.GetPatServiceType($encid))
  Endif
  If (String.InStr($Line, "ServiceRank") > 0) Then
    $Line = Replace($Line, "{ServiceRank}", modPatient.GetPatServiceRank($encid))
  Endif
  If (String.InStr($Line, "ServiceUnit") > 0) Then
    $Line = Replace($Line, "{ServiceUnit}", modPatient.GetPatServiceUnit($encid))
  Endif

  Return $Line

End

''not used by invoice but used by report and custom report
Public Function GetReportVarEncounter($encid As String, $Line As String) As String

  'Encounter Related
  If (String.InStr($Line, "RegdDepartment") > 0) Then
    $Line = Replace($Line, "{RegdDepartment}", modPatient.GetAdmitLocation($encid))
  Endif
  If (String.InStr($Line, "RegdDeptRoom") > 0) Then
    $Line = Replace($Line, "{RegdDeptRoom}", modGeneral.GetRoomNoFromDept(modPatient.GetAdmitLocation($encid)))
  Endif
  If (String.InStr($Line, "BedNo") > 0) Then                                   ''
    $Line = Replace($Line, "{BedNo}", modPatient.GetPatientLocation($encid))
  Endif
  If (String.InStr($Line, "WardName") > 0) Then
    $Line = Replace($Line, "{WardName}", modPatient.GetPatientWardName($encid))
  Endif
  If (String.InStr($Line, "WardCaption") > 0) Then
    $Line = Replace($Line, "{WardCaption}", modPatient.GetPatientWardCaption($encid))
  Endif
  If (String.InStr($Line, "FirstWardName") > 0) Then
    $Line = Replace($Line, "{FirstWardName}", modPatient.GetPatientFirstWard($encid))
  Endif
  If (String.InStr($Line, "CurrDepartment") > 0) Then
    $Line = Replace($Line, "{CurrDepartment}", modPatient.GetPatientCurrDepartment($encid))
  Endif
  If (String.InStr($Line, "BedOxygen") > 0) Then
    $Line = Replace($Line, "{BedOxygen}", modPatient.GetPatientBedOxygen($encid))
  Endif
  If (String.InStr($Line, "BedVentilator") > 0) Then
    $Line = Replace($Line, "{BedVentilator}", modPatient.GetPatientBedVentilator($encid))
  Endif
  If (String.InStr($Line, "RegdBillMode") > 0) Then
    $Line = Replace($Line, "{RegdBillMode}", modPatient.GetPatBillingMode($encid))
  Endif
  If (String.InStr($Line, "VisitMode") > 0) Then
    $Line = Replace($Line, "{VisitMode}", modPatient.GetPatVisitType($encid))
  Endif
  If (String.InStr($Line, "CurrentStatus") > 0) Then
    $Line = Replace($Line, "{CurrentStatus}", modPatient.CurrentAdmissionStatus($encid))
  Endif
  If (String.InStr($Line, "CurrentStatusComment") > 0) Then
    $Line = Replace($Line, "{CurrentStatusComment}", modPatient.CurrentStatuswithComment($encid))
  Endif
  If (String.InStr($Line, "Consultant") > 0) Then
    $Line = Replace($Line, "{Consultant}", modGeneral.GetUserFullName(modPatient.GetAttendingConsultant($encid)))
  Endif
  If (String.InStr($Line, "ConsultantID") > 0) Then
    $Line = Replace($Line, "{ConsultantID}", modPatient.GetAttendingConsultant($encid))
  Endif
  If (String.InStr($Line, "RegdConsultationFree") > 0) Then
    $Line = Replace($Line, "{RegdConsultationFree}", GetLocaleNumberFormat(modBillings.GetRegistrationCost($encid), gb.Currency))
  Endif

  If (String.InStr($Line, "TotalExpense") > 0) Then
    $Line = Replace($Line, "{TotalExpense}", GetLocaleNumberFormat(modNonMedical.TotalExpenseAmountbyPatient(modDatabase.$myConn, $encid), gb.Currency))
  Endif
  If (String.InStr($Line, "TotalPayment") > 0) Then
    $Line = Replace($Line, "{TotalPayment}", GetLocaleNumberFormat(modNonMedical.TotalPaidAmountbyPatient(modDatabase.$myConn, $encid), gb.Currency))
  Endif
  If (String.InStr($Line, "CurrentDeposit") > 0) Then
    $Line = Replace($Line, "{CurrentDeposit}", GetLocaleNumberFormat(modNonMedical.GetPatientDeposit(modDatabase.$myConn, $encid), gb.Currency))
  Endif
  If (String.InStr($Line, "NonInvoicedExpenses") > 0) Then
    $Line = Replace($Line, "{NonInvoicedExpenses}", GetLocaleNumberFormat(modNonMedical.TotalUnpaidValuePatient(modDatabase.$myConn, $encid), gb.Currency))
  Endif
  If (String.InStr($Line, "BalanceDeposit") > 0) Then
    $Line = Replace($Line, "{BalanceDeposit}", GetLocaleNumberFormat(modNonMedical.GetPatientDeposit(modDatabase.$myConn, $encid) - modNonMedical.TotalUnpaidValuePatient(modDatabase.$myConn, $encid), gb.Currency))
  Endif

  If (String.InStr($Line, "LastInvoiceNumber") > 0) Then
    $Line = Replace($Line, "{LastInvoiceNumber}", modNonMedical.GetSelectedBillNo($encid, "Last"))
  Endif
  If (String.InStr($Line, "FirstInvoiceNumber") > 0) Then
    $Line = Replace($Line, "{FirstInvoiceNumber}", modNonMedical.GetSelectedBillNo($encid, "First"))
  Endif

  If (String.InStr($Line, "LastInvoiceAmount") > 0) Then
    $Line = Replace($Line, "{LastInvoiceAmount}", CStr(modNonMedical.GetSelectedBillAmt($encid, "Last")))
  Endif
  If (String.InStr($Line, "FirstInvoiceAmount") > 0) Then
    $Line = Replace($Line, "{FirstInvoiceAmount}", CStr(modNonMedical.GetSelectedBillAmt($encid, "First")))
  Endif

  If (String.InStr($Line, "LastReceiptNumber") > 0) Then
    $Line = Replace($Line, "{LastReceiptNumber}", modNonMedical.GetSelectedReceiptNo($encid, "Last"))
  Endif
  If (String.InStr($Line, "FirstReceiptNumber") > 0) Then
    $Line = Replace($Line, "{FirstReceiptNumber}", modNonMedical.GetSelectedReceiptNo($encid, "First"))
  Endif

  If (String.InStr($Line, "HIClaimCode") > 0) Then
    $Line = Replace($Line, "{HIClaimCode}", modNonMedical.GetNHSICLaimCode($encid))
  Endif
  If (String.InStr($Line, "SSFClaimCode") > 0) Then
    $Line = Replace($Line, "{SSFClaimCode}", modNonMedical.GetSSFCLaimCode($encid))
  Endif
  If (String.InStr($Line, "LastInvReference") > 0) Then
    $Line = Replace($Line, "{LastInvReference}", modNonMedical.GetLastInvoiceReference($encid))
  Endif
  If (String.InStr($Line, "LastClaimCode") > 0) Then
    $Line = Replace($Line, "{LastClaimCode}", modClaim.GetCurrentClaimCodePrint($encid))
  Endif
  If (String.InStr($Line, "FirstClaimCode") > 0) Then
    $Line = Replace($Line, "{FirstClaimCode}", modClaim.GetCurrentClaimCodePrint($encid))
  Endif

  If (String.InStr($Line, "RegistrationDateTime") > 0) Then
    $Line = Replace($Line, "{RegistrationDateTime}", GetDateTimeReport(modPatient.GetRecordDate($encid), gb.GeneralDate))
  Endif
  If (String.InStr($Line, "RegistrationDate") > 0) Then
    $Line = Replace($Line, "{RegistrationDate}", GetDateTimeReport(modPatient.GetRecordDate($encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "RegistrationTime") > 0) Then
    $Line = Replace($Line, "{RegistrationTime}", GetDateTimeReport(modPatient.GetRecordDate($encid), gb.MediumTime))
  Endif

  If (String.InStr($Line, "AdmissionDateTime") > 0) Then
    $Line = Replace($Line, "{AdmissionDateTime}", GetDateTimeReport(modPatient.GetAdmissionDate($encid), gb.GeneralDate))
  Endif
  If (String.InStr($Line, "AdmissionDate") > 0) Then
    $Line = Replace($Line, "{AdmissionDate}", GetDateTimeReport(modPatient.GetAdmissionDate($encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "AdmissionTime") > 0) Then
    $Line = Replace($Line, "{AdmissionTime}", GetDateTimeReport(modPatient.GetAdmissionDate($encid), gb.MediumTime))
  Endif

  If (String.InStr($Line, "DischargeDateTime") > 0) Then
    $Line = Replace($Line, "{DischargeDateTime}", GetDateTimeReport(modPatient.GetDischargeDate($encid), gb.GeneralDate))
  Endif
  If (String.InStr($Line, "DischargeDate") > 0) Then
    $Line = Replace($Line, "{DischargeDate}", GetDateTimeReport(modPatient.GetDischargeDate($encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "DischargeTime") > 0) Then
    $Line = Replace($Line, "{DischargeTime}", GetDateTimeReport(modPatient.GetDischargeDate($encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "ClearanceDateTime") > 0) Then
    $Line = Replace($Line, "{ClearanceDateTime}", GetDateTimeReport(modPatient.GetClearanceDateTime($encid), gb.GeneralDate))
  Endif
  If (String.InStr($Line, "AdmitDurationHour") > 0) Then
    $Line = Replace($Line, "{AdmitDurationHour}", Format(modPatient.GetHospitalStayInHours($encid) / 24, gb.Fixed) & "  Days")
  Endif
  If (String.InStr($Line, "FollowUpDate") > 0) Then
    $Line = Replace($Line, "{FollowUpDate}", GetDateTimeReport(modPatient.GetFollowUpDate($encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "FollowUpTime") > 0) Then
    $Line = Replace($Line, "{FollowUpTime}", GetDateTimeReport(modPatient.GetFollowUpDate($encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "ReferLocation") > 0) Then
    $Line = Replace($Line, "{ReferLocation}", modPatient.GetReferLocation($encid))
  Endif

  If (String.InStr($Line, "RegistrationUser") > 0) Then
    $Line = Replace($Line, "{RegistrationUser}", modPatient.GetPptientImpDateUser($encid, "Consultation"))
  Endif
  If (String.InStr($Line, "AdmissionUser") > 0) Then
    $Line = Replace($Line, "{AdmissionUser}", modPatient.GetPptientImpDateUser($encid, "Admission"))
  Endif
  If (String.InStr($Line, "DischargeUser") > 0) Then
    $Line = Replace($Line, "{DischargeUser}", modPatient.GetPptientImpDateUser($encid, "Discharge"))
  Endif
  If (String.InStr($Line, "ClearanceUser") > 0) Then
    $Line = Replace($Line, "{ClearanceUser}", modPatient.GetPptientImpDateUser($encid, "Clearance"))
  Endif

  If (String.InStr($Line, "FinalDiagnosis") > 0) Then
    $Line = Replace($Line, "{FinalDiagnosis}", modString.TextToHTML(modPatient.PatientFindingList($encid, "Final Diagnosis").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "ProvisionalDiagnosis") > 0) Then
    $Line = Replace($Line, "{ProvisionalDiagnosis}", modString.TextToHTML(modPatient.PatientFindingList($encid, "Provisional Diagnosis").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "ProvisionalDiagnosisClass") > 0) Then
    $Line = Replace($Line, "{ProvisionalDiagnosisClass}", modString.TextToHTML(modPatient.PatientDiagnoClassList($encid, "Final Diagnosis").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "FinalDiagnosisClass") > 0) Then
    $Line = Replace($Line, "{FinalDiagnosisClass}", modString.TextToHTML(modPatient.PatientDiagnoClassList($encid, "Final Diagnosis").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "PatientDiagnosis") > 0) Then
    $Line = Replace($Line, "{PatientDiagnosis}", modString.TextToHTML(modPatient.PatientDiagnoCurrentList($encid).Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "PatientDiagnosisClass") > 0) Then
    $Line = Replace($Line, "{PatientDiagnosisClass}", modString.TextToHTML(modPatient.PatientDiagnoCurClassList($encid).Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "DrugAllergy") > 0) Then
    $Line = Replace($Line, "{DrugAllergy}", modString.TextToHTML(modPatient.PatientFindingList($encid, "Allergic Drugs").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "PatientTriageColor") > 0) Then
    $Line = Replace($Line, "{PatientTriageColor}", Hex(modPatient.GetPatientColor($encid), 6))
  Endif
  If (String.InStr($Line, "PatientTriageSymbol") > 0) Then
    $Line = Replace($Line, "{PatientTriageSymbol}", modMisc.GetColorValSymbol(modPatient.GetPatientColor($encid)))
  Endif

  If (String.InStr($Line, "Gravida") > 0) Then
    $Line = Replace($Line, "{Gravida}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Gravida"), $encid)))
  Endif
  If (String.InStr($Line, "Parity") > 0) Then
    $Line = Replace($Line, "{Parity}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Parity"), $encid)))
  Endif
  If (String.InStr($Line, "Abortion") > 0) Then
    $Line = Replace($Line, "{Abortion}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Abortion"), $encid)))
  Endif
  If (String.InStr($Line, "Living") > 0) Then
    $Line = Replace($Line, "{Living}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Living"), $encid)))
  Endif
  If (String.InStr($Line, "LMP") > 0) Then
    $Line = Replace($Line, "{LMP}", modReportVar.GetDateTimeReport(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("LMP"), $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "EDD") > 0) Then
    $Line = Replace($Line, "{EDD}", modReportVar.GetDateTimeReport(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("EDD"), $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "Gestation") > 0) Then
    $Line = Replace($Line, "{Gestation}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Gestation"), $encid)))
  Endif
  If (String.InStr($Line, "ObsPresentation") > 0) Then
    $Line = Replace($Line, "{ObsPresentation}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Presentation"), $encid)))
  Endif
  If (String.InStr($Line, "ObsStatus") > 0) Then
    $Line = Replace($Line, "{ObsStatus}", CStr(modPatient.GetObstetricFieldEnc(modPathoSub.GetObstetricField("Status"), $encid)))
  Endif

  Return $Line

End

''used by custom report and by invoice on enabling extra label
Public Function GetReportLastConsult($encid As String, $Line As String) As String

  Dim res As Result

  ''consultation
  If (String.InStr($Line, "LastConsultDept") > 0) Then
    $Line = Replace($Line, "{LastConsultDept}", GetLastValue("tblconsult", "fldconsultname", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastConsultRoom") > 0) Then
    $Line = Replace($Line, "{LastConsultRoom}", modGeneral.GetRoomNoFromDept(GetLastValue("tblconsult", "fldconsultname", "fldencounterval", $encid)))
  Endif
  If (String.InStr($Line, "LastConsultant") > 0) Then
    $Line = Replace($Line, "{LastConsultant}", modGeneral.GetUserFullName(GetLastValue("tblconsult", "flduserid", "fldencounterval", $encid)))
  Endif
  If (String.InStr($Line, "LastConsultBillMode") > 0) Then
    $Line = Replace($Line, "{LastConsultBillMode}", GetLastValue("tblconsult", "fldbillingmode", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastConsultDate") > 0) Then
    $Line = Replace($Line, "{LastConsultDate}", GetDateTimeReport(GetLastValue("tblconsult", "fldconsulttime", "fldencounterval", $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "LastConsultTime") > 0) Then
    $Line = Replace($Line, "{LastConsultTime}", GetDateTimeReport(GetLastValue("tblconsult", "fldconsulttime", "fldencounterval", $encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "LastConsultStatus") > 0) Then
    $Line = Replace($Line, "{LastConsultStatus}", GetLastValue("tblconsult", "fldstatus", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastConsultComment") > 0) Then
    $Line = Replace($Line, "{LastConsultComment}", GetLastValue("tblconsult", "fldnotice", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastConsultOutcome") > 0) Then
    $Line = Replace($Line, "{LastConsultOutcome}", GetLastValue("tblconsult", "fldoutcome", "fldencounterval", $encid))
  Endif

  If (String.InStr($Line, "LastConsultQue") > 0) Then
    res = modDatabase.$myConn.Exec("select fldconsultname,fldconsulttime,fldstatus,flduserid,fldbillingmode from tblconsult where fldencounterval=&1", $encid)
    If res.Available Then
      res.MoveLast
      $Line = Replace($Line, "{LastConsultQue}", modConsult.GetQueNumber(res["fldconsultname"], res["fldconsulttime"], $encid, res["fldbillingmode"], res["flduserid"]))
    Else
      $Line = Replace($Line, "{LastConsultQue}", "")
    Endif
  Endif

  ''OP Visit
  If (String.InStr($Line, "LastOPVisitDept") > 0) Then
    $Line = Replace($Line, "{LastOPVisitDept}", GetLastValue("tblopvisit", "fldconsultname", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastOPVisitRoom") > 0) Then
    $Line = Replace($Line, "{LastOPVisitRoom}", modGeneral.GetRoomNoFromDept(GetLastValue("tblopvisit", "fldconsultname", "fldencounterval", $encid)))
  Endif
  If (String.InStr($Line, "LastOPVisitBillMode") > 0) Then
    $Line = Replace($Line, "{LastOPVisitBillMode}", GetLastValue("tblopvisit", "fldbillingmode", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastOPVisitDate") > 0) Then
    $Line = Replace($Line, "{LastOPVisitDate}", GetDateTimeReport(GetLastValue("tblopvisit", "fldconsulttime", "fldencounterval", $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "LastOPVisitTime") > 0) Then
    $Line = Replace($Line, "{LastOPVisitTime}", GetDateTimeReport(GetLastValue("tblopvisit", "fldconsulttime", "fldencounterval", $encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "LastOPVisitStatus") > 0) Then
    $Line = Replace($Line, "{LastOPVisitStatus}", GetLastValue("tblopvisit", "fldstatus", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastOPVisitComment") > 0) Then
    $Line = Replace($Line, "{LastOPVisitComment}", GetLastValue("tblopvisit", "fldnotice", "fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "LastOPVisitOutcome") > 0) Then
    $Line = Replace($Line, "{LastOPVisitOutcome}", GetLastValue("tblopvisit", "fldoutcome", "fldencounterval", $encid))
  Endif

  ''any
  If (String.InStr($Line, "LastVisitDate") > 0) Then
    $Line = Replace($Line, "{LastVisitDate}", GetDateTimeReport(modPatient.GetLastVisitDate($encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "LastVisitTime") > 0) Then
    $Line = Replace($Line, "{LastVisitTime}", GetDateTimeReport(modPatient.GetLastVisitDate($encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "LastVisitLocation") > 0) Then
    $Line = Replace($Line, "{LastVisitLocation}", modPatient.GetLastVisitLocation($encid))
  Endif

  Return $Line

End

Public Function GetReportCurrConsult($encid As String, $Line As String, VarIndex As Long) As String

  ''consultation
  If (String.InStr($Line, "CurrConsultDept") > 0) Then
    $Line = Replace($Line, "{CurrConsultDept}", GetSelectedValue("tblconsult", "fldconsultname", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultRoom") > 0) Then
    $Line = Replace($Line, "{CurrConsultRoom}", modGeneral.GetRoomNoFromDept(GetSelectedValue("tblconsult", "fldconsultname", "fldid", VarIndex, $encid)))
  Endif
  If (String.InStr($Line, "CurrConsultant") > 0) Then
    $Line = Replace($Line, "{CurrConsultant}", modGeneral.GetUserFullName(GetSelectedValue("tblconsult", "flduserid", "fldid", VarIndex, $encid)))
  Endif
  If (String.InStr($Line, "CurrConsultBillMode") > 0) Then
    $Line = Replace($Line, "{CurrConsultBillMode}", GetSelectedValue("tblconsult", "fldbillingmode", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultDate") > 0) Then
    $Line = Replace($Line, "{CurrConsultDate}", GetDateTimeReport(GetSelectedValue("tblconsult", "fldconsulttime", "fldid", VarIndex, $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "CurrConsultTime") > 0) Then
    $Line = Replace($Line, "{CurrConsultTime}", GetDateTimeReport(GetSelectedValue("tblconsult", "fldconsulttime", "fldid", VarIndex, $encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "CurrConsultStatus") > 0) Then
    $Line = Replace($Line, "{CurrConsultStatus}", GetSelectedValue("tblconsult", "fldstatus", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultComment") > 0) Then
    $Line = Replace($Line, "{CurrConsultComment}", GetSelectedValue("tblconsult", "fldnotice", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultOutcome") > 0) Then
    $Line = Replace($Line, "{CurrConsultOutcome}", GetSelectedValue("tblconsult", "fldoutcome", "fldid", VarIndex, $encid))
  Endif

  Return $Line

End

Public Function GetReportCurrOPVisit($encid As String, $Line As String, VarIndex As Long) As String

  ''OP Visit
  If (String.InStr($Line, "CurrConsultDept") > 0) Then
    $Line = Replace($Line, "{CurrConsultDept}", GetSelectedValue("tblopvisit", "fldconsultname", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultRoom") > 0) Then
    $Line = Replace($Line, "{CurrConsultRoom}", modGeneral.GetRoomNoFromDept(GetSelectedValue("tblopvisit", "fldconsultname", "fldid", VarIndex, $encid)))
  Endif
  If (String.InStr($Line, "CurrConsultBillMode") > 0) Then
    $Line = Replace($Line, "{CurrConsultBillMode}", GetSelectedValue("tblopvisit", "fldbillingmode", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultDate") > 0) Then
    $Line = Replace($Line, "{CurrConsultDate}", GetDateTimeReport(GetSelectedValue("tblopvisit", "fldconsulttime", "fldid", VarIndex, $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "CurrConsultTime") > 0) Then
    $Line = Replace($Line, "{CurrConsultTime}", GetDateTimeReport(GetSelectedValue("tblopvisit", "fldconsulttime", "fldid", VarIndex, $encid), gb.MediumTime))
  Endif
  If (String.InStr($Line, "CurrConsultStatus") > 0) Then
    $Line = Replace($Line, "{CurrConsultStatus}", GetSelectedValue("tblopvisit", "fldstatus", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultComment") > 0) Then
    $Line = Replace($Line, "{CurrConsultComment}", GetSelectedValue("tblopvisit", "fldnotice", "fldid", VarIndex, $encid))
  Endif
  If (String.InStr($Line, "CurrConsultOutcome") > 0) Then
    $Line = Replace($Line, "{CurrConsultOutcome}", GetSelectedValue("tblopvisit", "fldoutcome", "fldid", VarIndex, $encid))
  Endif

  Return $Line

End

''used for birth report custom report
Public Function GetReportBirthDetail($encid As String, $Line As String) As String

  If (String.InStr($Line, "Birth_MotherEncID") > 0) Then
    $Line = Replace($Line, "{Birth_MotherEncID}", modPatient.GetBirthValue("fldencounterval", $encid))
  Endif
  If (String.InStr($Line, "Birth_MotherName") > 0) Then
    $Line = Replace($Line, "{Birth_MotherName}", modPatient.GetPatientNameByEnc(modPatient.GetBirthValue("fldencounterval", $encid)))
  Endif
  If (String.InStr($Line, "Birth_DeliveryType") > 0) Then
    $Line = Replace($Line, "{Birth_DeliveryType}", modPatient.GetBirthValue("flddeltype", $encid))
  Endif
  If (String.InStr($Line, "Birth_DeliveryResult") > 0) Then
    $Line = Replace($Line, "{Birth_DeliveryResult}", modPatient.GetBirthValue("flddelresult", $encid))
  Endif
  If (String.InStr($Line, "Birth_DeliveryConsult") > 0) Then
    $Line = Replace($Line, "{Birth_DeliveryConsult}", modGeneral.GetUserFullName(modPatient.GetBirthValue("flddelphysician", $encid)))
  Endif

  If (String.InStr($Line, "Birth_DeliveryDate") > 0) Then
    $Line = Replace($Line, "{Birth_DeliveryDate}", GetDateTimeReport(modPatient.GetBirthValue("flddeltime", $encid), gb.MediumDate))
  Endif
  If (String.InStr($Line, "Birth_DeliveryTime") > 0) Then
    $Line = Replace($Line, "{Birth_DeliveryTime}", GetDateTimeReport(modPatient.GetBirthValue("flddeltime", $encid), gb.MediumTime))
  Endif

  If (String.InStr($Line, "Birth_BloodLoss") > 0) Then
    $Line = Replace($Line, "{Birth_BloodLoss}", CStr(modPatient.GetBirthValue("fldbloodloss", $encid)) & " mL")
  Endif
  If (String.InStr($Line, "Birth_BabyWeight") > 0) Then
    $Line = Replace($Line, "{Birth_BabyWeight}", CStr(modPatient.GetBirthValue("flddelwt", $encid)) & " grams")
  Endif
  If (String.InStr($Line, "Birth_BabyBirthCode") > 0) Then
    $Line = Replace($Line, "{Birth_BabyBirthCode}", modPatient.GetBirthValue("fldbabyref", $encid))
  Endif

  Return $Line

End

''used for procedure report custom report
Public Function GetReportProcedureDetail($encid As String, $Line As String, sid As Long) As String

  If (String.InStr($Line, "Procedure_Status") > 0) Then
    $Line = Replace($Line, "{Procedure_Status}", GetLastProcedureValue($encid, sid, "fldreportquali"))
  Endif
  If (String.InStr($Line, "Procedure_Name") > 0) Then
    $Line = Replace($Line, "{Procedure_Name}", GetLastProcedureValue($encid, sid, "flditem"))
  Endif
  If (String.InStr($Line, "Procedure_Components") > 0) Then
    $Line = Replace($Line, "{Procedure_Components}", modString.TextToHTML(modPatPatho.GetComponentProcedure($encid, sid).Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "Procedure_Summary") > 0) Then
    $Line = Replace($Line, "{Procedure_Summary}", GetLastProcedureValue($encid, sid, "flddetail"))
  Endif
  If (String.InStr($Line, "Procedure_Personnel") > 0) Then
    $Line = Replace($Line, "{Procedure_Personnel}", modString.TextToHTML(modPatPatho.GetUserAllUniProcedure($encid, sid)))
  Endif
  If (String.InStr($Line, "Procedure_Comment") > 0) Then
    $Line = Replace($Line, "{Procedure_Comment}", modPatPatho.GetUniProcedureDetail($encid, sid, "Operation Note"))
  Endif

  If (String.InStr($Line, "Procedure_PreOperative_Indication") > 0) Then
    $Line = Replace($Line, "{Procedure_PreOperative_Indication}", modPatPatho.GetProcedureItemValue($encid, sid, "Pre-Operative Indication"))
  Endif
  If (String.InStr($Line, "Procedure_PreOperative_Comment") > 0) Then
    $Line = Replace($Line, "{Procedure_PreOperative_Comment}", modPatPatho.GetUniProcedureDetail($encid, sid, "Pre-Operative Note"))
  Endif
  If (String.InStr($Line, "Procedure_PreOperative_Discussion") > 0) Then
    $Line = Replace($Line, "{Procedure_PreOperative_Discussion}", modPatPatho.GetUniProcedureDetail($encid, sid, "Pre-Operative Discussion"))
  Endif

  If (String.InStr($Line, "Procedure_Anaesthesia_Technique") > 0) Then
    $Line = Replace($Line, "{Procedure_Anaesthesia_Technique}", modPatPatho.GetProcedureItemValue($encid, sid, "Anaesthesia Technique"))
  Endif
  If (String.InStr($Line, "Procedure_Anaesthesia_Comment") > 0) Then
    $Line = Replace($Line, "{Procedure_Anaesthesia_Comment}", modPatPatho.GetUniProcedureDetail($encid, sid, "Anaesthesia Note"))
  Endif

  If (String.InStr($Line, "Procedure_PostOperative_Indication") > 0) Then
    $Line = Replace($Line, "{Procedure_PostOperative_Indication}", modPatPatho.GetProcedureItemValue($encid, sid, "Post-Operative Indication"))
  Endif
  If (String.InStr($Line, "Procedure_PostOperative_Comment") > 0) Then
    $Line = Replace($Line, "{Procedure_PostOperative_Comment}", modPatPatho.GetUniProcedureDetail($encid, sid, "Post-Operative Note"))
  Endif

  Return $Line

End

Private Function GetLastProcedureValue($encid As String, sid As Long, sField As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String

  sql = Subst("select &1 from tblpatgeneral", sField) & " where fldid=&1 and fldencounterval=&2"
  res = modDatabase.$myConn.Exec(sql, sid, $encid)
  If res.Available Then
    xx = res[sField]
  Else
    xx = ""
  Endif
  Return xx

End

''used by custom report only
Public Function GetReportVarHistory($encid As String, $Line As String) As String

  ''from exam table
  If (String.InStr($Line, "PresentingSymptoms") > 0) Then
    $Line = Replace($Line, "{PresentingSymptoms}", modString.TextToHTML(modPatReports.GetPatientPresentingSymptomReport($encid).Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "GeneralComplaints") > 0) Then
    $Line = Replace($Line, "{GeneralComplaints}", modPatPatho.ShowSelectedHistory($encid, "General Complaints"))
  Endif

  If (String.InStr($Line, "ClinicalFindings") > 0) Then
    $Line = Replace($Line, "{ClinicalFindings}", modString.TextToHTML(modPatReports.GetSelectFindingReport($encid, "Non-Vital").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "PhysicianExaminations") > 0) Then
    $Line = Replace($Line, "{PhysicianExaminations}", modString.TextToHTML(modPatReports.GetSelectFindingReport($encid, "Physician Examinations").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "NursingExaminations") > 0) Then
    $Line = Replace($Line, "{NursingExaminations}", modString.TextToHTML(modPatReports.GetSelectFindingReport($encid, "Nursing Examinations").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "PhysicianStructured") > 0) Then
    $Line = Replace($Line, "{PhysicianStructured}", modString.TextToHTML(modPatReports.GetRecommendedExam($encid, "Physician Examinations")))
  Endif
  If (String.InStr($Line, "DepartmentStructured") > 0) Then
    $Line = Replace($Line, "{DepartmentStructured}", modString.TextToHTML(modPatReports.GetRecommendedExam($encid, "Departmental")))
  Endif
  If (String.InStr($Line, "EssentialExaminations") > 0) Then
    $Line = Replace($Line, "{EssentialExaminations}", modString.TextToHTML(modPatReports.GetSelectFindingReport($encid, "Essential Examinations").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "TriageExaminations") > 0) Then
    $Line = Replace($Line, "{TriageExaminations}", modString.TextToHTML(modPatReports.GetSelectFindingReport($encid, "Triage Examinations").Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "DischargeExaminations") > 0) Then
    $Line = Replace($Line, "{DischargeExaminations}", modString.TextToHTML(modPatReports.GetSelectFindingReport($encid, "Discharge Examinations").Join(gb.NewLine)))
  Endif

  If (String.InStr($Line, "AdmissionCause") > 0) Then
    $Line = Replace($Line, "{AdmissionCause}", modPatPatho.ShowSelectedHistory($encid, "Cause of Admission"))
  Endif
  If (String.InStr($Line, "HistoryofIllness") > 0) Then
    $Line = Replace($Line, "{HistoryofIllness}", modPatPatho.ShowSelectedHistory($encid, "History of Illness"))
  Endif
  ''------------------------ for backward compatibility only -------------------
  If (String.InStr($Line, "PastHistory") > 0) Then
    $Line = Replace($Line, "{PastHistory}", modPatPatho.ShowSelectedHistory($encid, "Past History"))
  Endif
  If (String.InStr($Line, "FamilyHistory") > 0) Then
    $Line = Replace($Line, "{FamilyHistory}", modPatPatho.ShowSelectedHistory($encid, "Family History"))
  Endif
  If (String.InStr($Line, "TreatmentHistory") > 0) Then
    $Line = Replace($Line, "{TreatmentHistory}", modPatPatho.ShowSelectedHistory($encid, "Treatment History"))
  Endif
  If (String.InStr($Line, "MedicationHistory") > 0) Then
    $Line = Replace($Line, "{MedicationHistory}", modPatPatho.ShowSelectedHistory($encid, "Medication History"))
  Endif
  If (String.InStr($Line, "PersonalHistory") > 0) Then
    $Line = Replace($Line, "{PersonalHistory}", modPatPatho.ShowSelectedHistory($encid, "Personal History"))
  Endif
  If (String.InStr($Line, "SurgicalHistory") > 0) Then
    $Line = Replace($Line, "{SurgicalHistory}", modPatPatho.ShowSelectedHistory($encid, "Surgical History"))
  Endif
  If (String.InStr($Line, "OccupationalHistory") > 0) Then
    $Line = Replace($Line, "{OccupationalHistory}", modPatPatho.ShowSelectedHistory($encid, "Occupational History"))
  Endif
  If (String.InStr($Line, "SocialHistory") > 0) Then
    $Line = Replace($Line, "{SocialHistory}", modPatPatho.ShowSelectedHistory($encid, "Social History"))
  Endif
  ''-------------------- end backward compatibility ---------------------------

  If (String.InStr($Line, "InvestigationAdvised") > 0) Then
    $Line = Replace($Line, "{InvestigationAdvised}", modString.TextToHTML(modPatReports.OPDOrderLabRequest($encid).Join(gb.NewLine)))
  Endif
  If (String.InStr($Line, "TreatmentAdvised") > 0) Then
    $Line = Replace($Line, "{TreatmentAdvised}", modString.TextToHTML(modPatReports.OPDRequestMedString($encid, "Medicines")))
  Endif
  If (String.InStr($Line, "SurgicalRequests") > 0) Then
    $Line = Replace($Line, "{SurgicalRequests}", modString.TextToHTML(modPatReports.OPDRequestMedString($encid, "Surgicals")))
  Endif
  If (String.InStr($Line, "ExtraRequests") > 0) Then
    $Line = Replace($Line, "{ExtraRequests}", modString.TextToHTML(modPatReports.OPDRequestMedString($encid, "Extra Items")))
  Endif

  If (String.InStr($Line, "OPDRecommendation") > 0) Then
    $Line = Replace($Line, "{OPDRecommendation}", modPatReports.GetPatientNoteReport($encid, "Initial Planning"))
  Endif
  If (String.InStr($Line, "ExpertRecommendation") > 0) Then
    $Line = Replace($Line, "{ExpertRecommendation}", modPatReports.GetPatientNoteReport($encid, "Final Planning"))
  Endif
  If (String.InStr($Line, "DischargeOutcome") > 0) Then
    $Line = Replace($Line, "{DischargeOutcome}", modPatient.GetPatExitComment($encid, "Discharged"))
  Endif
  If (String.InStr($Line, "IndoorMedicines") > 0) Then
    $Line = Replace($Line, "{IndoorMedicines}", modString.TextToHTML(modPatReports.AdmittedMedString($encid)))
  Endif
  If (String.InStr($Line, "DischargeMedicines") > 0) Then
    $Line = Replace($Line, "{DischargeMedicines}", modString.TextToHTML(modPatReports.DischargeMedString($encid)))
  Endif
  If (String.InStr($Line, "DischargeCondition") > 0) Then
    $Line = Replace($Line, "{DischargeCondition}", modPatReports.GetPatientNoteReport($encid, "Condition of Discharge"))
  Endif
  If (String.InStr($Line, "DischargeNote") > 0) Then
    $Line = Replace($Line, "{DischargeNote}", modPatReports.GetPatientNoteReport($encid, "Advice on Discharge"))
  Endif
  If (String.InStr($Line, "CauseOfDeath") > 0) Then
    $Line = Replace($Line, "{CauseOfDeath}", modPatient.GetPatExitComment($encid, "Death"))
  Endif
  If (String.InStr($Line, "BSISummary") > 0) Then
    $Line = Replace($Line, "{BSISummary}", modPatient.GetHaiClassificationSet($encid, "BSI"))
  Endif
  If (String.InStr($Line, "UTISummary") > 0) Then
    $Line = Replace($Line, "{UTISummary}", modPatient.GetHaiClassificationSet($encid, "UTI"))
  Endif

  Return $Line

End

''used by custom report only
Public Function GetReportVarExam($encid As String, $Line As String) As String

  ''general
  If (String.InStr($Line, "HepaticStatus") > 0) Then
    $Line = Replace($Line, "{HepaticStatus}", modClinic.GetHepaticStatus($encid))
  Endif
  If (String.InStr($Line, "PregnancyStatus") > 0) Then
    $Line = Replace($Line, "{PregnancyStatus}", modClinic.GetPregnancyStatus($encid))
  Endif
  If (String.InStr($Line, "Weight") > 0) Then
    $Line = Replace($Line, "{Weight}", CStr(modClinic.GetBodyWeight($encid)))
  Endif
  If (String.InStr($Line, "Height") > 0) Then
    $Line = Replace($Line, "{Height}", CStr(modClinic.GetPatientHeightinCm($encid)) & " cm")
  Endif

  If (String.InStr($Line, "Pulse_Rate") > 0) Then
    $Line = Replace($Line, "{Pulse_Rate}", modClinic.GetCurrExamValueSysConst($encid, "Pulse_Rate", "Last"))
  Endif
  If (String.InStr($Line, "Pulse_Rhythm") > 0) Then
    $Line = Replace($Line, "{Pulse_Rhythm}", modClinic.GetCurrExamValueSysConst($encid, "Pulse_Rhythm", "Last"))
  Endif
  If (String.InStr($Line, "BloodPressure_Systolic") > 0) Then
    $Line = Replace($Line, "{BloodPressure_Systolic}", modClinic.GetCurrExamValueSysConst($encid, "BloodPressure_Systolic", "Last"))
  Endif
  If (String.InStr($Line, "BloodPressure_Diastolic") > 0) Then
    $Line = Replace($Line, "{BloodPressure_Diastolic}", modClinic.GetCurrExamValueSysConst($encid, "BloodPressure_Diastolic", "Last"))
  Endif
  If (String.InStr($Line, "BloodPressure_Systolic/Diastolic") > 0) Then
    $Line = Replace($Line, "{BloodPressure_Systolic/Diastolic}", modClinic.GetCurrExamValueSysConst($encid, "BloodPressure_Systolic", "Last") & "/" & modClinic.GetCurrExamValueSysConst($encid, "BloodPressure_Diastolic", "Last"))
  Endif
  If (String.InStr($Line, "Oxygen_Saturation") > 0) Then
    $Line = Replace($Line, "{Oxygen_Saturation}", modClinic.GetCurrExamValueSysConst($encid, "Oxygen_Saturation", "Last"))
  Endif
  If (String.InStr($Line, "Respiration_Rate") > 0) Then
    $Line = Replace($Line, "{Respiration_Rate}", modClinic.GetCurrExamValueSysConst($encid, "Respiration_Rate", "Last"))
  Endif
  If (String.InStr($Line, "Temperature_System") > 0) Then
    $Line = Replace($Line, "{Temperature_System}", modClinic.GetCurrExamValueSysConst($encid, "Temperature_System", "Last"))
  Endif

  Return $Line

End

''other exam and tests
Public Function GetReporExamLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Last_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Last_Exam:", "$")
    xval = modClinic.GetCurrExamValueSysConst($encid, UnQuote(xx), "Last")
    If xval Then
      $Line = Replace($Line, "{$Last_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Last_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporExamFirstVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$First_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$First_Exam:", "$")
    xval = modClinic.GetCurrExamValueSysConst($encid, UnQuote(xx), "First")
    If xval Then
      $Line = Replace($Line, "{$First_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$First_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporExamStructured($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Struct_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Struct_Exam:", "$")
    xval = modClinic.GetCurrExamTimeValueStructured($encid, UnQuote(xx))
    If xval Then
      $Line = Replace($Line, "{$Struct_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Struct_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporExamTriage($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Triage_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Triage_Exam:", "$")
    xval = modClinic.GetCurrExamTimeValueSysConst($encid, UnQuote(xx), "Triage Examinations")
    If xval Then
      $Line = Replace($Line, "{$Triage_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Triage_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporExamDischarge($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Discharge_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Discharge_Exam:", "$")
    xval = modClinic.GetCurrExamTimeValueSysConst($encid, UnQuote(xx), "Discharge Examinations")
    If xval Then
      $Line = Replace($Line, "{$Discharge_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Discharge_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporExamLeft($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Left_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Left_Exam:", "$")
    xval = modClinic.GetCurrLeftRightExamValue($encid, UnQuote(xx), "LEFT")
    If xval Then
      $Line = Replace($Line, "{$Left_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Left_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporExamRight($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Right_Exam:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Right_Exam:", "$")
    xval = modClinic.GetCurrLeftRightExamValue($encid, UnQuote(xx), "RIGHT")
    If xval Then
      $Line = Replace($Line, "{$Right_Exam:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Right_Exam:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReportTestLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Last_Test:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Last_Test:", "$")
    xval = modLabTest.GetCurrTesValuePos("Last", $encid, modFixLab.GetLabTestIDFromSysConst(Trim(xx)), MMain.$defUnit)
    If xval Then
      $Line = Replace($Line, "{$Last_Test:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Last_Test:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReportTestFirstVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$First_Test:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$First_Test:", "$")
    xval = modLabTest.GetCurrTesValuePos("First", $encid, modFixLab.GetLabTestIDFromSysConst(Trim(xx)), MMain.$defUnit)
    If xval Then
      $Line = Replace($Line, "{$First_Test:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$First_Test:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporRadioLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Last_Radio:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Last_Radio:", "$")
    xval = modRadioTest.GetCurrRadioValueSysConst($encid, UnQuote(xx), "Last")
    If xval Then
      $Line = Replace($Line, "{$Last_Radio:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Last_Radio:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporRadioFirstVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$First_Radio:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$First_Radio:", "$")
    xval = modRadioTest.GetCurrRadioValueSysConst($encid, UnQuote(xx), "First")
    If xval Then
      $Line = Replace($Line, "{$First_Radio:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$First_Radio:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

''demographics
Public Function GetReporDemogLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Last_Demog:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Last_Demog:", "$")
    xval = modPatPatho.GetDemographicValue($encid, UnQuote(xx))
    If xval Then
      $Line = Replace($Line, "{$Last_Demog:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Last_Demog:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporHistoryLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Last_History:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Last_History:", "$")
    xval = modPatPatho.ShowSelectedHistory($encid, UnQuote(xx))
    If xval Then
      $Line = Replace($Line, "{$Last_History:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Last_History:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetReporDischargeLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Last_Discharge:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Last_Discharge:", "$")
    xval = modPatPatho.ShowSelectedNotes($encid, UnQuote(xx))
    If xval Then
      $Line = Replace($Line, "{$Last_Discharge:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$Last_Discharge:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetColumnTableLastVal($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$ColumnTable:") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ColumnTable:", "$")
    xval = GetColumnTableValue(UnQuote(xx), $encid, "")
    If xval Then
      $Line = Replace($Line, "{$ColumnTable:" & xx & "$}", xval)
    Else
      $Line = Replace($Line, "{$ColumnTable:" & xx & "$}", "__")
    Endif
  Endif
  Return $Line

End

Public Function GetUserProfileCustom($Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$UserProfile[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$UserProfile[", "]")
    xval = GetFooterText(UnQuote(xx))
    $Line = Replace($Line, "$UserProfile[" & xx & "]", Trim(xval))
  Endif
  Return $Line

End

Public Function GetReporQueryCustom($Line As String) As String

  Dim xx As String
  Dim res As Result
  Dim ref As String
  Dim xval As String

  Dim asx As String[]
  Dim xallowtab As String[]
  Dim xselect As String[]
  Dim xtable As String[]
  Dim xwhere As String[]
  Dim sql As String
  Dim xcheck As Integer

  If (String.InStr($Line, "$SQLValue[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$SQLValue[", "]")
    asx = Split(xx, ";")
    xcheck = 0
    xcheck = xcheck + modMisc.CheckRestrictedKey(asx[0])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[1])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[2])
    If xcheck = 0 Then
      xselect = Split(asx[0], "=")
      xtable = Split(asx[1], "=")
      xwhere = Split(asx[2], "=")

      xallowtab = modBasic.$RepQuerytable
      If xallowtab.Exist(UnQuote(xtable[1])) = True Then
        If xselect[0] = "SELECT" And If xtable[0] = "TABLE" And If xwhere[0] = "WHERE" Then
          sql = Subst("SELECT &1 FROM &2 WHERE ", modDBApp.GetSecureSQL(UnQuote(xselect[1])), UnQuote(xtable[1])) & UnQuote(xwhere.Extract(1, xwhere.Count - 1).Join("="))
          res = modDatabase.$myConn.Exec(sql)
          If res.Available Then
            ref = modDBApp.FirstResultField(res)
            res.MoveLast
            xval = Str(res[ref])
          Endif
          $Line = Replace($Line, "$SQLValue[" & xx & "]", xval)
        Else
          $Line = Replace($Line, "$SQLValue[" & xx & "]", "")
        Endif
      Else
        $Line = Replace($Line, "$SQLValue[" & xx & "]", "")
      Endif

    Else
      $Line = Replace($Line, "$SQLValue[" & xx & "]", "")
    Endif
  Endif

  Return $Line

End

Public Function GetReporQueryArrayCustom($Line As String) As String

  Dim xx As String
  Dim res As Result
  Dim ref As String
  Dim xval As String[]

  Dim asx As String[]
  Dim xallowtab As String[]
  Dim xselect As String[]
  Dim xtable As String[]
  Dim xwhere As String[]
  Dim sql As String
  Dim xcheck As Integer

  If (String.InStr($Line, "$SQLArray[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$SQLArray[", "]")
    asx = Split(xx, ";")
    xcheck = 0
    xcheck = xcheck + modMisc.CheckRestrictedKey(asx[0])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[1])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[2])
    If xcheck = 0 Then
      xselect = Split(asx[0], "=")
      xtable = Split(asx[1], "=")
      xwhere = Split(asx[2], "=")

      xallowtab = modBasic.$RepQuerytable
      If xallowtab.Exist(UnQuote(xtable[1])) = True Then
        If xselect[0] = "SELECT" And If xtable[0] = "TABLE" And If xwhere[0] = "WHERE" Then
          sql = Subst("SELECT &1 FROM &2 WHERE ", modDBApp.GetSecureSQL(UnQuote(xselect[1])), UnQuote(xtable[1])) & UnQuote(xwhere.Extract(1, xwhere.Count - 1).Join("="))
          xval = New String[]
          res = modDatabase.$myConn.Exec(sql)
          If res.Available Then
            ref = modDBApp.FirstResultField(res)
            For Each res
              xval.Add(Str(res[ref]))
            Next
          Endif
          $Line = Replace($Line, "$SQLArray[" & xx & "]", modString.GetHTMLListFormat(xval))
        Else
          $Line = Replace($Line, "$SQLArray[" & xx & "]", "")
        Endif
      Else
        $Line = Replace($Line, "$SQLArray[" & xx & "]", "")
      Endif

    Else
      $Line = Replace($Line, "$SQLArray[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

Public Function GetReporQueryTableCustom($Line As String) As String

  Dim xx As String
  Dim res As Result
  Dim ref As ResultField
  Dim xval As String

  Dim asx As String[]
  Dim xallowtab As String[]
  Dim xselect As String[]
  Dim xtable As String[]
  Dim xwhere As String[]
  Dim sql As String
  Dim xcheck As Integer

  If (String.InStr($Line, "$SQLTable[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$SQLTable[", "]")
    asx = Split(xx, ";")
    xcheck = 0
    xcheck = xcheck + modMisc.CheckRestrictedKey(asx[0])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[1])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[2])
    If xcheck = 0 Then
      xselect = Split(asx[0], "=")
      xtable = Split(asx[1], "=")
      xwhere = Split(asx[2], "=")

      xallowtab = modBasic.$RepQuerytable
      If xallowtab.Exist(UnQuote(xtable[1])) = True Then
        If xselect[0] = "SELECT" And If xtable[0] = "TABLE" And If xwhere[0] = "WHERE" Then
          sql = Subst("SELECT &1 FROM &2 WHERE ", modDBApp.GetSecureSQL(UnQuote(xselect[1])), UnQuote(xtable[1])) & UnQuote(xwhere.Extract(1, xwhere.Count - 1).Join("="))
          res = modDatabase.$myConn.Exec(sql)
          If res.Available Then

            xval = modRepoTemplete.HTMLTableSyntax()
            xval = xval & "<tr>" & gb.NewLine
            For Each ref In res.Fields
              xval = xval & "<td class='reportmid_table_h'>" & ref.Name & "</td>" & gb.NewLine
            Next
            xval = xval & "</tr>" & gb.NewLine
            For Each res
              xval = xval & "<tr>" & gb.NewLine
              For Each ref In res.Fields
                xval = xval & "<td>" & Str(res[ref.Name]) & "</td>" & gb.NewLine
              Next
              xval = xval & "</tr>" & gb.NewLine
            Next
            xval = xval & "</table>" & gb.NewLine

          Endif
          $Line = Replace($Line, "$SQLTable[" & xx & "]", xval)
        Else
          $Line = Replace($Line, "$SQLTable[" & xx & "]", "")
        Endif
      Else
        $Line = Replace($Line, "$SQLTable[" & xx & "]", "")
      Endif

    Else
      $Line = Replace($Line, "$SQLTable[" & xx & "]", "")
    Endif
  Endif

  Return $Line

End

Public Function GetReporQuerySerialTableCustom($Line As String) As String

  Dim xx As String
  Dim res As Result
  Dim ref As ResultField
  Dim xval As String

  Dim asx As String[]
  Dim xallowtab As String[]
  Dim xselect As String[]
  Dim xtable As String[]
  Dim xwhere As String[]
  Dim sql As String
  Dim k As Integer
  Dim xcheck As Integer

  If (String.InStr($Line, "$SQLAutoTable[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$SQLAutoTable[", "]")
    asx = Split(xx, ";")
    xcheck = 0
    xcheck = xcheck + modMisc.CheckRestrictedKey(asx[0])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[1])
    xcheck = xcheck + modMisc.CheckRestrictedKeyStrict(asx[2])
    If xcheck = 0 Then
      xselect = Split(asx[0], "=")
      xtable = Split(asx[1], "=")
      xwhere = Split(asx[2], "=")

      xallowtab = modBasic.$RepQuerytable
      If xallowtab.Exist(UnQuote(xtable[1])) = True Then
        If xselect[0] = "SELECT" And If xtable[0] = "TABLE" And If xwhere[0] = "WHERE" Then
          sql = Subst("SELECT &1 FROM &2 WHERE ", modDBApp.GetSecureSQL(UnQuote(xselect[1])), UnQuote(xtable[1])) & UnQuote(xwhere.Extract(1, xwhere.Count - 1).Join("="))
          res = modDatabase.$myConn.Exec(sql)
          If res.Available Then

            xval = modRepoTemplete.HTMLTableSyntax()
            xval = xval & "<tr>" & gb.NewLine
            xval = xval & "<td class='reportmid_table_h'>" & "SNo" & "</td>" & gb.NewLine
            For Each ref In res.Fields
              xval = xval & "<td class='reportmid_table_h'>" & ref.Name & "</td>" & gb.NewLine
            Next
            xval = xval & "</tr>" & gb.NewLine
            k = 1
            For Each res
              xval = xval & "<tr>" & gb.NewLine
              xval = xval & "<td>" & CStr(k) & "</td>" & gb.NewLine
              For Each ref In res.Fields
                xval = xval & "<td>" & Str(res[ref.Name]) & "</td>" & gb.NewLine
              Next
              xval = xval & "</tr>" & gb.NewLine
              k = k + 1
            Next
            xval = xval & "</table>" & gb.NewLine

          Endif
          $Line = Replace($Line, "$SQLAutoTable[" & xx & "]", xval)
        Else
          $Line = Replace($Line, "$SQLAutoTable[" & xx & "]", "")
        Endif
      Else
        $Line = Replace($Line, "$SQLAutoTable[" & xx & "]", "")
      Endif

    Else
      $Line = Replace($Line, "$SQLAutoTable[" & xx & "]", "")
    Endif
  Endif

  Return $Line

End

Public Function GetCustFormatValue($Line As String) As String

  Dim xx As String
  Dim xval As String
  Dim asx As String[]

  If (String.InStr($Line, "$Format[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Format[", "]")
    asx = Split(xx, ";")
    If asx[1] = "BSDate" Then
      xval = modDate.ConvertToLocaldate(UnQuote(asx[0]))
    Else
      xval = Format(Val(UnQuote(asx[0])), asx[1])
    Endif
    If xval Then
      $Line = Replace($Line, "$Format[" & xx & "]", Trim(xval))
    Else
      $Line = Replace($Line, "$Format[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

Public Function GetReportExecArgs($Line As String) As String

  Dim xx As String
  Dim xargs As String[]
  Dim xval As String

  If (String.InStr($Line, "$Exec[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Exec[", "]")
    xargs = Split(xx, ";")
    modBasic.DebugString("Execute " & xargs.Join(Space(1)))
    Exec xargs To xval
    If xval Then
      $Line = Replace($Line, "$Exec[" & xx & "]", Trim(xval))
    Else
      $Line = Replace($Line, "$Exec[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

Public Function GetShellScriptValue($Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$ShellScript[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ShellScript[", "]")
    modBasic.DebugString("Execute " & xx)
    Shell xx To xval
    If xval Then
      $Line = Replace($Line, "$ShellScript[" & xx & "]", Trim(xval))
    Else
      $Line = Replace($Line, "$ShellScript[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

Public Function GetReportScript($Line As String) As String

  Dim xx As String

  If (String.InStr($Line, "$Script1[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Script1[", "]")
    $Line = Replace($Line, "$Script1[" & xx & "]", GetExternalVariable(1, xx))
  Endif
  If (String.InStr($Line, "$Script2[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Script2[", "]")
    $Line = Replace($Line, "$Script2[" & xx & "]", GetExternalVariable(2, xx))
  Endif
  If (String.InStr($Line, "$Script3[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Script3[", "]")
    $Line = Replace($Line, "$Script3[" & xx & "]", GetExternalVariable(3, xx))
  Endif
  If (String.InStr($Line, "$Script4[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Script4[", "]")
    $Line = Replace($Line, "$Script4[" & xx & "]", GetExternalVariable(4, xx))
  Endif
  If (String.InStr($Line, "$Script5[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Script5[", "]")
    $Line = Replace($Line, "$Script5[" & xx & "]", GetExternalVariable(5, xx))
  Endif
  Return $Line

End

Public Function GetReportCalculation($Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$Calc[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$Calc[", "]")
    xval = CalculateSelectedText(UnQuote(xx))
    $Line = Replace($Line, "$Calc[" & xx & "]", xval)
  Endif
  Return $Line

End

''use only for numericals
Private Function CalculateSelectedText(sExpression As String) As String

  Dim arcmd As String
  Dim yy As String
  Dim xx As String

  arcmd = "gbx3 -e " & Quote(Trim(sExpression))
  modBasic.$ErrorLastString = sExpression
  modBasic.DebugString("Execute " & arcmd)
  Shell arcmd To yy
  If IsNumber(yy) Then
    xx = CStr(Round(Val(yy), -3))
  Else
    xx = Trim(yy)
  Endif
  Return xx

End

Public Function ClearRemainingString($Line As String) As String

  If (String.InStr($Line, "FooterSummary") > 0) Then
    $Line = Replace($Line, "{FooterSummary}", "")
  Endif
  If (String.InStr($Line, "Footer1") > 0) Then
    $Line = Replace($Line, "{Footer1}", "")
  Endif
  If (String.InStr($Line, "Footer2") > 0) Then
    $Line = Replace($Line, "{Footer2}", "")
  Endif
  If (String.InStr($Line, "Footer3") > 0) Then
    $Line = Replace($Line, "{Footer3}", "")
  Endif

  Return $Line

End

Public Function GetPatientSMSVAr($encid As String, $Line As String) As String

  $Line = modReportVar.GetReportVarPatient($encid, $Line)
  $Line = modReportVar.GetReportVarEncounter($encid, $Line)
  If (String.InStr($Line, "WebPatPassword") > 0) Then
    $Line = Replace($Line, "{WebPatPassword}", modPassword.GetPatientWebPassword(modPatient.GetPatientNoByEnc($encid), True))
  Endif
  If (String.InStr($Line, "WebEncPassword") > 0) Then
    $Line = Replace($Line, "{WebEncPassword}", modPassword.GetPatientWebPassword($encid, False))
  Endif

  Return $Line

End

Public Function GetDoctorSMSVAr($encid As String, $Line As String) As String

  $Line = modReportVar.GetReportVarPatient($encid, $Line)
  $Line = modReportVar.GetReportVarEncounter($encid, $Line)

  Return $Line

End

Public Function GetFooterOne($Line As String) As String

  Dim usr1 As String
  Dim xusrfoot As String

  If $FoottUser1 Then
    usr1 = $FoottUser1
  Else
    xusrfoot = modSettings.ShowSettingFromFIle("ReportFormat/Footer_User1")
    If xusrfoot Then
      usr1 = xusrfoot
    Else
      usr1 = ""
    Endif
  Endif

  If usr1 Then
    If (String.InStr($Line, "Footer1") > 0) Then
      $Line = Replace($Line, "{Footer1}", GetFooterText(usr1))                                                                            ''
    Endif
  Endif

  Return $Line

End

Public Function GetFooterTwo($Line As String) As String

  Dim usr2 As String
  Dim xusrfoot As String

  If $FoottUser2 Then
    usr2 = $FoottUser2
  Else
    xusrfoot = modSettings.ShowSettingFromFIle("ReportFormat/Footer_User2")
    If xusrfoot Then
      usr2 = xusrfoot
    Else
      usr2 = ""
    Endif
  Endif

  If usr2 Then
    If (String.InStr($Line, "Footer2") > 0) Then
      $Line = Replace($Line, "{Footer2}", GetFooterText(usr2))
    Endif
  Endif

  Return $Line

End

Public Function GetFooterThree($Line As String) As String

  Dim usr3 As String
  Dim xusrfoot As String

  If $FoottUser3 Then
    usr3 = $FoottUser3
  Else
    xusrfoot = modSettings.ShowSettingFromFIle("ReportFormat/Footer_User3")
    If xusrfoot Then
      usr3 = xusrfoot
    Else
      usr3 = ""
    Endif
  Endif

  If usr3 Then
    If (String.InStr($Line, "Footer3") > 0) Then
      $Line = Replace($Line, "{Footer3}", GetFooterText(usr3))
    Endif
  Endif

  Return $Line

End

Public Function GetFooterComment($Line As String, $commentText As String) As String

  Dim xcomment As String

  If (String.InStr($Line, "COMMENT") > 0) Then
    xcomment = modSettings.ShowSettingFromFIle("ReportFormat/ShowComment")
    If xcomment Then
      If xcomment = "No" Then
        $Line = Replace($Line, "{COMMENT}", "")
      Else If xcomment = "Yes" Then
        $Line = Replace($Line, "{COMMENT}", "Comment:<textarea style='width: " & modSettings.ShowSettingFromFIle("ReportFormat/CommentBox_Width") & "%; height: " & modSettings.ShowSettingFromFIle("ReportFormat/CommentBox_Height") & "px;' cols='1' rows='1' name='Comment'>" & $commentText & "</textarea><br>")
      Endif
    Else
      $Line = Replace($Line, "{COMMENT}", "")
    Endif
  Endif

  Return $Line

End

Public Function GetReportFooterSetting($Line As String, $commentText As String) As String

  $Line = GetFooterOne($Line)
  $Line = GetFooterTwo($Line)
  $Line = GetFooterThree($Line)
  $Line = GetFooterComment($Line, $commentText)

  Return $Line

End

Public Function BlankLinesAccSetting(sSetting As String) As String

  Dim xx As String
  Dim xsetn As String

  xsetn = modSettings.ShowSettingFromFIle(sSetting)
  If xsetn Then
    xx = modString.HTMLBlankLines(CInt(xsetn))
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetExternalVariable(i As Integer, Optional sArg As String) As String

  Dim xx As String
  Dim xscript As String
  Dim xexec As String
  Dim xarg As String[]

  xscript = modSettings.ShowSettingFromFIle("Report" & "/ExternalScript" & CStr(i))
  xexec = modSettings.ShowSettingFromFIle("Report" & "/Exec_ExternalScript" & CStr(i))
  xarg = New String[]
  If Exist(xscript) Then
    If xexec Then
      xarg.Add(xexec)
    Endif
    xarg.Add(xscript)
    If sArg Then
      xarg.Insert(Split(sArg, ";"))
    Endif
    modBasic.DebugString("Execute " & xarg.Join(Space(1)))
    Exec xarg To xx
  Else
    xx = ""
  Endif
  Return xx

End

''====================== Different in desktop/web =================
Public Function GetReportVarImages($encid As String, $Line As String) As String

  Dim xpatimage As String
  Dim xpatbar As String

  If (String.InStr($Line, "PatientImage") > 0) Then
    If $encid Then
      xpatimage = modImage.DisplayPersonImageData("Patient", modPatient.GetPatientNoByEnc($encid))
      If xpatimage Then
        $Line = Replace($Line, "{PatientImage}", modPrint.GetFileWebURL(xpatimage))
      Else
        $Line = Replace($Line, "{PatientImage}", "")
      Endif
    Else
      $Line = Replace($Line, "{PatientImage}", "")
    Endif
  Endif

  If (String.InStr($Line, "PatientBarCode") > 0) Then
    If $encid Then
      xpatbar = modDevAll.GetBarCodeWithOptions($encid)
      If xpatbar Then
        $Line = Replace($Line, "{PatientBarCode}", modPrint.GetFileWebURL(xpatbar))
      Else
        $Line = Replace($Line, "{PatientBarCode}", "")
      Endif
    Else
      $Line = Replace($Line, "{PatientBarCode}", "")
    Endif
  Endif

  If (String.InStr($Line, "PatientQRCode") > 0) Then
    If $encid Then
      xpatbar = modDevAll.MakeQRCode($encid)
      If xpatbar Then
        $Line = Replace($Line, "{PatientQRCode}", modPrint.GetFileWebURL(xpatbar))
      Else
        $Line = Replace($Line, "{PatientQRCode}", "")
      Endif
    Else
      $Line = Replace($Line, "{PatientQRCode}", "")
    Endif
  Endif

  Return $Line

End

''--------------------------------------------- Barcode option ---------------------------
Public Function GetPortalLinkQRCode($encid As String, sType As String) As String

  Dim xurLink As String
  Dim xval As String
  Dim xfinal As String

  xurLink = modSettings.ShowSettingFromFIle(sType & "/QRCodeLink")
  If xurLink Then
    If xurLink = "Archive:All Categories" Then
      xval = modGeneral.GetQRCodeRemoteReport($encid, modBasic.$PatPortalURL, "direct")
    Else If xurLink = "Archive:Diagnostic Tests" Then
      xval = modGeneral.GetQRCodeRemoteReport($encid, modBasic.$PatPortalURL, "test")
    Else If xurLink = "Archive:Radio Diagnostics" Then
      xval = modGeneral.GetQRCodeRemoteReport($encid, modBasic.$PatPortalURL, "radio")
    Else If xurLink = "Archive:General Reports" Then
      xval = modGeneral.GetQRCodeRemoteReport($encid, modBasic.$PatPortalURL, "general")
    Else If xurLink = "Archive:Patient Portal" Then
      xval = modGeneral.GetQRCodeRemoteReport($encid, modBasic.$PatPortalURL, "portal")
    Endif
    If xval Then
      xfinal = modPrint.GetFileWebURL(xval)
    Else
      xfinal = modBasic.$BlankImage
    Endif

  Else
    xfinal = modBasic.$BlankImage
  Endif

  Return xfinal

End

Public Function GetBarcodeImage($encid As String, Optional sHash As String) As String

  Dim barcode As String
  Dim xval As String
  Dim xpatimg As String

  xpatimg = modSettings.ShowSettingFromFIle("ReportFormat/PatientImage")
  If xpatimg = "No Image" Then
    barcode = modBasic.$BlankImage

  Else If xpatimg = "Portal QR" Then
    If sHash Then
      If $encid Then
        xval = modGeneral.GetQRCodeRemoteReport($encid, modBasic.$PatPortalURL, $encid & "@" & sHash)
        If xval Then
          barcode = modPrint.GetFileWebURL(xval)
        Else
          barcode = modBasic.$BlankImage
        Endif
      Endif
    Else
      barcode = modBasic.$BlankImage
    Endif

  Else If xpatimg = "Photograph" Then
    If $encid Then
      xval = modImage.DisplayPersonImageData("Patient", modPatient.GetPatientNoByEnc($encid))
      If xval Then
        barcode = modPrint.GetFileWebURL(xval)
      Else
        barcode = modBasic.$BlankImage
      Endif
    Else
      barcode = modBasic.$BlankImage
    Endif

  Else If xpatimg = "Bar Code" Then
    If $encid Then
      xval = modDevAll.GetBarCodeWithOptions($encid)
      If xval Then
        barcode = modPrint.GetFileWebURL(xval)
      Else
        barcode = modBasic.$BlankImage
      Endif
    Else
      barcode = modBasic.$BlankImage
    Endif

  Else
    If $encid Then
      xval = modDevAll.MakeQRCode($encid)
      If xval Then
        barcode = modPrint.GetFileWebURL(xval)
      Else
        barcode = modBasic.$BlankImage
      Endif
    Else
      barcode = modBasic.$BlankImage
    Endif

  Endif

  Return barcode

End

''embed images
Public Function GetBarCodeCustom($Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$BarCode[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$BarCode[", "]")
    xval = modDevAll.GetBarCodeWithOptions(xx)
    If xval Then
      $Line = Replace($Line, "$BarCode[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$BarCode[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

Public Function GetQRCodeCustom($Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$QRCode[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$QRCode[", "]")
    xval = modDevAll.MakeQRCode(xx)
    If xval Then
      $Line = Replace($Line, "$QRCode[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$QRCode[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

Public Function GetRemoteScanQRCode($encid As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$ScanQRCodeDirect[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ScanQRCodeDirect[", "]")
    xval = modGeneral.GetQRCodeRemoteReport($encid, xx, "direct")
    If xval Then
      $Line = Replace($Line, "$ScanQRCodeDirect[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$ScanQRCodeDirect[" & xx & "]", "")
    Endif
  Endif

  If (String.InStr($Line, "$ScanQRCodeTest[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ScanQRCodeTest[", "]")
    xval = modGeneral.GetQRCodeRemoteReport($encid, xx, "test")
    If xval Then
      $Line = Replace($Line, "$ScanQRCodeTest[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$ScanQRCodeTest[" & xx & "]", "")
    Endif
  Endif

  If (String.InStr($Line, "$ScanQRCodeRadio[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ScanQRCodeRadio[", "]")
    xval = modGeneral.GetQRCodeRemoteReport($encid, xx, "radio")
    If xval Then
      $Line = Replace($Line, "$ScanQRCodeRadio[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$ScanQRCodeRadio[" & xx & "]", "")
    Endif
  Endif

  If (String.InStr($Line, "$ScanQRCodeGeneral[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ScanQRCodeGeneral[", "]")
    xval = modGeneral.GetQRCodeRemoteReport($encid, xx, "general")
    If xval Then
      $Line = Replace($Line, "$ScanQRCodeGeneral[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$ScanQRCodeGeneral[" & xx & "]", "")
    Endif
  Endif

  Return $Line

End

Public Function GetRemoteScanHashCode($encid As String, sHash As String, $Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$ScanQRCodeHash[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$ScanQRCodeHash[", "]")
    xval = modGeneral.GetQRCodeRemoteReport($encid, xx, $encid & "@" & sHash)
    $Line = Replace($Line, "$ScanQRCodeHash[" & xx & "]", Trim(xval))
  Endif
  Return $Line

End

Public Function GetBarCodeInvoicePrint(sBillNo As String) As String

  Dim xval As String
  Dim xbar As String

  xbar = modDevAll.GetBarCodeWithOptions(sBillNo)
  If xbar Then
    xval = modPrint.GetFileWebURL(xbar)
  Else
    xval = ""
  Endif
  Return xval

End

Public Function GetQRCodeInvoicePrint(sBillNo As String) As String

  Dim xval As String
  Dim xbar As String

  xbar = modDevAll.MakeQRCode(sBillNo)
  If xbar Then
    xval = modPrint.GetFileWebURL(xbar)
  Else
    xval = ""
  Endif
  Return xval

End

Public Function GetPatImageCustom($Line As String) As String

  Dim xx As String
  Dim xval As String

  If (String.InStr($Line, "$PatImage[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$PatImage[", "]")
    xval = modImage.DisplayPersonImageData("Patient", modPatient.GetPatientNoByEnc(xx))
    If xval Then
      $Line = Replace($Line, "$PatImage[" & xx & "]", modPrint.GetFileWebURL(Trim(xval)))
    Else
      $Line = Replace($Line, "$PatImage[" & xx & "]", "")
    Endif
  Endif
  Return $Line

End

''Only for web app
Public Function GetImagePath($Line As String) As String

  Dim xx As String

  If (String.InStr($Line, "$WebPath[") > 0) Then
    xx = modString.GetSelectedTextBetween($Line, "$WebPath[", "]")
    $Line = Replace($Line, "$WebPath[" & xx & "]", modPrint.GetFileWebURL(Trim(xx)))
  Endif
  Return $Line

End

Public Function GetInvoiceDetailSpcificPrint(sLine As String) As String

  Dim xx As String
  Dim asx As String[]
  Dim xval As String

  If (String.InStr(sLine, "$InvoiceData[") > 0) Then
    xx = modString.GetSelectedTextBetween(sLine, "$InvoiceData[", "]")
    asx = Split(xx, ";")
    xval = modPatReports.GetInvoiceDetailTable(asx[0], asx[1], asx[2])
    sLine = Replace(sLine, "$InvoiceData[" & xx & "]", Trim(xval))
  Endif
  Return sLine

End

''----------------------------------------- Report Footer --------------------------------------------
Public Function GetFooterText(sUser As String) As String

  Dim res As Result
  Dim tmpfile As String
  Dim sText As String
  Dim hFile As Blob
  Dim xsigna As String '

  res = modDatabase.$myConn.Exec("select fldname,fldnamefont,fldsigimage,fldtitle,flddetail,flddefault from tblreportuser where flduserid=&1", sUser)
  If res.Available = True Then

    If res["flddefault"] = "Image" Then
      hFile = res["fldsigimage"]
      If hFile.Length Then
        tmpfile = Temp()
        File.Save(tmpfile, hFile.Data)
      Endif
      If tmpfile Then
        xsigna = "<img style='width: " & modSettings.ShowSettingFromFIle("ReportFormat/FooterSignature_Width") & "px; height: " & modSettings.ShowSettingFromFIle("ReportFormat/FooterSignature_Height") & "px;' alt='' src=" & modPrint.GetFileWebURL(tmpfile) & ">"
      Else
        xsigna = "<img style='width: " & modSettings.ShowSettingFromFIle("ReportFormat/FooterSignature_Width") & "px; height: " & modSettings.ShowSettingFromFIle("ReportFormat/FooterSignature_Height") & "px;' alt='' src=''>"
      Endif
      sText = xsigna & "<br>" & modString.GetFormatTextFontString(res["fldname"], res["fldnamefont"]) & "<br>" & modString.TextToHTML(res["fldtitle"],,, True) & "<br>" & modString.TextToHTML(res["flddetail"],, "9pt")                                                                            ''
    Else
      sText = modString.GetFormatTextFontString(res["fldname"], res["fldnamefont"]) & "<br>" & modString.TextToHTML(res["fldtitle"],,, True) & "<br>" & modString.TextToHTML(res["flddetail"],, "9pt")
    Endif

  Else
    sText = modGeneral.GetUserFullName(sUser)
  Endif

  Return sText

End

''=============== List ==================
Public Sub GetReportVarCollection(sType As String) As Variant[]

  Dim ListView1 As Variant[]

  ListView1 = New Variant[]

  If sType = "General Param" Then
    ListView1.Add(["{HospitalName}", "Hospital Name"])
    ListView1.Add(["{HospitalAddress}", "Hospital Address"])
    ListView1.Add(["{Department}", "Print Department"])
    ListView1.Add(["{HospLogo}", "Hospital Logo"])
    ListView1.Add(["{CurrentDate}", "Current Date"])
    ListView1.Add(["{CurrentTime}", "Current Time"])
    ListView1.Add(["{CurrentUser}", "Current User"])
    ListView1.Add(["{Footer1}", "Signature1"])
    ListView1.Add(["{Footer2}", "Signature2"])
    ListView1.Add(["{Footer3}", "Signature3"])

  Else If sType = "Patient Param" Then
    ListView1.Add(["{Encounter}", "Encounter ID"])
    ListView1.Add(["{PatientNo}", "Patient No"])
    ListView1.Add(["{PatientCode}", "Patient Code"])
    ListView1.Add(["{PatientFileNo}", "Patient FileNo"])
    ListView1.Add(["{PatientName}", "Patient Name"])
    ListView1.Add(["{PatientEthnicity}", "Ethnic Group"])
    ListView1.Add(["{PatientMunicipality}", "Municipality"])
    ListView1.Add(["{PatientWardAddress}", "Ward Address"])
    ListView1.Add(["{PatientAddress}", "Patient Address"])
    ListView1.Add(["{PatientDistrict}", "Patient District"])
    ListView1.Add(["{PatientProvince}", "Patient Province"])
    ListView1.Add(["{PatientGender}", "Patient Gender"])
    ListView1.Add(["{PatientGuardian}", "Guardian"])
    ListView1.Add(["{PatientRelation}", "Patient Relation"])
    ListView1.Add(["{PatientAge}", "Current Age"])
    ListView1.Add(["{AgeGroup}", "Age Group"])
    ListView1.Add(["AgeGroupCustom", "Custom Age Group"])
    ListView1.Add(["{E-Mail}", "E-Mail Address"])
    ListView1.Add(["{ContactNo}", "Contact No"])
    ListView1.Add(["{Age/Sex}", "Age/Sex"])
    ListView1.Add(["{PatientDOB}", "Date of Birth"])

    ListView1.Add(["{PatientImage}", "Photograph"])
    ListView1.Add(["{PatientBarCode}", "Bar Code"])
    ListView1.Add(["{PatientQRCode}", "QR Code"])

    ListView1.Add(["{MotherEncounter}", "Mother Encounter ID"])
    ListView1.Add(["{MotherPatientNo}", "Mother Patient No"])
    ListView1.Add(["{MotherName}", "Mother Name"])

    ListView1.Add(["{ServiceType}", "Service Type"])
    ListView1.Add(["{ServiceRank}", "Service Rank"])
    ListView1.Add(["{ServiceUnit}", "Service Unit"])

  Else If sType = "Encounter Param" Then
    ListView1.Add(["{DiscountPackae}", "Discount Package"])
    ListView1.Add(["{RegdDepartment}", "Regd Department"])
    ListView1.Add(["{RegdDeptRoom}", "Regd Department Room"])
    ListView1.Add(["{BedNo}", "Current Location"])
    ListView1.Add(["{WardName}", "Ward Name"])
    ListView1.Add(["{WardCaption}", "Ward Label"])
    ListView1.Add(["{FirstWardName}", "First Ward Name"])
    ListView1.Add(["{CurrDepartment}", "Current Department"])
    ListView1.Add(["{BedOxygen}", "Bed Oxygen"])
    ListView1.Add(["{BedVentilator}", "Ventilator"])
    ListView1.Add(["{RegdBillMode}", "Regd RatePlan"])
    ListView1.Add(["{VisitMode}", "Visit Mode"])
    ListView1.Add(["{CurrentStatus}", "Admission Status"])
    ListView1.Add(["{CurrentStatusComment}", "Status with Comment"])
    ListView1.Add(["{Consultant}", "Consultant"])
    ListView1.Add(["{ConsultantID}", "Consultant ID"])
    ListView1.Add(["{RegdConsultationFree}", "RegdConsultation Free"])

    ListView1.Add(["{TotalExpense}", "Total Expense"])
    ListView1.Add(["{TotalPayment}", "Total Payment"])
    ListView1.Add(["{CurrentDeposit}", "Current Deposit"])
    ListView1.Add(["{NonInvoicedExpenses}", "Non-Invoiced Expenses"])
    ListView1.Add(["{BalanceDeposit}", "Balance Deposit"])

    ListView1.Add(["{LastInvoiceNumber}", "Last InvoiceNumber"])
    ListView1.Add(["{FirstInvoiceNumber}", "First InvoiceNumber"])
    ListView1.Add(["{FirstInvoiceAmount}", "First InvoiceAmount"])
    ListView1.Add(["{LastInvoiceAmount}", "Last InvoiceAmount"])
    ListView1.Add(["{FirstReceiptNumber}", "First ReceiptNumber"])
    ListView1.Add(["{LastReceiptNumber}", "Last ReceiptNumber"])

    ListView1.Add(["{HIClaimCode}", "HI Claim Code"])
    ListView1.Add(["{SSFClaimCode}", "SSF Claim Code"])
    ListView1.Add(["{LastInvReference}", "Last InvoiceReference"])
    ListView1.Add(["{FirstClaimCode}", "First Claim Code"])
    ListView1.Add(["{LastClaimCode}", "Last Claim Code"])

    ListView1.Add(["{RegistrationDateTime}", "Registration DateTime"])
    ListView1.Add(["{RegistrationDate}", "Registration Date"])
    ListView1.Add(["{RegistrationTime}", "Registration Time"])
    ListView1.Add(["{AdmissionDateTime}", "Admission DateTime"])
    ListView1.Add(["{AdmissionDate}", "Admission Date"])
    ListView1.Add(["{AdmissionTime}", "Admission Time"])
    ListView1.Add(["{DischargeDateTime}", "Discharge DateTime"])
    ListView1.Add(["{DischargeDate}", "Discharge Date"])
    ListView1.Add(["{DischargeTime}", "Discharge Time"])
    ListView1.Add(["{ClearanceDateTime}", "Clearance Date"])
    ListView1.Add(["{AdmitDurationHour}", "Inpatient Duration"])
    ListView1.Add(["{FollowUpDate}", "Follow Up Date"])
    ListView1.Add(["{FollowUpTime}", "Follow Up Time"])
    ListView1.Add(["{ReferLocation}", "Refer Location"])

    ListView1.Add(["{RegistrationUser}", "Registration User"])
    ListView1.Add(["{AdmissionUser}", "Admission User"])
    ListView1.Add(["{DischargeUser}", "Discharge User"])
    ListView1.Add(["{ClearanceUser}", "Discharge Clearance"])

    ListView1.Add(["{FinalDiagnosis}", "Final Diagnosis"])
    ListView1.Add(["{ProvisionalDiagnosis}", "Provisional Diagnosis"])
    ListView1.Add(["{FinalDiagnosisClass}", "Final Diagnosis Class"])
    ListView1.Add(["{ProvisionalDiagnosisClass}", "Provisional Diagnosis Class"])
    ListView1.Add(["{PatientDiagnosis}", "Patient Diagnosis"])
    ListView1.Add(["{PatientDiagnosisClass}", "Patient Diagnosis Class"])
    ListView1.Add(["{DrugAllergy}", "Drug Allergy"])
    ListView1.Add(["{PatientTriageColor}", "Triage Color"])
    ListView1.Add(["{PatientTriageSymbol}", "Triage Symbol"])

  Else If sType = "Obstetrics Param" Then
    ListView1.Add(["{Gravida}", "Gravida"])
    ListView1.Add(["{Parity}", "Parity"])
    ListView1.Add(["{Abortion}", "Abortion"])
    ListView1.Add(["{Living}", "Living"])
    ListView1.Add(["{LMP}", "LMP"])
    ListView1.Add(["{EDD}", "EDD"])
    ListView1.Add(["{Gestation}", "Gestation Age"])
    ListView1.Add(["{ObsPresentation}", "Obs Presentation"])
    ListView1.Add(["{ObsStatus}", "Obs Status"])

  Else If sType = "Consultation Param" Then
    ListView1.Add(["{LastConsultDept}", "LastConsultDept"])
    ListView1.Add(["{LastConsultRoom}", "LastConsultRoom"])
    ListView1.Add(["{LastConsultant}", "LastConsultant"])
    ListView1.Add(["{LastConsultBillMode}", "LastConsultBillMode"])
    ListView1.Add(["{LastConsultDate}", "LastConsultDate"])
    ListView1.Add(["{LastConsultTime}", "LastConsultTime"])
    ListView1.Add(["{LastConsultStatus}", "LastConsultStatus"])
    ListView1.Add(["{LastConsultComment}", "LastConsultComment"])
    ListView1.Add(["{LastConsultOutcome}", "LastConsultOutcome"])
    ListView1.Add(["{LastConsultQue}", "LastConsultQue"])
    ListView1.Add(["{LastOPVisitDept}", "LastOPVisitDept"])
    ListView1.Add(["{LastOPVisitRoom}", "LastOPVisitRoom"])
    ListView1.Add(["{LastOPVisitBillMode}", "LastOPVisitBillMode"])
    ListView1.Add(["{LastOPVisitDate}", "LastOPVisitDate"])
    ListView1.Add(["{LastOPVisitTime}", "LastOPVisitTime"])
    ListView1.Add(["{LastOPVisitStatus}", "LastOPVisitStatus"])
    ListView1.Add(["{LastOPVisitComment}", "LastOPVisitComment"])
    ListView1.Add(["{LastOPVisitOutcome}", "LastOPVisitOutcome"])
    ListView1.Add(["{LastVisitDate}", "LastVisitDate"])
    ListView1.Add(["{LastVisitTime}", "LastVisitTime"])
    ListView1.Add(["{LastVisitLocation}", "LastVisitLocation"])

  Else If sType = "Delivery Param" Then
    ListView1.Add(["{Birth_MotherEncID}", "Birth:MotherEncID"])
    ListView1.Add(["{Birth_MotherName}", "Birth:MotherName"])
    ListView1.Add(["{Birth_DeliveryDate}", "Birth:DeliveryDate"])
    ListView1.Add(["{Birth_DeliveryTime}", "Birth:DeliveryTime"])
    ListView1.Add(["{Birth_DeliveryType}", "Birth:DeliveryType"])
    ListView1.Add(["{Birth_DeliveryResult}", "Birth:DeliveryResult"])
    ListView1.Add(["{Birth_DeliveryConsult}", "Birth:DeliveryConsult"])
    ListView1.Add(["{Birth_BloodLoss}", "Birth:BloodLoss"])
    ListView1.Add(["{Birth_BabyWeight}", "Birth:BabyWeight"])
    ListView1.Add(["{Birth_BabyBirthCode}", "Birth:BabyCode"])

  Else If sType = "Procedure Param" Then
    ListView1.Add(["{Procedure_Status}", "Procedure:Status"])
    ListView1.Add(["{Procedure_Name}", "Procedure:Name"])
    ListView1.Add(["{Procedure_Components}", "Procedure:Components"])
    ListView1.Add(["{Procedure_Summary}", "Procedure:Summary"])
    ListView1.Add(["{Procedure_Personnel}", "Procedure:Personnel"])
    ListView1.Add(["{Procedure_Comment}", "Procedure:Comment"])

    ListView1.Add(["{Procedure_PreOperative_Indication}", "Procedure:PreOperative_Indication"])
    ListView1.Add(["{Procedure_PreOperative_Comment}", "Procedure:PreOperative_Comment"])
    ListView1.Add(["{Procedure_PreOperative_Discussion}", "Procedure:PreOperative_Discussion"])
    ListView1.Add(["{Procedure_Anaesthesia_Technique}", "Procedure:Anaesthesia_Technique"])
    ListView1.Add(["{Procedure_Anaesthesia_Comment}", "Procedure:Anaesthesia_Comment"])
    ListView1.Add(["{Procedure_PostOperative_Indication}", "Procedure:PostOperative_Indication"])
    ListView1.Add(["{Procedure_PostOperative_Comment}", "Procedure:PostOperative_Comment"])

  Else If sType = "Clinical Param" Then
    ListView1.Add(["{PresentingSymptoms}", "Presenting Complaints"])
    ListView1.Add(["{GeneralComplaints}", "General Complaints"])

    ListView1.Add(["{ClinicalFindings}", "Clinical Findings"])
    ListView1.Add(["{TriageExaminations}", "Triage Examinations"])
    ListView1.Add(["{EssentialExaminations}", "Essential Examinations"])
    ListView1.Add(["{PhysicianExaminations}", "Physician Examinations"])
    ListView1.Add(["{NursingExaminations}", "Nursing Examinations"])
    ListView1.Add(["{PhysicianStructured}", "Physician Structured"])
    ListView1.Add(["{DepartmentStructured}", "Department Structured"])
    ListView1.Add(["{DischargeExaminations}", "Discharge Examinations"])

    ListView1.Add(["{AdmissionCause}", "Cause of Admission"])
    ListView1.Add(["{HistoryofIllness}", "History of Illness"])
    ListView1.Add(["{PastHistory}", "Past History"])
    ListView1.Add(["{FamilyHistory}", "Family History"])
    ListView1.Add(["{TreatmentHistory}", "Treatment History"])
    ListView1.Add(["{MedicationHistory}", "Medication History"])
    ListView1.Add(["{PersonalHistory}", "Personal History"])
    ListView1.Add(["{SurgicalHistory}", "Surgical History"])
    ListView1.Add(["{OccupationalHistory}", "Occupational History"])
    ListView1.Add(["{SocialHistory}", "Social History"])

    ListView1.Add(["{InvestigationAdvised}", "Investigation Advised"])
    ListView1.Add(["{TreatmentAdvised}", "Treatment Advised"])
    ListView1.Add(["{SurgicalRequests}", "Surgical Request"])
    ListView1.Add(["{ExtraRequests}", "Extra Request"])

    ListView1.Add(["{OPDRecommendation}", "Initial Planning"])
    ListView1.Add(["{ExpertRecommendation}", "Final Planning"])
    ListView1.Add(["{IndoorMedicines}", "Indoor Medications"])
    ListView1.Add(["{DischargeOutcome}", "Outcome of Discharge"])
    ListView1.Add(["{DischargeMedicines}", "Discharge Medications"])
    ListView1.Add(["{DischargeCondition}", "Discharge Condition"])
    ListView1.Add(["{DischargeNote}", "Discharge Note"])
    ListView1.Add(["{CauseOfDeath}", "Cause of Death"])
    ListView1.Add(["{BSISummary}", "BSI Summary"])
    ListView1.Add(["{UTISummary}", "UTI Summary"])

  Else If sType = "Examination" Then
    ListView1.Add(["{HepaticStatus}", "Hepatic Status"])
    ListView1.Add(["{PregnancyStatus}", "Pregnancy Status"])
    ListView1.Add(["{Weight}", "Weight(Kg)"])
    ListView1.Add(["{Height}", "Height(cm)"])
    ListView1.Add(["{Pulse_Rate}", "Pulse Rate"])
    ListView1.Add(["{Pulse_Rhythm}", "Pulse Rhythm"])
    ListView1.Add(["{BloodPressure_Systolic}", "Systolic BP"])
    ListView1.Add(["{BloodPressure_Diastolic}", "Diastolic BP"])
    ListView1.Add(["{BloodPressure_Systolic/Diastolic}", "Systolic/Diastolic BP"])
    ListView1.Add(["{Oxygen_Saturation}", "Oxygen Saturation"])
    ListView1.Add(["{Respiration_Rate}", "Respiration Rate"])
    ListView1.Add(["{Temperature_System}", "Temperature"])

  Else If sType = "Supplier Details" Then
    ListView1.Add(["{SupplierName}", "Name"])
    ListView1.Add(["{SupplierAddress}", "Address"])
    ListView1.Add(["{SupplierPAN}", "PAN"])
    ListView1.Add(["{SupplierLedger}", "Ledger"])
    ListView1.Add(["{SupplierContact}", "Phone"])
    ListView1.Add(["{SupplierEMail}", "E-Mail"])
    ListView1.Add(["{SupplierUserName}", "Rep Name"])
    ListView1.Add(["{SupplierUserContact}", "Rep Phone"])

  Else If sType = "Purchase Entry" Then
    ListView1.Add(["{PurchaseReferenceNo}", "Entry Reference No"])
    ListView1.Add(["{PurchaseReferenceDate}", "Entry Reference Date"])
    ListView1.Add(["{PurchaseReferenceUser}", "Entry Reference User"])
    ListView1.Add(["{PurchaseInvoiceNumber}", "Purchase Invoice No"])
    ListView1.Add(["{PurchaseInvoiceDate}", "Purchase Invoice Date"])
    ListView1.Add(["{PurchasePaymentType}", "Purchase Payment Type"])

  Else If sType = "Purchase Order" Then
    ListView1.Add(["{PurchaseRequestNo}", "Purchase Order No"])
    ListView1.Add(["{PurchaseRequestDate}", "Purchase Order Date"])
    ListView1.Add(["{PurchaseRequestUser}", "Purchase Order User"])
    ListView1.Add(["{PurchaseRequestDelivery}", "Purchase Delivery Date"])
    ListView1.Add(["{PurchaseRequestVerifyUser}", "Order Verify User"])
    ListView1.Add(["{PurchaseRequestVerifyDate}", "Order Verify Date"])

  Else If sType = "Store Request" Then
    ListView1.Add(["{StoreRequestNo}", "Store Request No"])
    ListView1.Add(["{StoreRequestDate}", "Store Request Date"])
    ListView1.Add(["{StoreRequestingComp}", "Store Request By"])
    ListView1.Add(["{StoreRequestEntryUser}", "Store Request User"])
    ListView1.Add(["{StoreRequestedComp}", "Store Request From"])
    ListView1.Add(["{StoreRequestVerifyUser}", "Request Verify User"])
    ListView1.Add(["{StoreRequestVerifyDate}", "Request Verify Date"])

  Else If sType = "Store Transfer" Then
    ListView1.Add(["{StoreTransferNo}", "Store Transfer Reference"])
    ListView1.Add(["{StoreTransferReason}", "Store Transfer Reason"])
    ListView1.Add(["{StoreSourceComp}", "Store Transfer Source"])
    ListView1.Add(["{StoreTargetComp}", "Store Transfer Target"])
    ListView1.Add(["{StoreTransferDate}", "Store Transfer Date"])
    ListView1.Add(["{StoreTransferEntryUser}", "Store Request User"])
    ListView1.Add(["{StoreTransferVerifyUser}", "Store Verify User"])

  Endif

  Return ListView1

End

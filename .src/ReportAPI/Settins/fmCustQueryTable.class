' Gambas class file

Private $sConn As Connection
Private $sName As String

Private $sTitle As String
Private $SSQLFields As String[]
Private $sSQLString As String
Private $EncColm As Integer
Private $DateColm As Integer
Private $TotalColm As Integer
Private $SqlExtraArg As String[]

' Private $ProgressBar1 As WebProgressBar
Private $rData As Result
Private $aMyFields As String[]
Private $ColCount As Integer
Private $newColumn As String[]

Public Sub _new(sConn As Connection, sName As String)

  Dim xFields As String
  Dim xsqlmain As String
  Dim xdateargs As String
  Dim xtotalcol As String
  Dim xopt1sql As String
  Dim xopt1List As String
  Dim xopt2sql As String
  Dim xopt2List As String
  Dim xopt3sql As String
  Dim xopt3List As String
  Dim xopt4sql As String
  Dim xopt4List As String

  $sConn = sConn
  $sName = sName

  $sTitle = modSettings.ShowSettingForReport($sName & "/" & "Name")
  Me.Title = $sTitle

  If modSettings.ShowSettingForReport($sName & "/" & "HideQuery") = "Yes" Then
    txtsql.Visible = False
  Endif
  If modSettings.ShowSettingForReport($sName & "/" & "EncounterColumn") Then
    $EncColm = CInt(modSettings.ShowSettingForReport($sName & "/" & "EncounterColumn"))
  Endif
  If modSettings.ShowSettingForReport($sName & "/" & "DateColumn") Then
    $DateColm = CInt(modSettings.ShowSettingForReport($sName & "/" & "DateColumn"))
  Endif
  xFields = modSettings.ShowSettingForReport($sName & "/" & "Fields")
  If xFields Then
    $SSQLFields = Split(xFields, ";")
  Endif
  xsqlmain = modSettings.ShowSettingForReport($sName & "/" & "SQLWhere")
  If xsqlmain Then
    $sSQLString = xsqlmain
  Endif
  xtotalcol = modSettings.ShowSettingForReport($sName & "/" & "SumColumn")
  If xtotalcol Then
    $TotalColm = CInt(xtotalcol)
  Endif

  $SqlExtraArg = New String[]
  xdateargs = modSettings.ShowSettingForReport($sName & "/" & "DateOptions")
  If xdateargs Then
    $SqlExtraArg.Add(xdateargs)
    chkfrom.Value = True
    chktodate.Value = True
  Endif

  chkoption3.Text = modSettings.ShowSettingForReport($sName & "/" & "Option3Label")
  xopt1sql = modSettings.ShowSettingForReport($sName & "/" & "Option3SQL")
  If xopt1sql Then
    $SqlExtraArg.Add(xopt1sql)
    chkoption3.Value = True
  Endif
  xopt1List = modSettings.ShowSettingForReport($sName & "/" & "Option3List")
  If xopt1List Then
    cmboption3.List = Split(xopt1List, ";")
  Endif

  chkoption4.Text = modSettings.ShowSettingForReport($sName & "/" & "Option4Label")
  xopt2sql = modSettings.ShowSettingForReport($sName & "/" & "Option4SQL")
  If xopt2sql Then
    $SqlExtraArg.Add(xopt2sql)
    chkoption4.Value = True
  Endif
  xopt2List = modSettings.ShowSettingForReport($sName & "/" & "Option4List")
  If xopt2List Then
    cmboption4.List = Split(xopt2List, ";")
  Endif

  chkoption5.Text = modSettings.ShowSettingForReport($sName & "/" & "Option5Label")
  xopt3sql = modSettings.ShowSettingForReport($sName & "/" & "Option5SQL")
  If xopt3sql Then
    $SqlExtraArg.Add(xopt3sql)
    chkoption5.Value = True
  Endif
  xopt3List = modSettings.ShowSettingForReport($sName & "/" & "Option5List")
  If xopt3List Then
    cmboption5.List = Split(xopt3List, ";")
  Endif

  chkoption6.Text = modSettings.ShowSettingForReport($sName & "/" & "Option6Label")
  xopt4sql = modSettings.ShowSettingForReport($sName & "/" & "Option6SQL")
  If xopt4sql Then
    $SqlExtraArg.Add(xopt4sql)
    chkoption6.Value = True
  Endif
  xopt4List = modSettings.ShowSettingForReport($sName & "/" & "Option6List")
  If xopt4List Then
    cmboption6.List = Split(xopt4List, ";")
  Endif

  If $SqlExtraArg.Count Then
    txtsql.Text = $SqlExtraArg.Join(" and ")
  Endif

  LockControls()
  dtfir.Value = modDate.StartSqlDate(Now())
  dtlast.Value = modDate.EndSqlDate(Now())

End

Private Sub LockControls()

  dtfir.Enabled = chkfrom.Value
  dtnepfir.Enabled = chkfrom.Value
  dtlast.Enabled = chktodate.Value
  dtneplast.Enabled = chktodate.Value

  cmboption3.Enabled = chkoption3.Value
  cmboption4.Enabled = chkoption4.Value
  cmboption5.Enabled = chkoption5.Value
  cmboption6.Enabled = chkoption6.Value

End

Public Sub chkfrom_Click()

  LockControls()

End

Public Sub chktodate_Click()

  LockControls()

End

Public Sub chkoption3_Click()

  LockControls()

End

Public Sub chkoption4_Click()

  LockControls()

End

Public Sub chkoption5_Click()

  LockControls()

End

Public Sub chkoption6_Click()

  LockControls()

End

Public Sub dtnepfir_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfir.Value))
  If xx Then
    dtfir.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub dtneplast_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtlast.Value))
  If xx Then
    dtlast.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Private Function GetSQLColumns() As String[]

  Dim xFldList As String[]
  Dim i As Integer

  modCustPatient.FillNewCOlumnCollection(Me.Tag)
  $newColumn = modCustPatient.CustomNewColumnsTitle(Me.Tag)
  xFldList = $SSQLFields.Copy()
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      xFldList.Add("fldencounterval")
    Next
  Endif
  Return xFldList

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant
  Dim i As Integer

  If $DateColm Then
    If Column = $DateColm - 1 Then
      xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
    Else
      xxx = xVariable
    Endif
  Else
    xxx = xVariable
  Endif

  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      If Column = $ColCount + i Then
        xxx = modCustPatient.NewColValue(Me.Tag, $newColumn[i], xVariable)
      Endif
    Next
  Endif
  Return xxx

End

Private Function ExecuteQuery(xFldList As String[]) As Result

  Dim res As Result
  Dim sql As String

  sql = "select " & xFldList.Join(",") & " " & $sSQLString & " " & txtsql.Text
  If modMisc.CheckRestrictedKey(sql) = 0 Then
    res = $sConn.Exec(sql, dtfir.Value, dtlast.Value, cmboption3.Text, cmboption4.Text, cmboption5.Text, cmboption6.Text)
    Return res
  Else
    Message.Warning("Unauthorized strings in SQL Query", ("OK"))
  Endif

Catch
  Message.Warning(("Database Error Code: ") & db.Error & "<br>" & Error.Text, ("OK"))

End

Public Sub btnshow_Click()

  FillGridTable()

End

Private Sub FillGridTable()

  Dim xFldList As String[]
  Dim i As Integer
  Dim xtot As Float

  xFldList = GetSQLColumns()
  $rData = ExecuteQuery(xFldList)

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  $ColCount = $SSQLFields.Count

  xtot = 0
  If $TotalColm Then
    For Each $rData
      xtot = xtot + $rData[xFldList[$TotalColm - 1]]
    Next
  Endif
  txttotalcol.Value = xtot

  With GridView1
    For i = 0 To $SSQLFields.Count - 1
      .Columns[i].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[i].Text = modSettings.ShowSettingForReport($sName & "/" & "ColumnTitle" & CStr(i + 1))
    Next

    If $newColumn.Count Then
      For i = 0 To $newColumn.Count - 1
        .Columns[$ColCount + i].Text = $newColumn[i]
        .Columns[$ColCount + i].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      Next
    Endif
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column > $SSQLFields.Count - 1 Then
    Data.Html = modString.TextToHTML(GetGridViewValue(Column, $rData[$aMyFields[Column]]))
  Else
    Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])
  Endif

End

''--------------- analyze ------------------
Public Sub mnuenchart_Click()

  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim xFldList As String[]
  Dim sOrder As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  xFldList = GetSQLColumns()
  hFile = New CUnivariate

  Column = modCustPatient.GetUnivariateColumn($EncColm)
  xField = xFldList[Column]
  res = ExecuteQuery([xField])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Column, res[xField])
      If xval Then
        hFile.Add(xval)
      Endif

    Next
  Endif

  If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrosstab_Click()

  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hFile As CBivariate
  Dim xFldList As String[]
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  xFldList = GetSQLColumns()
  hFile = New CBivariate
  Row = modCustPatient.GetCrossVarRow($EncColm)
  xFieRow = xFldList[Row]
  Column = modCustPatient.GetCrossVarColumn($EncColm)
  xFieColm = xFldList[Column]
  res = ExecuteQuery([xFieRow, xFieColm])

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Row, res[xFieRow])
      yval = GetGridViewValue(Column, res[xFieColm])
      If xval And If yval Then
        hFile.Add([xval, yval])
      Endif
    Next
  Endif

  If modCustPatient.$CrossOutcomeType = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim xFldList As String[]
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  xFldList = GetSQLColumns()
  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab
    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = xFldList[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = xFldList[Column]
    res = ExecuteQuery([xFieRow, xFieColm])

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif

      Next
    Endif

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    modExternal.$ExecValueColl.Clear()
  Endif

  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1.Visible = False
  ' Endif

End

Public Sub mnugridsummary_Click()

  Dim xx As String
  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String
  Dim xFldList As String[]
  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal
  If Not modCustPatient.$SumGroupColumn Or If Not modCustPatient.$SumValueColumn Then Return

  xFldList = GetSQLColumns()
  xFieldList = New String[]
  If modCustPatient.$SumChapterColumn Then
    ChapCol = xFldList[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = xFldList[modCustPatient.$SumGroupColumn - 1]
  valCol = xFldList[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  res = ExecuteQuery(xFieldList)
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif

  xx = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Report Summary", xx, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

Public Sub btnfullrep_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer

  Dim xFldList As String[]

  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Visible = True
  '   $ProgressBar1.Value = 0
  ' Endif

  xHeader = New String[]
  xhide = New Integer[]
  For Column = 0 To GridView1.Columns.Count - 1
    xHeader.Add(GridView1.Columns[Column].Text)
    If GridView1.Columns[Column].Hidden = True Then
      xhide.Add(Column)
    Endif
  Next
  xparam1 = $sTitle
  xparam2 = modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  encColumn = $EncColm
  $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

  xFldList = GetSQLColumns()

  For Each $rData
    xCollRow = New Collection
    For xColum = 0 To xFldList.Count - 1
      xCollRow.Add(GetGridViewValue(xColum, $rData[xFldList[xColum]]), CStr(xColum))
    Next
    $hGridExportTable.Add($rData.Index, xCollRow)

    ' If MMain.$IsGUIApp = True Then
    '   $ProgressBar1.Value = ($rData.Index + 1) / $rData.Count
    '   Wait
    ' Endif
  Next

  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1.Visible = False
  ' Endif
  modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())

End

Public Sub mnuaddcolumn_Click()

  Dim hForm As FmAddNewColumn

  hForm = New FmAddNewColumn(Me.Tag)
  hForm.ShowModal

End

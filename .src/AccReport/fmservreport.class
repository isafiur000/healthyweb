' Gambas class file

Private $ItemList As String[]
Private $rData As Result
Private $aMyFields As String[]

Private $qtyChart As String[]
Private $amtChart As String[]
Private $SSQLFields As String[]

Private $ColCount As Integer
Private $newColumn As String[]
Private $RepoStr As String

Private $tblpatbilling As String
Private $tblpatbilldetail As String
Private $tbltempbilldetail As String

Public Sub _new()

  cmbcomp.List = modBasic.$AllCompPerList
  cmbcomp.Text = "%"
  If MMain.$WebReport = "Multiple" Then
    If modBasic.$HospCode Then
      ' cmblocation.Text = "Hospital"
      cmblocation.Text = modDataRepo.$RepositoryMode
      cmbvalue.Text = modBasic.$HospCode
      pnlocat.Enabled = False
    Else
      cmblocation.List = ["Hospital", "Municipality", "Category", "District", "Province"]
    Endif
  Else
    pnlocat.Visible = False
  Endif

  cmbitemtype.List = ["Diagnostic Tests", "General Services", "Procedures", "Equipment", "Radio Diagnostics", "Other Items", "Medicines", "Surgicals", "Extra Items", "%"]
  cmbitemtype.Text = "%"
  cmbbillmode.List = modNonMedical.FillCashModeCombo()
  cmbbillmode.Add("%")
  cmbbillmode.Text = "%"
  cmbdiscount.List = modNonMedical.FillDiscountCombo()
  cmbdiscount.Add("%")
  cmbdiscount.Text = "%"
  cmbilltype.List = ["Credit", "Cash", "%"]
  cmbilltype.Text = "%"

  dtfir.Value = Now()
  dtlast.Value = Now()
  rbinv.Value = True
  rball.Value = True

  modAccount.PasInvoiceSetting(cmbfiscal, True)
  LoadTableNames()

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

Public Sub cmblocation_Click()

  cmbvalue.Clear()
  If cmblocation.Text Then
    cmbvalue.List = modDataRepo.GetRepoValueListType(cmblocation.Text)
  Endif

End

Private Sub LoadTableNames()

  Dim res As Result

  If cmbfiscal.Text = "Current" Then
    $tblpatbilling = "tblpatbilling"
    $tblpatbilldetail = "tblpatbilldetail"
    $tbltempbilldetail = "tbltempbilldetail"
  Else
    res = modDatabase.$syConn.Exec("select fldpatbilling,fldpatbilldetail,fldtempbilldetail from tblfisclosing where fldindex=&1 and (fldstate=&2 or fldstate IS NULL)", cmbfiscal.Text, "Active")
    If res.Available Then
      If res["fldpatbilling"] Then
        $tblpatbilling = res["fldpatbilling"]
      Else
        $tblpatbilling = "tblpatbilling"
      Endif
      If res["fldpatbilldetail"] Then
        $tblpatbilldetail = res["fldpatbilldetail"]
      Else
        $tblpatbilldetail = "tblpatbilldetail"
      Endif
      If res["fldtempbilldetail"] Then
        $tbltempbilldetail = res["fldtempbilldetail"]
      Else
        $tbltempbilldetail = "tbltempbilldetail"
      Endif
    Else
      $tblpatbilling = "tblpatbilling"
      $tblpatbilldetail = "tblpatbilldetail"
      $tbltempbilldetail = "tbltempbilldetail"
    Endif
  Endif

End

Public Sub chksplit_Click()

  GridView1.Count = 0
  Wait
  $aMyFields.Clear()

End

Private Sub GetFieldList()

  Dim xhospfld As String
  Dim xcashfld As String
  Dim xcrdtfld As String

  $SSQLFields = New String[]
  xhospfld = modDataRepo.HospitalField()
  If chksplit.Value = True Then
    xcrdtfld = "(REPLACE(REPLACE(fldbilltype , 'Cash', 0), 'Credit', 100) - COALESCE(fldcashincredit, 0)) * fldditemamt / 100"
    xcashfld = "(REPLACE(REPLACE(fldbilltype , 'Cash', 100), 'Credit', 0) + COALESCE(fldcashincredit, 0)) * fldditemamt / 100"
    $SSQLFields = ["fldencounterval", "fldencounterval", "flditemname", "flditemrate", "flditemqty", "flditemrate*flditemqty", "flddiscamt", "fldtaxamt", xcrdtfld, xcashfld, "fldtime", "fldbillno", "fldid", "flditemtype", "fldpayto", "fldrefer", "flddisctype", "fldacledger", "fldcurrlocat", "fldbilltype", "fldextracol"]
  Else
    $SSQLFields = ["fldencounterval", "fldencounterval", "flditemname", "flditemrate", "flditemqty", "flditemrate*flditemqty", "flddiscamt", "fldtaxamt", "fldditemamt", "fldtime", "fldbillno", "fldid", "flditemtype", "fldpayto", "fldrefer", "flddisctype", "fldacledger", "fldcurrlocat", "fldbilltype", "fldextracol"]
  Endif
  If xhospfld Then
    $SSQLFields.Add(xhospfld)
  Endif

End

Public Sub cmbfiscal_Click()

  LoadTableNames()

End

Public Sub btnload_Click()

  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If rbentry.Value Or If rbinv.Value Then
    If cmbitemtype.Text Then
      $ItemList = modControlSub.GetDirectFillresult(modDatabase.$syConn.Exec("select distinct(flditemname) as col from " & $tblpatbilling & " where flditemtype like &1 and fldbillingmode like &2" & $RepoStr, cmbitemtype.Text, cmbbillmode.Text))
      FillListBox()
    Endif
    rball.Value = True
  Endif

End

Private Sub FillListBox()

  Dim xList As String[]

  If $ItemList Then
    If txtcustom.Text Then
      xList = modString.SelectStringArrayToText(txtcustom.Text, $ItemList)
    Else
      xList = $ItemList
    Endif
    If xList Then
      lstitem.List = xList.Sort()
    Else
      lstitem.Clear()
    Endif
  Endif

End

Public Sub txtcustom_Change()

  FillListBox()

End

Public Sub dtnepfir_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtfir.Value))
  If xx Then
    dtfir.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub dtneplast_Click()

  Dim xx As String

  xx = BSDateFormat(("Enter BS Date in yyyy/mm/dd format"), ("Date Converter"), modDate.ConvertToLocaldate(dtlast.Value))
  If xx Then
    dtlast.Value = modDate.ConvertToEnglishdate(xx)
  Endif

End

Public Sub mnufiscal_Click()

  Dim res As Result
  Dim xyear As String

  xyear = InputCombo("Select Fiscal Year Range", "Select Year", modBasic.$FiscalYearList, "", True)
  If xyear Then
    res = modDatabase.$myConn.Exec("select fldfrom,fldend from tblfiscalid where fldlabel=&1", xyear)
    If res.Available Then
      res.MoveFirst
      dtfir.Value = res["fldfrom"]
      dtlast.Value = res["fldend"]
    Endif
  Endif

End

Private Function CategoryListRep() As String[]

  Dim xx As String[]

  If cmbitemtype.Text = "%" Then
    xx = ["Diagnostic Tests", "General Services", "Procedures", "Equipment", "Radio Diagnostics", "Other Items", "Medicines", "Surgicals", "Extra Items"]
  Else
    xx = New String[]
    xx.Add(cmbitemtype.Text)
  Endif
  Return xx

End

Private Function GetInvoiced() As Boolean

  Dim xx As Boolean

  If rbinv.Value = True Then
    xx = True
  Else
    xx = False
  Endif
  Return xx

End

Private Function ExecuteQuery(xFldList As String[], strType As String, strItem As String, $con As Connection) As Result

  Dim sql As String
  Dim xregist As String
  Dim res As Result

  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If cmbdiscount.Text = "%" And If cmbilltype.Text = "%" Then
    xregist = ""
  Else
    xregist = " and flddisctype like &8 and fldbilltype like &9"
  Endif
  If rbinv.Value = True Then
    sql = "select " & xFldList.Join(",") & " from " & $tblpatbilling & " where fldsave=&1 and fldbillno in(select fldbillno from " & $tblpatbilldetail & " where fldtime>=&2 and fldtime<=&3 and fldcomp like &6) and flditemname like &4 and flditemtype like &5 and fldbillingmode like &7" & xregist & $RepoStr
  Else
    sql = "select " & xFldList.Join(",") & " from " & $tblpatbilling & " where fldsave=&1 and fldtime>=&2 and fldtime<=&3 and flditemname like &4 and flditemtype like &5 and fldcomp like &6 and fldbillingmode like &7" & xregist & $RepoStr
  Endif
  res = $con.Exec(sql, True, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), strItem, strType, cmbcomp.Text, cmbbillmode.Text, cmbdiscount.Text, cmbilltype.Text)
  Return res

End

Private Function ExecuteQueryList(xFldList As String[], strType As String, strItem As String[], $con As Connection) As Result

  Dim sql As String
  Dim xregist As String
  Dim res As Result
  Dim i As Integer

  For i = 0 To strItem.Count - 1
    strItem[i] = "'" & strItem[i] & "'"
  Next
  $RepoStr = modDataRepo.GetWhereStringRepo(cmblocation.Text, cmbvalue.Text)
  If cmbdiscount.Text = "%" And If cmbilltype.Text = "%" Then
    xregist = ""
  Else
    xregist = " and flddisctype like &7 and fldbilltype like &8"
  Endif
  If rbinv.Value = True Then
    sql = "select " & xFldList.Join(",") & " from " & $tblpatbilling & " where fldsave=&1 and fldbillno in(select fldbillno from " & $tblpatbilldetail & " where fldtime>=&2 and fldtime<=&3) and flditemname in(" & strItem.Join(",") & ") and flditemtype like &4 and fldcomp like &5 and fldbillingmode like &6" & xregist & $RepoStr                                                 ''
  Else
    sql = "select " & xFldList.Join(",") & " from " & $tblpatbilling & " where fldsave=&1 and fldtime>=&2 and fldtime<=&3 and flditemname in(" & strItem.Join(",") & ") and flditemtype like &4 and fldcomp like &5 and fldbillingmode like &6" & xregist & $RepoStr
  Endif
  res = $con.Exec(sql, True, modDate.StartSqlDate(dtfir.value), modDate.EndSqlDate(dtlast.value), strType, cmbcomp.Text, cmbbillmode.Text, cmbdiscount.Text, cmbilltype.Text)
  Return res

End

Private Function GetGridViewValue(Column As Integer, xVariable As Variant) As Variant

  Dim xxx As Variant
  Dim i As Integer

  If chksplit.Value = True Then
    If Column = 1 Then
      xxx = modPatient.GetPatientNameByEnc(xVariable, modDatabase.$syConn)
    Else If Column = 3 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 4 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, -2)
    Else If Column = 5 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 6 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 7 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 8 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 9 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 10 Then
      Try xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
    Else If Column = 14 Then
      xxx = modGeneral.GetUserFullName(xVariable)
    Else If Column = 15 Then
      xxx = modGeneral.GetUserFullName(xVariable)
    Else If Column = $SSQLFields.Count - 1 Then
      xxx = modDataRepo.GetHospitalTextLabel(xVariable)
    Else
      xxx = xVariable
    Endif
  Else
    If Column = 1 Then
      xxx = modPatient.GetPatientNameByEnc(xVariable, modDatabase.$syConn)
    Else If Column = 3 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 4 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, -2)
    Else If Column = 5 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 6 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 7 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 8 Then
      xxx = modReportVar.GetLocaleNumberFormat(xVariable, gb.Currency)
    Else If Column = 9 Then
      xxx = modReportVar.GetDateTimeReport(xVariable, gb.GeneralDate)
    Else If Column = 13 Then
      xxx = modGeneral.GetUserFullName(xVariable)
    Else If Column = 14 Then
      xxx = modGeneral.GetUserFullName(xVariable)
    Else If Column = $SSQLFields.Count - 1 Then
      xxx = modDataRepo.GetHospitalTextLabel(xVariable)
    Else
      xxx = xVariable
    Endif
  Endif

  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      If Column = $ColCount + i Then
        xxx = modCustPatient.NewColValue(Me.Tag, $newColumn[i], xVariable)
      Endif
    Next
  Endif
  Return xxx

End

Private Function GetSQLColumns() As String[]

  Dim xFldList As String[]
  Dim i As Integer

  GetFieldList()
  modCustPatient.FillNewCOlumnCollection(Me.Tag)
  $newColumn = modCustPatient.CustomNewColumnsTitle(Me.Tag)
  xFldList = $SSQLFields.Copy()
  If $newColumn.Count Then
    For i = 0 To $newColumn.Count - 1
      xFldList.Add("fldencounterval")
    Next
  Endif
  Return xFldList

End

Public Sub cmdrepo_Click()

  Dim xFldList As String[]
  Dim xitem As String
  Dim xList As String[]

  TabStrip1.Index = 0
  xFldList = GetSQLColumns()
  If rbsel.Value = True Then
    If chkcustom.Value = True Then
      xitem = Trim(txtcustom.Text) & "%"
      $rData = ExecuteQuery(xFldList, cmbitemtype.Text, xitem, modDatabase.$syConn)
    Else
      xList = modFillContainer.GetSelectedItemsListBox(lstitem)
      $rData = ExecuteQueryList(xFldList, cmbitemtype.Text, xList, modDatabase.$syConn)
    Endif

  Else If rball.Value = True Then
    $rData = ExecuteQuery(xFldList, cmbitemtype.Text, "%", modDatabase.$syConn)
  Endif
  If $rData.Available Then
    lblrecordcount.Text = "Count: " & $rData.Count
  Else
    lblrecordcount.Text = "Count: 0"
  Endif

  ShowSaleData()

  txtqty.Value = 0
  txtamt.Value = 0
  If chkgrid.Value = True Then
    SummaryValues()
  Endif

  If chkqty.Value = True Or If chkamt.Value = True Then
    FillChartData()
    If chkqty.Value = True Then
      FillItemChartQTY()
    Endif
    If chkamt.Value = True Then
      FillItemChartAMT()
    Endif
  Endif

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rData.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column > $SSQLFields.Count - 1 Then
    Data.Html = modString.TextToHTML(GetGridViewValue(Column, $rData[$aMyFields[Column]]))
  Else
    Data.Text = GetGridViewValue(Column, $rData[$aMyFields[Column]])
  Endif

End

Private Sub ShowSaleData()

  Dim i As Integer

  $aMyFields = New String[]
  modGridView.ReadSmallData(GridView1, $rData, $aMyFields)
  $ColCount = $SSQLFields.Count
  With GridView1
    .Columns[0].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[1].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    If chksplit.Value = True Then
      .Columns[8].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
      .Columns[9].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
      .Columns[10].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[11].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[12].Hidden = True
      .Columns[13].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[14].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
      .Columns[15].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
      .Columns[16].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[17].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[18].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
      .Columns[19].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
      .Columns[20].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    Else
      .Columns[8].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
      .Columns[9].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[10].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[11].Hidden = True
      .Columns[12].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[13].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
      .Columns[14].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
      .Columns[15].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[16].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      .Columns[17].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
      .Columns[18].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
      .Columns[19].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    Endif

    .Columns[0].Text = "Encounter"
    .Columns[1].Text = "Patient Name"
    .Columns[2].Text = "Particulars"
    .Columns[3].Text = "Rate"
    .Columns[4].Text = "QTY"
    .Columns[5].Text = "Gross"
    .Columns[6].Text = "Disc"
    .Columns[7].Text = "Tax"
    If chksplit.Value = True Then
      .Columns[8].Text = "Credit"
      .Columns[9].Text = "Cash"
      .Columns[10].Text = "DateTime"
      .Columns[11].Text = "Invoice"
      .Columns[13].Text = "Group"
      .Columns[14].Text = "Payable"
      .Columns[15].Text = "Referral"
      .Columns[16].Text = "Package"
      .Columns[17].Text = "Ledger"
      .Columns[18].Text = "Location"
      .Columns[19].Text = "Type"
      .Columns[20].Text = "Receipt"
    Else
      .Columns[8].Text = "Total"
      .Columns[9].Text = "DateTime"
      .Columns[10].Text = "Invoice"
      .Columns[12].Text = "Group"
      .Columns[13].Text = "Payable"
      .Columns[14].Text = "Referral"
      .Columns[15].Text = "Package"
      .Columns[16].Text = "Ledger"
      .Columns[17].Text = "Location"
      .Columns[18].Text = "Type"
      .Columns[19].Text = "Receipt"
    Endif

    If $newColumn.Count Then
      For i = 0 To $newColumn.Count - 1
        .Columns[$ColCount + i].Text = $newColumn[i]
        .Columns[$ColCount + i].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
      Next
    Endif
  End With

End

Private Sub SummaryValues()

  Dim res As Result

  If rbsel.Value = True Then
    res = ExecuteQuery(["SUM(flditemqty) as itemtot", "SUM(fldditemamt) as amttot"], cmbitemtype.Text, lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery(["SUM(flditemqty) as itemtot", "SUM(fldditemamt) as amttot"], cmbitemtype.Text, "%", modDatabase.$syConn)
  Endif
  If res.Available Then
    If res["itemtot"] Then
      txtqty.Value = Round(res["itemtot"], -2)
    Endif
    If res["amttot"] Then
      txtamt.Value = Round(res["amttot"], -2)
    Endif
  Endif

End

Private Sub FillChartData()

  $qtyChart = New String[]
  $amtChart = New String[]
  For Each $rData
    If chkqty.Value = True Then
      $qtyChart.Add(DateDiff(dtfir.Value, $rData["fldtime"], modChart.GetDateIntegerFromSetting()) & ";" & CStr($rData["flditemqty"] / modChart.GetQTYValueChart()))
    Endif
    If chkamt.Value = True Then
      If chksplit.Value = False Then
        $amtChart.Add(DateDiff(dtfir.Value, $rData["fldtime"], modChart.GetDateIntegerFromSetting()) & ";" & CStr($rData["fldditemamt"] / modChart.GetAMTValueChart()))
      Endif
    Endif
  Next

End

' Public Sub GridView1_Menu()
'
'   mnugridview.Popup
'
' End

Public Sub mnuenchart_Click()

  Dim xx As String
  Dim xField As String
  Dim Column As Integer
  Dim res As Result
  Dim xval As Variant
  Dim hFile As CUnivariate
  Dim xFldList As String[]
  Dim sOrder As String[]

  Dim hUniv As FmAnalyzeSett

  hUniv = New FmAnalyzeSett("Univariate", modGridView.GetGridViewColumns(GridView1))
  hUniv.ShowModal

  xFldList = GetSQLColumns()
  hFile = New CUnivariate
  Column = modCustPatient.GetUnivariateColumn(0)
  xField = xFldList[Column]
  If rbsel.Value = True Then
    res = ExecuteQuery([xField], cmbitemtype.Text, lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery([xField], cmbitemtype.Text, "%", modDatabase.$syConn)
  Endif

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Column, res[xField])
      If xval Then
        hFile.Add(xval)
      Endif
    Next
  Endif

  If modSettings.ShowSettingFromFIle("UnivariateAnalysis/DataType") = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetEncChartGridNew(hFile.GetSPSSFile(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrosstab_Click()

  Dim xx As String
  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hFile As CBivariate
  Dim xFldList As String[]
  Dim sOrder As String[]
  Dim hBivar As FmAnalyzeSett

  hBivar = New FmAnalyzeSett("Bivariate", modGridView.GetGridViewColumns(GridView1))
  hBivar.ShowModal

  xFldList = GetSQLColumns()
  hFile = New CBivariate
  Row = modCustPatient.GetCrossVarRow(0)
  xFieRow = xFldList[Row]
  Column = modCustPatient.GetCrossVarColumn(0)
  xFieColm = xFldList[Column]
  If rbsel.Value = True Then
    res = ExecuteQuery([xFieRow, xFieColm], cmbitemtype.Text, lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery([xFieRow, xFieColm], cmbitemtype.Text, "%", modDatabase.$syConn)
  Endif

  If res.Available Then
    For Each res
      xval = GetGridViewValue(Row, res[xFieRow])
      yval = GetGridViewValue(Column, res[xFieColm])
      If xval And If yval Then
        hFile.Add([xval, yval])
      Endif
    Next
  Endif

  If modCustPatient.$CrossOutcomeType = "Ordinal" Then
    sOrder = ListOrder("Select Order", hFile.DistinctValues())
  Endif
  xx = modPSPP.GetCrossTabStatNew(hFile.GetSPSSFile(), hFile.GetGroups(), sOrder)
  If xx Then
    modControlSub.OpenBrowser(xx)
  Endif

End

Public Sub mnucrotab_Click()

  Dim Row As Integer
  Dim Column As Integer
  Dim xFieRow As String
  Dim xFieColm As String
  Dim res As Result
  Dim xval As Variant
  Dim yval As Variant

  Dim hForm As FmGridCrossTab
  Dim xForm As CCrossTab
  Dim xFldList As String[]
  Dim hGdChr As FmAnalyzeSett

  hGdChr = New FmAnalyzeSett("GridCrossTab", modGridView.GetGridViewColumns(GridView1))
  hGdChr.ShowModal

  xFldList = GetSQLColumns()
  If modCustPatient.$TabRowColumn And If modCustPatient.$TabFieldColumn Then
    xForm = New CCrossTab

    Row = CInt(modCustPatient.$TabRowColumn) - 1
    xFieRow = xFldList[Row]
    Column = CInt(modCustPatient.$TabFieldColumn) - 1
    xFieColm = xFldList[Column]
    If rbsel.Value = True Then
      res = ExecuteQuery([xFieRow, xFieColm], cmbitemtype.Text, lstitem.Text, modDatabase.$syConn)
    Else If rball.Value = True Then
      res = ExecuteQuery([xFieRow, xFieColm], cmbitemtype.Text, "%", modDatabase.$syConn)
    Endif

    If res.Available Then
      For Each res
        xval = GetGridViewValue(Row, res[xFieRow])
        yval = GetGridViewValue(Column, res[xFieColm])
        If xval And If yval Then
          xForm.Add([xval, yval])
        Endif
      Next
    Endif

    hForm = New FmGridCrossTab(GridView1.Columns[Row].Text, xForm.GetSPSSFile())
    hForm.ShowModal
    'modExternal.$ExecValueColl.Clear()
  Endif

End

Public Sub mnugridsummary_Click()

  Dim xx As String
  Dim ChapCol As String
  Dim GropCol As String
  Dim xChapList As String[]
  Dim xGropList As String[]

  Dim res As Result
  Dim valCol As String
  Dim xFieldList As String[]

  Dim xFinList As Variant[]
  Dim xrowVar As Variant[]
  Dim xchapval As String
  Dim xgroup As String
  Dim xPath As String
  Dim xFldList As String[]
  Dim hGdSum As FmAnalyzeSett

  hGdSum = New FmAnalyzeSett("GridSummary", modGridView.GetGridViewColumns(GridView1))
  hGdSum.ShowModal
  If Not modCustPatient.$SumGroupColumn Or If Not modCustPatient.$SumValueColumn Then Return

  xFldList = GetSQLColumns()
  xFieldList = New String[]
  If modCustPatient.$SumChapterColumn Then
    ChapCol = xFldList[modCustPatient.$SumChapterColumn - 1]
    xFieldList.Add(ChapCol)
  Endif
  GropCol = xFldList[modCustPatient.$SumGroupColumn - 1]
  valCol = xFldList[modCustPatient.$SumValueColumn - 1]
  xFieldList.Add(GropCol)
  xFieldList.Add(valCol)

  xChapList = New String[]
  xGropList = New String[]
  xFinList = New Variant[]
  If rbsel.Value = True Then
    res = ExecuteQuery(xFieldList, cmbitemtype.Text, lstitem.Text, modDatabase.$syConn)
  Else If rball.Value = True Then
    res = ExecuteQuery(xFieldList, cmbitemtype.Text, "%", modDatabase.$syConn)
  Endif
  If res.Available Then
    For Each res
      xrowVar = New Variant[]
      If modCustPatient.$SumChapterColumn Then
        xchapval = GetGridViewValue(modCustPatient.$SumChapterColumn - 1, res[ChapCol])
        xrowVar.Add(xchapval)
        xChapList.Add(xchapval)
      Endif
      xgroup = GetGridViewValue(modCustPatient.$SumGroupColumn - 1, res[GropCol])
      xrowVar.Add(xgroup)
      xGropList.Add(xgroup)

      xrowVar.Add(GetGridViewValue(modCustPatient.$SumValueColumn - 1, res[valCol]))
      xFinList.Add(xrowVar)
    Next
  Endif

  xx = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate)
  If modCustPatient.$SumGroupColumn And If modCustPatient.$SumValueColumn Then
    If modCustPatient.$SumChapterColumn Then
      If modCustPatient.$SummaryType = "Summation(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapterTableReport("Service Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else If modCustPatient.$SummaryType = "Count(Table)" Then
        xPath = modCHTMLReport.SummaryGridChapCountTableReport("Service Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Else
        xPath = modCHTMLReport.SummaryGridChapterReport("Service Report Summary", xx, modString.GetDistinctStringArray(xChapList), modString.GetDistinctStringArray(xGropList), xFinList)
      Endif
    Else
      xPath = modCHTMLReport.SummaryGridReport("Service Report Summary", xx, modString.GetDistinctStringArray(xGropList), xFinList)
    Endif
    modControlSub.DisplayReportExport(xPath)
  Endif

End

''----------------------------------------------- QTY Chart --------------------------------------
Private Sub FillItemChartQTY()

  Dim sPath As String
  Dim sNew As String

  sPath = Temp()
  File.Save(sPath, $qtyChart.Join(gb.NewLine))
  sNew = modString.GetGroupSUmmaryCSV(sPath, 0, 1, ";", gb.Tab, gb.Float)

  ' PictureBox1.Tag = "Quantity"
  If modBasic.$ChartExecStat = "PSPP" Then
    modImage.StretchtPictureToBox(PictureBox1, modChart.HistogramChart(sNew, "[Quantity in " & modChart.GetQTYLabelChart() & "]"))
  Else
    modImage.StretchtPictureToBox(PictureBox1, modChart.HistogramChart(sNew, "[Quantity in " & modChart.GetQTYLabelChart() & "]"))
  Endif
  btnstats.Tag = sNew

End

Public Sub btnexport_Click()

  ' Me.Exec("printJS('" & PictureBox1.Tag & "', 'image')")
  Me.Exec("window.open('" & PictureBox1.Image & "'); ")

End
'
' Public Sub btnstats_Click()
'
'   Desktop.Open(btnstats.Tag)
'
' End

''------------------------------------------ AMT Chart --------------------------------------------------
Private Sub FillItemChartAMT()

  Dim sPath As String
  Dim sNew As String

  sPath = Temp()
  File.Save(sPath, $amtChart.Join(gb.NewLine))
  sNew = modString.GetGroupSUmmaryCSV(sPath, 0, 1, ";", gb.Tab, gb.Float)

  ' PictureBox2.Tag = "ReceivedAmount"
  If modBasic.$ChartExecStat = "PSPP" Then
    modImage.StretchtPictureToBox(PictureBox2, modChart.HistogramChart(sNew, "[Amount in " & modChart.GetAMTLabelChart() & "]"))
  Else
    modImage.StretchtPictureToBox(PictureBox2, modChart.HistogramChart(sNew, "[Amount in " & modChart.GetAMTLabelChart() & "]"))
  Endif
  btnstats2.Tag = sNew

End

Public Sub btnexport2_Click()

  ' Me.Exec("printJS('" & PictureBox2.Tag & "', 'image')")
  Me.Exec("window.open('" & PictureBox2.Image & "'); ")

End
'
' Public Sub btnstats2_Click()
'
'   Desktop.Open(btnstats2.Tag)
'
' End

''--------------------------------- Report ----------------------------------------
Public Sub btnfullrep_Click()

  Dim xHeader As String[]
  Dim xhide As Integer[]
  Dim Column As Integer
  Dim xCollRow As Collection
  Dim xColum As Integer

  Dim $hGridExportTable As CExportResult
  Dim xparam1 As String
  Dim xparam2 As String
  Dim encColumn As Integer
  Dim prm As String

  Dim xFldList As String[]

  If rbsel.Value = True Then
    prm = cmbitemtype.Text & "(" & lstitem.Text & ")"
  Else If rball.Value = True Then
    prm = cmbitemtype.Text & "(" & "All Items" & ")"
  Endif

  xHeader = New String[]
  xhide = New Integer[]
  For Column = 0 To GridView1.Columns.Count - 1
    xHeader.Add(GridView1.Columns[Column].Text)
    If GridView1.Columns[Column].Hidden = True Then
      xhide.Add(Column)
    Endif
  Next
  xparam1 = prm
  xparam2 = "Date: " & modReportVar.GetDateTimeReport(dtfir.Value, gb.MediumDate) & " To " & modReportVar.GetDateTimeReport(dtlast.Value, gb.MediumDate) & " Billing Comp: " & cmbcomp.Text
  encColumn = 0
  $hGridExportTable = New CExportResult(Me.Tag, xHeader, xhide, xparam1, xparam2, encColumn)

  xFldList = GetSQLColumns()

  For Each $rData
    xCollRow = New Collection
    For xColum = 0 To xFldList.Count - 1
      xCollRow.Add(GetGridViewValue(xColum, $rData[xFldList[xColum]]), CStr(xColum))
    Next
    $hGridExportTable.Add($rData.Index, xCollRow)
  Next

  modControlSub.DisplayReportExport($hGridExportTable.HTMLPath())

End

Public Sub btnexpoexcel_Click()

  Me.Exec("ExportToExcel('" & GridView1.Name & "', 'xlsx')")

End

Public Sub btnsummary_Click()

  Dim xPath As String

  xPath = modRHTMLService.ServiceSummaryReport(modDatabase.$syConn, dtfir.Value, dtlast.Value, CategoryListRep(), GetInvoiced(), cmbcomp.Text, cmbbillmode.Text, cmbdiscount.Text, cmbilltype.Text, cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub btninventory_Click()

  Dim xPath As String

  xPath = modRHTMLService.ServiceDetailSumReport(modDatabase.$syConn, dtfir.Value, dtlast.Value, CategoryListRep(), GetInvoiced(), cmbcomp.Text, cmbbillmode.Text, cmbdiscount.Text, cmbilltype.Text, cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub btndetaildate_Click()

  Dim xPath As String
  Dim sDtType As String

  sDtType = InputCombo(("Group dates by: "), "Date Group", ["Year", "Month", "Day"], "Day", True)
  xPath = modRHTMLService.ServiceDetailDaywiseSumReport(modDatabase.$syConn, dtfir.Value, dtlast.Value, CategoryListRep(), GetInvoiced(), cmbcomp.Text, cmbbillmode.Text, cmbdiscount.Text, cmbilltype.Text, sDtType, cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub btndatewise_Click()

  Dim xPath As String
  Dim sDtType As String

  If lstitem.Text Then
    sDtType = InputCombo(("Group dates by: "), "Date Group", ["Year", "Month", "Day"], "Day", True)
    xPath = modRHTMLService.ServiceSingleDaywiseSumReport(modDatabase.$syConn, dtfir.Value, dtlast.Value, GetInvoiced(), lstitem.Text, cmbcomp.Text, cmbbillmode.Text, cmbdiscount.Text, cmbilltype.Text, sDtType, cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub chkqty_Click()

  TabStrip1.Index = 1

End

Public Sub chkamt_Click()

  TabStrip1.Index = 2

End

Public Sub mnuColumns_Click()

  If Message.Question(modGridView.GetColumnsListString(GridView1), ("OK"), ("Setting")) = 2 Then
    fmChartSetting.ShowModal
  Endif

End

Public Sub btnpatcount_Menu()

  mnuhidesumm.Popup(btnpatcount)

End

Public Sub btnpatient_Menu()

  mnuhidegrouped.Popup(btnpatient)

End

Public Sub mnusumcategory_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Category", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumrateplan_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "RatePlan", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumpackage_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Package", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumpayable_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Payable", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumrefer_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Referral", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumledger_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "LedgerA/C", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumtarget_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "TargetComp", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumcompid_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "PatLocation", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnubilltype_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "BillType", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumentry_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryEntryFormat(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnuaddcolm_Click()

  Dim hForm As FmAddNewColumn

  hForm = New FmAddNewColumn(Me.Tag)
  hForm.ShowModal

End

'''=============== Group report ==============
Public Sub mnusumrateplangroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "RatePlan", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "RatePlan", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumpackagegroup_Click()

  Dim xPath As String

  Message.Info(("Generating Report ...."), ("OK"))
  xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Package", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnubilltypegroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "BillType", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "BillType", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumpayablegroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Payable", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Payable", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumrefergroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Referral", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "Referral", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumledgergroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "LedgerA/C", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "LedgerA/C", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumtargetgroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "TargetComp", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "TargetComp", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnusumcompidgroup_Click()

  Dim xPath As String
  Dim xval As String

  If cmbdiscount.Text = "%" Then
    xval = InputCombo("Group by Scheme", "Service Report", ["No", "Yes"], "No", True)
  Else
    xval = "No"
  Endif
  Message.Info(("Generating Report ...."), ("OK"))
  If xval = "Yes" Then
    xPath = modRHTMLService.GetServiceSUmmaryReportSchemeGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "PatLocation", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Else
    xPath = modRHTMLService.GetServiceSUmmaryReportFormatGrouped(modDatabase.$syConn, dtfir.Value, dtlast.Value, cmbitemtype.Text, cmbbillmode.Text, cmbdiscount.Text, cmbcomp.Text, GetInvoiced(), cmbilltype.Text, "PatLocation", cmblocation.Text, cmbvalue.Text, $tblpatbilling, $tblpatbilldetail)
  Endif
  modControlSub.OpenHTMLPreview("", xPath, "ReportSize")

End

Public Sub mnucountuni_Click()

  Dim Column As Integer
  Dim xFieColm As String
  Dim res As Result
  Dim yval As Variant
  Dim xList As String[]

  Dim xVar As Variant[]
  Dim xFldList As String[]
  Dim xPath As String

  Column = ListIndex("Column Index", modGridView.GetGridViewColumns(GridView1))
  If Column + 1 > 0 Then
    xFldList = GetSQLColumns()
    xFieColm = xFldList[Column]
    If rbsel.Value = True Then
      res = ExecuteQuery([xFieColm], cmbitemtype.Text, lstitem.Text, modDatabase.$syConn)
    Else If rball.Value = True Then
      res = ExecuteQuery([xFieColm], cmbitemtype.Text, "%", modDatabase.$syConn)
    Endif
    xList = New String[]
    If res.Available Then
      For Each res
        yval = GetGridViewValue(Column, res[xFieColm])
        If yval Then
          xList.Add(yval)
        Endif
      Next
    Endif
    If xList.Count Then
      xVar = modString.GetUnivariateSummary(xList)
      xPath = modCHTMLReport.CreateHTMLReportFromArray(["Variable", "Count"], xVar, GridView1.Columns[Column].Text, modReportVar.GetDateTimeReport(Now(), gb.GeneralDate))
    Endif

    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Public Sub mnucrosstabulation_Click()

  Dim hForm As FmAccCrossTab

  hForm = New FmAccCrossTab(cmblocation.Text, cmbvalue.Text)
  hForm.ShowModal

End

Public Sub mnuexpocolumn_Click()

  Dim hForm As FmCustColumnSet

  hForm = New FmCustColumnSet(Me.Tag)
  hForm.ShowModal

End

' Gambas module file

Public $MedBrandToGeneric As Collection
Public $MedCodeFromStock As Collection
Public $MedDrugFromStock As Collection
Public $MedBrandFromStock As Collection
Public $MedCodeFromDrug As Collection
Public $MedSensiFromStock As Collection
Public $MedRiskFromStock As Collection
Public $MedStrengthStock As Collection
Public $MedStrenUntStock As Collection
Public $MedNarcoticStock As Collection
Public $MedCategFromStock As Collection

''--------------------- Drug Specific --------------------------------------------------
Public Function GetCodeFromStockID(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim cod As String

  cod = modHelpVariable.GetCollectionValue($MedCodeFromStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not cod Then
    sql = "select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1)"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["fldcodename"] Then
        cod = res["fldcodename"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedCodeFromStock.Add(cod, stockid)
        Endif
      Else
        cod = ""
      Endif
    Else
      cod = ""
    Endif
  Endif
  Return cod

End

Public Function GetCategoryFromStockID(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim cod As String

  cod = modHelpVariable.GetCollectionValue($MedCategFromStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not cod Then
    sql = "select fldcategory from tblcode where fldcodename in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1))"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["fldcategory"] Then
        cod = res["fldcategory"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedCategFromStock.Add(cod, stockid)
        Endif
      Else
        cod = ""
      Endif
    Else
      cod = ""
    Endif
  Endif
  Return cod

End

Public Function GetSensiNameFromStockID(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim cod As String

  cod = modHelpVariable.GetCollectionValue($MedSensiFromStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not cod Then
    sql = "select fldsensname from tblcode where fldcodename in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1))"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["fldsensname"] Then
        cod = res["fldsensname"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedSensiFromStock.Add(cod, stockid)
        Endif
      Else
        cod = ""
      Endif
    Else
      cod = ""
    Endif
  Endif
  Return cod

End

Public Function GetRiskTypeFromSTockID(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim cod As String

  cod = modHelpVariable.GetCollectionValue($MedRiskFromStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not cod Then
    sql = "select fldrisklevel from tblcode where fldcodename in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1))"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["fldrisklevel"] Then
        cod = res["fldrisklevel"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedRiskFromStock.Add(cod, stockid)
        Endif
      Else
        cod = ""
      Endif
    Else
      cod = ""
    Endif
  Endif
  Return cod

End

Public Function GetDrugFromStockID(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($MedDrugFromStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not xx Then
    sql = "select flddrug from tblmedbrand where fldbrandid=&1"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["flddrug"] Then
        xx = res["flddrug"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedDrugFromStock.Add(xx, stockid)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetBrandFromStockID(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($MedBrandFromStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not xx Then
    sql = "select fldbrand from tblmedbrand where fldbrandid=&1"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["fldbrand"] Then
        xx = res["fldbrand"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedBrandFromStock.Add(xx, stockid)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetCodeFromDrugID(drugid As String) As String

  Dim sql As String
  Dim res As Result
  Dim cod As String

  cod = modHelpVariable.GetCollectionValue($MedCodeFromDrug, drugid, modBasic.$AppCacheMedicineConstants)
  If Not cod Then
    sql = "select fldcodename from tbldrug where flddrug=&1"
    res = modDatabase.$medConn.Exec(sql, drugid)
    If res.Available Then
      If res["fldcodename"] Then
        cod = res["fldcodename"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedCodeFromDrug.Add(cod, drugid)
        Endif
      Else
        cod = ""
      Endif
    Else
      cod = ""
    Endif
  Endif
  Return cod

End

Public Function GetDrugInitialStrength(stockid As String) As Float

  Dim res As Result
  Dim inistr As Float
  Dim xval As Variant

  xval = modHelpVariable.GetCollectionValue($MedStrengthStock, stockid, modBasic.$AppCacheMedicineConstants)
  If xval Then
    inistr = CFloat(xval)
  Else
    inistr = 0
  Endif
  If Not inistr Then
    res = modDatabase.$medConn.Exec("select fldstrength from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1)", stockid)
    If res.Available Then
      If res["fldstrength"] Then
        inistr = res["fldstrength"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedStrengthStock.Add(inistr, stockid)
        Endif
      Else
        inistr = 0
      Endif
    Else
      inistr = 0
    Endif
  Endif
  Return inistr

End

Public Function GetDrugStrengthUnit(stockid As String) As String

  Dim res As Result
  Dim xunit As String

  xunit = modHelpVariable.GetCollectionValue($MedStrenUntStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not xunit Then
    res = modDatabase.$medConn.Exec("select fldstrunit from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1)", stockid)
    If res.Available Then
      If res["fldstrunit"] Then
        xunit = res["fldstrunit"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedStrenUntStock.Add(xunit, stockid)
        Endif
      Else
        xunit = ""
      Endif
    Else
      xunit = ""
    Endif
  Endif
  Return xunit

End

Public Function GetMedicineDoseUnit(stockid As String) As String

  Dim xx As String
  Dim asx As String[]
  Dim xval As String

  xx = GetDrugStrengthUnit(stockid)
  If xx Then
    asx = Split(xx, "/")
    If asx.Count Then
      xval = asx[0]
    Else
      xval = xx
    Endif
  Else
    xval = "mg"
  Endif
  Return xval

End

Public Function GetNarcoticType(stockid As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($MedNarcoticStock, stockid, modBasic.$AppCacheMedicineConstants)
  If Not xx Then
    sql = "select fldnarcotic from tblmedbrand where fldbrandid=&1"
    res = modDatabase.$medConn.Exec(sql, stockid)
    If res.Available Then
      If res["fldnarcotic"] Then
        xx = res["fldnarcotic"]
      Else
        xx = "No"
      Endif
    Else
      xx = "No"
    Endif
    If modBasic.$AppCacheMedicineConstants = "Yes" Then
      $MedNarcoticStock.Add(xx, stockid)
    Endif
  Endif
  Return xx

End

'NOTE:---------------------------------- Brand Generic conversion ----------------------------------
Public Function ConvertBrandToGeneric(txtroute As String, txtbrand As String) As String

  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($MedBrandToGeneric, txtbrand & "@" & txtroute, modBasic.$AppCacheMedicineConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldbrandid from tblmedbrand where fldbrand=&1 and fldactive=&2 and flddrug in(select flddrug from tbldrug where fldroute=&3)", txtbrand, "Active", txtroute)
    If res.Available Then
      If res["fldbrandid"] Then
        xx = res["fldbrandid"]
        If modBasic.$AppCacheMedicineConstants = "Yes" Then
          $MedBrandToGeneric.Add(xx, txtbrand & "@" & txtroute)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function ConvertGenericToBrand(txtstockid As String) As String

  Dim xx As String

  xx = GetBrandFromStockID(txtstockid)
  If Not xx Then
    xx = txtstockid
  Endif
  Return xx

End

Public Function ConvertGenericToDrug(txtstockid As String) As String

  Dim xx As String

  xx = GetDrugFromStockID(txtstockid)
  If Not xx Then
    xx = txtstockid
  Endif
  Return xx

End

'NOTE: ----------------------------------- DRUG PROPERTIES----------------------------------------------
Public Function GetDrugRenalEliminFraction(stockid As String) As Float

  Dim sql As String
  Dim res As Result
  Dim elim As String

  sql = "select fldeliminrenal from tblcode where fldcodename in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid=&1))"
  res = modDatabase.$medConn.Exec(sql, stockid)
  If res.Available Then
    If res["fldeliminrenal"] Then
      elim = res["fldeliminrenal"] / 100
    Else
      elim = 0
    Endif
  Else
    elim = 0
  Endif
  Return elim

End

Public Function GetDrugEnergyContent(txtstockid As String, txtsubroute As String) As Float

  Dim res As Result
  Dim xx As Float

  res = modDatabase.$medConn.Exec("select fldenergy from tbllabel where fldsubroute=&1 and flddrug in(select flddrug from tblmedbrand where fldbrandid=&2)", txtsubroute, txtstockid)
  If res.Available = True Then
    If res["fldenergy"] Then
      xx = res["fldenergy"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif

  Return xx

End

Public Function GetDrugFinalStrength(txtstockid As String, txtsubroute As String) As Float

  Dim res As Result
  Dim xx As Float

  res = modDatabase.$medConn.Exec("select fldfinalstr from tbllabel where fldsubroute=&1 and flddrug in(select flddrug from tblmedbrand where fldbrandid=&2)", txtsubroute, txtstockid)
  If res.Available = True Then
    If res["fldfinalstr"] Then
      xx = res["fldfinalstr"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif

  Return xx

End

Public Function GetQuantityDosingForCOunt(txtmedicine As String, txtdose As Float, sCount As Integer) As Float

  Dim qty As Float
  Dim xqty As Float
  Dim res As Result

  res = modDatabase.$medConn.Exec("select tblmedbrand.fldtabbreak as fldtabbreak,tblmedbrand.fldpackvol as fldpackvol,tblmedbrand.fldpacksize as fldpacksize,tbldrug.fldstrength as fldstrength,tbldrug.fldroute as fldroute from tblmedbrand inner join tbldrug on tblmedbrand.flddrug=tbldrug.flddrug where tblmedbrand.fldbrandid=&1", txtmedicine)                                                                         ''
  If res.Available = True Then
    If res["fldpackvol"] And If res["fldstrength"] Then

      If res["fldtabbreak"] = "No" Then
        xqty = txtdose / (res["fldpackvol"] * res["fldstrength"])
        If xqty Then
          If res["fldpacksize"] Then
            qty = Ceil(xqty / res["fldpacksize"]) * res["fldpacksize"] * sCount
          Else
            qty = Ceil(xqty) * sCount
          Endif
        Else
          qty = 0
        Endif
      Else
        xqty = (txtdose * sCount) / (res["fldpackvol"] * res["fldstrength"])
        If xqty Then
          If res["fldpacksize"] Then
            qty = Ceil(xqty / res["fldpacksize"]) * res["fldpacksize"]
          Else
            qty = Ceil(xqty)
          Endif
        Else
          qty = 0
        Endif
      Endif

    Else
      qty = 0
    Endif
  Else
    qty = 0
  Endif
  Return qty

End

Public Function GetQuantityDosing(txtmedicine As String, txtdose As Float, txtftreq As String, txtday As Float) As Float

  Dim qty As Float
  Dim xqty As Float
  Dim res As Result

  res = modDatabase.$medConn.Exec("select tblmedbrand.fldtabbreak as fldtabbreak,tblmedbrand.fldpackvol as fldpackvol,tblmedbrand.fldpacksize as fldpacksize,tbldrug.fldstrength as fldstrength,tbldrug.fldroute as fldroute from tblmedbrand inner join tbldrug on tblmedbrand.flddrug=tbldrug.flddrug where tblmedbrand.fldbrandid=&1", txtmedicine)                                                                         ''
  If res.Available = True Then
    If res["fldpackvol"] And If res["fldstrength"] Then

      If res["fldtabbreak"] = "No" Then
        xqty = txtdose / (res["fldpackvol"] * res["fldstrength"])
        If xqty Then
          If res["fldpacksize"] Then
            qty = Ceil(xqty / res["fldpacksize"]) * res["fldpacksize"] * modPharmLabel.ConvertFrequencyToNumber(txtftreq) * txtday
          Else
            qty = Ceil(xqty) * modPharmLabel.ConvertFrequencyToNumber(txtftreq) * txtday
          Endif
        Else
          qty = 0
        Endif
      Else
        xqty = (txtdose * modPharmLabel.ConvertFrequencyToNumber(txtftreq) * txtday) / (res["fldpackvol"] * res["fldstrength"])
        If xqty Then
          If res["fldpacksize"] Then
            qty = Ceil(xqty / res["fldpacksize"]) * res["fldpacksize"]
          Else
            qty = Ceil(xqty)
          Endif
        Else
          qty = 0
        Endif
      Endif

    Else
      qty = 0
    Endif
  Else
    qty = 0
  Endif
  Return qty

End

Public Function GetDrugUseDurationDosing(txtmedicine As String, txtdose As Float, txtftreq As String, txtqty As Float) As Integer

  Dim txtday As Integer
  Dim res As Result

  res = modDatabase.$medConn.Exec("select tblmedbrand.fldpackvol as fldpackvol,tbldrug.fldstrength as fldstrength from tblmedbrand inner join tbldrug on tblmedbrand.flddrug=tbldrug.flddrug where tblmedbrand.fldbrandid=&1", txtmedicine)                                                                         ''
  If res.Available = True Then
    If txtdose Then
      txtday = Ceil((txtqty * res["fldpackvol"] * res["fldstrength"]) / (txtdose * modPharmLabel.ConvertFrequencyToNumber(txtftreq)))
    Else
      txtday = 0
    Endif
  Else
    txtday = 0
  Endif
  Return txtday

End

Public Function GetPreAdminTestList(codeid As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select distinct(fldchild) as col from tblmedmonitor where fldparent=&1 and fldtype=&2", codeid, "Pre-Administration")
  xx = modControlSub.GetDirectFillresult(res)
  Return xx

End

Public Function GetStockIDWithCategory(sMedList As String[]) As String[]

  Dim xx As String
  Dim asx As String
  Dim xval As String[]

  xval = New String[]
  For Each xx In sMedList
    asx = GetCategoryFromStockID(xx)
    If Not asx Then
      asx = "Unspecified"
    Endif
    xval.Add(asx & "@" & xx)
  Next
  Return xval

End

Public Function GetDietMixNameFromCode(sCode As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldtitle from tblfoodmix where fldgroup=&1", sCode)
  If res.Available = True Then
    If res["fldtitle"] Then
      xx = res["fldtitle"]
    Else
      xx = sCode
    Endif
  Else
    xx = sCode
  Endif

  Return xx

End

''------------------------ Blood -------------------
Public Function GetBloodShelfLife(sBlood As String) As Integer

  Dim res As Result
  Dim xx As Integer

  res = modDatabase.$medConn.Exec("select fldshelf from tblbloodstore where flditem=&1", sBlood)
  If res.Available = True Then
    If res["fldshelf"] Then
      xx = res["fldshelf"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif

  Return xx

End

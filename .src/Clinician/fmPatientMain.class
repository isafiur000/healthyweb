' Gambas class file

''PATIENT PROFILE
Private $UserRestrictPat As String[]
Private $structExamList As String[]

''MAIN FORM
Private $sTatus As String
Private $OutFluid As String[]
Private $ExamLst As String[]
Private $UserRestrict As String[]
Private $EBMDiagnosis As String
Private $PatientNum As String
Private $doa As Date
Private $sColl As Collection
Private $xFinClear As Boolean

Private $billModeTest As String
Private $billModeRadio As String
Private $billModePharmacy As String
Private $billModeProcedure As String
Private $billModeEquipment As String
Private $billModeService As String
Private $billModeOthers As String
Private $billReference As String

Private $rSympRes As Result
Private $aSympFields As String[]
Private $rExamRes As Result
Private $aExamFields As String[]
Private $rWtRes As Result
Private $aWtFields As String[]
Private $rInputRes As Result
Private $aInputFields As String[]
Private $rOutRes As Result
Private $aOutFields As String[]
Private $rPlanRes As Result
Private $aPlanFields As String[]

Private $rRoutRes As Result
Private $aRoutFields As String[]
Private $rStatRes As Result
Private $aStatFields As String[]
Private $rFludRes As Result
Private $aFludFields As String[]
Private $rRateRes As Result
Private $aRateFields As String[]
Private $rEffcRes As Result
Private $aEffcFields As String[]

Private $dtFinding As Date
Private $dtFluid As Date

Private $vidRoom As String
Private $VidIndex As String

Public Sub _new(encid As String)

  Dim xlocat As String

  If encid Then
    txtencid.Text = encid
  Endif

  $structExamList = modMedicine.FillClinicalSubClass("Physician Examinations")
  FillExamMenu()

  ''PATIENT PROFILE
  cmbpatheightunit.List = ["cm", "inch", "foot"]
  $UserRestrictPat = modBasic.$ClinicDisableCompo
  If MMain.$SISHAppMode = "HIS" Then
    txtbedno.ReadOnly = True
  Endif

  ''MAIN FORM
  Select modBasic.$ClinicTelemed
    Case "Enable", "Partial", "Complete"
      pnltelemed.Visible = True
    Case Else
      pnltelemed.Visible = False
  End Select

  $ExamLst = modMedicine.FillClinicalSubClass("InPatient")
  cmbsympunit.List = ["Hours", "Days", "Weeks", "Months", "Years", "Episodes"]
  cmburgency.List = ["Urgent", "Normal"]

  $UserRestrict = modBasic.$ClinicDisableCompo
  modLabSub.DisplayDefaultTestUnit(rbsi, rbmetric)
  xlocat = modSettings.ShowSettingFromFIle("ClinicForms/ImpressionList")
  If xlocat Then
    ' txtmonimpression.List = modString.GetStringArrayFromFile(xlocat, True)
  Endif

  FillCustomFormMenu()
  FillCustomMenu()
  SHowALgorithmList()
  If modBasic.$ClinConsultTelemed = "Remote" Then
    btnshowexpert.Visible = True
  Else
    btnshowexpert.Visible = False
  Endif

  ' txthistory.DictionaryPath = modBasic.$dictPathList
  ' txtnote.DictionaryPath = modBasic.$dictPathList
  ' txtsubject.DictionaryPath = modBasic.$dictPathList
  ' txtobject.DictionaryPath = modBasic.$dictPathList
  ' txtmanage.DictionaryPath = modBasic.$dictPathList
  ' txtplan.DictionaryPath = modBasic.$dictPathList
  ' txtmonproblem.DictionaryPath = modBasic.$dictPathList
  ' txtmontreatment.DictionaryPath = modBasic.$dictPathList
  ' txtmoninout.DictionaryPath = modBasic.$dictPathList
  ' txtmonplan.DictionaryPath = modBasic.$dictPathList
  If $UserRestrictPat Then
    RestrictUserAccessPat()
  Endif
  If $UserRestrict Then
    RestrictUserAccess()
  Endif
  If modBasic.$ClinPastDiagnosis Then
    Select modBasic.$ClinPastDiagnosis
      Case "Final Diagnosis", "Provisional Diagnosis", "Nursing Diagnosis"
        pnlolddiagnosis.Visible = True
      Case Else
        pnlolddiagnosis.Visible = False
    End Select
  Endif

  If modBasic.$CliniDiagnosticReport = "Disable" Then
    pnldiagnostic.Visible = False
  Else
    pnldiagnostic.Visible = True
  Endif

  If txtencid.Text Then
    GetEncounterValue()
  Else
    txtencid.SetFocus
  Endif

End

Public Sub WebForm_Open()

  modGeneralMain.RecordFormUse(Me)

End

''====================== PATIENT PROFILE =================================
Public Sub txtencid_Activate()

  btnwebcam_Click()

End

Public Sub btnencidsearch_Click()

  If Not txtencid.Text Then
    txtencid.Text = PatSearch("Encounter")
  Endif

End

Public Sub mnusearmulti_Click()

  If Not txtencid.Text Then
    txtencid.Text = GetEncid()
  Endif

End

Public Sub btnwebcam_Click()

  Dim xbarcode As String

  If txtencid.Text Then
    GetEncounterValue()
  Else
    xbarcode = QRScanValue("")
    If xbarcode Then
      txtencid.Text = modGeneral.GetEncounterFromBed(xbarcode)
    Endif
  Endif

End

Private Sub EnableContainers()

  pnldiagnosis.Enabled = True
  pnlsymphist.Enabled = True
  pnlexamnote.Enabled = True
  pnlintakeout.Enabled = True
  WebContainer92.Enabled = True
  pnlsoapmed.Enabled = True
  pnlmajsymp.Enabled = True
  pnlinprn.Enabled = True
  pnltelemed.Enabled = True

End

Private Sub GetEncounterValue()

  Dim res As Result
  Dim xallow As Boolean
  Dim yallow As Boolean
  Dim xpaid As Float

  ' If modPatientSub.LockEncounterDesk(Trim(txtencid.Text)) = False Then
  '   txtencid.Text = ""
  '   Message.Warning(("Encounter Locked"), ("OK"))
  '   ' Balloon.Delay = modBasic.$BalloonDelay
  '   txtencid.SetFocus
  ' Endif

  dtdob.Tag = ""
  If txtencid.Text Then
    If txtencid.Text = modBasic.$EncIdPrefix Then
    Else
      modSettings.SaveValuesToLog("LastValue/Encounter", Trim(txtencid.Text))
    Endif
    res = modDatabase.$myConn.Exec("select fldpatientval,flduserid from tblencounter where fldencounterval=&1", Trim(txtencid.Text))
    If res.Available = False Then
      modLinkDB.CheckEncDataRemote(Trim(txtencid.Text))
      txtencid.SetFocus
    Else
      If modBasic.$LockToOwnConsultant = "Yes" Then
        If res["flduserid"] = modBasic.$lbluser Then
          xallow = True
        Else
          xallow = False
        Endif
      Else
        xallow = True
      Endif
      If modBasic.$ClinPatientForms = "Paid" Then
        xpaid = modNonMedical.TotalPaidAmountbyPatient(modDatabase.$myConn, Trim(txtencid.Text))
        If xpaid > 0 Then
          yallow = True
        Else
          yallow = False
        Endif
      Else
        yallow = True
      Endif

      If xallow = True And If yallow = True Then
        txtpatientname.Text = modPatient.GetPatientNameByEnc(Trim(txtencid.Text))
        If txtpatientname.Text Then
          EnableContainers()
          txtgender.Text = modPatient.GetPatientSex(Trim(txtencid.Text))
          txtpatientaddress.Text = modPatient.GetPatientAddressByEnc(Trim(txtencid.Text))
          dtdob.Tag = modPatient.GetPatientBirthDay(Trim(txtencid.Text))
          modDateSub.GetAgeControlFromDate(dtdob.Tag, txtpatage, cmbpatageunit)

          $PatientNum = modPatient.GetPatientNoByEnc(Trim(txtencid.Text))
          $sTatus = modPatient.CurrentAdmissionStatus(Trim(txtencid.Text))
          txtnow.Text = $sTatus
          txtbedno.Text = modPatient.GetLocationSetting(Trim(txtencid.Text), $sTatus)
          $doa = modPatient.GetRecordDate(Trim(txtencid.Text))
          txtpatdoa.Text = modReportVar.GetDateTimeReport($doa, gb.GeneralDate)
          txtpatweight.Value = modClinic.GetBodyWeight(Trim(txtencid.Text))
          btnconsult.Tag = modPatient.GetAttendingConsultant(Trim(txtencid.Text))
          btnconsult.Text = modGeneral.GetUserFullName(btnconsult.Tag)
          modClinSub.GetPatientHeight(Trim(txtencid.Text), txtpatheight, cmbpatheightunit)
          modAppSupport.RecordPatientActivity("Patient Data", Me.Name, "EncounterID", Trim(txtencid.Text))
          UpdateTriage()
          $xFinClear = modNonMedical.GetFinanceClearance(Trim(txtencid.Text))
          $vidRoom = LCase(Trim(txtencid.Text) & Format(Now(), "yymmdd"))
          $VidIndex = modApplication.GetMD5SumString($vidRoom)
          Wait
          If modPatientSub.AllowEncIDHistory(Trim(txtencid.Text), modDatabase.$myConn) = True Then
            BlockDCButton()
            modImage.ShowPhotoSplash("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)))
            ''MAIN FORM
            BasicInfoPatient()
            txtencid.ReadOnly = True
            txtpatheight.SetFocus
          Else
            Me.Enabled = False
          Endif
        Else
          Message.Warning(("Encounter ID not found"), ("OK"))
          ' Balloon.Delay = modBasic.$BalloonDelay
          txtencid.SetFocus
        Endif
      Else
        Message.Warning("Not authorized", ("OK"))
      Endif
    Endif
  Endif

End

Public Sub UpdateTriage()

  txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))

End

Private Sub BlockDCButton()

  Dim xx As Boolean

  xx = modPatient.EnableClinicForm(txtnow.Text)
  tlbtnaddheight.Enabled = xx
  tlbtnaddbed.Enabled = xx
  tlbtnadwt.Enabled = xx
  dtdob.Enabled = xx
  btnpic.Enabled = xx
  btnselectuser.Enabled = xx

End

Private Sub RestrictUserAccessPat()

  If $UserRestrictPat.Exist("Bed Assignment") Then
    tlbtnaddbed.Visible = False
  Endif
  If $UserRestrictPat.Exist("Body Weight") Then
    tlbtnadwt.Visible = False
  Endif
  If $UserRestrictPat.Exist("Body Height") Then
    tlbtnaddheight.Visible = False
  Endif

End

''------- Basic Parameters
Public Sub btnpic_Click()

  Dim hForm As FmPersonImage

  If txtencid.Text Then
    hForm = New FmPersonImage("Patient", modPatient.GetPatientNoByEnc(Trim(txtencid.Text)), False)
    hForm.ShowModal
  Endif

End

Public Sub tlbtnaddheight_Click()

  If txtencid.Text Then
    If txtpatheight.Value Then
      If cmbpatheightunit.Text Then
        modClinSub.UpdatePatientHeight(Trim(txtencid.Text), txtpatheight.Value, cmbpatheightunit.Text)
        tlbtnaddheight.Enabled = False
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information updated", modBasic.$BalloonDelay))
      Endif
    Endif
  Endif

End

Public Sub tlbtnadwt_Click()

  If txtencid.Text Then
    If txtpatweight.Value Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", txtpatweight.Value)
      tlbtnadwt.Enabled = False
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

Public Sub dtdob_Click()

  Dim dtdate As Date

  If txtencid.Text Then
    dtdate = GetDateValue("Date of Birth of " & txtpatientname.Text, "DOBirth", dtdob.Tag)
    If dtdate Then
      modPatientSub.UpdatePatDOB(Trim(txtencid.Text), dtdate)
      modDateSub.GetAgeControlFromDate(dtdate, txtpatage, cmbpatageunit)
      dtdob.Tag = dtdate
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information updated", modBasic.$BalloonDelay))
    Endif
  Endif

End

''------------Hospital related parameters
Public Sub btnselectuser_Click()

  Dim xMedUser As String[]

  If txtencid.Text Then
    xMedUser = MedicalSelectedValue(("Select Consultant"), modBasic.$IPConsultUserList)
    If xMedUser And If xMedUser.Count Then
      btnconsult.Tag = xMedUser[0]
      btnconsult.Text = xMedUser[1]
    Else
      btnconsult.Tag = ""
      btnconsult.Text = ""
    Endif
    If btnconsult.Tag Then
      modPatientSub.UpdateAttendingConsultant(Trim(txtencid.Text), btnconsult.Tag)
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

Public Sub btnsms_Click()

  Dim xval As String

  If btnconsult.Tag Then
    xval = modDevice.SendSMSToInpatDoc(Trim(txtencid.Text), modGeneral.GetUserContact(btnconsult.Tag))
    If xval Then
      Message.Info(xval, ("OK"))
    Endif
  Endif

End

Public Sub tlbtnaddbed_Click()

  Dim xadmitId As String

  If txtencid.Text Then
    If txtnow.Text = "Admitted" Then
      txtbedno.Text = GetBedNumber(Trim(txtencid.Text))

    Else
      If modBasic.$WardAdmission = "Yes" Then
        If Message.Question(("Patient getting admitted. Are you sure?"), ("No"), ("Yes")) = 2 Then
          xadmitId = modPatientSub.GetPatientAdmission(Trim(txtencid.Text))
          txtnow.Text = "Admitted"
          txtbedno.Text = ""
          Me.Exec("Toastify({text: 'Patient Admitted', duration: 3000}).showToast()")
          ' Balloon.Delay = modBasic.$BalloonDelay
        Endif
      Endif

    Endif
  Endif

End

Public Sub btnconsult_Change()

  If btnconsult.Text = "" Then
    btnconsult.Tag = ""
  Endif

End

Public Sub tlbtnpayment_Click()

  If txtencid.Text Then
    modNonMedical.CurrentPayStatusMsg(Trim(txtencid.Text))
  Endif

End

Public Sub btnprofile_Click()

  Dim hForm As FmMinProfile

  hForm = New FmMinProfile(Trim(txtencid.Text))
  hForm.ShowModal()

End

''============================== MAIN FORM ================================
Private Sub GetDefaultBillingmodes()

  Dim xpackage As String

  $billReference = modNonMedical.GetFixedReference(Trim(txtencid.Text))
  Select $sTatus
    Case "Admitted", "Discharged", "LAMA", "Death", "Refer", "Absconder"
      $billModeTest = modNonMedical.GetAutoIPBillingPack("Test", Trim(txtencid.Text))
      $billModeRadio = modNonMedical.GetAutoIPBillingPack("Radio", Trim(txtencid.Text))
      $billModePharmacy = modNonMedical.GetAutoIPBillingPack("Pharmacy", Trim(txtencid.Text))
      $billModeEquipment = modNonMedical.GetAutoIPBillingPack("Equipment", Trim(txtencid.Text))
      $billModeProcedure = modNonMedical.GetAutoIPBillingPack("Procedure", Trim(txtencid.Text))
      $billModeService = modNonMedical.GetAutoIPBillingPack("Service", Trim(txtencid.Text))
      $billModeOthers = modNonMedical.GetAutoIPBillingPack("Others", Trim(txtencid.Text))
    Case Else
      xpackage = modNonMedical.DefaultBillingScheme(Trim(txtencid.Text), modBasic.$compID)
      $billModeTest = xpackage
      $billModeRadio = xpackage
      $billModePharmacy = xpackage
      $billModeEquipment = xpackage
      $billModeProcedure = xpackage
      $billModeService = xpackage
      $billModeOthers = xpackage
  End Select

End

Public Sub rbsi_Click()

  modSettings.SaveSettingsToFile("TestUnit/Default", "SI")

End

Public Sub rbmetric_Click()

  modSettings.SaveSettingsToFile("TestUnit/Default", "Metric")

End

Private Function LabUnitForm() As String

  Dim xx As String

  If rbsi.Value = True Then
    xx = "SI"
  Else
    xx = "Metric"
  Endif
  Return xx

End

Private Function NoteTakingTypeList() As String[]

  Dim xList As String[]
  Dim aList As String[]

  Select $sTatus
    Case "Absconder"
      aList = New String[]
    Case "Discharged", "LAMA", "Refer", "Death"
      xList = modMedicine.GetClinDischargeList($billReference)
      If xList And If xList.Count Then
        aList = xList
      Else
        aList = ["Condition of Discharge", "Advice on Discharge"]
      Endif
    Case Else
      aList = ["Progress Note", "Clinicians Note", "Nurses Note", "Transfer Note"]
  End Select

  Return aList

End

Private Function GetHistoryList() As String[]

  Dim xList As String[]
  Dim xnew As String[]
  Dim xfinal As String[]

  xList = New String[]
  xList.Add("General Complaints")
  xList.Add("History of Illness")
  xnew = modMedicine.GetClinHistoryList($billReference)
  If xnew And If xnew.Count Then
    xList.Insert(xnew)
  Else
    xList.Insert(modMedicine.GetDefaultClinHistories())
  Endif
  xList.Add("Initial Planning")

  xfinal = modString.BinaryDistinctStringArray(xList)
  Return xfinal

End

Private Sub PregnancySettings()

  If modPatient.GetPatientSex(Trim(txtencid.Text)) = "Male" Then
    cmbpregnancy.Text = "Not Applicable"
    cmbpregnancy.Enabled = False
    tlbtpregnancy.Enabled = False
  Else
    cmbpregnancy.List = ["1st trimester", "2nd trimester", "3rd trimester", "Breast feeding", "Non Pregnant"]
    cmbpregnancy.Text = modClinic.GetPregnancyStatus(Trim(txtencid.Text))
    cmbpregnancy.Enabled = True
  Endif

End

Private Sub BasicInfoPatient()

  Dim hPtForm As FmClinHistory
  Dim hDigForm As FmDiagnosticTab

  If txtencid.Text Then
    If modBasic.$AppSelect2JS = "Enable" Then
      cmbsympunit.ReadOnly = True
      modJavaScript.SetSelect2Combo(cmbsympunit)
    Endif
    GetDefaultBillingmodes()
    cmbinpathistory.List = GetHistoryList()
    cmbnote.List = NoteTakingTypeList()
    If $sTatus = "Admitted" Then
      cmbnotetype.List = ["All Types", "Progress Note", "Clinicians Note", "Nurses Note", "Transfer Note", "Patient Note"]
      cmbnotetype.Text = "All Types"
    Else
      cmbnotetype.Text = "All Types"
      cmbnotetype.Enabled = False
    Endif
    ButtonControl()
    If modBasic.$ClinPastDiagnosis Then
      Select modBasic.$ClinPastDiagnosis
        Case "Final Diagnosis", "Provisional Diagnosis", "Nursing Diagnosis"
          txtpastdiagnosis.Text = "<p>" & "<b>Past " & modBasic.$ClinPastDiagnosis & "</b><br>" & modPathoSub.GetSelectedPastDiagnosisList(modBasic.$ClinPastDiagnosis, $PatientNum, Trim(txtencid.Text)).Join(", ") & "</p>"
      End Select
    Endif
    lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
    lsticdisease.List = modPathoSub.GetSelectedDiagnosisList("Final Diagnosis", Trim(txtencid.Text))
    lstsyndrome.List = modPathoSub.GetSelectedDiagnosisList("Provisional Diagnosis", Trim(txtencid.Text))
    ''first tab
    txtadmitcause.Text = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "Cause of Admission")
    ShowChiefSymptomData()
    ShowAllTabs()
    $EBMDiagnosis = ""
    hDigForm = New FmDiagnosticTab(Trim(txtencid.Text), "height-tablet", pnldiagnostic)
    pnlhistory.Visible = True
    hPtForm = New FmClinHistory($PatientNum, "PatientID", False, "height-tablet", pnlhistory)
    ' TabStrip1.Index = 0
  Endif

End

Private Sub ButtonControl()

  Dim xx As Boolean
  Dim xval As String

  xx = modPatient.EnableClinicForm(txtnow.Text)
  If Not txtpatientname.Text Then
    xx = False
  Endif

  ''presenting complaints
  btnsympadd.Enabled = xx
  btnaddsymplist.Enabled = xx
  btnsympunit.Enabled = xx
  btnsympdura.Enabled = xx
  btnsympedit.Enabled = xx
  btnsympdel.Enabled = xx
  grdchiefsymptom.Enabled = xx
  ''cause of admission
  btnadmitcause.Enabled = xx
  ''patient history
  tlbtnhistory.Enabled = xx
  ''clinical findings
  btnfinadd.Enabled = xx
  btnaddexamlistmain.Enabled = xx
  btnaddexamlistmainall.Enabled = xx
  btnaddscales.Enabled = xx
  btnfindcomponent.Enabled = xx
  btnfindflag.Enabled = xx
  btnfindelete.Enabled = xx
  GridView1.Enabled = xx
  ' mnuneurology.Enabled = xx
  ''body wt
  btnaddwt.Enabled = xx
  btneditwt.Enabled = xx
  grdwt.Enabled = xx
  ''input/output
  btnaddinput.Enabled = xx
  btneditinput.Enabled = xx
  btaddoutput.Enabled = xx
  btneditout.Enabled = xx
  grdintake.Enabled = xx
  grdoutput.Enabled = xx
  ''clinical note
  ' btnoteadd.Enabled = xx
  ' btnotedit.Enabled = xx
  ''set consult
  btnconsult.Enabled = xx
  ''planning
  btnaddplan.Enabled = xx

  ''symptoms
  btnaddsympfree.Enabled = xx
  btnaddsymptom.Enabled = xx
  btndelsymptom.Enabled = xx
  btnmajsymplock.Enabled = xx
  btnsymseverity.Enabled = xx
  btnmajsympinfo.Enabled = xx
  grdsymptom.Enabled = xx
  ''provisional Diagnosis
  tlbtndelprov.Enabled = xx
  btnprovcustom.Enabled = xx
  tbnprovdisease.Enabled = xx
  btnprovsyndro.Enabled = xx
  ''final diagnosis
  tlbtndelfinal.Enabled = xx
  btnfinalcustom.Enabled = xx
  tbnfinaldisease.Enabled = xx
  btnfinalsyndro.Enabled = xx
  ''drug allergy
  tlbtndelallergy.Enabled = xx
  btnallergy.Enabled = xx
  btnallergymanual.Enabled = xx
  ''change status
  mnupatappl.Enabled = xx
  ''lab request
  mnulab.Enabled = xx
  ''radiology request
  mnuradioreq.Enabled = xx
  ''pharmacy request
  grdfluid.Enabled = xx
  grdmedicine.Enabled = xx
  grdmedprn.Enabled = xx
  ''medical product
  btnBlood.Enabled = xx
  ''major proced
  mnumajor.Enabled = xx
  ''consultation
  mnuconsult.Enabled = xx
  ''P/O intake
  mnuintake.Enabled = xx
  ''monitoring
  mnumonitor.Enabled = xx
  ''demographic
  mnudemogr.Enabled = xx
  ''images
  mnuscreendraw.Enabled = xx
  ''equipment
  mnuequipment.Enabled = xx
  mnudeviceuse.Enabled = xx
  ''minor procedure
  mnuminiproc.Enabled = xx
  ''extra procedure
  mnuextprocedure.Enabled = xx
  ''drug dosing
  mnurecdose.Enabled = xx
  btnroutstart.Enabled = xx
  btnroutdose.Enabled = xx
  btnroutfreq.Enabled = xx
  btnroutdays.Enabled = xx
  btnroutstatus.Enabled = xx
  btnstatstart.Enabled = xx
  btnstatdose.Enabled = xx
  btnstatfreq.Enabled = xx
  btnstatdays.Enabled = xx
  btnstatstatus.Enabled = xx
  ''fluid
  btnfluiddose.Enabled = xx
  btnfluidfreq.Enabled = xx
  btnfluiddays.Enabled = xx
  btnfluidstatus.Enabled = xx
  ''event timing
  mnuevent.Enabled = xx
  ''triage
  mnutriage.Enabled = xx
  ''vital exam
  ' btnvital.Enabled = xx
  mnuexam.Enabled = xx
  ''hepatc/pregnancy
  tlbthepatic.Enabled = xx
  tlbtpregnancy.Enabled = xx
  ''gen service
  mnugenservice.Enabled = xx
  ''telemed
  btnquery.Enabled = xx
  btngetfeed.Enabled = xx
  ''menu
  mnunewrequest.Enabled = xx
  mnuactivity.Enabled = xx
  mnucustform.Enabled = xx
  mnustruct.Enabled = xx

  If xx = True Then
    mnudiscexam.Visible = False
    mnuexitpass.Visible = False
    mnudiscrollback.Visible = False
    If $sTatus = "Admitted" Then
      mnuadmission.Visible = True
      mnudischarge.Visible = True
      mnustartlama.Visible = True
      mnustartdeath.Visible = True
      mnurefer.Visible = True
      mnuabsconder.Visible = True
    Endif

  Else If xx = False Then
    mnudiscexam.Visible = True
    mnuexitpass.Visible = True
    mnudiscrollback.Visible = True
    If $sTatus = "Discharged" Then
      mnudiscrep.Visible = True
    Else If $sTatus = "LAMA" Then
      mnulama.Visible = True
    Else If $sTatus = "Death" Then
      mnudeath.Visible = True
    Else If $sTatus = "Refer" Then
      mnurefercert.Visible = True
    Endif

  Endif

  If $sTatus = "Absconder" Then
    GetTabStripState(False)
    mnureportall.Enabled = False
    mnuhistoryall.Enabled = False
    mnuclinreport.Enabled = False
    mnucustomrepo.Enabled = False
  Endif

  xval = modBasic.$LockDiagnosisList
  If xval = "No" Then
  Else
    btnprovcustom.Enabled = False
    btnfinalcustom.Enabled = False
  Endif

End

Private Sub GetTabStripState(xBool As Boolean)

  pnlsymphist.Enabled = xBool
  pnlexamnote.Enabled = xBool
  pnldiagnosis.Enabled = xBool
  pnlintakeout.Enabled = xBool
  pnlsoapmed.Enabled = xBool
  pnlinprn.Enabled = xBool
  pnlmajsymp.Enabled = xBool

End

Private Sub RestrictUserAccess()

  If $UserRestrict.Exist("Presenting Complaints") Then
    btnsympadd.Visible = False
    btnaddsymplist.Visible = False
    btnsympunit.Visible = False
    btnsympdura.Visible = False
    btnsympedit.Visible = False
    btnsympdel.Visible = False
  Endif
  If $UserRestrict.Exist("Cause of Admission") Then
    btnadmitcause.Visible = False
  Endif
  If $UserRestrict.Exist("Patient History") Then
    tlbtnhistory.Visible = False
  Endif
  If $UserRestrict.Exist("Clinical Findings") Then
    btnfinadd.Visible = False
    btnaddexamlistmain.Visible = False
    btnaddexamlistmainall.Visible = False
    btnaddscales.Visible = False
    btnfindcomponent.Visible = False
    btnfindflag.Visible = False
    btnfindelete.Visible = False
  Endif
  If $UserRestrict.Exist("Body Weight") Then
    btnaddwt.Visible = False
    btneditwt.Visible = False
  Endif
  If $UserRestrict.Exist("Input Output") Then
    btnaddinput.Visible = False
    btneditinput.Visible = False
    btaddoutput.Visible = False
    btneditout.Visible = False
  Endif
  If $UserRestrict.Exist("Clinical Notes") Then
    btnoteadd.Visible = False
    btnotedit.Visible = False
  Endif
  If $UserRestrict.Exist("Therapeutic Planning") Then
    btnaddplan.Visible = False
  Endif

  If $UserRestrict.Exist("Symptoms Addition") Then
    btnaddsympfree.Visible = False
    btnaddsymptom.Visible = False
    btndelsymptom.Visible = False
    btnmajsymplock.Visible = False
    btnsymseverity.Visible = False
    btnmajsympinfo.Visible = False
  Endif

  If $UserRestrict.Exist("Provisional Diagnosis") Then
    tlbtndelprov.Visible = False
    btnprovcustom.Visible = False
    tbnprovdisease.Visible = False
    btnprovsyndro.Visible = False
  Endif
  If $UserRestrict.Exist("Final Diagnosis") Then
    tlbtndelfinal.Visible = False
    btnfinalcustom.Visible = False
    tbnfinaldisease.Visible = False
    btnfinalsyndro.Visible = False
  Endif
  If $UserRestrict.Exist("Drug Allergy") Then
    tlbtndelallergy.Visible = False
    btnallergy.Visible = False
    btnallergymanual.Visible = False
  Endif
  If $UserRestrict.Exist("Change Status") Then
    mnupatappl.Visible = False
  Endif
  If $UserRestrict.Exist("Hepatic Status") Then
    tlbthepatic.Visible = False
  Endif
  If $UserRestrict.Exist("Pregnancy Status") Then
    tlbtpregnancy.Visible = False
  Endif

  If $UserRestrict.Exist("Laboratory Request") Then
    mnulab.Visible = False
  Endif
  If $UserRestrict.Exist("Radiology Request") Then
    mnuradioreq.Visible = False
  Endif
  If $UserRestrict.Exist("Pharmacy Request") Then
    mnumedicine.Visible = False
  Endif
  If $UserRestrict.Exist("Products Request") Then
    btnBlood.Visible = False
  Endif

  If $UserRestrict.Exist("Procedure Plan") Then
    mnumajor.Visible = False
  Endif
  If $UserRestrict.Exist("Extra Procedure Plan") Then
    mnuextprocedure.Visible = False
  Endif
  If $UserRestrict.Exist("Consultation Plan") Then
    mnuconsult.Visible = False
  Endif
  If $UserRestrict.Exist("PO Intake Plan") Then
    mnuintake.Visible = False
  Endif
  If $UserRestrict.Exist("Monitoring Plan") Then
    mnumonitor.Visible = False
  Endif

  If $UserRestrict.Exist("Demographics") Then
    mnudemogr.Visible = False
  Endif
  If $UserRestrict.Exist("General Images") Then
    mnuimagepat.Visible = False
    mnuscreendraw.Visible = False
  Endif
  If $UserRestrict.Exist("Video Data") Then
    mnuvideodata.Enabled = False
  Endif
  If $UserRestrict.Exist("DICOM Images") Then
    mnudicomimage.Visible = False
  Endif
  If $UserRestrict.Exist("PACS Images") Then
    mnupacsimage.Visible = False
  Endif
  If $UserRestrict.Exist("Equipments Used") Then
    mnuequipment.Visible = False
  Endif
  If $UserRestrict.Exist("Devices Used") Then
    mnudeviceuse.Visible = False
  Endif
  If $UserRestrict.Exist("Minor Procedure") Then
    mnuminiproc.Visible = False
  Endif
  If $UserRestrict.Exist("General Services") Then
    mnugenservice.Visible = False
  Endif
  If $UserRestrict.Exist("Medicine Dosing") Then
    mnurecdose.Visible = False
    btnroutstart.Visible = False
    btnroutdose.Visible = False
    btnroutfreq.Visible = False
    btnroutdays.Visible = False
    btnroutstatus.Visible = False
    btnstatstart.Visible = False
    btnstatdose.Visible = False
    btnstatfreq.Visible = False
    btnstatdays.Visible = False
    btnstatstatus.Visible = False
  Endif
  If $UserRestrict.Exist("IV Infusion") Then
    btnfluiddose.Visible = False
    btnfluidfreq.Visible = False
    btnfluiddays.Visible = False
    btnfluidstatus.Visible = False
  Endif
  If $UserRestrict.Exist("Event Timing") Then
    mnuevent.Visible = False
  Endif
  If $UserRestrict.Exist("Essential Examinations") Then
    mnuexam.Visible = False
  Endif
  If $UserRestrict.Exist("Triage Examinations") Then
    mnutriage.Visible = False
  Endif

End

Private Sub ShowTelemedSaved()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldteleuser,fldsms,fldurgency,fldrequest,fldcoment,flduserid,fldtime,fldvidroom,fldvidpass,fldvidserver from tbltelemedtalk where fldtalkid=&1", $VidIndex)
  If res.Available Then
    res.MoveLast
    cmbexpert.Tag = res["fldteleuser"]
    If cmbexpert.Tag Then
      cmbexpert.Text = modGeneral.GetTeleMedUserName(cmbexpert.Tag)
    Endif
    chkquerysms.Value = res["fldsms"]
    cmburgency.Text = res["fldurgency"]
    txtquery.RichText = res["fldrequest"]

    If Not res["fldcoment"] Then
      txtcamus.Text = res["fldvidserver"] &/ "room" &/ res["fldvidroom"]
      txtpassword.Text = res["fldvidpass"]
      If txtcamus.Text Then
        pnlvideocall.Visible = True
      Endif

    Endif
  Endif

End

Private Sub ShowAllTabs()

  If txtencid.Text Then
    ' If TabStrip1.Index = 0 Then
    txtadmitcause.Text = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), "Cause of Admission")
    ShowChiefSymptomData()
    ' Else If TabStrip1.Index = 1 Then
    $dtFinding = Now()
    lbldtfind.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), $dtFinding)

    FillExamtable()
    WeightGrid()
    ' Else If TabStrip1.Index = 2 Then
    $dtFluid = Now()
    lbldtfluid.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), $dtFluid)
    $OutFluid = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldfluid as col from tblbodyfluid"))
    rbfood.Value = True
    ShowIntakeFoodGrid()
    SHowOutputFluid()
    ' Else If TabStrip1.Index = 3 Then
    ' ' rbquantifinding.Value = True
    ' ' SelectDIagnoTest()
    ' Else If TabStrip1.Index = 4 Then
    ' ' dtmonitor.Value = Now()
    ' ' lbldtmonitor.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), dtmonitor.Value)
    ' ' If modBasic.$ItemListFormat = "GridView" Then
    ' ' Else
    ' '   cmbmonexam.List = modString.GetListFromCompareVariant(modFixPatho.$ExaminationCompVar, "fldexamid", "fldcategory", "Nursing Examinations", True)
    ' ' Endif
    ' ' ShowMonitoring()
    ' Else If TabStrip1.Index = 5 Then
    ' ' dtnote.Value = Now()
    ' ' lbldtnote.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), Now())
    ' ShowNoteTypeTime()
    ' Else If TabStrip1.Index = 6 Then
    ' ' dtplan.Value = Now()
    ' ' lbldtplan.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), Now())
    ShowProblemList()
    ' Else If TabStrip1.Index = 7 Then
    rbvalue.Value = True
    ShowMedicines("Current")
    ' Else If TabStrip1.Index = 8 Then
    rbvalueR.Value = True
    ShowMedPRN("Current")
    ' Else If TabStrip1.Index = 9 Then
    ShowMedFluids("Current")
    ' Else If TabStrip1.Index = 10 Then
    cmbhepatic.List = ["Impaired", "Normal"]
    cmbhepatic.Text = modClinic.GetHepaticStatus(Trim(txtencid.Text))
    PregnancySettings()
    ShowSymptomData()
    ShowPlanningFinal()
    ShowTelemedSaved()
    ' Endif
  Endif

End

''======================= DIAGNOSIS and ALLERGY ======================
'''------------------------ ALLERGY---------------------------
Public Sub tlbtndelallergy_Click()

  Dim res As Result

  If txtencid.Text Then
    If lstallergy.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lstallergy.Text, Trim(txtencid.Text), "Allergic Drugs", True)
        res["fldsave"] = False
        res["xyz"] = False
        res.Update
        lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
      Endif
    Endif
  Endif

End

Public Sub chkallergy_Click()

  lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)

End

Public Sub btnallergymanual_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Drug Allergy"), ("Drug Allergy"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Allergic Drugs", Trim(txtencid.Text), xx, "", "")
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
      lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
    Endif
  Endif

End

Public Sub btnallergy_Click()

  Dim sName As String[]
  Dim sText As String
  Dim druglist As String[]

  If txtencid.Text Then
    druglist = modString.GetRemainingArray(modBasic.$GenericMedName, lstallergy.List)
    sName = GridListView(("Select Drugs"), druglist)
    If sName And If sName.Count Then
      For Each sText In sName
        modPatientGeneral.AddPatientFindings("Allergic Drugs", Trim(txtencid.Text), sText, "", "")
      Next
    Endif
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    lstallergy.List = modPathoSub.GetAllergyMedicineList(Trim(txtencid.Text), chkallergy.Value)
  Endif

End

''-------------------------- provisional diagnosis -----------------------------
Public Sub tlbtndelprov_Click()

  Dim res As Result

  If txtencid.Text Then
    If lstsyndrome.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lstsyndrome.Text, Trim(txtencid.Text), "Provisional Diagnosis", True)
        res["fldsave"] = False
        res["xyz"] = False
        res.Update
        lstsyndrome.List = modPathoSub.GetSelectedDiagnosisList("Provisional Diagnosis", Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnprovsyndro_Click()

  Dim sName As String[]
  Dim xGroup As String

  If txtencid.Text Then
    If MMain.$Ayurveda = "Yes" Then
      sName = AyurvedicDiagnosis(modAyurv.$AyurvedicDiagnosis)
    Else
      If modBasic.$ClinICDPunchFormat = "GridView" Then
        sName = ICDGridView("Select Diseases")
      Else
        xGroup = modPathoSub.GetDiagnoGroupForService(txtbedno.Text)
        If xGroup Then
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoChapterGrouped, xGroup, modBasic.$FixDiagnoGroupER, modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup)
        Else
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoChapterGrouped, modBasic.$FixDiagnoGroupOPD, modBasic.$FixDiagnoGroupER, modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup)
        Endif
      Endif
    Endif
    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[2])
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
        lstsyndrome.List = modPathoSub.GetSelectedDiagnosisList("Provisional Diagnosis", Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnprovcustom_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Provisional Diagnosis"), ("Provisional Diagnosis"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), xx, "Other", "Other")
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
      lstsyndrome.List = modPathoSub.GetSelectedDiagnosisList("Provisional Diagnosis", Trim(txtencid.Text))
    Endif
  Endif

End

Public Sub tbnprovdisease_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If modBasic.$ProvDiagnosisRule = "Obstetrics" Then
      sName = DiagnoObstetrics(Trim(txtencid.Text), True)
    Else
      sName = GetSyndromes()
    Endif

    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Provisional Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[1])
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
        lstsyndrome.List = modPathoSub.GetSelectedDiagnosisList("Provisional Diagnosis", Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnregimprov_Click()

  Dim hForm As FmDrugDose

  If lstsyndrome.Text Then
    hForm = New FmDrugDose(Trim(txtencid.Text), lstsyndrome.Text)
    hForm.ShowModal
  Endif

End

Public Sub lstsyndrome_Click()

  $EBMDiagnosis = modPathoSub.GetDiagnosisCodePatient(Trim(txtencid.Text), lstsyndrome.Text)

End

''----------------------------- final diagnosis -----------------------
Public Sub tlbtndelfinal_Click()

  Dim res As Result

  If txtencid.Text Then
    If lsticdisease.Text Then
      If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
        res = modDatabase.$myConn.Edit("tblpatfindings", "fldcode=&1 and fldencounterval=&2 and fldtype=&3 and fldsave=&4", lsticdisease.Text, Trim(txtencid.Text), "Final Diagnosis", True)
        res["fldsave"] = False
        res["xyz"] = False
        res.Update
        lsticdisease.List = modPathoSub.GetSelectedDiagnosisList("Final Diagnosis", Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub tbnfinaldisease_Click()

  Dim sName As String[]

  If txtencid.Text Then
    If modBasic.$FinalDiagnosisRule = "Obstetrics" Then
      sName = DiagnoObstetrics(Trim(txtencid.Text), True)
    Else
      sName = GetSyndromes()
    Endif

    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[1])
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
        lsticdisease.List = modPathoSub.GetSelectedDiagnosisList("Final Diagnosis", Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnfinalsyndro_Click()

  Dim sName As String[]
  Dim xGroup As String

  If txtencid.Text Then
    If MMain.$Ayurveda = "Yes" Then
      sName = AyurvedicDiagnosis(modAyurv.$AyurvedicDiagnosis)
    Else
      If modBasic.$ClinICDPunchFormat = "GridView" Then
        sName = ICDGridView("Select Diseases")
      Else
        xGroup = modPathoSub.GetDiagnoGroupForService(txtbedno.Text)
        If xGroup Then
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoChapterGrouped, xGroup, modBasic.$FixDiagnoGroupER, modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup)
        Else
          sName = ICDTree(modDatabase.$icdConn, "Disease", modBasic.$ClinDiagnoChapterGrouped, modBasic.$FixDiagnoGroupOPD, modBasic.$FixDiagnoGroupER, modBasic.$ClinDiagnoSelectGrouped, modBasic.$ClinDiagnoSelectERGroup)
        Endif
      Endif
    Endif
    If sName Then
      If sName[1] And If sName[0] Then
        modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), sName[0], sName[1], sName[2])
        Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
        lsticdisease.List = modPathoSub.GetSelectedDiagnosisList("Final Diagnosis", Trim(txtencid.Text))
      Endif
    Endif
  Endif

End

Public Sub btnfinalcustom_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = InputBox(("Enter custom Final Diagnosis"), ("Final Diagnosis"), "")
    If xx Then
      modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), xx, "Other", "Other")
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
      lsticdisease.List = modPathoSub.GetSelectedDiagnosisList("Final Diagnosis", Trim(txtencid.Text))
    Endif
  Endif

End

Public Sub btnregimfinal_Click()

  Dim hForm As FmDrugDose

  If lsticdisease.Text Then
    hForm = New FmDrugDose(Trim(txtencid.Text), lsticdisease.Text)
    hForm.ShowModal
  Endif

End

Public Sub lsticdisease_Click()

  $EBMDiagnosis = modPathoSub.GetDiagnosisCodePatient(Trim(txtencid.Text), lsticdisease.Text)

End

'''======================= MAIN MENUS =============================
''---------------------------File Menus ---------------------------------------------
Public Sub mnublank_Click()

  ' btnblankform_Click()

End

Public Sub mnuscanfile_Click()

  Dim hForm As FmScanForm

  If txtencid.Text Then
    hForm = New FmScanForm(Trim(txtencid.Text), "Past Documents", "")
    hForm.ShowModal
  Endif

End

Public Sub mnulastencid_Click()

  txtencid.Text = modSettings.ShowLogValues("LastValue/Encounter")

End

Public Sub mnupatlock_Click()

  If txtencid.Text Then
    modPatientSub.LockPatientActivity(Me.Name, Trim(txtencid.Text))
  Endif

End

''---------------------------- Request Menu ---------------------
Public Sub btnhistoryall_Menu()

  mnuhistoryall.Popup(btnhistoryall)

End

Public Sub btnarchiveall_Menu()

  mnuarchiveall.Popup(btnarchiveall)

End

Public Sub btnreportsall_Menu()

  mnureportall.Popup(btnreportsall)

End

Public Sub mnulab_Click()

  Dim hForm As FmTestList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Test") = True Then
      hForm = New FmTestList(Trim(txtencid.Text), $billModeTest)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuradioreq_Click()

  Dim hForm As FmRadioList

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Radio") = True Then
      hForm = New FmRadioList(Trim(txtencid.Text), $billModeRadio)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnumedicine_Click()

  Dim hForm As FmMedOrder

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Pharmacy") = True Then
      If modBasic.$MedRequestForm = "Separate" Then
      Else
        hForm = New FmMedOrder(Trim(txtencid.Text), $sTatus, $billModePharmacy)
        hForm.ShowModal
      Endif
    Endif
  Endif

End

Public Sub mnumajor_Click()

  Dim hForm As FmMajorProced

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMajorProced(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuextprocedure_Click()

  ' Dim hForm As FmAddExtraProced
  '
  ' If txtencid.Text Then
  '   hForm = New FmAddExtraProced(Trim(txtencid.Text), $billModeProcedure)
  '   hForm.ShowModal
  ' Endif

End

Public Sub mnuconsult_Click()

  Dim hForm As FmMiniConsult

  If txtencid.Text Then
    hForm = New FmMiniConsult(Trim(txtencid.Text), $billModeService)
    hForm.ShowModal
  Endif

End

Public Sub mnumonitor_Click()

  Dim hForm As FmReqVital

  If txtencid.Text Then
    hForm = New FmReqVital(Trim(txtencid.Text), $sTatus)
    hForm.ShowModal
  Endif

End

Public Sub mnuintake_Click()

  Dim hForm As FmFoodPlan

  If txtencid.Text Then
    hForm = New FmFoodPlan(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnucloudai_Click()

  Dim xx As String

  If txtencid.Text Then
    xx = PatCloudAI(Trim(txtencid.Text), "", "")
  Endif

End

'''-------------------- Data Entry ---------------------
Public Sub btnblankform_Click()

  Me.Parent.DeleteChildren()
  modGeneralMain.LoadInpatientForm()

End

Public Sub mnudeviceuse_Click()

  Dim hForm As FmDeviceUse

  If txtencid.Text
    hForm = New FmDeviceUse(Trim(txtencid.Text), "Devices")
    hForm.ShowModal
  Endif

End

Public Sub mnuexam_Click()

  Dim hForm As FmVital

  If txtencid.Text
    hForm = New FmVital(Trim(txtencid.Text), "widesize-popupform")
    hForm.ShowModal
    txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))
  Endif

End

Public Sub mnudemogr_Click()

  Dim hForm As FmPatdemograph

  If txtencid.Text Then
    hForm = New FmPatdemograph(Trim(txtencid.Text), "Clinical")
    hForm.ShowModal
  Endif

End

Public Sub mnurecdose_Click()

  Dim hForm As FmDosecount

  If txtencid.Text Then
    hForm = New FmDosecount(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub btnBlood_Click()

  Dim hForm As FmBloodReq

  If txtencid.Text Then
    hForm = New FmBloodReq(Trim(txtencid.Text))
    hForm.ShowModal
  Endif

End

Public Sub mnuimagepat_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("IMAGE", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub mnudicomimage_Click()

  Dim hForm As FmPatImage

  If txtencid.Text Then
    hForm = New FmPatImage("DICOM", Trim(txtencid.Text), "")
    hForm.ShowModal
  Endif

End

Public Sub mnupacsimage_Click()

  Dim hForm As FmPacsShow

  If txtencid.Text Then
    hForm = New FmPacsShow(Trim(txtencid.Text), "Visit")
    hForm.ShowModal
  Endif

End

Public Sub mnupacshist_Click()

  Dim hForm As FmPacsShow

  If txtencid.Text Then
    hForm = New FmPacsShow(Trim(txtencid.Text), "History")
    hForm.ShowModal
  Endif

End

Public Sub mnuvideodata_Click()

  Dim hForm8 As FmPatVideo

  If txtencid.Text Then
    hForm8 = New FmPatVideo("VIDEO", Trim(txtencid.Text), "")
    hForm8.ShowModal
  Endif

End

Public Sub mnuscreendraw_Click()

  Dim xxx As String
  Dim xval As String

  If txtencid.Text Then
    xxx = CustomDraw()
    If xxx Then
      xval = modImage.SaveClinicScreenDraw(Trim(txtencid.Text), modString.GetDateString(Now()), xxx)
    Endif
  Endif

End

Public Sub mnuequipment_Click()

  Dim hForm As FmEquipment

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Equipment") = True Then
      hForm = New FmEquipment(Trim(txtencid.Text), $billModeEquipment)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuminiproc_Click()

  Dim hForm As FmMiniProcedure

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Procedure") = True Then
      hForm = New FmMiniProcedure(Trim(txtencid.Text), $billModeProcedure)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnugenservice_Click()

  Dim hForm As FmMiniService

  If txtencid.Text Then
    If modNonMedical.AllowEntryWithDeposit(Trim(txtencid.Text), "Service") = True Then
      hForm = New FmMiniService(Trim(txtencid.Text), $billModeService, $billModeProcedure, $billModeOthers)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnutriage_Click()

  Dim hForm As FmTriage

  If txtencid.Text
    hForm = New FmTriage("Triage Examinations", Trim(txtencid.Text))
    hForm.ShowModal
    txtcolor.Background = modPatient.GetPatientColor(Trim(txtencid.Text))
  Endif

End

Public Sub mnuevent_Click()

  Dim hForm As FmEventTime

  If txtencid.Text Then
    hForm = New FmEventTime(Trim(txtencid.Text), "Events")
    hForm.ShowModal
  Endif

End

'-------------------- Other Examination ----------------
Public Sub mnuneurology_Click()

  ' Dim hForm As FmNeuroExam
  Dim hForm As FmExamAttach

  ' hForm = New FmNeuroExam(Trim(txtencid.Text), "Examination")
  hForm = New FmExamAttach(Trim(txtencid.Text), "Neurology", "Examination", True)
  modAppSupport.FindWorSpace(modHelpVariable.$LogInCategory).Add(hForm)

End

''------------------------------------- Status Menu ----------------------------
Private Sub CopyProvisToFinalDiagnosis()

  Dim res As Result

  res = modDatabase.$myConn.Exec("select fldcode,fldcodeid,fldcodenew from tblpatfindings where fldencounterval=&1 and fldtype=&2 and fldsave=&3", Trim(txtencid.Text), "Provisional Diagnosis", True)
  If res.Available Then
    For Each res
      modPatientGeneral.AddPatientFindings("Final Diagnosis", Trim(txtencid.Text), res["fldcode"], res["fldcodenew"], res["fldcodeid"])
    Next
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    lsticdisease.List = modPathoSub.GetSelectedDiagnosisList("Final Diagnosis", Trim(txtencid.Text))
  Endif

End

Private Function GetSiblingAdmission(encid As String) As String[]

  Dim res As Result
  Dim res1 As Result
  Dim xxx As String[]

  xxx = New String[]
  If txtgender.Text = "Female" Then
    res = modDatabase.$myConn.Exec("select fldencounterval from tblencounter where fldadmission=&1 and fldpatientval in(select fldbabypatno from tblconfinement where fldencounterval=&2)", "Admitted", encid)
    If res.Available Then
      For Each res
        xxx.Add(res["fldencounterval"])
      Next
    Endif
  Endif

  res1 = modDatabase.$myConn.Exec("select fldencounterval from tblconfinement where fldbabypatno in(select fldpatientval from tblencounter where fldencounterval=&1) and fldencounterval in(select fldencounterval from tblencounter where fldadmission=&2)", encid, "Admitted")
  If res1.Available Then
    xxx.Add(res1["fldencounterval"])
  Endif

  Return xxx

End

Public Sub mnudischarge_Click()

  Dim xx As String
  Dim xmsg As String
  Dim xinfnt As String[]
  Dim xdisch As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        xdisch = ""
        xinfnt = GetSiblingAdmission(Trim(txtencid.Text))
        If xinfnt And If xinfnt.Count Then
          xdisch = xdisch & "Mother/Newborns currently admitted are: " & xinfnt.Join(" , ") & "<br><br>"
        Endif
        xdisch = xdisch & "Patient information will be locked. <b>Do you want to initiate discharge process?</b>"
        If Message.Question((xdisch), ("No"), ("Yes")) = 2 Then
          xx = InputCombo("Current Condition of Patient", Trim(txtencid.Text), ["Recovered", "Improved", "Unchanged", "Worse"], "", True)
          If xx Then
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Discharged", xx)
            modDatabase.$myConn.Commit
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          GetEncounterValue()
        Endif
      Endif

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

Public Sub mnustartlama_Click()

  Dim xx As String
  Dim xmsg As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        If Message.Question(("Patient information will be locked.<br> <b>Do you want to mark as LAMA?</b>"), ("No"), ("Yes")) = 2 Then
          xx = GetTextArea(("Reason for LAMA"), "")
          If xx Then
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "LAMA", xx)
            modDatabase.$myConn.Commit
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          GetEncounterValue()
        Endif
      Endif

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

Public Sub mnurefer_Click()

  Dim xList As String[]
  Dim xrefer As String
  Dim xmsg As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        If Message.Question(("Patient information will be locked. <b>Do you want to mark as Referred?</b>"), ("No"), ("Yes")) = 2 Then
          xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldlocation from tblreferlist"))
          xrefer = InputCombo("Select Refer Location from List", "Refer To", xList, "", False)
          If xrefer Then
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Refer", xrefer)
            modDatabase.$myConn.Commit
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          GetEncounterValue()
        Endif
      Endif

    Endif

    If Message.Question("Upload Data to Repository now?", ("No"), ("Yes")) = 2 Then
      modDataRepo.GetRepoUploadEncounterData(Trim(txtencid.Text))
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

Public Sub mnustartdeath_Click()

  Dim xx As String
  Dim xmsg As String

  If txtencid.Text Then
    If Not lsticdisease.Count Then
      If Message.Question(("Final Diagnosis is not provided. <b>Do you want to copy Provisional Diagnosis to Final DIagnosis?</b>"), ("No"), ("Yes")) = 2 Then
        If lstsyndrome.Count Then
          CopyProvisToFinalDiagnosis()
        Endif
      Endif
    Else

      If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
        If Message.Question(("Patient information will be locked.<br> <b>Do you want to mark as Death?</b>"), ("No"), ("Yes")) = 2 Then
          xx = GetTextArea(("Reason for Death"), "")
          If xx Then
            modDatabase.$myConn.Begin
            xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
            modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Death", xx)
            modDatabase.$myConn.Commit
            If xmsg Then
              Message.Warning(xmsg, "OK")
            Endif
          Endif
          GetEncounterValue()
        Endif
      Endif

    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

Public Sub mnuabsconder_Click()

  Dim xmsg As String

  If txtencid.Text Then
    If modPatientSub.GetClearanceForExit(Trim(txtencid.Text)) = True Then
      If Message.Question(("Patient information will be locked.<br> <b>Do you want to mark as Absconder?</b>"), ("No"), ("Yes")) = 2 Then
        modDatabase.$myConn.Begin
        xmsg = modBillings.ExitPatientWithBillingOfBed(Trim(txtencid.Text))
        modPatientSub.SetAbsconderProfile($PatientNum, "Absconder", "Active")
        modPatientSub.UpdateCurrentStatus(Trim(txtencid.Text), "Absconder", "")
        modDatabase.$myConn.Commit
        If xmsg Then
          Message.Warning(xmsg, "OK")
        Endif
        GetEncounterValue()
      Endif
    Endif
  Endif

Catch
  modDatabase.$myConn.Rollback
  modHelpVariable.CreateErrorReport()

End

''------------------------------------- Certificate Menu ---------------------------------
Public Sub mnudiscexam_Click()

  Dim hForm As FmTriage
  Dim xList As String[]

  If txtencid.Text Then
    xList = modString.GetListFromCompareVariant(modFixPatho.$ExaminationCompVar, "fldexamid", "fldcategory", "Discharge Examinations", True)
    If xList And If xList.Count Then
      hForm = New FmTriage("Discharge Examinations", Trim(txtencid.Text))
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuadmission_Click()

  Dim hCls As CReportCustom
  Dim xPath As String

  If txtencid.Text Then
    If $sTatus = "Admitted" Then
      If modSettings.ShowSettingFromFIle("Admission Report/Name") Then
        hCls = New CReportCustom(Trim(txtencid.Text), "Admission Report", "ReportSize", LabUnitForm())
        hCls.Preview()
      Else
        xPath = modPatReports.ShowAdmissionSheet(Trim(txtencid.Text))
        modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
      Endif
    Endif
  Endif

End

''--------------- Certificate ------------
Private Function AllowDischargePrint() As Boolean

  Dim xAllow As Boolean
  Dim xexpense As Integer
  Dim xlock As Boolean

  If modBasic.$DichargeOnClear = "No Due" Then
    xexpense = modNonMedical.TotalUnpaidCountPatient(modDatabase.$myConn, Trim(txtencid.Text))
    If xexpense = 0 Then
      xAllow = True
    Else
      xAllow = False
    Endif
  Else If modBasic.$DichargeOnClear = "Fin Lock" Then
    xlock = $xFinClear
    If xlock = True Then
      xAllow = True
    Else
      xAllow = False
    Endif
  Else
    xAllow = True
  Endif
  Return xAllow

End

Public Sub mnudiscrep_Click()

  Dim xvarList As Variant[]
  Dim hCls As CReportCustom
  Dim xPath As String

  If txtencid.Text Then
    If $sTatus = "Discharged" Then
      If AllowDischargePrint() = True Then

        If modSettings.ShowSettingFromFIle("Discharge Letter/Name") Then
          hCls = New CReportCustom(Trim(txtencid.Text), "Discharge Letter", "ReportSize", LabUnitForm())
          hCls.Preview()
        Else
          xvarList = ListViewMulti(Trim(txtencid.Text))
          If xvarList Then
            xPath = modPatReports.ShowDischargeReport(Trim(txtencid.Text), xvarList[0], xvarList[2], xvarList[1], LabUnitForm())
            modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
          Endif
        Endif

      Endif
    Endif
  Endif

End

Public Sub mnulama_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $sTatus = "LAMA" Then
      If AllowDischargePrint() = True Then

        hCls = New CReportCustom(Trim(txtencid.Text), "LAMA Letter", "ReportSize", MMain.$defUnit)
        hCls.Preview()

      Endif
    Endif
  Endif

End

Public Sub mnudeath_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $sTatus = "Death" Then
      If AllowDischargePrint() = True Then

        hCls = New CReportCustom(Trim(txtencid.Text), "Death Certificate", "ReportSize", MMain.$defUnit)
        hCls.Preview()

      Endif
    Endif
  Endif

End

Public Sub mnurefercert_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $sTatus = "Refer" Then
      If AllowDischargePrint() = True Then

        hCls = New CReportCustom(Trim(txtencid.Text), "Referral Letter", "ReportSize", MMain.$defUnit)
        hCls.Preview()

      Endif
    Endif
  Endif

End

Public Sub mnudiscrollback_Click()

  If Message.Question("Are you sure to rollback the outcome ?", ("No"), ("Yes")) = 2 Then
    If $xFinClear = False Then
      modPatientSub.RollbackDischarge(Trim(txtencid.Text))
      Message.Info("Outcome rollback completed", "OK")
      GetEncounterValue()
    Else
      Message.Warning("Finance Lock", "OK")
    Endif
  Endif

End

Public Sub mnuexitpass_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    If $xFinClear = True Then
      hCls = New CReportCustom(Trim(txtencid.Text), "Exit Paper", "ReportSize", MMain.$defUnit)
      hCls.Preview()
    Else
      Message.Warning("Clearance not complete", ("OK"))
    Endif
  Endif

End

''----------------------------------- Billing Menu ----------------------------------
Public Sub mnumedbill_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Medicines")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusurgbill_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Surgicals")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuextrabill_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Extra Items")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubilltest_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Diagnostic Tests")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradio_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Radio Diagnostics")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubillproced_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Procedures")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubillservice_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "General Services")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubillequip_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Equipment")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuother_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowItemDispensedByPatient(modDatabase.$syConn, Trim(txtencid.Text), "Other Items")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuexpense_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowTotalExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubill_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowTotalInvoicebyPatient(Trim(txtencid.Text), "Complete")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnunoninvoices_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowPendingExpensebyPatient(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit", "Cash"])
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusumcombined_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLInvoice.ShowCombinedInPatientExp(modDatabase.$syConn, Trim(txtencid.Text), "Complete", ["Credit", "Cash"])
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnumedreturn_Click()

  Dim xPath As String

  If txtencid.Text Then
    Message.Info(("Generating Report ...."), ("OK"))
    xPath = modCHTMLPatient.PatientMedicationForReturn(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucancelitem_Click()

  Dim sql As String
  Dim res As Result
  Dim hForm As FRequest

  sql = "select fldid,fldtime_order,flditem,flddose,fldfreq,flddays,fldqtydisp,fldlevel,flduserid_order,fldcomp_order,flduserid,fldcomp,fldtime from tblpatdosing where fldencounterval=&1 and fldcurval=&2"
  res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Cancelled")
  If res.Available Then
    hForm = New FRequest(res, "Cancelled Medicines", "Pharmacy:Cancelled", True)
    hForm.ShowModal
  Endif

End

''----------------------- Local and remote History -----------------------
Public Sub mnuhistory_Click()

  modPatReports.GetVisitHistoryResult($PatientNum)

End

Public Sub mnuvisitremore_Click()

  modPatReports.GetRepoVisitHistoryResult($PatientNum)

End

Public Sub mnuexamlocal_Click()

  modPatReports.GetPatHistoryLocalResult("Examination", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnulablocal_Click()

  modPatReports.GetPatHistoryLocalResult("Laboratory", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuradiolocal_Click()

  modPatReports.GetPatHistoryLocalResult("Radiology", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuprescrlocal_Click()

  modPatReports.GetPatHistoryLocalResult("Medicines", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuexamsrepoall_Click()

  modPatReports.GetRepoHistoryLocalResult("Examination", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnulabremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Laboratory", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuradioremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Radiology", Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnupresremote_Click()

  modPatReports.GetRepoHistoryLocalResult("Medicines", Trim(txtencid.Text), LabUnitForm())

End

''archive
Public Sub mnuarchivlab_Click()

  modPatReports.GetArchiveReportResult("Diagnostic Tests", $PatientNum)

End

Public Sub mnuarchlabrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Diagnostic Tests", $PatientNum)

End

Public Sub mnuarchivradio_Click()

  modPatReports.GetArchiveReportResult("Radio Diagnostics", $PatientNum)

End

Public Sub mnuradioarchrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Radio Diagnostics", $PatientNum)

End

Public Sub mnuarchgeneral_Click()

  modPatReports.GetArchiveReportResult("General Reports", $PatientNum)

End

Public Sub mnuarchgenerlrepo_Click()

  modPatReports.GetRepoArchiveReportResult("General Reports", $PatientNum)

End

Public Sub mnupatdocs_Click()

  modPatReports.GetArchiveReportResult("Past Documents", $PatientNum)

End

Public Sub mnupastdocsrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Past Documents", $PatientNum)

End

Public Sub mnuscanimage_Click()

  modPatReports.GetArchiveReportResult("Scanned Images", $PatientNum)

End

Public Sub mnuscanimgrepo_Click()

  modPatReports.GetRepoArchiveReportResult("Scanned Images", $PatientNum)

End

Public Sub mnuallhist_Click()

  modPatReports.GetSelectHistoryResult(Trim(txtencid.Text), LabUnitForm())

End

Public Sub mnuremoreport_Click()

  modPatReports.GetRepoSelectHistoryResult(Trim(txtencid.Text), LabUnitForm())

End

''------------------------------ Chart Menu ----------------------------------------
Public Sub mnucompexam_Click()

  ' Dim hForm As FmTPR
  ' Dim xList As String[]

  ' xList = modString.GetListFromCompareVariant(modFixPatho.$ExaminationCompVar, "fldexamid", "fldcategory", "Essential Examinations", True)
  ' hForm = New FmTPR(Trim(txtencid.Text), xList)
  ' hForm.ShowModal()

End

Public Sub mnureqexam_Click()

  ' Dim hForm As FmTPR

  ' hForm = New FmTPR(Trim(txtencid.Text), modPatPatho.GetMonitorList(Trim(txtencid.Text), "Exam", "Continue", "%"))
  ' hForm.ShowModal()

End

Public Sub mnucomptest_Click()

  Dim res As Result
  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    yy = New String[]

    res = modDatabase.$myConn.Exec("select distinct(fldtestid) as col from tblpatlabtest where fldencounterval=&1 and fldtest_type=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5", Trim(txtencid.Text), "Quantitative", "Reported", "Verified", "Visible")
    xx = modControlSub.GetDirectFillresult(res)
    If xx.Count Then
      xx.Sort()
      hForm = New FmMultiChart(Trim(txtencid.Text), yy, xx, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
      hForm.ShowModal
    Endif
  Endif

End

Public Sub mnuchartdosing_Click()

  ''dosing chart

End

Public Sub mnucurarchive_Click()

  Dim xxx As String[]

  If txtencid.Text Then
    xxx = AddReports(Trim(txtencid.Text), False)
  Endif

End

''------------------- Data View ---------------------
Public Sub mnunurcheck_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.NursingCheckReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnubedtransit_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowBedTransitionReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudiagnosis_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.GetProvisionalDiagnosis(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnusymptoms_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientSymptomReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuhistoreport_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientHistoryReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuclinote_Click()

  mnunotesmain_Click()

End

Public Sub mnunotesmain_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientNoteReport(Trim(txtencid.Text), "Inpatient Notes")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudischreport_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientNoteReport(Trim(txtencid.Text), "Discharge Notes")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuplanmain_Click()

  mnuplan_Click()

End

Public Sub mnuexamboth_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientExaminationgReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnutestreport_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientLaboratoryReport(Trim(txtencid.Text), LabUnitForm())
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuradiorep_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatRadioReportbyEncID(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuinputfood_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientInputReport(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnudosing_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowNursingDosing(Trim(txtencid.Text))
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnuplan_Click()

  Dim xPath As String

  If txtencid.Text Then
    xPath = modCHTMLPatient.ShowPatientPlanningReport(Trim(txtencid.Text), "Clinician Plan")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub mnucomprep_Click()

  If txtencid.Text Then
    modPatReports.GetSelectedPatientValues(Trim(txtencid.Text), LabUnitForm())
  Endif

End

'''============================ CHIEF SYMPTOMS ============================
Public Sub btnaddsymplist_Click()

  Dim xlist As String[]
  Dim aList As String[]
  Dim xitem As String
  Dim hForm As FmMultiComplaints

  If modBasic.$SelectMultiSymptoms = "Yes" Then
    xlist = modString.GetListFromVariant(modFixPatho.$SymptomCompVar, "fldsymptom", True)
    If xlist.Count Then
      aList = GridListView("Select Presenting Complaints", xlist)
      If aList And If aList.Count Then
        For Each xitem In aList
          modPatientGeneral.AddPatComplaintsData(Trim(txtencid.Text), "Presenting Symptoms", xitem, "", 0, "")
        Next
        ShowChiefSymptomData()
      Endif
    Endif

  Else
    hForm = New FmMultiComplaints(Trim(txtencid.Text))
    hForm.ShowModal()
    ShowChiefSymptomData()
  Endif

End

''
Public Sub cmbsymptom_Activate() '''from got focus

  If cmbsymptom.Text Then
    txtsympval.SetFocus()
    Me.Exec("$_(" & JS(txtsympval.Name & ":entry") & ").select()")
  Else
    btncompList_Click()
  Endif

End

Public Sub cmbsymptom_Completion(Text As String)

  Dim xallLst As String[]
  Dim xList As String[]

  xallLst = modString.GetListFromVariant(modFixPatho.$SymptomCompVar, "fldsymptom", True)
  If xallLst And If xallLst.Count Then
    xList = modString.SelectStringArrayToText(Text, xallLst, False)
    cmbsymptom.CompleteWith(xList)
  Endif

End

Public Sub btncompList_Click()

  Dim xlist As String[]

  If modBasic.$ClinCategoryGrid = "Yes" Then
    xlist = modString.GetDualListFromVariant(modFixPatho.$SymptomCompVar, "fldtype", "fldsymptom", True)
    If xlist.Count Then
      cmbsymptom.Text = GridViewGroup("Select Presenting Complaints", xlist, modMisc.LockBoolean(modBasic.$LockSymptomList))
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtsympval.SetFocus
      Endif
    Endif
  Else
    xlist = modString.GetListFromVariant(modFixPatho.$SymptomCompVar, "fldsymptom", True)
    If xlist.Count Then
      cmbsymptom.Text = GridViewNew("Select Presenting Complaints", xlist, modMisc.LockBoolean(modBasic.$LockSymptomList))
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtsympval.SetFocus
      Endif
    Endif
  Endif

End

Public Sub txtsympval_Activate()

  If txtsympval.Value Then
    If modBasic.$AppSelect2JS = "Enable" Then
      modJavaScript.PopUpSelect2Combo(cmbsympunit)
    Endif
    cmbsympunit.SetFocus
  Endif

End

Public Sub cmbsympunit_Click()

  If cmbsymptom.Text Then
    cmbsymdura.List = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldsubsymptom as col from tblsubsymptoms where fldsymptom=&1", cmbsymptom.Text))
  Endif
  If cmbsympunit.Text Then
    cmbsymdura.SetFocus
  Endif

End

Public Sub cmbsymdura_Activate()

  btnsympadd_Click()

End

' Public Sub cmbsympunit_KeyRelease()
'
'   modFillContainer.AutoFillComboBox(cmbsympunit)
'   modFillContainer.RestrictComboToContent(cmbsympunit)
'
' End

' Public Sub cmbsymdura_KeyRelease()
'
'   modFillContainer.AutoFillComboBox(cmbsymdura)
'   ' modFillContainer.RestrictComboToContent(cmbsymdura)
'
' End

Public Sub btnsympadd_Click()

  If txtencid.Text Then

    If cmbsymptom.Text Then
      modPatientGeneral.AddPatComplaintsData(Trim(txtencid.Text), "Presenting Symptoms", cmbsymptom.Text, cmbsymdura.Text, txtsympval.Value, cmbsympunit.Text)
      ShowChiefSymptomData()
      cmbsymptom.Text = ""
      cmbsymdura.Text = ""
      If modBasic.$AppSelect2JS = "Enable" Then
        modJavaScript.TriggerSelect2Combo(cmbsympunit)
      Endif
      cmbsympunit.Text = ""
      txtsympval.Value = 0
      txtsympval.Tag = ""
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        cmbsymptom.SetFocus
      Endif
    Endif

  Endif

End

Public Sub ShowChiefSymptomData()

  Dim sql As String

  sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldreportquali,fldid,fldid,fldtime,flddetail from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3"
  $rSympRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Presenting Symptoms", True)
  $aSympFields = New String[]
  modGridView.ReadSmallData(grdchiefsymptom, $rSympRes, $aSympFields)

  With grdchiefsymptom
    .Columns[0].Hidden = True
    .Columns[1].Hidden = True
    .Columns[2].Hidden = True
    .Columns[3].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Hidden = True
    .Columns[7].Hidden = True
    .Columns[8].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"

    .Columns[3].Text = "Symptom"
    .Columns[4].Text = "Dura"
    .Columns[5].Text = "Pos"
    .Columns[8].Text = "Time"
  End With

End

Public Sub grdchiefsymptom_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rSympRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 8 Then
    Data.Text = modReportVar.GetDateTimeReport($rSympRes[$aSympFields[Column]], gb.GeneralDate)
  Else
    Data.Text = $rSympRes[$aSympFields[Column]]
  Endif

End

Public Sub btnsympunit_Click()

  Dim xval As String
  Dim res As Result

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    xval = InputCombo("Update Unit of Symptom Duration", $rSympRes["flditem"], ["Hours", "Days", "Weeks", "Months", "Years", "Episodes"], $rSympRes["fldreportquali"], True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldreportquali"] = xval
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub btnsympdura_Click()

  Dim yval As Float
  Dim res As Result

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    yval = InputValue("Update duration of Symptom", $rSympRes["flditem"], $rSympRes["fldreportquanti"])
    If yval Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldreportquanti"] = yval
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub btnsympedit_Click()

  Dim res As Result
  Dim yqualival As Variant[]

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    yqualival = GetQualiValues($rSympRes["flditem"], $rSympRes["flddetail"], "")
    If yqualival Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])                            ''"
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["flddetail"] = yqualival[0]
        res["flduptime"] = Now()
        res["flduserid"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update()
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

Public Sub btnsympdel_Click()

  Dim res As Result

  If grdchiefsymptom.Selection.Count Then
    $rSympRes.MoveTo(grdchiefsymptom.Selection[0])
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rSympRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        ShowChiefSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

''================= HISTORY & CAUSE of ADMISSION ====================
Public Sub btnadmitcause_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtencid.Text Then
    If txtadmitcause.Text Then
      modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "History", "Cause of Admission", "", txtadmitcause.Text, xboolean)
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

Public Sub tlbtnhistory_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If cmbinpathistory.Text Then
    If txthistory.Text Then
      If cmbinpathistory.Text = "Initial Planning" Or If cmbinpathistory.Text = "Expert Planning" Then
        modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", cmbinpathistory.Text, txthistory.KeyList.Join(";"), txthistory.RichText, xboolean)
      Else
        modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "History", cmbinpathistory.Text, txthistory.KeyList.Join(";"), txthistory.RichText, xboolean)
      Endif
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

' Public Sub lsthistory_KeyRelease()
'
'   If Key.Code = Key.Return Or If Key.Code = Key.Enter Or If Key.Code = Key.AltKey Then
'     lsthistory_Click()
'   Endif
'
' End

Public Sub cmbinpathistory_Click()

  btnshowhistory_Click()

End

Public Sub btnshowhistory_Click()

  If cmbinpathistory.Text Then
    If cmbinpathistory.Text = "Initial Planning" Or If cmbinpathistory.Text = "Expert Planning" Then
      txthistory.RichText = modPatPatho.ShowSelectedNotes(Trim(txtencid.Text), cmbinpathistory.Text)
    Else
      txthistory.RichText = modPatPatho.ShowSelectedHistoryValue(Trim(txtencid.Text), cmbinpathistory.Text)
    Endif
  Endif

End

' Public Sub dcthelphistory_Click()
'
'   Dim xx As String
'
'   xx = GetRichTextArea("History Notes", txthistory.RichText)
'   If xx Then
'     txthistory.RichText = xx
'   Endif
'
' End
'
' Public Sub btntemplphistory_Click()
'
'   txthistory.RichText = txthistory.RichText & DictionaryVIew(modBasic.$dictadvPath)
'
' End

'''============================ CLINICAL FINDINGS =============================
Public Sub btnaddexamlistmain_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "Group")
    hForm.ShowModal
    FillExamtable()
  Endif

End

Public Sub btnaddexamlistmainall_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "All")
    hForm.ShowModal
    FillExamtable()
  Endif

End

Public Sub btnaddscales_Click()

  Dim hForm As FmEnterGroupExam

  If txtencid.Text Then
    hForm = New FmEnterGroupExam(Trim(txtencid.Text), "Physician Examinations", "Scales")
    hForm.ShowModal
    FillExamtable()
  Endif

End

Public Sub btntriage_Click()

  Dim xcol As String

  If txtencid.Text Then
    xcol = InputColor("Triage", CStr(txtcolor.Background))
    If xcol Then
      txtcolor.Background = CInt(xcol)
      modPatient.SetPatientColor(Trim(txtencid.Text), xcol)
    Endif
  Endif

End

Public Sub btnshowfind_Click()

  If txtencid.Text Then
    $dtFinding = GetDateValue("Select Date", "Examination Date", Now())
    If $dtFinding Then
      lbldtfind.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), $dtFinding)
      FillExamtable()
    Endif
  Endif

End

Public Sub btnallexam_Click()

  FillExamtable()

End

Public Sub cmbfinding_Activate()  ''from got focus

  If cmbfinding.Text Then
    GetSelectedFindingControl()
  Else
    btnfindList_Click()
  Endif

End

Public Sub cmbfinding_Completion(Text As String)

  Dim xallLst As String[]
  Dim xList As String[]

  xallLst = modString.GetListFromCompareVariant(modFixPatho.$ExaminationCompVar, "fldexamid", "fldcategory", "Physician Examinations", True)
  If xallLst And If xallLst.Count Then
    xList = modString.SelectStringArrayToText(Text, xallLst, False)
    cmbfinding.CompleteWith(xList)
  Endif

End

Public Sub btnfindList_Click()

  Dim xlist As String[]

  If modBasic.$ClinCategoryGrid = "Yes" Then
    xlist = modBasic.$ClinFindingCompGrouped
    If xlist.Count Then
      cmbfinding.Text = GridViewGroup("Select Clinical Findings", xlist, modMisc.LockBoolean(modBasic.$LockExamList))
      GetSelectedFindingControl()
    Endif
  Else
    xlist = modString.GetListFromCompareVariant(modFixPatho.$ExaminationCompVar, "fldexamid", "fldcategory", "Physician Examinations", True)
    If xlist.Count Then
      cmbfinding.Text = GridViewNew("Select Clinical Findings", xlist, modMisc.LockBoolean(modBasic.$LockExamList))
      GetSelectedFindingControl()
    Endif
  Endif

End

Private Sub GetSelectedFindingControl()

  Dim sType As String
  Dim xlimit As Float[]

  txtfindmax.Value = 0
  txtfindmin.Value = 0
  If cmbfinding.Text Then
    sType = modFixClinic.GetExaminationType(cmbfinding.Text)
    If sType = "Quantitative" Then
      xlimit = modClinic.GetBothQuantiExamVal(cmbfinding.Text, Trim(txtencid.Text))
      txtfindmin.Value = xlimit[0]
      txtfindmax.Value = xlimit[1]

      txtfinding.Enabled = False
      btnselquali.Enabled = False
      txtfinval.Enabled = True
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtfinval.SetFocus
        Me.Exec("$_(" & JS(txtfinval.Name & ":entry") & ").select()")
      Endif

    Else    ''is it good to allow items not in list?
      txtfinding.Enabled = True
      txtfinding.Tag = modFixClinic.GetExamtOptionType(cmbfinding.Text)
      If modBasic.$DisplayExamOption = "No" Then
      Else
        If txtfinding.Tag = "Single Selection" Or If txtfinding.Tag = "Dichotomous" Then
          txtfinding.List = modAllExam.SelectExamOptionList("Exam", cmbfinding.Text)
        Else
          btnselquali.Enabled = True
        Endif
      Endif
      txtfinval.Enabled = False
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        txtfinding.SetFocus
      Endif

    Endif
  Endif

End

Public Sub btnselquali_Click()

  Dim xType As String
  Dim xscle As String[]
  Dim yqualival As Variant[]

  If cmbfinding.Text Then
    If modBasic.$DisplayExamOption = "No" Then
    Else

      xType = txtfinding.Tag
      If xType = "Clinical Scale" Then
        xscle = modExamOption.GetClinScalePopUp("Exam", cmbfinding.Text)
        If xscle Then
          txtfinval.Value = CFloat(xscle[0])
          txtfinding.Text = xscle[1]
          txtfinding.Enabled = False
        Endif
      Else If xType = "Left and Right" Then
        yqualival = CLeftRight(cmbfinding.Text, "", modFixClinic.GetLeftRightMainHeader("Exam", cmbfinding.Text))
        If yqualival Then
          txtfinding.Text = yqualival[0]
          txtfinding.Enabled = False
        Endif
      Else If xType = "Visual Input" Then
        txtfinding.Text = modExamOption.GetVisualDataExamVal(cmbfinding.Text)
      Else If xType = "Date Time" Then
        txtfinding.Text = modDate.DateStringForExam(GetDateValue(cmbfinding.Text, "Date Value", Now()))
        txtfinding.Enabled = False
      Else If xType = "BS Date" Then
        txtfinding.Text = modDate.ConvertToLocaldate(GetDateValue(cmbfinding.Text, "Date Value", Now()))
        txtfinding.Enabled = False
      Endif

    Endif
  Endif

End

Public Sub txtfinding_Activate() ''''from got focus

  If txtfinding.Text Then
    btnfinadd_Click()
  Else
    btnselquali_Click()
  Endif

End

Public Sub txtfinval_Activate()

  If txtfinval.Value Then
    btnfinadd_Click()
  Endif

End

Public Sub btnfinadd_Click()

  Dim sType As String
  Dim abn As Boolean
  Dim xsys As String
  Dim OptionType As String
  Dim hForm As CGetExamParam

  If txtencid.Text Then
    If cmbfinding.Text Then
      hForm = New CGetExamParam(cmbfinding.Text, "Exam")
      sType = hForm.GetExamDataType()
      xsys = hForm.GetExamConstant()
      OptionType = hForm.GetExamOption()

      If sType = "Quantitative" Then
        If txtfindmin.Value > txtfinval.Value Or If txtfindmax.Value < txtfinval.Value Then
          abn = True
        Else
          abn = False
        Endif
        modClinSub.AddQuantiData(Trim(txtencid.Text), "", cmbfinding.Text, OptionType, txtfinval.Value, abn, "Physician Examinations", xsys)
      Else
        modClinSub.AddClinicExam(Trim(txtencid.Text), "", cmbfinding.Text, OptionType, txtfinding.Text, txtfinval.Value, False, "Physician Examinations", xsys, "Regular")
      Endif
      FillExamtable()
      cmbfinding.Text = ""
      txtfinding.Text = ""
      txtfinding.Tag = ""
      txtfinding.Enabled = True
      If txtfinding.List.Count Then
        txtfinding.Clear()
      Endif
      btnselquali.Enabled = True
      txtfinval.Enabled = True
      txtfinval.Value = 0
      txtfinval.Tag = ""
      If modBasic.$TabletModeEnable = "Yes" Then
      Else
        cmbfinding.SetFocus
      Endif
    Endif
  Endif

End

Public Sub FillExamtable()

  If btnallexam.Value = False Then
    $rExamRes = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldid,fldtime,fldencounterval,flduserid,fldcomp,fldsysconst,fldoption from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3 and fldtime>=&4 and fldtime<=&5", Trim(txtencid.Text), "Physician Examinations", True, modDate.StartSqlDate($dtFinding), modDate.EndSqlDate($dtFinding))
  Else
    $rExamRes = modDatabase.$myConn.Exec("select fldid,fldtype,fldhead,fldabnormal,fldid,fldid,fldtime,fldencounterval,flduserid,fldcomp,fldsysconst,fldoption from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), "Physician Examinations", True)
  Endif
  $aExamFields = New String[]
  modGridView.ReadSmallData(GridView1, $rExamRes, $aExamFields)

  With GridView1
    .Columns[0].Hidden = True
    .Columns[1].Hidden = True
    .Columns[2].Width = CStr(175 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(25 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(200 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Hidden = True
    .Columns[6].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Hidden = True
    .Columns[8].Hidden = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[10].Hidden = True  ''fldsysconst
    .Columns[11].Hidden = True  ''fldoption

    .Columns[2].Text = "Examination"
    .Columns[4].Text = "Observation"
    .Columns[6].Text = "ReportTime"
    .Columns[8].Text = "UserID"
    .Columns[9].Text = "Location"
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rExamRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 3 Then
    Data.Html = modString.GetImageForHTMLGrid(modMisc.GetGridIcon($rExamRes[$aExamFields[Column]]), "75%", "75%")
    Data.Text = ""
  Else If Column = 4 Then
    Data.Html = modClinic.GetExamValueString(Trim(txtencid.Text), $rExamRes[$aExamFields[Column]], False)
  Else If Column = 6 Then
    Data.Text = modReportVar.GetDateTimeReport($rExamRes[$aExamFields[Column]], gb.GeneralDate)
  Else If Column = 2 Then
    Data.Text = $rExamRes[$aExamFields[Column]]
  Else
    Data.Text = $rExamRes[$aExamFields[Column]]
  Endif

End

Public Sub btnfindcomponent_Click()

  Dim hForm2 As FmEnterMultiple
  Dim hFormTwo As FmEnterMultipleTwo
  Dim res As Result
  Dim xData As Variant[]

  Dim yyy As String[]
  Dim xexam As String
  Dim xquantival As Variant[]
  Dim yqualival As Variant[]
  Dim xlimit As Float[]
  Dim xType As String
  Dim xdate As Date

  If GridView1.Selection.Count Then
    $rExamRes.MoveTo(GridView1.Selection[0])

    If $rExamRes["fldtype"] = "Qualitative" Then
      xType = $rExamRes["fldoption"]
      If modClinic.GetSubExamBool($rExamRes["fldid"], Trim(txtencid.Text)) = False Then
        If xType = "Fixed Components" Or If xType = "Left/Right Components" Then
          If $rExamRes["fldsysconst"] Then
            xexam = modFixClinic.GetExamIDFromSysConst($rExamRes["fldsysconst"])
          Else
            xexam = $rExamRes["fldhead"]
          Endif
          yyy = modFixClinic.GetSubExamArray(xexam)
          If yyy.Count Then
            modClinSub.InsertExamSubExam($rExamRes["fldencounterval"], $rExamRes["fldid"], $rExamRes["fldhead"], yyy)
          Endif
        Endif
      Endif

      res = modDatabase.$myConn.Exec("select fldid,fldsubtexam,fldreport,fldtanswertype,fldabnormal,fldindex from tblpatientsubexam where fldheadid=&1", $rExamRes["fldid"])
      If res.Available = False Then
        If xType = "Clinical Scale" Then
          yqualival = modExamOption.GetClinScalePopUp("Exam", $rExamRes["fldhead"])
          If yqualival Then
            modClinSub.UpdateQualiQuantiData($rExamRes["fldid"], yqualival[1], CFloat(yqualival[0]), False)
          Endif
        Else If xType = "Left and Right" Then
          yqualival = CLeftRight($rExamRes["fldhead"], modClinic.GetExamValueString($rExamRes["fldencounterval"], $rExamRes["fldid"], False), modFixClinic.GetLeftRightMainHeader("Exam", $rExamRes["fldhead"]))
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1], "")
          Endif
        Else If xType = "Date Time" Then
          xdate = GetDateValue($rExamRes["fldhead"], ("Select Date Time"), Val($rExamRes["fldrepquali"]))
          If xdate Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], modDate.DateStringForExam(xdate), False, "")
          Endif
        Else If xType = "BS Date" Then
          xdate = GetDateValue($rExamRes["fldhead"], ("Select Date Time"), modDate.ConvertToEnglishdate($rExamRes["fldrepquali"]))
          If xdate Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], modDate.ConvertToLocaldate(xdate), False, "")
          Endif
        Else If xType = "Qualitative" Then
          yqualival = GetQualiString($rExamRes["fldhead"], $rExamRes["fldrepquali"], "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1])
          Endif
        Else If xType = "RichText Area" Then
          yqualival = GetQualiRich($rExamRes["fldhead"], $rExamRes["fldrepquali"], "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1], yqualival[2])
          Endif
        Else
          yqualival = GetQualiValues($rExamRes["fldhead"], $rExamRes["fldrepquali"], "Exam")
          If yqualival Then
            modClinSub.UpdateClinicQualiData($rExamRes["fldid"], yqualival[0], yqualival[1], yqualival[2])
          Endif
        Endif

      Else If res.Available = True Then
        xData = New Variant[]
        For Each res
          xData.Add([res["fldsubtexam"], res["fldreport"], res["fldid"], res["fldtanswertype"], res["fldabnormal"], res["fldindex"]])
        Next
        ' xData.Add(["Final Impression", $rExamRes["fldrepquali"], 0, "RichText Area", False, ""])
        If xType = "Left/Right Components" Then
          hFormTwo = New FmEnterMultipleTwo($rExamRes["fldid"], "Exam", $rExamRes["fldhead"], xData, "", "Current")
          hFormTwo.ShowModal
        Else
          hForm2 = New FmEnterMultiple($rExamRes["fldid"], "Exam", $rExamRes["fldhead"], xData, "", "Current")
          hForm2.ShowModal
        Endif
      Endif

    Else If $rExamRes["fldtype"] = "Quantitative" Then
      xlimit = modClinic.GetBothQuantiExamVal($rExamRes["fldhead"], $rExamRes["fldencounterval"])
      xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), $rExamRes["fldhead"], xlimit[0], xlimit[1], modClinic.GetExamValueByID($rExamRes["fldid"]))                                       '
      If xquantival Then
        modClinSub.UpdateQuantiData($rExamRes["fldid"], xquantival[0], xquantival[1])
      Endif

    Endif
    FillExamtable()

  Endif

End

Public Sub btnfindflag_Click()

  Dim xx As String

  If GridView1.Selection.Count Then
    $rExamRes.MoveTo(GridView1.Selection[0])
    xx = InputCombo("Select Flag for the observation", "Change Flag", ["Normal", "Abnormal"], modMisc.GetIconValue($rExamRes["fldabnormal"]), True)
    If xx Then
      modClinSub.UpdateExamFlag($rExamRes["fldid"], xx)
      FillExamtable()
    Endif
  Endif

End

Public Sub btnfindelete_Click()

  Dim res As Result

  If GridView1.Selection.Count Then
    $rExamRes.MoveTo(GridView1.Selection[0])
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatientexam", "fldid=&1", $rExamRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        FillExamtable()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

''========================= BODY WEIGHT =====================
Public Sub btnaddwt_Click()

  Dim xquantival As Variant[]

  If txtencid.Text Then
    xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), "Body Weight", 0, 0, 0)
    If xquantival Then
      modClinSub.AddGeneralParametersQuanti(Trim(txtencid.Text), "Body Weight", xquantival[0])
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
    WeightGrid()
  Endif

End

Public Sub grpwt_Click()

  ' Dim hForm As FmClinChart
  '
  ' If txtencid.Text Then
  '   hForm = New FmClinChart("SetA", "Wt", Trim(txtencid.Text), "")
  '   fmOfficer.Workspace1.Add(hForm)
  ' Endif

End

Public Sub WeightGrid()

  Dim sql As String

  sql = "select fldid,fldtime,fldrepquanti from tblpatientexam where fldencounterval=&1 and fldhead=&2 and fldtype=&3 and fldsave=&4 ORDER BY fldid DESC"
  $rWtRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Body Weight", "Quantitative", True)
  $aWtFields = New String[]
  modGridView.ReadSmallData(grdwt, $rWtRes, $aWtFields)

  With grdwt
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"

    .Columns[1].Text = "Date"
    .Columns[2].Text = "Weight"
  End With

End

Public Sub grdwt_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rWtRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), $rWtRes[$aWtFields[Column]])
  Else
    Data.Text = $rWtRes[$aWtFields[Column]]
  Endif

End

Public Sub btneditwt_Click()

  Dim xquantival As Variant[]

  If grdwt.Selection.Count Then
    $rWtRes.MoveTo(grdwt.Selection[0])
    xquantival = GetQuantiValues("Exam", Trim(txtencid.Text), "Body Weight", 0, 0, $rWtRes["fldrepquanti"])
    If xquantival Then
      modClinSub.UpdateQuantiData($rWtRes["fldid"], xquantival[0], False)
      WeightGrid()
    Endif
  Endif

End

''========================== INPUT/OUTPUT ===============================
Public Sub btnshowfluid_Click()

  If txtencid.Text Then
    $dtFluid = GetDateValue("Select Date", "Intake/Output Date", Now())
    If $dtFluid Then
      lbldtfluid.Text = modPatient.GetDayDiffAdmission(Trim(txtencid.Text), $dtFluid)
      ShowIntakeFoodGrid()
      SHowOutputFluid()
    Endif
  Endif

End

Public Sub tblfluidcalc_Click()

  txtinfluid.Value = Round(modGridView.SumGridAmountt(grdintake, 5), -3)
  txtincalori.Value = Round(modGridView.SumGridAmountt(grdintake, 6), -3)

End

Public Sub btnaddinput_Click()

  Dim hForm As FmOralIntake

  If txtencid.Text Then
    hForm = New FmOralIntake(Trim(txtencid.Text))
    hForm.ShowModal
    ShowIntakeFoodGrid()
  Endif

End

Public Sub btaddoutput_Click()

  Dim hForm As FmClinOutValue

  If txtencid.Text Then
    hForm = New FmClinOutValue("Output Fluid", Trim(txtencid.Text), modBasic.$ClinBodyFluidAll, 0, "mL")
    hForm.ShowModal
    SHowOutputFluid()
  Endif

End

Public Sub btnallinout_Click()

  ShowIntakeFoodGrid()
  SHowOutputFluid()

End

''------------------------ Intake  -------------------------
Private Sub ShowIntakeFoodGrid()

  If rbfood.Value = True Then
    ShowIntakeInFoodGrid()
  Else If rbmed.Value = True Then
    ShowIntakeMedGrid()
  Endif

End

Public Sub rbfood_Click()

  If txtencid.Text Then
    ShowIntakeFoodGrid()
  Endif

End

Public Sub rbmed_Click()

  If txtencid.Text Then
    ShowIntakeMedGrid()
  Endif

End

Public Sub ShowIntakeInFoodGrid()

  If btnallinout.Value = False Then
    $rInputRes = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldid,fldid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldtime>=&3 and fldtime<=&4 and fldsave=&5", Trim(txtencid.Text), "Input Food/Fluid", modDate.StartSqlDate($dtFluid), modDate.EndSqlDate($dtFluid), True)
  Else
    $rInputRes = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldid,fldid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3", Trim(txtencid.Text), "Input Food/Fluid", True)
  Endif
  $aInputFields = New String[]
  modGridView.ReadSmallData(grdintake, $rInputRes, $aInputFields)
  ResizeInputGrid()

End

Public Sub ShowIntakeMedGrid()

  If btnallinout.Value = False Then
    $rInputRes = modDatabase.$myConn.Exec("select fldid,fldencounterval,flddoseno,flddoseno,fldvalue,fldid,fldid,fldtime from tblnurdosing where fldencounterval=&1 and fldsave=&2 and fldtime>=&3 and fldtime<=&4 and flddoseno in(select fldid from tblpatdosing where fldroute=&5 or fldroute=&6 or fldroute=&7)", Trim(txtencid.Text), True, modDate.StartSqlDate($dtFluid), modDate.EndSqlDate($dtFluid), "fluid", "IIV", "CIV")                                                     ''
  Else
    $rInputRes = modDatabase.$myConn.Exec("select fldid,fldencounterval,flddoseno,flddoseno,fldvalue,fldid,fldid,fldtime from tblnurdosing where fldencounterval=&1 and fldsave=&2 and flddoseno in(select fldid from tblpatdosing where fldroute=&3 or fldroute=&4 or fldroute=&5)", Trim(txtencid.Text), True, "fluid", "IIV", "CIV")
  Endif
  $aInputFields = New String[]
  modGridView.ReadSmallData(grdintake, $rInputRes, $aInputFields)
  ResizeInputGrid()

End

Public Sub grdintake_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rInputRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 7 Then
    Data.Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), $rInputRes[$aInputFields[Column]])
  Else If Column = 3 Then
    If rbfood.Value = True Then
      Data.Text = $rInputRes[$aInputFields[Column]]
    Else If rbmed.Value = True Then
      Data.Text = modPharmacy.GetStockIDFromDosing($rInputRes[$aInputFields[Column]])
    Endif
  Else If Column = 5 Then
    If rbfood.Value = True Then
      Data.Text = modPatPatho.GetTotalCoponentFood($rInputRes[$aInputFields[Column]], "fldfluid")
    Else If rbmed.Value = True Then
      Data.Text = modPharmacy.GetTotalFluidMedicine($rInputRes[$aInputFields[Column]])
    Endif
  Else If Column = 6 Then
    If rbfood.Value = True Then
      Data.Text = modPatPatho.GetTotalCoponentFood($rInputRes[$aInputFields[Column]], "fldenergy")
    Else If rbmed.Value = True Then
      Data.Text = 0
    Endif
  Else
    Data.Text = $rInputRes[$aInputFields[Column]]
  Endif

End

Private Sub ResizeInputGrid()

  With grdintake
    .Columns[0].Hidden = True
    .Columns[1].Hidden = True
    .Columns[2].Hidden = True
    .Columns[3].Width = CStr(200 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(75 * modBasic.$AppWidthRatio) & "px" ''for fluid
    .Columns[6].Width = CStr(75 * modBasic.$AppWidthRatio) & "px" ''for calorie
    .Columns[7].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"

    .Columns[3].Text = "Intake"
    .Columns[4].Text = "Dose/Rate"
    .Columns[5].Text = "Fluid(mL)"
    .Columns[6].Text = "Energy(kCal)"
    .Columns[7].Text = "Time"
  End With

End

Public Sub btneditinput_Click()

  Dim yval As Float

  If grdintake.Selection.Count Then
    If rbfood.Value = True Then
      $rInputRes.MoveTo(grdintake.Selection[0])

      yval = InputValue($rInputRes["flditem"], ("Edit Intake Value"), $rInputRes["fldreportquanti"])
      If yval Then
        modPatientGeneral.UpdateExamGeneralQuantiData($rInputRes["fldid"], $rInputRes["flditem"], yval, "")
        ShowIntakeFoodGrid()
      Endif

    Endif
  Endif

End

''-------------------- Output --------------------------------
Public Sub SHowOutputFluid()

  Dim sql As String
  Dim xtot As Float

  If btnallinout.Value = False Then
    sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldtime>=&3 and fldtime<=&4"
  Else
    sql = "select fldid,fldencounterval,fldtype,flditem,fldreportquanti,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2"
  Endif
  $rOutRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Output Fluid", modDate.StartSqlDate($dtFluid), modDate.EndSqlDate($dtFluid))
  $aOutFields = New String[]
  modGridView.ReadSmallData(grdoutput, $rOutRes, $aOutFields)

  With grdoutput
    .Columns[0].Hidden = True
    .Columns[1].Hidden = True
    .Columns[2].Hidden = True
    .Columns[3].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"

    .Columns[3].Text = "Output"
    .Columns[4].Text = "Vol(mL)"
    .Columns[5].Text = "Time"
  End With

  xtot = 0
  For Each $rOutRes
    If $rOutRes["fldreportquanti"] Then
      xtot = xtot + $rOutRes["fldreportquanti"]
    Endif
  Next
  txtoutfluid.Value = Round(xtot, -3)

End

Public Sub grdoutput_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rOutRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 5 Then
    Data.Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), $rOutRes[$aOutFields[Column]])
  Else
    Data.Text = $rOutRes[$aOutFields[Column]]
  Endif

End

Public Sub btneditout_Click()

  Dim yval As Float

  If grdoutput.Selection.Count Then
    $rOutRes.MoveTo(grdoutput.Selection[0])

    yval = InputValue($rOutRes["flditem"], ("Edit Output Value"), $rOutRes["fldreportquanti"])
    If yval Then
      modPatientGeneral.UpdateExamGeneralQuantiData($rOutRes["fldid"], $rOutRes["flditem"], yval, "")
      SHowOutputFluid()
    Endif

  Endif

End

'''====================== CLINICAL NOTES  ============================
Public Sub tbtnfollowcalen_Click()

  Dim res As Result
  Dim dt As Date

  If txtencid.Text Then
    dt = CTimeConsult("Follow Up", modPatient.GetFollowUpDate(Trim(txtencid.Text)))
    If dt Then
      res = modDatabase.$myConn.Edit("tblencounter", "fldencounterval=&1", Trim(txtencid.Text))
      res["fldfollowdate"] = dt
      res["xyz"] = False
      res.Update
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
    Endif
  Endif

End

' Public Sub dcthelpnote_Click()
'
'   Dim xx As String
'
'   xx = GetRichTextArea("Clinical Note", txtnote.RichText)
'   If xx Then
'     txtnote.RichText = xx
'   Endif
'
' End
'
' Public Sub btntemplhelpnote_Click()
'
'   txtnote.RichText = txtnote.RichText & DictionaryVIew(modBasic.$dictadvPath)
'
' End

Public Sub btnshownote_Click()

  ShowNoteTypeTime()

End

Private Sub ShowNoteTypeTime()

  Dim dtList As Date[]
  Dim xdate As Date
  Dim res As Result
  Dim Column As Integer

  Dim xdata As String
  Dim pic2 As String
  Dim pic3 As String

  Dim i As Integer
  Dim sTypLst As String[]

  pic2 = "icons/coll2.png"
  pic3 = "icons/coll4.png"

  If cmbnotetype.Text = "All Types" Then
    sTypLst = NoteTakingTypeList()
  Else
    sTypLst = [cmbnotetype.Text]
  Endif
  For i = 0 To sTypLst.Count - 1
    sTypLst[i] = "'" & sTypLst[i] & "'"
  Next

  dtList = modDate.GetDateArrayBetween($doa, Now())
  dtList.Sort(gb.Descent)
  ColumnView1.Clear()
  ColumnView1.Columns.Count = 5
  With ColumnView1
    .Columns[0].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[1].Width = CStr(400 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Hidden = True
    .Columns[4].Hidden = True

    .Columns[0].Text = "Time"
    .Columns[1].Text = "Description"
    .Columns[2].Text = "User"
  End With

  $sColl = New Collection
  For Each xdate In dtList
    res = modDatabase.$myConn.Exec("select fldreportquali,flddetail,flduserid,fldtime,fldid,flditem from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem in(" & sTypLst.Join(",") & ") and fldtime>=&3 and fldtime<=&4 ORDER BY fldtime DESC", Trim(txtencid.Text), "Notes", modDate.StartSqlDate(xdate), modDate.EndSqlDate(xdate))                          ''
    If res.Available Then
      ColumnView1.Add(CStr(xdate), modReportVar.GetDateTimeReport(xdate, gb.MediumDate), pic2)

      Column = 0
      For Each res
        xdata = ""
        If res["flddetail"] Then
          xdata = res["flddetail"]
        Endif
        If res["fldreportquali"] Then
          xdata = xdata & "<br><b>IMPRESSION:</b>" & res["fldreportquali"]
        Endif
        If cmbnotetype.Text = "All Types" Then
          xdata = Trim(Replace(res["flditem"], "Note", "")) & " : " & xdata
        Endif
        $sColl.Add(xdata, CStr(xdate) & ":" & CStr(Column))
        ColumnView1.Add(CStr(xdate) & ":" & CStr(Column), modReportVar.GetDateTimeReport(res["fldtime"], gb.ShortTime), pic3, CStr(xdate))
        ' ' ColumnView1[CStr(xdate) & ":" & CStr(Column)][1] = xdata
        ColumnView1[CStr(xdate) & ":" & CStr(Column)][2] = res["flduserid"]
        ColumnView1[CStr(xdate) & ":" & CStr(Column)][3] = res["fldid"]
        Column = Column + 1
      Next

    Endif
  Next

End

Public Sub ColumnView1_Data(Index As String, Column As Integer, Data As WebTreeData)

  If Column = 1 Then
    Data.Html = $sColl[Index]
  Endif

End

Public Sub ColumnView1_Select()

  Dim res As Result
  Dim xindex As Long

  If ColumnView1.Selection.Count Then
    If ColumnView1.Current.Image = "icons/coll4.png" Then
      xindex = ColumnView1[ColumnView1.Current.Key][3]

      If chknoteedit.Value = True Then
        res = modDatabase.$myConn.Exec("select fldid,flditem,fldreportquali,flddetail from tblexamgeneral where fldid=&1", xindex)
        If res.Available Then
          cmbnote.Text = res["flditem"]
          txtnoteid.Value = res["fldid"]
          txtimpression.Text = res["fldreportquali"]
          txtnote.RichText = res["flddetail"]
          If $sTatus = "Admitted" Then
            btnoteadd.Enabled = True
          Else
            btnoteadd.Enabled = False
          Endif
        Else
          btnoteadd.Enabled = True
        Endif
      Endif

    Endif
  Endif

End

Public Sub cmbnote_Click()

  txtnote.Text = ""
  btnoteadd.Enabled = True

End

Public Sub btnoteadd_Click()

  If txtencid.Text Then
    If cmbnote.Text Then
      If cmbnote.Text = "Patient Note" Then
      Else
        If txtnote.Text Then
          modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", cmbnote.Text, txtimpression.Text, txtnote.RichText, False)
          ShowNoteTypeTime()
          Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
        Endif
      Endif
    Endif
  Endif

End

Public Sub btnotedit_Click()

  If txtnoteid.Value Then
    modPatientGeneral.UpdateExamGeneralQualiData(txtnoteid.Value, cmbnote.Text, txtimpression.Text, txtnote.RichText)
    ShowNoteTypeTime()
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
  Endif

End

''======================= PLANNING ================================
Private Sub ShowProblemList()

  Dim sql As String

  sql = "select fldid,fldtime,fldproblem from tblpatplanning where fldencounterval=&1 and fldplancategory=&2 and fldtime>=&3 and fldtime<=&4"
  $rPlanRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Clinician Plan", modDate.StartSqlDate(Now()), modDate.EndSqlDate(Now()))
  $aPlanFields = New String[]
  modGridView.ReadSmallData(grdplan, $rPlanRes, $aPlanFields)

  With grdplan
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"

    .Columns[1].Text = "DateTime"
    .Columns[2].Text = "Problem"
  End With

End

Public Sub grdplan_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rPlanRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modPatient.GetDayTimeFromAdmission(Trim(txtencid.Text), $rPlanRes[$aPlanFields[Column]])
  Else
    Data.Text = $rPlanRes[$aPlanFields[Column]]
  Endif

End

Public Sub btnaddplan_Click()

  Dim hForm As FmPatPlanning

  hForm = New FmPatPlanning(Trim(txtencid.Text))
  hForm.ShowModal
  ShowProblemList()

End

''======================= ROUTINE MEDICINES ===============================
Public Sub rbvalue_Click()

  ShowRoutineMed()

End

Public Sub rblabel_Click()

  ShowRoutineMed()

End

Public Sub btnshowallmed_Click()

  ShowRoutineMed()

End

Private Sub ShowRoutineMed()

  If txtencid.Text Then
    If btnshowallmed.Value = True Then
      ShowMedicines("All")
    Else If btnshowallmed.Value = False Then
      ShowMedicines("Current")
    Endif
  Endif

End

Private Sub ShowMedicines(strType As String)

  Dim sql As String

  If strType = "Current" Then
    If rblabel.Value = True Then
      sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute<>&5 and flditemtype=&6 and fldfreq<>&7 and fldfreq<>&8 ORDER BY fldid DESC"
    Else
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute<>&5 and flditemtype=&6 and fldfreq<>&7 and fldfreq<>&8 ORDER BY fldid DESC"                    ''
    Endif
    $rRoutRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, Now(), DateAdd(Now(), gb.Hour, -3), "fluid", "Medicines", "stat", "PRN")
  Else If strType = "All" Then
    If rblabel.Value = True Then
      sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute<>&3 and flditemtype=&4 and fldfreq<>&5 and fldfreq<>&6 ORDER BY fldid DESC"
    Else
      sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute<>&3 and flditemtype=&4 and fldfreq<>&5 and fldfreq<>&6 ORDER BY fldid DESC"
    Endif
    $rRoutRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "fluid", "Medicines", "stat", "PRN")
  Endif
  $aRoutFields = New String[]
  modGridView.ReadSmallData(grdmedicine, $rRoutRes, $aRoutFields)

  With grdmedicine
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Hidden = True
    .Columns[10].Hidden = True

    .Columns[1].Text = "Start"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Medicine"
    .Columns[4].Text = "Dose"
    .Columns[5].Text = "Freq"
    .Columns[6].Text = "Days"
    .Columns[7].Text = "Status"
    .Columns[8].Text = "N"
  End With

End

Public Sub grdmedicine_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rRoutRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rRoutRes[$aRoutFields[Column]], gb.GeneralDate)
  Else If Column = 4 Then
    If rblabel.Value = True Then
      Data.Text = modPharmacy.GetMedicineDoseInFormat($rRoutRes[$aRoutFields[Column]], "Label")
    Else
      Data.Text = $rRoutRes[$aRoutFields[Column]]
    Endif
  Else If Column = 8 Then
    Data.Text = modPharmacy.TotalDoseCount($rRoutRes[$aRoutFields[Column]])
  Else
    Data.Text = $rRoutRes[$aRoutFields[Column]]
  Endif

End

Public Sub btnroutstart_Click()

  Dim xdate As Date

  If grdmedicine.Selection.Count Then
    $rRoutRes.MoveTo(grdmedicine.Selection[0])
    xdate = GetDateValue(("Select Start Date for this medicine"), $rRoutRes["flditem"], $rRoutRes["fldstarttime"])
    If xdate Then
      modPharmSub.UpdateStartAfterDispensing($rRoutRes["fldid"], xdate)
      ShowMedicines("Current")
    Endif
  Endif

End

Public Sub btnroutdose_Click()

  If grdmedicine.Selection.Count Then
    $rRoutRes.MoveTo(grdmedicine.Selection[0])
  Endif

End

Public Sub btnroutfreq_Click()

  If grdmedicine.Selection.Count Then
    $rRoutRes.MoveTo(grdmedicine.Selection[0])
  Endif

End

Public Sub btnroutdays_Click()

  Dim res As Result
  Dim yval As Integer

  If grdmedicine.Selection.Count Then
    $rRoutRes.MoveTo(grdmedicine.Selection[0])
    yval = InputValue($rRoutRes["flditem"], ("Select Number of Days"), $rRoutRes["flddays"])
    If yval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rRoutRes["fldid"])
      res["flddays"] = yval
      res["fldendtime"] = DateAdd($rRoutRes["fldstarttime"], gb.Day, CInt(yval))
      res["xyz"] = False
      res.Update()
      ShowMedicines("Current")
    Endif
  Endif

End

Public Sub btnroutstatus_Click()

  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "On Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String

  If grdmedicine.Selection.Count Then
    $rRoutRes.MoveTo(grdmedicine.Selection[0])
    xval = InputCombo($rRoutRes["flditem"], ("Select Current Status"), xx, $rRoutRes["fldcurval"], True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rRoutRes["fldid"])
      res["fldcurval"] = xval
      res["xyz"] = False
      res.Update()
      ShowMedicines("Current")
    Endif
  Endif

End

Public Sub btndrp_Click()

  Dim opt As Long[]
  Dim sql As String
  Dim res As Result

  If btnshowallmed.Value = False Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and flditemtype=&5 and fldcurval=&6"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "Medicines", "Continue")
  Else If btnshowallmed.Value = True Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and flditemtype=&3 and fldcurval=&4"
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "Medicines", "Continue")
  Endif
  If res.Available Then
    opt = New Long[]
    For Each res
      opt.Add(res!fldid)
    Next
    modMedError.ShowMedicationReviewMultipleDosID(Trim(txtencid.Text), opt, "Report")
  Endif

End

Public Sub btndosinfo_Click()

  Dim dosid As Long[]
  Dim xPath As String

  If txtencid.Text Then
    dosid = New Long[]
    For Each $rRoutRes
      dosid.Add($rRoutRes["fldid"])
    Next
    xPath = modCHTMLPatient.ShowMedicationLabelReport(Trim(txtencid.Text), dosid, "Inpatient")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btncounsel_Click()

  Dim doslst As Long[]
  Dim xPath As String

  If txtencid.Text Then
    doslst = New Long[]
    For Each $rRoutRes
      doslst.Add($rRoutRes["fldid"])
    Next
    xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btnmedexpo_Click()
  ''export grid

End

'''=============================== STAT/PRN MEDICINES ========================
Public Sub rbvalueR_Click()

  ShowPRNMedicines()

End

Public Sub rblabelR_Click()

  ShowPRNMedicines()

End

Public Sub btnshowprn_Click()

  ShowPRNMedicines()

End

Private Sub ShowPRNMedicines()

  If txtencid.Text Then
    If btnshowprn.Value = True Then
      ShowMedPRN("All")
    Else If btnshowprn.Value = False Then
      ShowMedPRN("Current")
    Endif
  Endif

End

Private Function DoseFormPRN() As String

  Dim xx As String

  If rblabelR.Value = True Then
    xx = "Label"
  Else
    xx = "Value"
  Endif
  Return xx

End

Private Sub ShowMedPRN(strType As String)

  Dim sql As String

  If strType = "Current" Then
    sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute<>&5 and flditemtype=&6 and (fldfreq like &7 or fldfreq like &8) ORDER BY fldid DESC"                    ''
    $rStatRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, Now(), DateAdd(Now(), gb.Hour, -3), "fluid", "Medicines", "stat", "PRN")
  Else If strType = "All" Then
    sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute<>&3 and flditemtype=&4 and (fldfreq like &5 or fldfreq like &6) ORDER BY fldid DESC"
    $rStatRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "fluid", "Medicines", "stat", "PRN")
  Endif
  $aStatFields = New String[]
  modGridView.ReadSmallData(grdmedprn, $rStatRes, $aStatFields)

  With grdmedprn
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[9].Hidden = True
    .Columns[10].Hidden = True

    .Columns[1].Text = "Start"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Medicine"
    .Columns[4].Text = "Dose"
    .Columns[5].Text = "Freq"
    .Columns[6].Text = "Days"
    .Columns[7].Text = "Status"
    .Columns[8].Text = "N"
  End With

End

Public Sub grdmedprn_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rStatRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rStatRes[$aStatFields[Column]], gb.GeneralDate)
  Else If Column = 4 Then
    Data.Text = modPharmacy.GetMedicineDoseInFormat($rStatRes[$aStatFields[Column]], DoseFormPRN())
  Else If Column = 8 Then
    Data.Text = modPharmacy.TotalDoseCount($rStatRes[$aStatFields[Column]])
  Else
    Data.Text = $rStatRes[$aStatFields[Column]]
  Endif

End

Public Sub btnstatstart_Click()

  Dim xdate As Date

  If grdmedprn.Selection.Count Then
    $rStatRes.MoveTo(grdmedprn.Selection[0])
    xdate = GetDateValue(("Select Start Date for this medicine"), $rStatRes["flditem"], $rStatRes["fldstarttime"])
    If xdate Then
      modPharmSub.UpdateStartAfterDispensing($rStatRes["fldid"], xdate)
      ShowMedPRN("Current")
    Endif
  Endif

End

Public Sub btnstatdose_Click()

  If grdmedprn.Selection.Count Then
    $rStatRes.MoveTo(grdmedprn.Selection[0])
  Endif

End

Public Sub btnstatfreq_Click()

  If grdmedprn.Selection.Count Then
    $rStatRes.MoveTo(grdmedprn.Selection[0])
  Endif

End

Public Sub btnstatdays_Click()

  Dim res As Result
  Dim yval As Integer

  If grdmedprn.Selection.Count Then
    $rStatRes.MoveTo(grdmedprn.Selection[0])
    yval = InputValue($rStatRes["flditem"], ("Select Number of Days"), $rStatRes["flddays"])
    If yval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rStatRes["fldid"])
      res["flddays"] = yval
      res["fldendtime"] = DateAdd($rStatRes["fldstarttime"], gb.Day, CInt(yval))
      res["xyz"] = False
      res.Update()
      ShowMedPRN("Current")
    Endif
  Endif

End

Public Sub btnstatstatus_Click()

  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "On Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String

  If grdmedprn.Selection.Count Then
    $rStatRes.MoveTo(grdmedprn.Selection[0])
    xval = InputCombo($rStatRes["flditem"], ("Select Current Status"), xx, $rStatRes["fldcurval"], True)
    If xval Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rStatRes["fldid"])
      res["fldcurval"] = xval
      res["xyz"] = False
      res.Update()
      ShowMedPRN("Current")
    Endif
  Endif

End

Public Sub btnlblstat_Click()

  Dim dosid As Long[]
  Dim xPath As String

  If txtencid.Text Then
    dosid = New Long[]
    For Each $rStatRes
      dosid.Add($rStatRes["fldid"])
    Next
    xPath = modCHTMLPatient.ShowMedicationLabelReport(Trim(txtencid.Text), dosid, "Inpatient")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btncounselstat_Click()

  Dim doslst As Long[]
  Dim xPath As String

  If txtencid.Text Then
    doslst = New Long[]
    For Each $rStatRes
      doslst.Add($rStatRes["fldid"])
    Next
    xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btndrpstat_Click()

  Dim opt As Long[]
  Dim sql As String
  Dim res As Result

  If btnshowprn.Value = False Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and flditemtype=&5 and fldcurval=&6"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "Medicines", "Continue")
  Else If btnshowprn.Value = True Then
    sql = "select fldid from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and flditemtype=&3 and fldcurval=&4"
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "Medicines", "Continue")
  Endif
  If res.Available Then
    opt = New Long[]
    For Each res
      opt.Add(res!fldid)
    Next
    modMedError.ShowMedicationReviewMultipleDosID(Trim(txtencid.Text), opt, "Report")
  Endif

End

''======================= IV FLUID ========================
Public Sub btnshowallfluid_Click()

  If txtencid.Text Then
    If btnshowallfluid.Value = True Then
      ShowMedFluids("All")
    Else If btnshowallfluid.Value = False Then
      ShowMedFluids("Current")
    Endif
  Endif

End

Private Sub ShowMedFluids(strType As String)

  Dim sql As String

  If strType = "Current" Then
    sql = "select fldid,fldstarttime,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and fldroute=&5 ORDER BY fldid DESC"                    ''
    $rFludRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "fluid")
  Else If strType = "All" Then
    sql = "select fldid,fldstarttime,flditem,flddose,fldfreq,flddays,fldcurval,fldid,fldstarttime,fldstatus from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldroute=&3 ORDER BY fldid DESC"
    $rFludRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, "fluid")
  Endif
  $aFludFields = New String[]
  modGridView.ReadSmallData(grdfluid, $rFludRes, $aFludFields)

  With grdfluid
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(150 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(350 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(25 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Hidden = True
    .Columns[9].Hidden = True

    .Columns[1].Text = "StartDate"
    .Columns[2].Text = "Medicine"
    .Columns[3].Text = "Dose"
    .Columns[4].Text = "Freq"
    .Columns[5].Text = "Days"
    .Columns[6].Text = "Status"
  End With

End

Public Sub grdfluid_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rFludRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rFludRes[$aFludFields[Column]], gb.GeneralDate)
  Else If Column = 7 Then
    Data.Html = modString.GetImageForHTMLGrid(modGeneralMain.GetSystemIcon(GetFluidAdminStatusCode($rFludRes[$aFludFields[Column]])), "95%", "95%")
    Data.Text = ""
  Else
    Data.Text = $rFludRes[$aFludFields[Column]]
  Endif

End

Public Sub grdfluid_Select()

  If grdfluid.Selection.Count Then
    $rFludRes.MoveTo(grdfluid.Selection[0])
    btnivclose.Visible = True
    txtfluidname.Text = $rFludRes["flditem"]
    FillFluidGridView($rFludRes["fldid"])
  Endif

End

Public Sub btnfluidstart_Click()

  Dim xdate As Date

  If btnshowallfluid.Value = False Then
    If grdfluid.Selection.Count Then
      $rFludRes.MoveTo(grdfluid.Selection[0])
      xdate = GetDateValue(("Select Start Date for this medicine"), $rFludRes["flditem"], $rFludRes["fldstarttime"])
      If xdate Then
        modPharmSub.UpdateStartAfterDispensing($rFludRes["fldid"], xdate)
        ShowMedFluids("Current")
      Endif
    Endif
  Endif

End

Public Sub btnfluiddose_Click()

  If grdfluid.Selection.Count Then
    $rFludRes.MoveTo(grdfluid.Selection[0])
  Endif

End

Public Sub btnfluidfreq_Click()

  If grdfluid.Selection.Count Then
    $rFludRes.MoveTo(grdfluid.Selection[0])
  Endif

End

Public Sub btnfluiddays_Click()

  Dim res As Result
  Dim yval As Integer

  If btnshowallfluid.Value = False Then
    If grdfluid.Selection.Count Then
      $rFludRes.MoveTo(grdfluid.Selection[0])
      yval = InputValue($rFludRes["flditem"], ("Select Number of Days"), $rFludRes["flddays"])
      If yval Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rFludRes["fldid"])
        res["flddays"] = yval
        res["fldendtime"] = DateAdd($rFludRes["fldstarttime"], gb.Day, CInt(yval))
        res["xyz"] = False
        res.Update()
        ShowMedFluids("Current")
      Endif
    Endif
  Endif

End

Public Sub btnfluidstatus_Click()

  Dim xx As String[] = ["Continue", "Completed", "Discontinue", "On Hold", "Change", "ReWrite", "Cancelled", "Wasted"]
  Dim res As Result
  Dim xval As String

  If btnshowallfluid.Value = False Then
    If grdfluid.Selection.Count Then
      $rFludRes.MoveTo(grdfluid.Selection[0])
      xval = InputCombo($rFludRes["flditem"], ("Select Current Status"), xx, $rFludRes["fldcurval"], True)
      If xval Then
        res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1", $rFludRes["fldid"])
        res["fldcurval"] = xval
        res["xyz"] = False
        res.Update()
        ShowMedFluids("Current")
      Endif
    Endif
  Endif

End

Public Sub btncompatinfo_Click()

  ' Dim hForm As FmCompatibility
  '
  ' If grdfluid.Selection.Count Then
  '   $rFludRes.MoveTo(grdfluid.Selection[0])
  '   hForm = New FmCompatibility(modMedConstant.GetDrugFromStockID($rFludRes["flditem"]), False)
  '   hForm.ShowModal()
  ' Endif

End

Public Sub btnfluidcompat_Click()

  Dim sql As String
  Dim res As Result
  Dim opt As String[]
  Dim xval As String

  If grdfluid.Selection.Count Then
    $rFludRes.MoveTo(grdfluid.Selection[0])

    opt = New String[]
    sql = "select fldid,fldroute,flditem from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstarttime<=&3 and fldendtime>=&4 and flditemtype=&5 and fldcurval=&6"                    ''
    res = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), True, modDate.EndSqlDate(Now()), modDate.StartSqlDate(Now()), "Medicines", "Continue")
    If res.Available Then
      For Each res
        If res["fldroute"] = "topical" Then
        Else
          xval = modMedConstant.GetDrugFromStockID(res["flditem"])
          If opt.Count = 0 Then
            opt.Add(xval)
          Else
            If opt.Exist(xval) = False Then
              opt.Add(xval)
            Endif
          Endif
        Endif
      Next
    Endif

    modMedError.ShowMedCompatibleSingleDosID($rFludRes["fldid"], opt, "Message Box")
  Endif

End

Public Sub btnivstart_Click()

  If btnshowallfluid.Value = False Then
    If grdfluid.Selection.Count Then
      $rFludRes.MoveTo(grdfluid.Selection[0])

      If $rFludRes["fldcurval"] = "Continue" Then
        If GetFluidAdminStatusCode($rFludRes["fldid"]) = "icon:/small/next" Then
          If txtrate.Value Then
            modPharmSub.InsertNurDosing($rFludRes["fldid"], Trim(txtencid.Text), txtrate.Value, "mL/Hour", Now())
            FillFluidGridView($rRateRes["flddoseno"])
            ShowMedFluids("Current")
            txtrate.Value = 0
          Endif
        Endif
      Endif

    Endif
  Endif

End

''------------------- Rate---
Private Sub FillFluidGridView(dosno As Long)

  $rRateRes = modDatabase.$syConn.Exec("select fldid,fldid,fldid,fldvalue,fldunit,fldfromtime,fldtotime,flddoseno from tblnurdosing where fldencounterval=&1 and flddoseno=&2 and fldfromtime IS NOT NULL ORDER BY fldid DESC", Trim(txtencid.Text), dosno)
  $aRateFields = New String[]
  modGridView.ReadSmallData(grdfluiddata, $rRateRes, $aRateFields)

  With grdfluiddata
    .Columns[0].Hidden = True
    .Columns[1].Width = 350 * modBasic.$AppWidthRatio
    .Columns[2].Width = 25 * modBasic.$AppWidthRatio
    .Columns[3].Width = 50 * modBasic.$AppWidthRatio
    .Columns[4].Width = 75 * modBasic.$AppWidthRatio
    .Columns[5].Width = 150 * modBasic.$AppWidthRatio
    .Columns[6].Width = 150 * modBasic.$AppWidthRatio
    .Columns[7].Hidden = True

    .Columns[1].Text = "Particulars"
    .Columns[3].Text = "Rate"
    .Columns[4].Text = "Unit"
    .Columns[5].Text = "Start"
    .Columns[6].Text = "End"
  End With

End

Public Sub grdfluiddata_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rRateRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = txtfluidname.Text
  Else If Column = 2 Then
    Data.Html = modString.GetImageForHTMLGrid(modGeneralMain.GetSystemIcon(GetPictureDosing($rRateRes[$aRateFields[Column]])), "50%", "50%")
    Data.Text = ""
  Else If Column = 5 Then
    Data.Text = modReportVar.GetDateTimeReport($rRateRes[$aRateFields[Column]], gb.GeneralDate)
  Else If Column = 6 Then
    Data.Text = modReportVar.GetDateTimeReport($rRateRes[$aRateFields[Column]], gb.GeneralDate)
  Else
    Data.Text = $rRateRes[$aRateFields[Column]]
  Endif

End

Public Sub btnivclose_Click()

  Dim res As Result

  If grdfluiddata.Selection.Count Then
    $rRateRes.MoveTo(grdfluiddata.Selection[0])
    If GetPictureDosing($rRateRes["fldid"]) = "icon:/small/stop" Then
      res = modDatabase.$myConn.Edit("tblnurdosing", "fldid=&1", $rRateRes["fldid"])
      res["fldtotime"] = Now()
      res["xyz"] = False
      res.Update
      FillFluidGridView($rRateRes["flddoseno"])
      ShowMedFluids("Current")
    Endif
  Endif

End

Private Function GetPictureDosing(dosid As Long) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddoseno,fldfromtime,fldtotime from tblnurdosing where fldid=&1", dosid)
  If res.Available Then
    If res!fldfromtime And If Not res!fldtotime Then
      xx = "icon:/small/stop"
    Else If res!fldfromtime And If res!fldtotime Then
      xx = "icon:/small/lock"
    Endif
  Endif
  Return xx

End

Private Function GetFluidAdminStatusCode(dosno As Long) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$syConn.Exec("select fldid,fldfromtime,fldtotime from tblnurdosing where fldencounterval=&1 and flddoseno=&2 ORDER BY fldid DESC", Trim(txtencid.Text), dosno)
  If res.Available Then
    If res!fldfromtime And If Not res!fldtotime Then
      xx = "icon:/small/stop"
    Else If res!fldfromtime And If res!fldtotime Then
      xx = "icon:/small/next"
    Endif
  Else
    xx = "icon:/small/next"
  Endif
  Return xx

End

Public Sub btndosinfoivdrip_Click()

  Dim dosid As Long[]
  Dim xPath As String

  If txtencid.Text Then
    dosid = New Long[]
    For Each $rFludRes
      dosid.Add($rFludRes["fldid"])
    Next
    xPath = modCHTMLPatient.ShowMedicationLabelReport(Trim(txtencid.Text), dosid, "Inpatient")
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

Public Sub btnfluidinfo_Click()

  Dim doslst As Long[]
  Dim xPath As String

  If txtencid.Text Then
    doslst = New Long[]
    For Each $rFludRes
      doslst.Add($rFludRes["fldid"])
    Next
    xPath = modCHTMLPatient.ShowCounselingReport(Trim(txtencid.Text), doslst)
    modControlSub.OpenHTMLPreview(Trim(txtencid.Text), xPath, "ReportSize")
  Endif

End

''===================== MAJOR SYMPTOMS ================
Public Sub btnaddsymptom_Click()

  Dim sName As String[]
  Dim sText As String

  If txtencid.Text Then
    sName = GridListView(("Select Symptoms"), modMedicine.GetSymptomAllTypeList())
    If sName And If sName.Count Then
      For Each sText In sName
        modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Patient Symptoms", sText, "", "", False)
      Next
    Endif
    ShowSymptomData()
  Endif

End

Public Sub btnaddsympfree_Click()

  Dim xx As String

  xx = InputBox(("Enter custom Symptom"), ("Symptoms"), "")
  If xx Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Patient Symptoms", xx, "", "", False)
    ShowSymptomData()
  Endif

End

Public Sub ShowSymptomData()

  Dim sql As String

  sql = "select fldid,fldtime,fldtype,flditem,fldreportquali,fldreportquanti,fldid,fldid,flddetail,flduserid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3"
  $rEffcRes = modDatabase.$myConn.Exec(sql, Trim(txtencid.Text), "Patient Symptoms", True)
  $aEffcFields = New String[]
  modGridView.ReadSmallData(grdsymptom, $rEffcRes, $aEffcFields)

  With grdsymptom
    .Columns[0].Hidden = True
    .Columns[1].Width = 100 * modBasic.$AppWidthRatio
    .Columns[2].Hidden = True
    .Columns[3].Width = 200 * modBasic.$AppWidthRatio
    .Columns[4].Width = 95 * modBasic.$AppWidthRatio
    .Columns[5].Width = 40 * modBasic.$AppWidthRatio
    .Columns[6].Width = 25 * modBasic.$AppWidthRatio
    .Columns[7].Width = 25 * modBasic.$AppWidthRatio
    .Columns[8].Hidden = True
    .Columns[9].Hidden = True
    .Columns[10].Hidden = True

    .Columns[1].Text = "Start"
    .Columns[3].Text = "Symptom"
    .Columns[4].Text = "Severity"
    .Columns[5].Text = "Days"
  End With

End

Public Sub grdsymptom_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rEffcRes.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rEffcRes[$aEffcFields[Column]], gb.MediumDate)
  Else If Column = 5 Then
    Data.Text = Round($rEffcRes[$aEffcFields[Column]] / 24, -1)
  Else
    Data.Text = $rEffcRes[$aEffcFields[Column]]
  Endif

End

Public Sub btnmajsymplock_Click()

  Dim xval As Float
  Dim res1 As Result

  If grdsymptom.Selection.Count Then
    $rEffcRes.MoveTo(grdsymptom.Selection[0])
    If $rEffcRes["fldreportquanti"] = 0 Then
      xval = DateDiff($rEffcRes["fldtime"], Now(), gb.Hour)
      If Message.Question(("Are you sure that symptom has resolved in " & CStr(xval) & " Hours"), ("No"), ("Yes")) = 2 Then
        res1 = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rEffcRes["fldid"])
        res1["fldreportquanti"] = xval
        res1["xyz"] = False
        res1.Update()
        ShowSymptomData()
      Endif
    Else
      Message.Warning("Symptom Locked", ("OK"))
    Endif
  Endif

End

Public Sub btnmajsympinfo_Click()

  Dim yqualival As Variant[]
  Dim res1 As Result

  If grdsymptom.Selection.Count Then
    $rEffcRes.MoveTo(grdsymptom.Selection[0])
    yqualival = GetQualiValues($rEffcRes["flditem"], $rEffcRes["flddetail"], "")
    If yqualival Then
      res1 = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rEffcRes["fldid"])                            ''"
      res1["flddetail"] = yqualival[0]
      res1["flduptime"] = Now()
      res1["xyz"] = False
      res1.Update()
      ShowSymptomData()
    Endif
  Endif

End

Public Sub btnsymseverity_Click()

  Dim res1 As Result
  Dim xx As String

  If grdsymptom.Selection.Count Then
    $rEffcRes.MoveTo(grdsymptom.Selection[0])
    xx = InputCombo(("select severity of symptom"), $rEffcRes["flditem"], ["Subthreshold", "Mild", "Moderate", "Severe", "Upper threshold"], $rEffcRes["fldreportquali"], True)
    If xx Then
      res1 = modDatabase.$myConn.Edit("tblexamgeneral", "fldid=&1", $rEffcRes["fldid"])
      res1["fldreportquali"] = xx
      res1["xyz"] = False
      res1.Update()
      ShowSymptomData()
    Endif
  Endif

End

Public Sub btndelsymptom_Click()

  Dim res As Result

  If grdsymptom.Selection.Count Then
    $rEffcRes.MoveTo(grdsymptom.Selection[0])
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Delete("tblexamgeneral", "fldid=&1", $rEffcRes["fldid"])
      If modGeneral.AllowClinicalEdit(res["flduserid"]) = True Then
        res["fldsave"] = False
        res["flduserid"] = modBasic.$lbluser
        res.Update
        ShowSymptomData()
      Else
        Message.Warning("Authorization with " & res["flduserid"], ("OK"))
      Endif
    Endif
  Endif

End

''====================== CALCULATIONS ====================
''''hepatic
Public Sub tlbthepatic_Click()

  If txtencid.Text And If cmbhepatic.Text Then
    modClinSub.AddGeneralParametersQuali(Trim(txtencid.Text), "Hepatic Status", cmbhepatic.Text)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
  Endif

End

'''pregnancy
Public Sub tlbtpregnancy_Click()

  If txtencid.Text And If cmbpregnancy.Text Then
    modClinSub.AddGeneralParametersQuali(Trim(txtencid.Text), "Pregnancy Status", cmbpregnancy.Text)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
  Endif

End

Public Sub tlbibw_Click()

  If txtencid.Text Then
    txtibw.Value = modSysCons.GetCalculationAValue("Ideal_Body_Weight", Trim(txtencid.Text))
  Endif

End

Public Sub grpibw_Click()

  ' Dim hForm As FmClinChart
  '
  ' If txtencid.Text Then
  '   hForm = New FmClinChart("SetA", "Ideal_Body_Weight", Trim(txtencid.Text), "")
  '   fmOfficer.Workspace1.Add(hForm)
  ' Endif

End

Public Sub tlbsa_Click()

  If txtencid.Text Then
    txtbsa.Value = modSysCons.GetCalculationAValue("Body_Surface_Area", Trim(txtencid.Text))
  Endif

End

Public Sub grpbsa_Click()

  ' Dim hForm As FmClinChart
  '
  ' If txtencid.Text Then
  '   hForm = New FmClinChart("SetA", "Body_Surface_Area", Trim(txtencid.Text), "")
  '   fmOfficer.Workspace1.Add(hForm)
  ' Endif

End

Public Sub tlbtbmi_Click()

  If txtencid.Text Then
    txtbmi.Value = modSysCons.GetCalculationAValue("Body_Mass_Index", Trim(txtencid.Text))
  Endif

End

Public Sub grpbmi_Click()

  ' Dim hForm As FmClinChart
  '
  ' If txtencid.Text Then
  '   hForm = New FmClinChart("SetA", "Body_Mass_Index", Trim(txtencid.Text), "")
  '   fmOfficer.Workspace1.Add(hForm)
  ' Endif

End

Public Sub tlbcreclr_Click()

  If txtencid.Text Then
    txtcrclr.Value = modSysCons.GetCreatinineClearance(Trim(txtencid.Text))
  Endif

End

Public Sub grpcclr_Click()

End

Public Sub tlbtosmol_Click()

  If txtencid.Text Then
    txtserosmol.Value = modSysCons.GetConstantValue("Osmolality_Serum", Trim(txtencid.Text))
  Endif

End

Public Sub grposmol_Click()

End

'''=========================== CUSTOM MENUS ============================
Private Sub FillCustomMenu()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingFromFIle("CustomReport1/Name")
  xform2 = modSettings.ShowSettingFromFIle("CustomReport2/Name")
  xform3 = modSettings.ShowSettingFromFIle("CustomReport3/Name")
  xform4 = modSettings.ShowSettingFromFIle("CustomReport4/Name")
  xform5 = modSettings.ShowSettingFromFIle("CustomReport5/Name")
  xform6 = modSettings.ShowSettingFromFIle("CustomReport6/Name")
  xform7 = modSettings.ShowSettingFromFIle("CustomReport7/Name")
  xform8 = modSettings.ShowSettingFromFIle("CustomReport8/Name")
  xform9 = modSettings.ShowSettingFromFIle("CustomReport9/Name")
  xform10 = modSettings.ShowSettingFromFIle("CustomReport10/Name")

  If xform1 Then
    mnucust1.Title = xform1
    mnucust1.Tag = "CustomReport1"
    mnucust1.Visible = True
  Endif

  If xform2 Then
    mnucust2.Title = xform2
    mnucust2.Tag = "CustomReport2"
    mnucust2.Visible = True
  Endif

  If xform3 Then
    mnucust3.Title = xform3
    mnucust3.Tag = "CustomReport3"
    mnucust3.Visible = True
  Endif

  If xform4 Then
    mnucust4.Title = xform4
    mnucust4.Tag = "CustomReport4"
    mnucust4.Visible = True
  Endif

  If xform5 Then
    mnucust5.Title = xform5
    mnucust5.Tag = "CustomReport5"
    mnucust5.Visible = True
  Endif

  If xform6 Then
    mnucust6.Title = xform6
    mnucust6.Tag = "CustomReport6"
    mnucust6.Visible = True
  Endif

  If xform7 Then
    mnucust7.Title = xform7
    mnucust7.Tag = "CustomReport7"
    mnucust7.Visible = True
  Endif

  If xform8 Then
    mnucust8.Text = xform8
    mnucust8.Tag = "CustomReport8"
    mnucust8.Visible = True
  Endif

  If xform9 Then
    mnucust9.Title = xform9
    mnucust9.Tag = "CustomReport9"
    mnucust9.Visible = True
  Endif

  If xform10 Then
    mnucust10.Title = xform10
    mnucust10.Tag = "CustomReport10"
    mnucust10.Visible = True
  Endif

End

Private Sub FillCustomFormMenu()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingForReport("CustomForm1/Form_Name")
  xform2 = modSettings.ShowSettingForReport("CustomForm2/Form_Name")
  xform3 = modSettings.ShowSettingForReport("CustomForm3/Form_Name")
  xform4 = modSettings.ShowSettingForReport("CustomForm4/Form_Name")
  xform5 = modSettings.ShowSettingForReport("CustomForm5/Form_Name")
  xform6 = modSettings.ShowSettingForReport("CustomForm6/Form_Name")
  xform7 = modSettings.ShowSettingForReport("CustomForm7/Form_Name")
  xform8 = modSettings.ShowSettingForReport("CustomForm8/Form_Name")
  xform9 = modSettings.ShowSettingForReport("CustomForm9/Form_Name")
  xform10 = modSettings.ShowSettingForReport("CustomForm10/Form_Name")

  If xform1 Then
    mnucustform1.Title = xform1
    mnucustform1.Tag = "CustomForm1"
    mnucustform1.Visible = True
  Endif

  If xform2 Then
    mnucustform2.Title = xform2
    mnucustform2.Tag = "CustomForm2"
    mnucustform2.Visible = True
  Endif

  If xform3 Then
    mnucustform3.Title = xform3
    mnucustform3.Tag = "CustomForm3"
    mnucustform3.Visible = True
  Endif

  If xform4 Then
    mnucustform4.Title = xform4
    mnucustform4.Tag = "CustomForm4"
    mnucustform4.Visible = True
  Endif

  If xform5 Then
    mnucustform5.Title = xform5
    mnucustform5.Tag = "CustomForm5"
    mnucustform5.Visible = True
  Endif

  If xform6 Then
    mnucustform6.Title = xform6
    mnucustform6.Tag = "CustomForm6"
    mnucustform6.Visible = True
  Endif

  If xform7 Then
    mnucustform7.Title = xform7
    mnucustform7.Tag = "CustomForm7"
    mnucustform7.Visible = True
  Endif

  If xform8 Then
    mnucustform8.Title = xform8
    mnucustform8.Tag = "CustomForm8"
    mnucustform8.Visible = True
  Endif

  If xform9 Then
    mnucustform9.Title = xform9
    mnucustform9.Tag = "CustomForm9"
    mnucustform9.Visible = True
  Endif

  If xform10 Then
    mnucustform10.Title = xform10
    mnucustform10.Tag = "CustomForm10"
    mnucustform10.Visible = True
  Endif

End

Public Sub mnucust1_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust1.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust2_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust2.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust3_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust3.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust4_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust4.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust5_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust5.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust6_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust6.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust7_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust7.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust8_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust8.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust9_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust9.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnucust10_Click()

  Dim hCls As CReportCustom

  If txtencid.Text Then
    hCls = New CReportCustom(Trim(txtencid.Text), mnucust10.Tag, "ReportSize", MMain.$defUnit)
    hCls.Preview()
  Endif

End

Public Sub mnuessenexam_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = modString.GetListFromCompareVariant(modFixPatho.$ExaminationCompVar, "fldexamid", "fldcategory", "Essential Examinations", True)
    yy = New String[]
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform1_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform1.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform2_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform2.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform3_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform3.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform4_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform4.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform5_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform5.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform6_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform6.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform7_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform7.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform8_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform8.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform9_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform9.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

Public Sub mnucustform10_Click()

  Dim xx As String[]
  Dim yy As String[]
  Dim hForm As FmMultiChart

  If txtencid.Text Then
    xx = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Exam"), ";")
    yy = Split(modSettings.ShowSettingForReport(mnucustform10.Tag & "/" & "Form_Test"), ";")
    hForm = New FmMultiChart(Trim(txtencid.Text), xx, yy, modLabSub.GetTestUnitFromButton(rbsi, rbmetric))
    hForm.ShowModal
  Endif

End

''------------------------ Algorithms ---------------------------------------------
Private Sub SHowALgorithmList()

  Dim xform1 As String
  Dim xform2 As String
  Dim xform3 As String
  Dim xform4 As String
  Dim xform5 As String
  Dim xform6 As String
  Dim xform7 As String
  Dim xform8 As String
  Dim xform9 As String
  Dim xform10 As String

  xform1 = modSettings.ShowSettingForReport("ClinAlgorithm1/AlgorithmName")
  xform2 = modSettings.ShowSettingForReport("ClinAlgorithm2/AlgorithmName")
  xform3 = modSettings.ShowSettingForReport("ClinAlgorithm3/AlgorithmName")
  xform4 = modSettings.ShowSettingForReport("ClinAlgorithm4/AlgorithmName")
  xform5 = modSettings.ShowSettingForReport("ClinAlgorithm5/AlgorithmName")
  xform6 = modSettings.ShowSettingForReport("ClinAlgorithm6/AlgorithmName")
  xform7 = modSettings.ShowSettingForReport("ClinAlgorithm7/AlgorithmName")
  xform8 = modSettings.ShowSettingForReport("ClinAlgorithm8/AlgorithmName")
  xform9 = modSettings.ShowSettingForReport("ClinAlgorithm9/AlgorithmName")
  xform10 = modSettings.ShowSettingForReport("ClinAlgorithm10/AlgorithmName")

  If xform1 Then
    mnualgo1.Title = xform1
    mnualgo1.Tag = "ClinAlgorithm1"
    mnualgo1.Visible = True
  Endif

  If xform2 Then
    mnualgo2.Title = xform2
    mnualgo2.Tag = "ClinAlgorithm2"
    mnualgo2.Visible = True
  Endif

  If xform3 Then
    mnualgo3.Title = xform3
    mnualgo3.Tag = "ClinAlgorithm3"
    mnualgo3.Visible = True
  Endif

  If xform4 Then
    mnualgo4.Title = xform4
    mnualgo4.Tag = "ClinAlgorithm4"
    mnualgo4.Visible = True
  Endif

  If xform5 Then
    mnualgo5.Title = xform5
    mnualgo5.Tag = "ClinAlgorithm5"
    mnualgo5.Visible = True
  Endif

  If xform6 Then
    mnualgo6.Title = xform6
    mnualgo6.Tag = "ClinAlgorithm6"
    mnualgo6.Visible = True
  Endif

  If xform7 Then
    mnualgo7.Title = xform7
    mnualgo7.Tag = "ClinAlgorithm7"
    mnualgo7.Visible = True
  Endif

  If xform8 Then
    mnualgo8.Title = xform8
    mnualgo8.Tag = "ClinAlgorithm8"
    mnualgo8.Visible = True
  Endif

  If xform9 Then
    mnualgo9.Title = xform9
    mnualgo9.Tag = "ClinAlgorithm9"
    mnualgo9.Visible = True
  Endif

  If xform10 Then
    mnualgo10.Title = xform10
    mnualgo10.Tag = "ClinAlgorithm10"
    mnualgo10.Visible = True
  Endif

End

Public Sub mnualgo1_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo1.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo2_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo2.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo3_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo3.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo4_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo4.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo5_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo5.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo6_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo6.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo7_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo7.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo8_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo8.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo9_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo9.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

Public Sub mnualgo10_Click()

  Dim xval As Variant

  If txtencid.Text Then
    xval = modSysCons.GetALgorithmValue(Trim(txtencid.Text), mnualgo10.Tag)
    Message.Info(xval, ("OK"))
  Endif

End

''===================== Structured exams==========================
Private Sub FillExamMenu()

  If $structExamList.Count > 0 Then
    mnurec1.Text = $structExamList[0]
    mnurec1.Visible = True
  Endif

  If $structExamList.Count > 1 Then
    mnurec2.Text = $structExamList[1]
    mnurec2.Visible = True
  Endif

  If $structExamList.Count > 2 Then
    mnurec3.Text = $structExamList[2]
    mnurec3.Visible = True
  Endif

  If $structExamList.Count > 3 Then
    mnurec4.Text = $structExamList[3]
    mnurec4.Visible = True
  Endif

  If $structExamList.Count > 4 Then
    mnurec5.Text = $structExamList[4]
    mnurec5.Visible = True
  Endif

  If $structExamList.Count > 5 Then
    mnurec6.Text = $structExamList[5]
    mnurec6.Visible = True
  Endif

  If $structExamList.Count > 6 Then
    mnurec7.Text = $structExamList[6]
    mnurec7.Visible = True
  Endif

  If $structExamList.Count > 7 Then
    mnurec8.Text = $structExamList[7]
    mnurec8.Visible = True
  Endif

  If $structExamList.Count > 8 Then
    mnurec9.Text = $structExamList[8]
    mnurec9.Visible = True
  Endif

  If $structExamList.Count > 9 Then
    mnurec10.Text = $structExamList[9]
    mnurec10.Visible = True
  Endif

End

Public Sub mnurec1_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec1.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec2_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec2.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec3_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec3.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec4_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec4.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec5_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec5.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec6_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec6.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec7_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec7.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec8_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec8.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec9_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec9.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

Public Sub mnurec10_Click()

  Dim hForm As FmWardHistoryMin

  If txtencid.Text Then
    hForm = New FmWardHistoryMin(mnurec10.Text, Trim(txtencid.Text), "Physician Examinations")
    hForm.ShowModal
  Endif

End

''----------------- Expert advice --------------
Private Sub ShowPlanningFinal()

  Dim xexptAr As String[]

  xexptAr = modPatPatho.ShowSelectedNoteUser(Trim(txtencid.Text), "Expert Planning")
  If xexptAr And If xexptAr.Count Then
    txtplanfinal.RichText = xexptAr[0]
    lblfinaluser.Text = xexptAr[1]
  Endif

End

Public Sub btnplanfinal_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtplanfinal.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", "Expert Planning", txtplanfinal.KeyList.Join(";"), txtplanfinal.RichText, xboolean)
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
  Endif

End

''--------------------------- Telemedicine -------------------
Public Sub btnrepoupload_Click()

  Dim xapp As String
  Dim arcmd1 As String[]
  Dim arcmd2 As String[]
  Dim arcmd3 As String[]

  If txtencid.Text Then
    xapp = modSettings.ShowSettingFromFIle("Application/RepoUploader")
    Select modBasic.$ClinicTelemed
      Case "Enable", "Partial"
        If xapp Then
          arcmd1 = [xapp, "--upload-repo-one", "tblencounter", Trim(txtencid.Text)]
          arcmd2 = [xapp, "--upload-repo-one", "tblpatientinfo", $PatientNum]
          arcmd3 = [xapp, "--upload-repo-one", "tbltelemedtalk", $VidIndex]
          modBasic.DebugAPIString("Execute " & arcmd1.Join(Space(1)))
          Exec arcmd1 Wait
          modBasic.DebugAPIString("Execute " & arcmd2.Join(Space(1)))
          Exec arcmd2 Wait
          modBasic.DebugAPIString("Execute " & arcmd3.Join(Space(1)))
          Exec arcmd3 Wait
        Else
          modRepository.UploadSingleToRepository("tbltelemedtalk", $VidIndex)
          modRepository.UploadSingleToRepository("tblencounter", Trim(txtencid.Text))
          modRepository.UploadSingleToRepository("tblpatientinfo", $PatientNum)
        Endif
        Me.Exec("Toastify({text: 'Information uploaded', duration: 3000}).showToast()")

      Case "Complete"
        modDataRepo.GetRepoUploadEncounterData(Trim(txtencid.Text))
        Me.Exec("Toastify({text: 'Information uploaded', duration: 3000}).showToast()")

    End Select
  Endif

End

Public Sub btnquery_Click()

  Dim rsx As Result
  Dim res As Result
  Dim xURL As String
  Dim xPass As String

  If modBasic.$HospCode Then
    xURL = modBasic.$ClinVideoServer
    If xURL Then
      If modBasic.$ClinVideoPass = "Disable" Then
        xPass = "NA"
      Else
        xPass = Left(modPassword.GetRandomPassword(), 6)
      Endif
      btnquery.Tag = xPass
      rsx = modDatabase.$myConn.Exec("select fldtalkid from tbltelemedtalk where fldtalkid=&1", $VidIndex)

      If rsx.Available Then
        res = modDatabase.$myConn.Edit("tbltelemedtalk", "fldtalkid=&1", $VidIndex)
        res["fldteleuser"] = cmbexpert.Tag
        res["fldsms"] = chkquerysms.Value
        res["fldurgency"] = cmburgency.Text
        res["fldvidroom"] = $vidRoom
        res["fldvidpass"] = xPass
        res["fldrequest"] = txtquery.RichText

        res["fldorduserid"] = modBasic.$lbluser
        res["fldordtime"] = Now()
        res["fldordcomp"] = modBasic.$compID
        res["fldresponse"] = ""
        res["xyz"] = False

      Else
        res = modDatabase.$myConn.Create("tbltelemedtalk")
        res["fldtalkid"] = $VidIndex
        res["fldencounterval"] = Trim(txtencid.Text)
        res["fldpatientval"] = $PatientNum
        res["fldhospital"] = modBasic.$HospCode

        res["fldteleuser"] = cmbexpert.Tag
        res["fldsms"] = chkquerysms.Value
        If cmburgency.Text Then
          res["fldurgency"] = cmburgency.Text
        Else
          res["fldurgency"] = "Normal"
        Endif
        res["fldvidroom"] = $vidRoom
        res["fldvidpass"] = xPass
        res["fldvidserver"] = ""

        res["fldrequest"] = txtquery.RichText
        res["fldorduserid"] = modBasic.$lbluser
        res["fldordtime"] = Now()
        res["fldordcomp"] = modBasic.$compID
        res["fldresponse"] = ""

        res["flduserid"] = ""
        res["fldtime"] = ""
        res["fldcomp"] = ""
        res["fldcoment"] = ""
        res["fldupuser"] = ""
        res["flduptime"] = ""
        res["xyz"] = False
        If MMain.$WebEntry = True Then
          res["fldrepodate"] = Now()
          res["fldrepomac"] = CGI["REMOTE_ADDR"] & ":" & CGI["REMOTE_PORT"]
          res["fldhospcode"] = modBasic.$HospCode
        Endif
      Endif
      res.Update
      Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))

      If chkquerysms.Value = True Then
        btnsendsms_Click()
      Endif

    Else
      Message.Warning("Camus server not specified.", "OK")
    Endif
  Else
    Message.Warning("Hospital Code not defined.", "OK")
  Endif

End

Public Sub btnvideocall_Click()

  Dim res As Result
  Dim xURL As String
  Dim xroom As String
  Dim xPass As String
  Dim xuser As String
  Dim hForm As CCamusAPI
  Dim xval As String
  Dim hForm1 As FmTeleURL

  xURL = modBasic.$ClinVideoServer
  If xURL Then

    res = modDatabase.$myConn.Edit("tbltelemedtalk", "fldtalkid=&1", $VidIndex)
    If res.Available Then
      res.MoveLast
      xuser = res["fldteleuser"]
      xroom = res["fldvidroom"]
      xPass = res["fldvidpass"]
      If xroom And If xPass Then
        If Not res["fldvidserver"] Then
          hForm = New CCamusAPI(xURL, xroom, xPass, "No", "5")
          xval = hForm.GetCamusResponse()
          res["fldvidserver"] = xURL
          res["xyz"] = False
          res.Update
        Else
          xval = "Room already created"
        Endif
        Wait
        hForm1 = New FmTeleURL(xURL &/ "room" &/ xroom, xPass, xval, xuser)
        hForm1.Show

        txtcamus.Text = xURL &/ "room" &/ xroom
        txtpassword.Text = xPass
        If txtcamus.Text Then
          pnlvideocall.Visible = True
        Endif

      Endif
    Endif

  Else
    Message.Warning("Camus server not specified.", "OK")
  Endif

End

Public Sub btncamus_Click()

  Dim hForm As FmOpenLink

  If txtcamus.Text Then
    hForm = New FmOpenLink(txtcamus.Text)
    hForm.ShowModal
  Endif

End

Public Sub btncleanchat_Click()

  Dim res As Result

  If Message.Question("Are you sure to delete Video Chat Request ?", ("No"), ("Yes")) = 2 Then
    res = modDatabase.$myConn.Edit("tbltelemedtalk", "fldtalkid=&1", $VidIndex)
    res["fldvidserver"] = ""
    res["xyz"] = False
    res.Update
  Endif

End

Public Sub btnexpert_Click()

  Dim xMedUser As String[]
  Dim res As Result
  Dim xPath As String

  res = modDatabase.$myConn.Exec("select fldcategory,fldhospital,fldteleuser,fldusername from tbltelemeduser where fldstatus=&1", "Active")
  xPath = modTextDB.ConvertResultToCSV(res, ";", False)
  If Exist(xPath) Then
    xMedUser = TreeViewCode(xPath, ";", 3, True)
    If xMedUser And If xMedUser.Count Then
      cmbexpert.Tag = xMedUser[1]
      cmbexpert.Text = modGeneral.GetTeleMedUserName(cmbexpert.Tag)
    Endif
  Endif

End

Public Sub btnshowexpert_Click()

  modDatabase.$myConn.Delete("tbltelemeduser")
  Wait
  modRepoSync.ReadSyncConfig()
  modRepoSync.GetAPISyncTwoSource(modDatabase.$myConn, "tbltelemeduser", True)

End

Public Sub btnsendsms_Click()

  Dim xsms As String
  Dim sphno As String

  If chkquerysms.Value = True And If cmbexpert.Tag Then
    xsms = "ENC: " & Trim(txtencid.Text) & gb.NewLine
    xsms = xsms & "Age/Sex:" & txtpatage.Value & Space(1) & cmbpatageunit.Text & Space(1) & txtgender.Text & gb.NewLine
    xsms = xsms & "Status: " & cmburgency.Text
    sphno = modGeneral.GetTeleMedUserContact(cmbexpert.Tag)
    If sphno Then
      If modBasic.$SMSQueDisable = "No" Then
        modAppSupport.SaveSMSEntry(sphno, xsms, "Waiting", "")
      Else
        modAppSupport.SendSMSSingle(sphno, xsms)
      Endif
    Endif
  Endif

End

Public Sub btnfeedback_Click()

  Dim res As Result

  modRepository.TransferSelectRemoConn("fldtalkid", $VidIndex, "tbltelemedtalk")
  res = modRepository.$RepoCon.Exec("select fldresponse,flduserid from tbltelemedtalk where fldtalkid=&1", $VidIndex)
  If res.Available Then
    res.MoveLast
    txtfeedback.RichText = res["fldresponse"]
    lblexpert.Text = res["flduserid"]
  Endif

End

Public Sub btngetfeed_Click()

  Dim xboolean As Boolean

  If modBasic.$ClinHistoryInput = "Single" Then
    xboolean = True
  Else
    xboolean = False
  Endif

  If txtfeedback.Text Then
    modPatientGeneral.AddExamGeneralQualiData(Trim(txtencid.Text), "Notes", "Expert Planning", txtfeedback.KeyList.Join(";"), txtfeedback.RichText, xboolean)
    ShowPlanningFinal()
    Me.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", "Information saved", modBasic.$BalloonDelay))
  Endif

End

''-----------------database
Public Sub btndatahistory_Click()

  If cmbinpathistory.Text Then
    txthistory.RichText = AddHistory("History", cmbinpathistory.Text)
  Endif

End

Public Sub btndataadmit_Click()

End

Public Sub btndatanote_Click()

  If cmbnote.Text Then
    txtnote.RichText = AddHistory("Discharge", cmbnote.Text)
  Endif

End

Public Sub btndataexpert_Click()

  txtplanfinal.RichText = AddHistory("Discharge", "Expert Planning")

End

''--------------- pen
Public Sub btnpanhistory_Click()

  If cmbinpathistory.Text Then
    txthistory.RichText = txthistory.RichText & Space(1) & modFillContainer.GetExtraTextArea(cmbinpathistory.Text, txthistory.Text)
  Endif

End

Public Sub btnpanadmit_Click()

  txtadmitcause.Text = txtadmitcause.Text & Space(1) & modFillContainer.GetExtraTextArea("Cause of Admission", txtadmitcause.Text)

End

Public Sub btnpannote_Click()

  If cmbnote.Text Then
    txtnote.RichText = txtnote.RichText & Space(1) & modFillContainer.GetExtraTextArea(cmbnote.Text, txtnote.Text)
  Endif

End

Public Sub btnpanexpert_Click()

  txtplanfinal.RichText = txtplanfinal.RichText & Space(1) & modFillContainer.GetExtraTextArea("Expert Planning", txtplanfinal.Text)

End

''------------------ exec
Public Sub btnexechistory_Click()

  txthistory.RichText = txthistory.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txthistory.Text))

End

Public Sub btnexecadmit_Click()

  txtadmitcause.Text = txtadmitcause.Text & modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txtadmitcause.Text)

End

Public Sub btnexecnote_Click()

  txtnote.RichText = txtnote.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txtnote.Text))

End

Public Sub btnexecexpert_Click()

  txtplanfinal.RichText = txtplanfinal.RichText & modString.TextToHTML(modCloudAI.GetPatCloudAIResponse(Trim(txtencid.Text), txtplanfinal.Text))

End

''------------attach
Public Sub btnatthistory_Click()

  txthistory.RichText = txthistory.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnattadmit_Click()

  txtadmitcause.Text = txtadmitcause.Text & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnattnote_Click()

  txtnote.RichText = txtnote.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnattexpert_Click()

  txtplanfinal.RichText = txtplanfinal.RichText & DictionaryVIew(modBasic.$dictadvPath)

End

Public Sub btnclearhistory_Click()

  txthistory.RichText = ""

End

Public Sub btnclearnote_Click()

  txtnote.RichText = ""

End

Public Sub btnclearexpert_Click()

  txtplanfinal.RichText = ""

End

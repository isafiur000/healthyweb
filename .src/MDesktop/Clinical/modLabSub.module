' Gambas module file

'''----------------------------- Procedures for test ------------------------------------------------------------
Private Function GetLabVisibility(strTest As String) As String

  Dim xval As String

  If modBasic.$LabAddHidden Then
    If modBasic.$LabAddHidden = "All Departments" Then
      xval = "Hidden"
    Else If modBasic.$LabAddHidden = "Yes" Then
      xval = "Hidden"
    Else If modBasic.$LabAddHidden = "No" Then
      xval = "Visible"
    Else
      If modFixLab.GetLabTestCategory(strTest) = modBasic.$LabAddHidden Then
        xval = "Hidden"
      Else
        xval = "Visible"
      Endif
    Endif
  Else
    xval = "Visible"
  Endif

  Return xval

End

Public Sub InsertLabTestOrder(encid As String, strTest As String, strType As String, strMethod As String, grpid As Long, sRefer As String, sBillNo As String, sComment As String)

  Dim res As Result
  Dim xIntVal As String

  res = modDatabase.$myConn.Create("tblpatlabtest")
  res["fldencounterval"] = encid
  res["fldtestid"] = strTest
  res["fldmethod"] = strMethod
  res["fldgroupid"] = grpid
  res["fldsampleid"] = ""
  res["fldsampletype"] = ""
  res["fldreportquali"] = ""
  res["fldreportquanti"] = 0
  res["fldfilepath"] = ""
  res["fldstatus"] = "Ordered"
  res["fldprint"] = False
  res["fldabnormal"] = False
  res["fldrefername"] = sRefer
  res["fldcondition"] = ""
  res["fldcomment"] = sComment
  res["fldbillno"] = sBillNo
  res["flvisible"] = GetLabVisibility(strTest)

  res["fldtestunit"] = ""
  res["fldtest_type"] = strType
  res["fldchk"] = False
  res["fldorder"] = 0
  res["fldflag"] = False
  res["xyz"] = True

  res["flduserid_sample"] = ""
  res["fldtime_sample"] = ""
  res["fldcomp_sample"] = modBasic.$compID
  res["fldsave_sample"] = False
  res["flduptime_sample"] = ""

  res["flduserid_start"] = ""
  res["fldtime_start"] = ""
  res["fldcomp_start"] = ""
  res["fldsave_start"] = False
  res["flduptime_start"] = ""

  res["flduserid_report"] = ""
  res["fldtime_report"] = ""
  res["fldcomp_report"] = ""
  res["fldsave_report"] = False
  res["flduptime_report"] = ""
  res["fldupuser_report"] = ""

  res["flduserid_verify"] = ""
  res["fldtime_verify"] = ""
  res["fldcomp_verify"] = ""
  res["fldsave_verify"] = False
  res["flduptime_verify"] = ""
  res["fldupuser_verify"] = ""

  If MMain.$WebEntry = True Then
    xIntVal = modString.GetDateString(Now())
    res["fldid"] = CLong(xIntVal)
    res["fldrepoid"] = modMisc.GetWebIndexStr(xIntVal)
    res["fldrepodate"] = Now()
    res["fldrepomac"] = CGI["REMOTE_ADDR"] & ":" & CGI["REMOTE_PORT"]
    res["fldhospcode"] = modBasic.$HospCode
  Endif
  res.Update()
  'don't catch error

End

Public Sub UpdateLabTestSample(id As Long, sampleID As String, strTampleType As String, strRefer As String, strCondi As String, strComment As String, sBillNo As String, xOrder As Integer, Optional sDate As Date, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldsampleid"] = sampleID
  res["fldsampletype"] = strTampleType
  res["fldstatus"] = "Sampled"
  If strRefer Then
    res["fldrefername"] = strRefer
  Endif
  If strCondi Then
    res["fldcondition"] = strCondi
  Endif
  If strComment Then
    res["fldcomment"] = strComment
  Endif
  If sBillNo Then
    res["fldbillno"] = sBillNo
  Endif
  If xOrder Then
    res["fldorder"] = xOrder
  Endif

  res["flduserid_sample"] = modBasic.$lbluser
  If sDate Then
    res["fldtime_sample"] = sDate
    res["flduptime_sample"] = Now()
  Else
    If res["fldtime_sample"] Then
      res["flduptime_sample"] = Now()
    Else
      res["fldtime_sample"] = Now()
    Endif
  Endif
  res["fldcomp_sample"] = modBasic.$compID
  res["fldsave_sample"] = True
  res.Update()
  'don't catch error

End

Public Sub InsertLabSubTestUnit(encid As String, testId As Long, testName As String, subTestName As String, optionType As String, sOrder As Variant, Optional sTable As String)

  Dim res As Result
  Dim xIntVal As String

  If sTable Then
    res = modDatabase.$myConn.Create(sTable)
  Else
    res = modDatabase.$myConn.Create("tblpatlabsubtest")
  Endif
  res["fldencounterval"] = encid
  res["fldtestid"] = testId
  res["fldparent"] = testName
  res["fldsubtest"] = subTestName
  res["fldindex"] = modApplication.GetMD5SumString(testId & ":" & encid & ":" & testName & ":" & subTestName)
  res["fldtanswertype"] = optionType
  res["fldreport"] = ""
  res["fldsave"] = False
  res["fldabnormal"] = False
  res["fldchk"] = False
  If sOrder Then
    res["fldorder"] = sOrder
  Else
    res["fldorder"] = 0
  Endif
  res["fldfilepath"] = ""
  res["xyz"] = True
  If MMain.$WebEntry = True Then
    xIntVal = modString.GetDateString(Now())
    res["fldid"] = CLong(xIntVal)
    res["fldrepoid"] = modMisc.GetWebIndexStr(xIntVal)
    res["fldrepodate"] = Now()
    res["fldrepomac"] = CGI["REMOTE_ADDR"] & ":" & CGI["REMOTE_PORT"]
    res["fldhospcode"] = modBasic.$HospCode
  Endif
  res.Update()
  'don't catch error

End

Public Sub InsertLabSubTest(encid As String, testId As Long, testName As String, subtestList As String[], Optional sTable As String)

  Dim xx As String
  Dim xType As String
  Dim tblName As String

  If sTable Then
    tblName = sTable
  Else
    tblName = "tblpatlabsubtest"
  Endif
  For Each xx In subtestList
    xType = modFixLab.GetSubTestOption(testName, xx)
    InsertLabSubTestUnit(encid, testId, testName, xx, xType, 0, tblName)
  Next
  'don't catch error

End

Public Sub UpdateLabTestReportQuali(id As Long, strReport As String, abn As Boolean, Optional KeyList As String, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldreportquali"] = Trim(strReport)
  If IsFloat(strReport) = True Then
    res["fldreportquanti"] = CFloat(Trim(strReport))
  Else
    res["fldreportquanti"] = 0
  Endif
  If KeyList Then
    res["fldfilepath"] = KeyList
  Endif
  res["fldstatus"] = "Reported"
  If Not res["flduserid_report"] Then
    res["flduserid_report"] = modBasic.$lbluser
  Else
    res["fldupuser_report"] = modBasic.$lbluser
  Endif
  If res["fldtime_report"] Then
    res["flduptime_report"] = Now()
  Else
    res["fldtime_report"] = Now()
  Endif
  res["fldcomp_report"] = modBasic.$compID
  res["fldsave_report"] = True
  res["fldabnormal"] = abn
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateLabTestReportQuanti(id As Long, strReport As Float, abn As Boolean, strUnit As String, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldreportquali"] = CStr(strReport)
  res["fldreportquanti"] = strReport
  res["fldstatus"] = "Reported"
  If Not res["flduserid_report"] Then
    res["flduserid_report"] = modBasic.$lbluser
  Else
    res["fldupuser_report"] = modBasic.$lbluser
  Endif
  If res["fldtime_report"] Then
    res["flduptime_report"] = Now()
  Else
    res["fldtime_report"] = Now()
  Endif
  res["fldcomp_report"] = modBasic.$compID
  res["fldsave_report"] = True
  res["fldabnormal"] = abn
  res["fldtestunit"] = strUnit
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateLabQualiQuanti(id As Long, strReport As String, strValue As Float, abn As Boolean, Optional KeyList As String, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldreportquali"] = strReport
  res["fldreportquanti"] = strValue
  If KeyList Then
    res["fldfilepath"] = KeyList
  Endif
  res["fldstatus"] = "Reported"
  If Not res["flduserid_report"] Then
    res["flduserid_report"] = modBasic.$lbluser
  Else
    res["fldupuser_report"] = modBasic.$lbluser
  Endif
  If res["fldtime_report"] Then
    res["flduptime_report"] = Now()
  Else
    res["fldtime_report"] = Now()
  Endif
  res["fldcomp_report"] = modBasic.$compID
  res["fldsave_report"] = True
  res["fldabnormal"] = abn
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateVerifyTestReport(id As Long, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldstatus"] = "Verified"
  res["flvisible"] = "Visible"
  If Not res["flduserid_verify"] Then
    res["flduserid_verify"] = modBasic.$lbluser
  Else
    res["fldupuser_verify"] = modBasic.$lbluser
  Endif
  If res["fldtime_verify"] Then
    res["flduptime_verify"] = Now()
  Else
    res["fldtime_verify"] = Now()
  Endif
  res["fldcomp_verify"] = modBasic.$compID
  res["fldsave_verify"] = True
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub CancelVerifyTestReport(id As Long, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldstatus"] = "Reported"
  If Not res["flduserid_verify"] Then
    res["flduserid_verify"] = modBasic.$lbluser
  Else
    res["fldupuser_verify"] = modBasic.$lbluser
  Endif
  If res["fldtime_verify"] Then
    res["flduptime_verify"] = Now()
  Else
    res["fldtime_verify"] = Now()
  Endif
  res["fldcomp_verify"] = modBasic.$compID
  res["fldsave_verify"] = False
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub MarkAsChecked(id As Long, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["flduserid_verify"] = modBasic.$lbluser
  If res["fldtime_verify"] Then
    res["flduptime_verify"] = Now()
  Else
    res["fldtime_verify"] = Now()
  Endif
  res["fldcomp_verify"] = modBasic.$compID
  res["fldsave_verify"] = True
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateEquipmentMethod(id As Long, sMethod As String, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldmethod"] = sMethod
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateSpecimenTest(id As Long, specimen As String, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldsampletype"] = specimen
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateConditionTest(id As Long, condition As String, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldcondition"] = condition
  res["xyz"] = False
  res.Update()
  'don't catch error

End

Public Sub UpdateLabTestOrder(id As Long, sOrder As Integer, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabtest", "fldid=&1", id)
  Endif
  res["fldorder"] = sOrder
  ' res["xyz"] = False
  res.Update
  'don't catch error

End

Public Sub UpdateLabSubTestOrder(id As Long, sOrder As Integer, Optional sTable As String)

  Dim res As Result

  If sTable Then
    res = modDatabase.$myConn.Edit(sTable, "fldid=&1", id)
  Else
    res = modDatabase.$myConn.Edit("tblpatlabsubtest", "fldid=&1", id)
  Endif
  res["fldorder"] = sOrder
  ' res["xyz"] = False
  res.Update
  'don't catch error

End

'NOTE: -------------------------------- LAB SETTINGS ---------------------------------------
Public Sub DisplayDefaultTestUnit(rbSI As WebRadioButton, rbMetric As WebRadioButton)

  Dim def As String

  def = modSettings.ShowSettingFromFIle("TestUnit/Default")
  If def Then
    If def = "SI" Then
      rbSI.Value = True
    Else If def = "Metric" Then
      rbMetric.Value = True
    Endif
  Else
    rbMetric.Value = True
  Endif

End

Public Function GetTestUnitFromButton(rbsi As WebRadioButton, rbmetric As WebRadioButton) As String

  Dim unt As String

  If rbsi.Value = True Then
    unt = "SI"
  Else If rbmetric.Value = True Then
    unt = "Metric"
  Else
    unt = MMain.$defUnit
  Endif
  Return unt

End

Public Function GetAutoIncreasingNo() As String

  Dim xsampauto As String
  Dim xprefix As String

  xprefix = modBasic.$LabSamplePrefix
  If modBasic.$LabAutoSampNo = "Yes" Then
    If modBasic.$LabSampleSource = "Department" Then
      xsampauto = xprefix & CStr(modBillLock.GetLaboratoryID())
    Else If modBasic.$LabSampleSource = "Section" Then
    Else
      If modBasic.$LabSampNoLength Then
        xsampauto = xprefix & modString.GetZeroStringText(CStr(modBillLock.CurrentLabNo()), modBasic.$LabSampNoLength)
      Else
        xsampauto = xprefix & CStr(modBillLock.CurrentLabNo())
      Endif
    Endif
  Else
    xsampauto = xprefix
  Endif
  Return xsampauto

End

Public Function ListFooterNoteList() As String[]

  Dim i As Integer
  Dim xx As String
  Dim xval As String[]

  xval = New String[]
  For i = 1 To 50
    xx = modSettings.ShowSettingFromFIle("FooterNote/Name_" & CStr(i))
    If xx Then
      xval.Add(xx)
    Endif
  Next
  Return xval

End

' ' '''---------------------------------CHART --------------------------------------------------------
Public Function FillQuantiTestChart(sCanvas As String, encid As String, strHead As String, strUnit As String, Optional sHour As Integer) As String

  ' Dim maxval As Float
  ' Dim minval As Float
  ' Dim normval As Float
  ' Dim xlimit As Float[]
  Dim sql As String
  Dim res As Result
  Dim firDate As Date

  Dim pointsArr_x As String[]
  Dim pointsArr_y As Float[]

  Dim xcoll As Collection
  Dim sPath As String

  pointsArr_x = New String[]
  pointsArr_y = New Float[]

  If sHour Then
    firDate = DateAdd(Now(), gb.Hour, 0 - sHour)
    sql = "select fldid,fldencounterval,fldtime_sample,fldtestid,fldreportquanti,fldtestunit,fldmethod from tblpatlabtest where fldencounterval=&1 and fldtestid=&2 and fldtest_type=&3 and (fldstatus=&4 or fldstatus=&5) and fldtime_sample>=&6 ORDER BY fldtime_sample"               ''
    res = modDatabase.$myConn.Exec(sql, encid, strHead, "Quantitative", "Reported", "Verified", firDate)
  Else
    sql = "select fldid,fldencounterval,fldtime_sample,fldtestid,fldreportquanti,fldtestunit,fldmethod from tblpatlabtest where fldencounterval=&1 and fldtestid=&2 and fldtest_type=&3 and (fldstatus=&4 or fldstatus=&5) ORDER BY fldtime_sample"
    res = modDatabase.$myConn.Exec(sql, encid, strHead, "Quantitative", "Reported", "Verified")
  Endif
  If res.Available Then
    ' xlimit = modLabTest.LabBothLimitValue(strHead, encid, strUnit)
    ' minval = xlimit[0]
    ' maxval = xlimit[1]
    ' normval = modLabTest.LabNormalValue(strHead, encid, strUnit)

    For Each res
      If sHour Then
        If sHour < 25 Then
          pointsArr_x.Add(Format(res["fldtime_sample"], "hh:nn"))
        Else
          pointsArr_x.Add(Format(res["fldtime_sample"], "dd hh:nn"))
        Endif
      Else
        pointsArr_x.Add(Format(res["fldtime_sample"], "mm-dd hh:nn"))
      Endif
      pointsArr_y.Add(modLabTest.GetLabQuantiValueAll(res["fldencounterval"], res["fldtestid"], res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], strUnit))
    Next
    xcoll = modChartJS.GetHTMLChartScript("line", strHead, pointsArr_x, pointsArr_y)
    sPath = "new Chart(\"" & sCanvas & "\", " & JSON.Encode(xcoll) & ")"
  Else
    sPath = ""
  Endif

  Return sPath

End

''---------------------- List for sampling -------------------------------
Public Function GetLabExtraColumnName(sItem As String) As String

  Dim xx As String
  Dim i As Integer

  For i = 1 To 10
    If modSettings.ShowSettingFromFIle("Laboratory/EXTRA" & CStr(i)) = sItem Then
      xx = "EXTRA" & CStr(i)
      Break
    Endif
  Next
  Return xx

End

Public Sub PrintBarCodeSampling(encid As String, sampleNo As String, specimen As String, xSection As String, xVariable As String, Optional sColl As Collection)

  Dim hBarPage As CBarCode
  Dim xpath As String
  Dim sPath As String
  Dim xcount As Integer
  Dim i As Integer

  Dim arcmd As String[]
  Dim xval As String
  Dim xprint As Integer

  If modBasic.$LabSamplePrint Then
    xprint = modBasic.$LabSamplePrint
  Else
    xprint = 2
  Endif
  xcount = InputValue("Number of Print copies", "Bar Code:" & xSection, xprint)
  If xcount And If xcount < 10 Then
    If modBasic.$LabBarCode Then
      If modBasic.$LabBarCode = "SampleNo" Then
        xpath = modDevAll.GetBarCodeSample(sampleNo)
      Else If modBasic.$LabBarCode = "SampleNo@EncID" Then
        xpath = modDevAll.GetBarCodeSample(sampleNo & "@" & encid)
      Else If modBasic.$LabBarCode = "EncounterID" Then
        xpath = modDevAll.GetBarCodeSample(encid)
      Else
        xval = modBasic.$LabBarCode
        xval = Replace(xval, "{SampleID}", sampleNo)
        xval = Replace(xval, "{Encounter}", encid)
        xval = Replace(xval, "{Specimen}", specimen)
        xpath = modDevAll.GetBarCodeSample(xval)
      Endif
    Else
      xpath = modDevAll.GetBarCodeSample(encid)
    Endif
    hBarPage = New CBarCode(encid, sampleNo, specimen, xSection, xpath, xVariable)
    If sColl And If sColl.Count Then
      hBarPage.UserData = sColl
    Endif
    sPath = modPrint.ConvertHTMLToPDFString(hBarPage.LabelPath(), "LabelSize")

    If xcount = 1 Then
      modPrint.DirectPDFPrint(sPath)

    Else If xcount > 1 Then
      If modBasic.$LabBarMultiPrint = "Continuous" Then
        arcmd = New String[]
        For i = 1 To xcount
          arcmd.Add(sPath)
        Next
        modPrint.DirectPDFPrint(modDevAll.GetPDFUnion(arcmd))

      Else
        For i = 1 To xcount
          modPrint.DirectPDFPrint(sPath)
        Next

      Endif
    Endif

  Endif  ''if count >=1

End

Public Sub PrintBarLabDeptSampling(encid As String, sampleNo As String, xitemList As String[], xVariable As String)

  Dim hBarPage As CBarCode
  Dim xpath As String
  Dim sPath As String
  Dim i As Integer
  Dim xval As String
  Dim deptList As String[]
  Dim xdept As String
  Dim xpdfLst As String[]
  Dim xconPdf As String

  If modBasic.$LabBarCode Then
    If modBasic.$LabBarCode = "SampleNo" Then
      xpath = modDevAll.GetBarCodeSample(sampleNo)
    Else If modBasic.$LabBarCode = "SampleNo@EncID" Then
      xpath = modDevAll.GetBarCodeSample(sampleNo & "@" & encid)
    Else If modBasic.$LabBarCode = "EncounterID" Then
      xpath = modDevAll.GetBarCodeSample(encid)
    Else
      xval = modBasic.$LabBarCode
      xval = Replace(xval, "{SampleID}", sampleNo)
      xval = Replace(xval, "{Encounter}", encid)
      xpath = modDevAll.GetBarCodeSample(xval)
    Endif
  Else
    xpath = modDevAll.GetBarCodeSample(encid)
  Endif
  deptList = GetDistinctLabItems(xitemList)
  xpdfLst = New String[]
  For Each xdept In deptList
    hBarPage = New CBarCode(encid, sampleNo, "", xdept, xpath, xVariable)
    sPath = modPrint.ConvertHTMLToPDFString(hBarPage.LabelPath(), "LabelSize")
    If modBasic.$LabBarMultiPrint = "Continuous" Then
      xpdfLst.Add(sPath)
    Else
      modPrint.DirectPDFPrint(sPath)
    Endif
  Next

  If modBasic.$LabExtraPrint = "No" Then
  Else
    For i = 0 To 1
      hBarPage = New CBarCode(encid, sampleNo, "", "", xpath, xVariable)
      sPath = modPrint.ConvertHTMLToPDFString(hBarPage.LabelPath(), "LabelSize")
      If modBasic.$LabBarMultiPrint = "Continuous" Then
        xpdfLst.Add(sPath)
      Else
        modPrint.DirectPDFPrint(sPath)
      Endif
    Next
  Endif

  If xpdfLst.Count Then
    xconPdf = modDevAll.GetPDFUnion(xpdfLst)
    modPrint.DirectPDFPrint(xconPdf)
  Endif

End

Private Function GetDistinctLabItems(sItemList As String[]) As String[]

  Dim xItem As String

  Dim xdept As String
  Dim deptList As String[]

  Dim xxx As String[]
  Dim sLine As String

  deptList = New Variant[]
  For Each xItem In sItemList
    xdept = GetReportTypeService(xItem)
    If xdept Then
      If deptList.Count = 0 Then
        deptList.Add(xdept)
      Else
        If deptList.Exist(xdept) = False Then
          deptList.Add(xdept)
        Endif
      Endif
    Endif
  Next

  xxx = New String[]
  For Each xdept In deptList
    sLine = ""
    For Each xItem In sItemList
      If GetReportTypeService(xItem) = xdept Then
        sLine = sLine & GetBillingItemCode(xItem) & ";"
      Endif
    Next
    xxx.Add(sLine)
  Next
  Return xxx

End

Private Function GetReportTypeService(xItem As String) As String

  Dim res As Result
  Dim xxx As String

  res = modDatabase.$myConn.Exec("select fldreport from tblservicecost where flditemname=&1", xItem)
  If res.Available Then
    If res["fldreport"] Then
      xxx = res["fldreport"]
    Else
      xxx = ""
    Endif
  Else
    xxx = ""
  Endif

  Return xxx

End

Private Function GetBillingItemCode(sItem As String) As String

  Dim res As Result
  Dim xval As String

  res = modDatabase.$myConn.Exec("select flditemname,fldcode from tblservicecost where flditemname=&1", sItem)
  If res.Available Then
    If res["fldcode"] Then
      xval = Trim(res["fldcode"])
    Else
      xval = Left(res["flditemname"], 4)
    Endif
  Else
    xval = ""
  Endif
  Return xval

End

Public Function GetLabRepoOrder(sType As String) As String

  Dim xx As String
  Dim xorder As String

  xorder = modBasic.$LabTestOrdering
  If xorder = "ASC" Then
    If sType = "Test" Then
      xx = " ORDER BY fldtestid ASC"
    Else If sType = "SubTest" Then
      xx = " ORDER BY fldsubtest ASC"
    Endif
  Else If xorder = "DESC" Then
    If sType = "Test" Then
      xx = " ORDER BY fldtestid DESC"
    Else If sType = "SubTest" Then
      xx = " ORDER BY fldsubtest DESC"
    Endif
  Else If xorder = "Manual" Then
    If sType = "Test" Then
      xx = " ORDER BY fldorder ASC"
    Else If sType = "SubTest" Then
      xx = " ORDER BY fldorder ASC"
    Endif
  Else
    If sType = "Test" Then
      xx = ""
    Else If sType = "SubTest" Then
      xx = ""
    Endif
  Endif

  Return xx

End

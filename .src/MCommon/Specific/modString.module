' Gambas module file

'NOTE: ------------------- COMPARE ARRAY ---------------------
Public Function GetStringArrayDiff(aList As String[], bList As String[]) As Boolean

  Dim xlist As String[]
  Dim xval As String
  Dim yList As String[]
  Dim yval As String
  Dim xbool As Boolean

  xlist = New String[]
  For Each xval In aList
    xlist.Add(LCase(xval))
  Next
  If xlist Then
    xlist.Sort()
  Endif

  yList = New String[]
  For Each yval In bList
    yList.Add(LCase(yval))
  Next
  If yList Then
    yList.Sort()
  Endif

  If xlist.Join(";") = yList.Join(";") Then
    xbool = False
  Else
    xbool = True
  Endif
  Return xbool

End

'NOTE: -------------------------------- ARRAY PROCEDURES ---------------------------------
Public Function SelectVarJSONToDate(sVariant As Variant[], sField As String, sDate As Date) As Variant[]

  Dim i As Integer
  Dim xVar As Variant[]

  xVar = New Variant[]
  For i = 0 To sVariant.Count - 1
    If sVariant[i][sField] Then
      If modDate.GetDateFromJSON(sVariant[i][sField]) = sDate Then
        xVar.Add(sVariant[i])
      Endif
    Endif
  Next
  Return xVar

End

Public Function SelectStringArrayToText(sText As String, sList As String[], Optional LeftSearch As Boolean) As String[]

  Dim sItem As String
  Dim sNewList As String[]

  sNewList = New String[]
  If sList And If sList.Count Then
    For Each sItem In sList
      If LeftSearch Then
        If LCase(sItem) Like "*" & LCase(sText) & "*" Then
          sNewList.Add(sItem)
        Endif
      Else
        If LCase(sItem) Like LCase(sText) & "*" Then
          sNewList.Add(sItem)
        Endif
      Endif
    Next
  Endif

  Return sNewList

End

Public Function GetFirstLetterArray(sList As String[]) As String[]

  Dim sItem As String
  Dim sNewList As String[]

  sNewList = New String[]
  If sList And If sList.Count Then
    For Each sItem In sList
      If sNewList.Count = 0 Then
        sNewList.Add(UCase(Left(sItem, 1)))
      Else
        If sNewList.Exist(UCase(Left(sItem, 1))) = False Then
          sNewList.Add(UCase(Left(sItem, 1)))
        Endif
      Endif
    Next
    If sNewList Then
      sNewList.Sort()
    Endif
  Endif

  Return sNewList

End

Public Function GetRemainingArray(fullList As String[], presentList As String[]) As String[]

  Dim tablist As String[]
  Dim xtab As String

  tablist = New String[]
  If fullList And If fullList.Count Then
    For Each xtab In fullList
      If presentList.Exist(xtab) = False Then
        tablist.Add(xtab)
      Endif
    Next
  Endif
  Return tablist

End

Private Function GetDistinctArrayLong(xxx As Long[], Optional sOrder As Integer) As Long[]

  Dim yyy As Long[]
  Dim xx As Long

  yyy = New Long[]
  For Each xx In xxx
    If yyy.Count = 0 Then
      yyy.Add(xx)
    Else If yyy.Count > 0 Then
      If yyy.Find(xx) = -1 Then
        yyy.Add(xx)
      Endif
    Endif
  Next
  If sOrder Then
    yyy.Sort(sOrder)
  Endif
  Return yyy

End

Public Function GetDistinctStringArray(xxx As String[]) As String[]

  Dim yyy As New String[]
  Dim sColl As New Collection
  Dim xval As String

  For Each xval In xxx
    If Trim(xval) Then
      If sColl.Exist(xval) Then Continue
      sColl[xval] = True
      yyy.Add(xval)
    Endif
  Next

  Return yyy

End

Public Function BinaryDistinctStringArray(xxx As String[], Optional sOrder As Integer) As String[]

  Dim yyy As String[]

  yyy = GetDistinctStringArray(xxx)
  If sOrder Then
    yyy.Sort(sOrder)
  Endif
  Return yyy

End

Public Function CountStringInArray(sText As String, sArry As String[]) As Integer

  Dim xx As String
  Dim xval As Integer

  For Each xx In sArry
    If xx = sText Then
      xval = xval + 1
    Endif
  Next
  Return xval

End

Public Function GetMinValueArray(sArry As Float[]) As Float

  Dim j As Integer
  Dim minobs As Float

  For j = 0 To sArry.Count - 1
    If j = 0 Then
      minobs = sArry[j]
    Else
      If sArry[j] < minobs Then
        minobs = sArry[j]
      Endif
    Endif
  Next
  Return minobs

End

Public Function GetMaxValueArray(sArry As Float[]) As Float

  Dim j As Integer
  Dim maxobs As Float

  For j = 0 To sArry.Count - 1
    If j = 0 Then
      maxobs = sArry[j]
    Else
      If sArry[j] > maxobs Then
        maxobs = sArry[j]
      Endif
    Endif
  Next
  Return maxobs

End

Public Sub GetFullStringExistFromFile(sArray As String[], xSearch As String) As String

  Dim xx As String
  Dim xval As String

  For Each xx In sArray
    If xx Like "*" & xSearch & "*" Then
      xval = xx
      Break
    Endif
  Next

  Return xval

End

'NOTE: ---------------------------------- CSV Manipulation -----------------------------------------
Public Sub GetStringArrayFromFile(sPath As String, Optional Sorted As Boolean) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim dict As String[]

  dict = New String[]
  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        dict.Add(Trim(sLine))
      Endif
    Next
    hFile.Close()
    If Sorted = True Then
      dict.Sort(gb.Ascent)
    Endif
  Endif

  Return dict

End

Public Function GetSelStringFieldFromCSV(sPath As String, Column As Integer, sMark As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim sAry As String[]
  Dim sWord As String[]

  sAry = New String[]
  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        sWord = Split(sLine, sMark)
        sAry.Add(Trim(sWord[Column]))
      Endif
    Next
    hFile.Close()
    sAry.Sort(gb.Ascent)
  Endif

  Return sAry

End

Private Function GetSelNumberFieldFromCSV(sPath As String, Column As Integer, sMark As String) As Long[]

  Dim hFile As File
  Dim sLine As String
  Dim sAry As Long[]
  Dim sWord As String[]

  sAry = New Long[]
  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        sWord = Split(sLine, sMark)
        If sWord[Column] Then
          sAry.Add(Val(sWord[Column]))
        Endif
      Endif
    Next
    hFile.Close()
    sAry.Sort(gb.Ascent)
  Endif

  Return sAry

End

Public Function GetValueFromCSV(sWord As String, sPath As String, Column1 As Integer, Column2 As Integer, sMark As String) As String

  Dim hFile As File
  Dim sLine As String
  Dim linWord As String[]
  Dim xx As String

  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        linWord = Split(sLine, sMark)
        If Trim(linWord[Column1]) = sWord Then
          xx = Trim(linWord[Column2])
          Break
        Endif
      Endif
    Next
    hFile.Close()
  Endif

  Return xx

End

Public Function GetMatchingArrayFromCSV(sWord As String, sPath As String, Column1 As Integer, Column2 As Integer, sMark As String) As String[]

  Dim hFile As File
  Dim sLine As String
  Dim linWord As String[]
  Dim xx As String[]

  xx = New String[]
  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        linWord = Split(sLine, sMark)
        If Trim(linWord[Column1]) = sWord Then
          xx.Add(Trim(linWord[Column2]))
        Endif
      Endif
    Next
    hFile.Close()
  Endif

  Return xx

End

Public Function GetCollectionFromCSV(sPath As String) As Collection

  Dim sColl As Collection
  Dim hFile As File
  Dim sLine As String
  Dim linWord As String[]

  sColl = New Collection
  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    For Each sLine In hFile.Lines
      If Len(Trim(sLine)) Then
        linWord = Split(sLine, ";")
        If linWord.Count = 2 Then
          Try sColl.Add(linWord[1], linWord[0])
        Endif
      Endif
    Next
    hFile.Close()
  Endif

  Return sColl

End

Public Function GetGroupSUmmaryCSV(sPath As String, groupCol As Integer, valueCol As Integer, sMark As String, newMark As String, groupType As Integer) As String

  Dim xx As Variant[]
  Dim xy As Variant
  Dim sText As String[]
  Dim sTar As String

  Dim hFile As File
  Dim sLine As String
  Dim sAry As String[]
  Dim sxt As Float

  If groupType = gb.String Then
    xx = BinaryDistinctStringArray(GetSelStringFieldFromCSV(sPath, groupCol, sMark))
  Else
    xx = GetDistinctArrayLong(GetSelNumberFieldFromCSV(sPath, groupCol, sMark))
  Endif
  sText = New String[]

  For Each xy In xx
    sxt = 0
    If Exist(sPath) Then
      hFile = Open sPath
      modBasic.DebugString("Open File " & sPath)
      For Each sLine In hFile.Lines
        If Len(Trim(sLine)) Then
          sAry = Split(sLine, sMark)
          If Trim(sAry[groupCol]) = xy Then
            sxt = sxt + Val(sAry[valueCol])
          Endif
        Endif
      Next
      sText.Add(xy & newMark & CStr(sxt))
      hFile.Close()
    Endif
  Next

  sTar = Temp()
  File.Save(sTar, sText.Join(gb.NewLine))

  Return sTar

End
'
''
'''
''''

'NOTE: ----------------------------------- STRING MANIPULATION -----------------------------------------
Public Function GetLineInTextFile(sPath As String) As Integer

  Dim hFile As File
  Dim sLine As String
  Dim i As Integer

  If Exist(sPath) Then
    hFile = Open sPath
    modBasic.DebugString("Open File " & sPath)
    i = 0
    For Each sLine In hFile.Lines
      i = i + 1
    Next
    hFile.Close()
  Endif

  Return i

End

Public Sub ChangeMultiTextInFile(sPath As String, oldText As String[], newText As String[])

  Dim xText As String
  Dim i As Integer

  If Exist(sPath) Then
    xText = File.Load(sPath)
    For i = 0 To oldText.Count - 1
      xText = Replace(xText, oldText[i], newText[i])
    Next
    Kill sPath
    File.Save(sPath, xText)
  Endif

End

Public Sub ChangeTextInFile(sPath As String, oldText As String, newText As String)

  Dim tolText As String
  Dim tolNew As String

  If Exist(sPath) Then
    tolText = File.Load(sPath)
    tolNew = Replace(tolText, oldText, newText)
    Kill sPath
    File.Save(sPath, tolNew)
  Endif

End

Public Function GetSelectedText(sText As String, StartWord As String, EndWord As String) As String ''include start/end text

  Dim aa As Integer
  Dim bb As Integer
  Dim xx As String

  aa = InStr(sText, StartWord)
  bb = InStr(sText, EndWord, aa)
  If aa And If bb Then
    xx = Mid(sText, aa, (bb - aa) + Len(EndWord))
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetSelectedToLastText(sText As String, StartWord As String, EndWord As String) As String ''include start upto last end text

  Dim aa As Integer
  Dim bb As Integer
  Dim xx As String

  aa = InStr(sText, StartWord)
  bb = RInStr(sText, EndWord, aa)
  If aa And If bb Then
    xx = Mid(sText, aa, (bb - aa) + Len(EndWord))
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetSelectedTextBetween(sText As String, StartWord As String, EndWord As String) As String   ''exclude start/end text

  Dim aa As Integer
  Dim bb As Integer
  Dim xx As String

  aa = InStr(sText, StartWord) + Len(StartWord)
  bb = InStr(sText, EndWord, aa)
  If aa And If bb Then
    xx = Mid(sText, aa, bb - aa)
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetSelectedLines(sPath As String, FromLine As Long, ToLine As Long) As String

  Dim hFile As File
  Dim sLine As String
  Dim i As Long
  Dim xx As String

  hFile = Open sPath
  modBasic.DebugString("Open File " & sPath)
  i = 0
  xx = ""
  For Each sLine In hFile.Lines
    If i >= FromLine And If i <= ToLine Then
      xx = xx & sLine & gb.NewLine
    Endif
    i = i + 1
  Next
  hFile.Close()
  Return xx

End

Public Function GetSplitTextMulti(sText As String, sMark As String) As String[]

  Dim xxx As String
  Dim asx As String[]

  xxx = Replace(sText, sMark, "|")
  asx = Split(xxx, "|")
  Return asx

End

Public Function GetTextFileUnion(sFileList As String[]) As String

  Dim sPath As String
  Dim xx As String[]
  Dim sFile As String

  sPath = Temp() & ".txt"
  xx = New String[]
  For Each sFile In sFileList
    xx.Add(File.Load(sFile))
  Next
  File.Save(sPath, xx.Join(gb.NewLine))

  Return sPath

End

'
''
'''
''''

'NOTE: ------------------------------ Manipulation for print/report ---------------------------------------
Public Function RemoveSpaceHTML(xx As String) As String

  xx = Replace(xx, "<br>" & "<br>" & "<br>" & "<br>", "<br>")
  xx = Replace(xx, "<br>" & "<br>" & "<br> ", " <br>")
  xx = Replace(xx, "<br>" & "<br>", "<br>")
  Return xx

End

Private Function HTMLStyleString(Optional sFont As String, Optional sFontSize As String, Optional sBold As Boolean, Optional sItalic As Boolean, Optional sUnderline As Boolean, Optional sLineThrough As Boolean, Optional sFontColor As String, Optional sBackColor As String) As String

  Dim xx As String
  Dim yy As String

  xx = ""
  If sFont Then
    xx = xx & "font-family: " & sFont & "; "
  Endif

  If sFontSize Then
    xx = xx & "font-size: " & sFontSize & "; "
  Endif

  If sBold Then
    xx = xx & "font-weight: bold; "
  Endif

  If sItalic Then
    xx = xx & "font-style: italic; "
  Endif

  yy = ""
  If sUnderline Then
    yy = yy & "underline "
  Endif

  If sLineThrough Then
    yy = yy & "line-through "
  Endif

  If Trim(yy) Then
    xx = xx & "text-decoration: " & yy & "; "
  Endif

  If sFontColor Then
    xx = xx & "color: " & sFontColor & "; "
  Endif

  If sBackColor Then
    xx = xx & "background-color: " & sBackColor & "; "
  Endif

  If xx Then
    xx = "style='" & xx & "'"
  Endif

  Return xx

End

Public Function TextToHTML(sText As String, Optional sFont As String, Optional sFontSize As String, Optional sBold As Boolean, Optional sItalic As Boolean, Optional sUnderline As Boolean, Optional sLineThrough As Boolean, Optional sFontColor As String, Optional sBackColor As String) As String

  Dim xx As String
  Dim zz As String
  Dim sParaList As String[]
  Dim xpara As String
  Dim sPart As String[]
  Dim aa As String
  Dim slist As String[]

  If Len(Trim(sText)) Then
    xx = HTMLStyleString(sFont, sFontSize, sBold, sItalic, sUnderline, sLineThrough, sFontColor, sBackColor)
    If GetRichTextMode(sText) = True Then
      zz = sText
    Else
      sParaList = Split(sText, gb.Tab)
      If sParaList.Count > 1 Then
        zz = ""
        For Each xpara In sParaList
          zz = zz & "<p>"
          sPart = Split(xpara, gb.NewLine)
          slist = New String[]
          If sPart.Count = 1 Then
            If xx Then
              slist.Add("<span " & xx & ">" & sPart[0] & "</span>")
            Else
              slist.Add("<span>" & sPart[0] & "</span>")
            Endif
          Else
            For Each aa In sPart
              If aa Then
                If xx Then
                  slist.Add("<span " & xx & ">" & aa & "</span>" & "<br>")
                Else
                  slist.Add("<span>" & aa & "</span>" & "<br>")
                Endif
              Else
                slist.Add("<br>")
              Endif
            Next
          Endif
          zz = zz & slist.Join(gb.NewLine)
          zz = zz & "</p>"
        Next

      Else
        sPart = Split(sText, gb.NewLine)
        slist = New String[]
        If sPart.Count = 1 Then
          If xx Then
            slist.Add("<span " & xx & ">" & sPart[0] & "</span>")
          Else
            slist.Add("<span>" & sPart[0] & "</span>")
          Endif
        Else
          For Each aa In sPart
            If aa Then
              If xx Then
                slist.Add("<span " & xx & ">" & aa & "</span>" & "<br>")
              Else
                slist.Add("<span>" & aa & "</span>" & "<br>")
              Endif
            Else
              slist.Add("<br>")
            Endif
          Next
        Endif
        zz = slist.Join(gb.NewLine)

      Endif
    Endif

  Else
    zz = ""
  Endif

  Return zz

End

Public Function GetFormatTextFontString(sText As String, Optional sFontText As String) As String

  Dim xx As String
  Dim sFontName As String
  Dim sFontSize As String
  Dim sBold As Boolean
  Dim sItalic As Boolean
  Dim sUnderLine As Boolean
  Dim sStrikeOut As Boolean

  If Len(Trim(sText)) Then
    If sFontText Then
      If (String.InStr(sFontText, "bold") > 0) Then
        sBold = True
      Endif
      If (String.InStr(sFontText, "italic") > 0) Then
        sItalic = True
      Endif
      If (String.InStr(sFontText, "underline") > 0) Then
        sUnderline = True
      Endif
      If (String.InStr(sFontText, "strikeout") > 0) Then
        sStrikeOut = True
      Endif
      ' sFontName = Font[sFontText].Name
      ' sFontSize = Font[sFontText].Size & "pt"
    Else
      sFontName = ""
      sFontSize = ""
      sBold = False
      sItalic = False
      sUnderline = False
      sStrikeOut = False
    Endif
    xx = TextToHTML(sText, sFontName, sFontSize, sBold, sItalic, sUnderline, sStrikeOut)

  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetAbnormalFormattedString(sText As String) As String

  Dim sBold As Boolean
  Dim sItalic As Boolean
  Dim sUnderLine As Boolean
  Dim sFontColor As String
  Dim xx As String

  If sText Then
    If modBasic.$AbnFormat = "Superscript" Then
      xx = "<span><sup>*</sup>" & sText & "</span>"
    Else
      If modBasic.$AbnFormat = "Bold" Then
        sBold = True
      Else If modBasic.$AbnFormat = "UnderLine" Then
        sUnderline = True
      Else If modBasic.$AbnFormat = "Italic" Then
        sItalic = True
      Else If modBasic.$AbnFormat = "Bold+UnderLine" Then
        sBold = True
        sUnderline = True
      Else If modBasic.$AbnFormat = "Bold+Italic" Then
        sBold = True
        sItalic = True
      Else If modBasic.$AbnFormat = "Red Color" Then
        sFontColor = "#" & Hex(Color.Red)
      Endif
      xx = TextToHTML(sText,,, sBold, sItalic, sUnderline,, sFontColor)
      xx = modReportVar.$AbnStart & xx & modReportVar.$AbnEnd
    Endif
  Else
    xx = sText
  Endif

  Return xx

End

Public Function GetDesignFormatString(Optional sWidth As Integer, Optional sTextAlign As String, Optional sVertAlign As String, Optional sWidthUnit As String) As String

  Dim xx As String
  Dim unt As String

  xx = ""
  If sWidthUnit Then
    unt = sWidthUnit
  Else
    unt = "%"
  Endif

  If sWidth Then
    xx = xx & "width: " & CStr(sWidth) & unt & "; "
  Endif
  If sTextAlign Then
    xx = xx & "text-align: " & sTextAlign & "; "
  Endif
  If sVertAlign Then
    xx = xx & "vertical-align: " & sVertAlign & "; "
  Endif

  If xx Then
    xx = "style='" & xx & "'"
  Endif

  Return xx

End

Public Function GetImageForHTML(sFIle As String) As String

  Dim xx As String

  xx = "<img class='reportmid_image' src=" & sFIle & ">"
  Return xx

End

Public Function GetImageForHTMLGrid(sFIle As String, sWidth As String, sHeight As String, Optional sObjectFit As String) As String

  Dim xx As String

  If sObjectFit Then
    xx = "<img style='height: " & sHeight & "; width: " & sWidth & "; object-fit: " & sObjectFit & " ;' src=" & sFIle & ">"
  Else
    xx = "<img style='height: " & sHeight & "; width: " & sWidth & "; object-fit: contain;' src=" & sFIle & ">"
  Endif
  Return xx

End

Public Function GetImageListForHTML(sFileList As String[]) As String

  Dim xx As String[]
  Dim xpath As String
  Dim xHtmStr As String

  xx = New String[]
  For Each xpath In sFileList
    xx.Add(GetImageForHTML(xpath))
  Next
  xHtmStr = xx.Join("<br>")
  Return xHtmStr

End

Public Function HTMLBlankSpace(sInt As Integer) As String

  Dim i As Integer
  Dim xx As String

  xx = ""
  For i = 1 To sInt
    xx = xx & "&nbsp;"
  Next
  Return xx

End

Public Function HTMLBlankLines(sInt As Integer) As String

  Dim xx As String
  Dim i As Integer

  xx = ""
  If sInt Then
    For i = 1 To sInt
      xx = xx & "<br>"
    Next
  Endif
  Return xx

End

Public Function GetBodyRichText(sText As String) As String

  Dim xx As String
  Dim aa As Integer
  Dim yy As String

  xx = GetSelectedText(sText, "<body", "</body>")
  aa = String.InStr(xx, ">")
  yy = Mid(xx, aa + 1)
  yy = Replace(yy, "</body>", "")

  Return Trim(yy)

End '

Public Function GetRichTextMode(sText As String) As Boolean

  Dim xx As Boolean

  If (String.InStr(sText, "</body>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</table>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</p>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</span>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</div>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</h1>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</h2>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</h3>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</h4>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</h5>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</h6>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</b>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</u>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</i>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</li>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</ul>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</td>") > 0) Then
    xx = True
  Else If (String.InStr(sText, "</tr>") > 0) Then
    xx = True

  Else
    xx = False
  Endif
  Return xx

End

' Public Function ConvertRichTextToPlain(stInput As String) As String
'
'   Dim arcmd As String
'   Dim stOutput As String
'
'   If GetRichTextMode(stInput) = True Then
'     If System.Exist("html2text") = True Then
'       arcmd = "echo " & Quote(stInput) & " | html2text"
'       modBasic.DebugString("Execute " & arcmd)
'       Shell arcmd To stOutput
'       stOutput = Trim(stOutput)
'     Else
'       modApplSub.InstallSelectedApplication(["html2text"])
'     Endif
'   Else
'     stOutput = stInput
'   Endif
'   Return stOutput
'
' End

Public Function ConvertRichTextToPlain(stInput As String) As String

  Dim arcmd As String
  Dim stOutput As String
  Dim xrepl As String

  If GetRichTextMode(stInput) = True Then
    xrepl = Trim(GetSelectedTextBetween(stInput, "<span>", "</span>"))
    If Not xrepl Then
      xrepl = stInput
    Endif

    If GetRichTextMode(xrepl) = True Then
      If System.Exist("html2text") = True Then
        arcmd = "echo " & Quote(xrepl) & " | html2text"
        modBasic.DebugString("Execute " & arcmd)
        Shell arcmd To stOutput
        stOutput = Trim(stOutput)
      Else
        modApplSub.InstallSelectedApplication(["html2text"])
      Endif
    Else
      stOutput = xrepl
    Endif

  Else
    stOutput = stInput
  Endif
  Return stOutput

End

Public Function GetConfTextToHTML(sText As String) As String

  Dim xx As String

  xx = Replace(sText, "\n", "<br>")
  Return xx

End

Public Function GetHTMLListFormat(sData As String[]) As String

  Dim xx As String
  Dim xfinal As String

  If sData And If sData.Count Then
    xfinal = "<ul class='report_list'>"
    For Each xx In sData
      xfinal = xfinal & "<li>" & modString.TextToHTML(xx) & "</li>"
    Next
    xfinal = xfinal & "</ul>"
  Else
    xfinal = ""
  Endif

  Return xfinal

End

Public Sub GetDualTableFormat(sLeft As String[], sRight As String[], Optional sTitle As String[]) As String

  Dim xx As String
  Dim i As Integer

  If sLeft.Count And If sRight.Count Then
    If sLeft.Count = sRight.Count
      xx = modRepoTemplete.HTMLTableSyntax()
      If sTitle And If sTitle.Count = 2 Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>" & sTitle[0] & "</td>" & gb.NewLine
        xx = xx & "<td class='reportmid_table_h'>" & sTitle[1] & "</td>" & gb.NewLine
        xx = xx & "</tr>" & gb.NewLine
      Endif

      For i = 0 To sLeft.Count - 1
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & sLeft[i] & "</td>" & gb.NewLine
        xx = xx & "<td>" & sRight[i] & "</td>" & gb.NewLine
        xx = xx & "</tr>" & gb.NewLine
      Next
      xx = xx & "</table>" & gb.NewLine
    Endif

  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetTableFormatFromText(sTable As String) As String

  Dim sTxLine As String[]
  Dim xx As String
  Dim col As String
  Dim i As Integer
  Dim xcell As String[]
  Dim xval As String

  sTxLine = Split(sTable, gb.NewLine)
  xx = modRepoTemplete.HTMLTableSyntax()
  xx = xx & "<tr>" & gb.NewLine
  For Each col In Split(sTxLine[0], ";")
    xx = xx & "<td class='reportmid_table_h'>" & col & "</td>" & gb.NewLine
  Next
  xx = xx & "</tr>" & gb.NewLine

  For i = 1 To sTxLine.Count - 1
    xx = xx & "<tr>" & gb.NewLine
    xcell = Split(sTxLine[i], ";")
    For Each xval In xcell
      xx = xx & "<td>" & xval & "</td>" & gb.NewLine
    Next
    xx = xx & "</tr>" & gb.NewLine
  Next
  xx = xx & "</table>"

  Return xx

End

Public Function GetRichTableStringFromVariant(sColmList As String[], xFinal As Variant[]) As String

  Dim xx As String
  Dim xhead As String
  Dim xRowVal As Collection
  Dim Row As Integer
  Dim Column As Integer

  If xFinal Then
    xx = modRepoTemplete.HTMLTableSyntax()
    xx = xx & "<tr>" & gb.NewLine
    For Each xhead In sColmList
      xx = xx & "<td class='reportmid_table_h'>" & xhead & "</td>" & gb.NewLine
    Next
    xx = xx & "</tr>" & gb.NewLine

    For Row = 0 To xFinal.Count - 1
      xx = xx & "<tr>" & gb.NewLine
      xRowVal = xFinal[Row]
      For Column = 0 To sColmList.Count - 1
        xx = xx & "<td>" & xRowVal[CStr(Column)] & "</td>" & gb.NewLine
      Next
      xx = xx & "</tr>" & gb.NewLine
    Next
    xx = xx & "</table>"
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetRichTableNoHeadFromVariant(xColCount As Integer, xFinal As Variant[]) As String

  Dim xx As String
  Dim xRowVal As Collection
  Dim Row As Integer
  Dim Column As Integer

  If xFinal Then
    xx = modRepoTemplete.HTMLTableSyntax()
    For Row = 0 To xFinal.Count - 1
      xx = xx & "<tr>" & gb.NewLine
      xRowVal = xFinal[Row]
      For Column = 0 To xColCount - 1
        xx = xx & "<td>" & xRowVal[CStr(Column)] & "</td>" & gb.NewLine
      Next
      xx = xx & "</tr>" & gb.NewLine
    Next
    xx = xx & "</table>"
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetUniColumnTableFromList(sList As String[]) As String

  Dim xx As String
  Dim xval As String

  If sList And If sList.Count Then
    xx = modRepoTemplete.HTMLTableSyntax()
    For Each xval In sList
      xx = xx & "<tr>" & gb.NewLine
      xx = xx & "<td>" & xval & "</td>" & gb.NewLine
      xx = xx & "</tr>" & gb.NewLine
    Next
    xx = xx & "</table>"
  Else
    xx = ""
  Endif
  Return xx

End

Public Function ConverTableRichTextToGrid(sTable As String) As String[]

  Dim aLine As String[]
  Dim sLine As String
  Dim xcol As String[]
  Dim xval As String[]
  Dim xcell As String[]

  Dim xx As String[]
  Dim aa As String
  Dim xstart As Boolean

  xx = New String[]
  xval = New String[]
  xcol = New String[]
  xcell = New String[]
  aLine = Split(sTable, gb.NewLine)
  For Each sLine In aLine
    If sLine = "<tr>" Then
      xstart = True
    Else If sLine = "</tr>" Then
      xstart = False
    Endif

    If xstart = True Then
      If (String.InStr(sLine, "report_table_h") > 0) Then
        aa = Trim(GetSelectedTextBetween(sLine, "<td class='report_table_h'>", "</td>"))
        If aa Then
          xcol.Add(aa)
        Endif
      Else If (String.InStr(sLine, "reportmid_table_h") > 0) Then
        aa = Trim(GetSelectedTextBetween(sLine, "<td class='reportmid_table_h'>", "</td>"))
        If aa Then
          xcol.Add(aa)
        Endif
      Else If (String.InStr(sLine, "<td>") > 0) Then
        aa = Trim(GetSelectedTextBetween(sLine, "<td>", "</td>"))
        xcell.Add(aa)
      Endif
    Else If xstart = False Then
      If xcell.Count Then
        xval.Add(xcell.Join(";"))
      Endif
      xcell.Clear()
    Endif

  Next

  xx.Add(xcol.Join(";"))
  xx.Add(xcol.Join(";") & gb.NewLine & xval.Join(gb.NewLine))
  Return xx

End

''
'''
''''
''''
'NOTE: ----------------------------- JSON -----------------------------------
Public Function GetLefRightJSON(strLeft As String, strRight As String) As String

  Dim xcoll As Collection

  xcoll = New Collection
  xcoll.Add(strLeft, "LEFT")
  xcoll.Add(strRight, "RIGHT")
  Return JSON.Encode(xcoll)

End

Public Function GetJSONToDualHTMLTable(sText As String) As String

  Dim headList As String[]
  Dim xxx As Variant
  Dim sTable As String
  Dim xcoll As Collection
  Dim xval As String
  Dim xleft As String
  Dim xright As String

  If IsNumber(sText) Then
    sTable = sText
  Else

    Try xxx = JSON.Decode(sText, True)
    If xxx Then
      If xxx Is Collection Then
        xcoll = xxx
        If xcoll.Count = 2 Then
          headList = xcoll.Keys
          xleft = headList[0]
          xright = headList[1]
          If xcoll[xleft] Or If xcoll[xright] Then
            sTable = modString.GetDualTableFormat([xcoll[xleft]], [xcoll[xright]], [xleft, xright])
          Endif
        Else ''remove this portion when Left/Right JSON is separated from other JSON
          sTable = modRepoTemplete.HTMLTableSyntax()
          For Each xval In xcoll
            sTable = sTable & "<tr>" & gb.NewLine
            sTable = sTable & "<td>" & xcoll.Key & "</td>" & gb.NewLine
            sTable = sTable & "<td>" & xcoll[xcoll.Key] & "</td>" & gb.NewLine
            sTable = sTable & "</tr>" & gb.NewLine
          Next
          sTable = sTable & "</table>" & gb.NewLine
        Endif
      Else
        sTable = sText
      Endif
    Else
      sTable = sText
    Endif

  Endif
  Return sTable

End

''Creating Left/Right Table
Public Function GetLeftRightTableHeader(Optional sParam As Boolean) As String

  Dim sTable As String

  sTable = modRepoTemplete.HTMLDualTableSyntax()
  sTable = sTable & "<tr>" & gb.NewLine
  If sParam = True Then
    sTable = sTable & "<td style='width:30%'>VARIABLE</td>"
    sTable = sTable & "<td style='width:35%'>LEFT</td>"
    sTable = sTable & "<td style='width:35%'>RIGHT</td>"
  Else
    sTable = sTable & "<td style='width:50%'>LEFT</td>"
    sTable = sTable & "<td style='width:50%'>RIGHT</td>"
  Endif
  sTable = sTable & "</tr>" & gb.NewLine
  sTable = sTable & "</table>"
  Return sTable

End

Public Function GetLeftRightTableValue(sValue As String, Optional sParam As String) As String

  Dim sTable As String
  Dim sLeft As String
  Dim sRight As String
  Dim xColl As Collection

  If Trim(sValue) Then
    xColl = JSON.Decode(sValue)
    If xColl Then
      sLeft = xColl["LEFT"]
      sRight = xColl["RIGHT"]
    Else
      sLeft = sValue
      sRight = ""
    Endif
  Else
    sLeft = ""
    sRight = ""
  Endif

  sTable = modRepoTemplete.HTMLDualTableSyntax()
  sTable = sTable & "<tr>" & gb.NewLine
  If sParam Then
    sTable = sTable & "<td style='width:30%'>" & sParam & "</td>" & gb.NewLine
    sTable = sTable & "<td style='width:35%'>" & sLeft & "</td>" & gb.NewLine
    sTable = sTable & "<td style='width:35%'>" & sRight & "</td>" & gb.NewLine
  Else
    sTable = sTable & "<td style='width:50%'>" & sLeft & "</td>" & gb.NewLine
    sTable = sTable & "<td style='width:50%'>" & sRight & "</td>" & gb.NewLine
  Endif
  sTable = sTable & "</tr>" & gb.NewLine
  sTable = sTable & "</table>"
  Return sTable

End
'
''
'''
''''

'NOTE: -------------------------------- Convert to string -----------------------------------------------
Public Function ConvertSecondToDurationString(dura As Integer) As String

  Dim yy As String

  If dura < 60 Then
    yy = "00:00:" & CStr(dura)
  Else If dura >= 60 And If dura < 3600 Then
    yy = "00:" & CStr(Fix(dura / 60)) & ":" & CStr(dura - Fix(dura / 60) * 60)
  Else If dura >= 3600 Then
    yy = "01:00:00"
  Endif

  Return yy

End

''use for numerical
Public Function GetDateString(xdate As Date) As String

  Dim xx As String

  If Hour(xdate) = 0 And If Minute(xdate) = 0 And If Second(xdate) = 0 Then
    xx = Format(xdate, "yymmdd")
  Else
    xx = Format(xdate, "yymmddhhhnnssuu")
  Endif
  Return xx

End

''use for string
Public Function GetNowString() As String

  Dim xx As String

  xx = Session.Id & GetDateString(Now()) & modBasic.$lbluser
  xx = Replace(xx, ".", "")
  xx = Replace(xx, ":", "")
  Return xx

End
'
'
''
'''
''''

'NOTE: ------------------------------------ Last Word Function -------------------------------------
Public Function GetLastWordPosition(sText As String) As Integer

  Dim sWord As String[]
  Dim i As Integer
  Dim iPos As Integer

  sWord = Split(sText, Space(1))
  iPos = 0
  For i = 0 To sWord.Count - 2
    iPos = iPos + Len(sWord[i]) + 1
  Next

  Return iPos + 1

End

Public Function GetLastWordText(sText As String) As String

  Dim sWord As String[]
  Dim xx As String

  If Len(sText) Then
    sWord = Split(sText, Space(1))
    xx = sWord[sWord.Count - 1]
  Endif
  Return xx

End

'
''
'''
''''

'NOTE: ------------------------------ Currency To Word ----------------------------------------
Public Function CurrencySymbol() As String

  Dim xx As String

  xx = Trim(Replace(Format(1, "$#"), "1", ""))
  Return xx

End

Public Function GetCurrency() As String

  Dim xx As String
  Dim xauto As String

  xauto = modGlobalSetting.ShowSettingFromDB("Currency/HundredUnit")
  If xauto Then
    xx = xauto
  Else
    xx = ""

  Endif
  Return xx

End

Public Function GetCentUnit() As String

  Dim xauto As String
  Dim Paisa As String

  xauto = modGlobalSetting.ShowSettingFromDB("Currency/Unit")
  If xauto Then
    Paisa = xauto
  Else
    Paisa = "Cent"
  Endif
  Return Paisa

End

Public Function ConvertNumberToWord(numb As String) As String

  Dim xx As String
  Dim arcmd As String[]

  If System.Exist("number") Then
    arcmd = ["number", "-l", numb]
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To xx
  Else
    modApplSub.InstallSelectedApplication(["bsdgames"])
  Endif

  Return xx

End

Public Function ConvertNumberToWordPython(numb As String, Optional currency As Boolean) As String

  Dim xx As String
  Dim arcmd As String[]

  If System.Exist("num2words") Then
    If currency = True Then
      arcmd = ["num2words", numb, "--to", "currency"]
    Else
      arcmd = ["num2words", numb]
    Endif
    modBasic.DebugString("Execute " & arcmd.Join(Space(1)))
    Exec arcmd To xx
  Else
    modApplSub.InstallSelectedApplication(["python3-num2words"])
  Endif

  Return xx

End

Public Function ConvertMoneyToText(amt As Float) As String

  Dim xamt As String
  Dim wrdtxt As String
  Dim Rupee As String
  Dim Paisa As String

  Rupee = modBasic.$currency
  Paisa = modBasic.$centUnit
  If amt < 0 Then
    amt = 0 - amt
  Endif

  xamt = Format(amt, gb.Fixed)

  If modBasic.$ConvNumberText = "num2words" Then
    wrdtxt = Rupee & Space(1) & ConvertNumberToWordPython(xamt, True)
    wrdtxt = Replace(wrdtxt, "euro, zero cents", "")
    wrdtxt = Replace(wrdtxt, "zero cents", "")
    wrdtxt = Replace(wrdtxt, "euro,", "And")
    wrdtxt = Replace(wrdtxt, "cents", Paisa)

  Else
    wrdtxt = Rupee & Space(1) & ConvertNumberToWord(xamt)
    wrdtxt = Replace(wrdtxt, gb.NewLine, Space(1))
    wrdtxt = Replace(wrdtxt, ".", "")
    wrdtxt = Replace(wrdtxt, "hundredth", Paisa)

    wrdtxt = Replace(wrdtxt, "one tenth", "ten " & Paisa)
    wrdtxt = Replace(wrdtxt, "two tenth", "twenty " & Paisa)
    wrdtxt = Replace(wrdtxt, "three tenth", "thirty " & Paisa)
    wrdtxt = Replace(wrdtxt, "four tenth", "fourty " & Paisa)
    wrdtxt = Replace(wrdtxt, "five tenth", "fifty " & Paisa)
    wrdtxt = Replace(wrdtxt, "six tenth", "sixty " & Paisa)
    wrdtxt = Replace(wrdtxt, "seven tenth", "seventy " & Paisa)
    wrdtxt = Replace(wrdtxt, "eight tenth", "eighty " & Paisa)
    wrdtxt = Replace(wrdtxt, "nine tenth", "ninety " & Paisa)
  Endif

  Return wrdtxt

End

'please check and replace with better code
Public Function GetLocalNumber(num As String) As String

  Dim xx As String
  Dim i As Integer
  Dim cod As String

  xx = ""
  For i = 1 To Len(num)
    If (String.InStr("0123456789", Mid(num, i, 1)) > 0) Then
      If Mid(num, i, 1) = "0" Then
        cod = modBasic.Local0
      Else If Mid(num, i, 1) = "1" Then
        cod = modBasic.Local1
      Else If Mid(num, i, 1) = "2" Then
        cod = modBasic.Local2
      Else If Mid(num, i, 1) = "3" Then
        cod = modBasic.Local3
      Else If Mid(num, i, 1) = "4" Then
        cod = modBasic.Local4
      Else If Mid(num, i, 1) = "5" Then
        cod = modBasic.Local5
      Else If Mid(num, i, 1) = "6" Then
        cod = modBasic.Local6
      Else If Mid(num, i, 1) = "7" Then
        cod = modBasic.Local7
      Else If Mid(num, i, 1) = "8" Then
        cod = modBasic.Local8
      Else If Mid(num, i, 1) = "9" Then
        cod = modBasic.Local9
      Endif
      If cod Then
        xx = xx & cod
      Else
        xx = xx & Mid(num, i, 1)
      Endif
    Else
      xx = xx & Mid(num, i, 1)
    Endif
  Next

  Return xx

End

''------------------------------------------- LINE INVOICE ------------------------------------------------------------
Public Function GetFormattedText(sText As String, sInt As Integer, Optional sAlign As String) As String

  Dim xx As String
  Dim sLen As Integer
  Dim sdiff As Integer

  If sInt Then
    sLen = Len(sText)
    If sLen < sInt Then
      sdiff = sInt - sLen
      If sAlign Then
        If sAlign = "center" Then
          xx = Space(CInt(Floor(sdiff / 2))) & sText & Space(CInt(Ceil(sdiff / 2)))
        Else If sAlign = "right" Then
          xx = Space(sdiff) & sText
        Else
          xx = sText & Space(sdiff)
        Endif
      Else
        xx = sText & Space(sdiff)
      Endif
    Else If sLen = sInt Then
      xx = sText
    Else If sLen > sInt Then
      xx = Left(sText, sInt)
    Endif
  Else
    xx = sText
  Endif
  Return xx

End

Public Function Wrap(TextToWrap As String, Count As Integer) As String

  Dim sCurWord, sRow As String
  Dim Blocks, Words, Rows As String[]
  Dim i, j As Integer

  Rows = New String[]

  If InStr(TextToWrap, gb.lf) > 0 Then
    Blocks = Split(TextToWrap, gb.lf, Null, False, True)
  Else
    Blocks = New String[]
    Blocks.Add(TextToWrap)
  Endif

  For Each TextToWrap In Blocks

    Words = Split(TextToWrap, " ")
    For i = 0 To Words.Count - 1

      'If TrimWord Like "*nachher" Then Stop
      sCurWord = Words[i]
      If Len(sRow) = 0 Then
        sRow = sCurWord
      Else If Len(sRow & " " & sCurWord) <= Count Then
        sRow &= " " & sCurWord
      Else
        sRow = sCurWord
      End If

      j = i + 1
      If j < Words.Count Then
        sCurWord = Words[j]
        If Len(sRow & " " & sCurWord) > Count Then
          Rows.Add(sRow & gb.lf)
          sRow = Null
        Endif
      Else If j = Words.Count Then
        Rows.Add(sRow)
        sRow = Null
      Endif

    Next
    Rows[Rows.Count - 1] &= gb.Lf
  Next

  Return Rows.Join("")

End

Public Function GetWordWrapText(sText As String, sLen As Integer, sLines As Integer) As String

  Dim stWrap As String[]
  Dim xx As String
  Dim yy As String
  Dim i As Integer
  Dim sval As String
  Dim xval As String

  sval = modSettings.ShowSettingFromFIle("LinePrinting/BlankLine")
  If sval Then
    xval = sval
  Else
    xval = "."
  Endif

  stWrap = New String[]
  yy = sText
  For i = 1 To sLines
    xx = Left(yy, sLen)
    stWrap.Add(xx)
    yy = Mid(yy, sLen + 1, Len(yy))
    If Not yy Then
      yy = xval
    Endif
  Next
  Return stWrap.Join(gb.NewLine)

End

Public Function BlankLines(sInt As Integer) As String[]

  Dim xx As String[]
  Dim i As Integer
  Dim sval As String
  Dim xval As String

  sval = modSettings.ShowSettingFromFIle("LinePrinting/BlankLine")
  If sval Then
    xval = sval
  Else
    xval = Space(2)
  Endif
  xx = New String[]
  If sInt Then
    For i = 1 To sInt
      xx.Add(xval)
    Next
  Endif
  Return xx

End

Public Function BlankLinesLast(sInt As Integer) As String[]

  Dim xx As String[]
  Dim i As Integer
  Dim sval As String
  Dim xval As String

  sval = modSettings.ShowSettingFromFIle("LinePrinting/EndBlankLine")
  If sval Then
    xval = sval
  Else
    xval = "."
  Endif
  xx = New String[]
  If sInt Then
    For i = 1 To sInt
      xx.Add(xval)
    Next
  Endif
  Return xx

End

Public Function TableBoundry(sFormat As String, sLen As Integer) As String

  Dim i As Integer
  Dim xx As String

  xx = ""
  For i = 1 To sLen
    xx = xx & sFormat
  Next
  Return xx

End

Public Function GetZeroStringText(sText As String, sInt As Integer) As String

  Dim xx As String
  Dim yy As Integer
  Dim i As Integer

  If sInt >= Len(sText) Then
    yy = sInt - Len(sText)
    For i = 1 To yy
      xx = xx & "0"
    Next
    xx = xx & sText
  Else
    xx = sText
  Endif

  Return xx

End

Public Function SplitValueText(sText As String) As String[]

  Dim asx As String[]
  Dim xunit As String[]
  Dim i As Integer
  Dim xxx As String[]

  xxx = New String[]
  asx = Split(sText, Space(1))
  xunit = New String[]
  For i = 1 To asx.Count - 1
    xunit.Add(asx[i])
  Next
  xxx.Add(asx[0])
  xxx.Add(xunit.Join(Space(1)))
  Return xxx

End

Public Function SplitTextArray(sText As String) As String[]

  Dim xxx As String[]
  Dim asx As String[]
  Dim sword As String

  xxx = New String[]
  asx = Split(Trim(sText), Space(1))
  For Each sword In asx
    If Len(Trim(sword)) Then
      xxx.Add(Trim(sword))
    Endif
  Next
  Return xxx

End

Public Function GetCollectionString(sColl As Collection) As String[]

  Dim xxx As String[]
  Dim xval As String

  xxx = New String[]
  For Each xval In sColl
    xxx.Add(sColl.Key & ": " & xval)
  Next

  Return xxx

End

''=========== Comparison =====================
Public Function GetStringComaprison(sConst As String, sCompare As String, sVar As String) As Boolean

  Dim xx As Boolean
  Dim asx As String[]

  If sConst And If sCompare And If sVar Then
    If sCompare = "LIKE" Then
      If sConst Like sVar Then
        xx = True
      Endif

    Else If sCompare = "RANGE" Then
      asx = Split(sVar, ":")
      If IsFloat(sConst) And If IsFloat(asx[0]) And If IsFloat(asx[1]) Then
        If CFloat(sConst) >= CFloat(asx[0]) And If CFloat(sConst) <= CFloat(asx[1]) Then
          xx = True
        Else If CFloat(sConst) >= CFloat(asx[1]) And If CFloat(sConst) <= CFloat(asx[0]) Then
          xx = True
        Endif
      Endif

    Else
      If IsFloat(sConst) And If IsFloat(sVar) Then
        If sCompare = "=" Then
          If CFloat(sConst) = CFloat(sVar) Then
            xx = True
          Endif
        Else If sCompare = "<=" Then
          If CFloat(sConst) <= CFloat(sVar) Then
            xx = True
          Endif
        Else If sCompare = ">=" Then
          If CFloat(sConst) >= CFloat(sVar) Then
            xx = True
          Endif
        Else If sCompare = "<" Then
          If CFloat(sConst) < CFloat(sVar) Then
            xx = True
          Endif
        Else If sCompare = ">" Then
          If CFloat(sConst) > CFloat(sVar) Then
            xx = True
          Endif
        Else If sCompare = "<>" Then
          If CFloat(sConst) <> CFloat(sVar) Then
            xx = True
          Endif
        Endif
      Endif

    Endif
  Endif
  Return xx

End

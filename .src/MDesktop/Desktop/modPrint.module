' Gambas module file

Public Function GetHTTPReferer() As String

  Dim xx As String

  If CGI["HTTP_REFERER"] Begins "https:" Then
    xx = "https"
  Else
    xx = "http"
  Endif
  Return xx

End

Public Function GetRemoteURLChange(sURL As String) As String

  Dim xLink As String

  xLink = Replace(sURL, "localhost", modHelpVariable.GetServerPath())
  Return xLink

End

Public Function GetFileWebURL(sFile As String) As String

  Dim xLink As String
  Dim xdir As String
  Dim xnewfile As String
  Dim xadPath As String

  If sFile Begins modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath Then
    xLink = Html(sFile)
  Else
    If Exist(sFile) Then
      xadPath = Temp()
      xdir = "/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode
      If File.Ext(sFile) Then
        xnewfile = modString.GetNowString() & ":" & File.BaseName(xadPath) & "." & File.Ext(sFile)
      Else
        xnewfile = modString.GetNowString() & ":" & File.BaseName(xadPath)
      Endif
      ' modExternal.CreateNewCacheFile(xdir, xnewfile)
      If Exist(xdir &/ xnewfile) Then
        Try Kill xdir &/ xnewfile
      Endif
      Copy sFile To xdir &/ xnewfile
      xLink = Html(modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath & "/docs" &/ modHelpVariable.$SessionCode &/ xnewfile)
    Endif
  Endif

  Return xLink

End

Public Function GetFixedWebURL(sFile As String) As String

  Dim xLink As String
  Dim xdir As String
  Dim xnewfile As String

  If sFile Begins modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath Then
    xLink = Html(sFile)
  Else
    If Exist(sFile) Then
      If Exist("/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode) Then
        xdir = "/tmp" &/ modHelpVariable.AppName &/ "docs" &/ modHelpVariable.$SessionCode
      Else
        xdir = "/tmp" &/ modHelpVariable.AppName &/ "docs"
      Endif

      If File.Ext(sFile) Then
        xnewfile = Application.Name & ":" & File.BaseName(sFile) & "." & File.Ext(sFile)
      Else
        xnewfile = Application.Name & ":" & File.BaseName(sFile)
      Endif
      ' modExternal.CreateNewCacheFile(xdir, xnewfile)
      If Exist(xdir &/ xnewfile) Then
        Try Kill xdir &/ xnewfile
      Endif
      Copy sFile To xdir &/ xnewfile
      xLink = Html(modPrint.GetHTTPReferer() & "://" & modHelpVariable.$HostPath & "/docs" &/ modHelpVariable.$SessionCode &/ xnewfile)
    Endif
  Endif

  Return xLink

End

Public Function ConvertHTMLToPDFString(sLink As String, sSize As String, Optional sInt As String) As String

  Dim sPath As String
  Dim xLink As String
  Dim xconv As String
  Dim xchrome As String

  If sLink Then
    xLink = Replace(sLink, "file://", "")
    If sInt Then
      sPath = Temp(CStr(sInt)) & ".pdf"
    Else
      sPath = Temp() & ".pdf"
    Endif
    xconv = modBasic.$ConvHtmlPDF

    If xconv = "chrome" Then
      xchrome = modBasic.$ConvChromePath
      modHTMLtoPDF.ChrometoPDF(xLink, sPath, sSize, xchrome)
    Else
      modHTMLtoPDF.WkHTMLtoPDF(xLink, sPath, sSize)
    Endif
  Endif
  Return sPath

End

' ' Public Sub CopyReportIcon(sPath As String)
' '
' '   If Not Exist(File.Dir(sPath) &/ File.Name(modHelpVariable.$HospLogo)) Then
' '     If modHelpVariable.$HospLogo = "Nepal.png" Then
' '       Copy "./.public/Nepal.png" To File.Dir(sPath) &/ "Nepal.png"
' '     Else
' '       Copy modHelpVariable.$HospLogo To File.Dir(sPath) &/ File.Name(modHelpVariable.$HospLogo)
' '     Endif
' '   Endif
' '
' ' End

''export to other formats
Public Function ExportToExternalOption(sText As String, sSize As String) As String

  Dim xx As String
  Dim xview As String
  Dim arcmd As String
  Dim stOutput As String
  Dim xFile As String

  xx = modSettings.ShowSettingFromFIle("AppSetting/Spreadsheet")
  xview = modSettings.ShowSettingFromFIle("AppSetting/SpreadsheetView")
  If xx = "Text File" Then
    stOutput = Temp() & ".txt"
    modDevAll.ConvertHTMLtoText(sText, stOutput, sSize)
    xFile = stOutput
  Else If xx = "LibreOffice Writer" Then
    If System.Exist("libreoffice") Then
      stOutput = Temp()
      ' arcmd = ["libreoffice", "--headless", "--convert-to", "odt:writer8", "--outdir", File.Dir(stOutput), sText]
      arcmd = "export HOME=/tmp && libreoffice --headless --convert-to odt:writer8 --outdir " & File.Dir(stOutput) & " " & sText
      modBasic.DebugString("Execute " & arcmd)
      Shell arcmd Wait
      xFile = File.Dir(stOutput) &/ File.BaseName(sText) & ".odt"
    Else
      modApplSub.InstallSelectedApplication(["libreoffice-writer-nogui", "libreoffice-calc-nogui", "libreoffice-java-common", "default-jre-headless"])
    Endif
  Else
    If System.Exist("libreoffice") Then
      stOutput = Temp()
      ' arcmd = ["libreoffice", "--headless", "--convert-to", "ods:calc8", "--outdir", File.Dir(stOutput), sText]
      arcmd = "export HOME=/tmp && libreoffice --headless --convert-to ods:calc8 --outdir " & File.Dir(stOutput) & " " & sText
      modBasic.DebugString("Execute " & arcmd)
      Shell arcmd Wait
      xFile = File.Dir(stOutput) &/ File.BaseName(sText) & ".ods"
    Else
      modApplSub.InstallSelectedApplication(["libreoffice-writer-nogui", "libreoffice-calc-nogui", "libreoffice-java-common", "default-jre-headless"])
    Endif
  Endif

  Return xFile

End

Public Sub DirectPDFPrint(sPath As String)

  Dim sLink As String
  Dim hForm As FmPDFPrint

  sLink = modPrint.GetFileWebURL(sPath)
  If sLink Then
    hForm = New FmPDFPrint(sLink)
    hForm.ShowModal
  Endif

End

Public Function GetCopyTempPath(sPath As String) As String

  Dim sTempDir As String
  Dim xname As String
  Dim sfinal As String

  sTempDir = File.Dir(Temp())
  xname = modString.GetNowString()
  sfinal = sTempDir &/ xname
  Copy sPath To sfinal

  Return sfinal

End

' Gambas module file

Public $AppHeightRatio As Float
Public $AppWidthRatio As Float
Public $AppScaleFactor As Float
Public $AppGridRowHeight As Float

Public $compID As String
Public $lbluser As String

Public Local0 As String
Public Local1 As String
Public Local2 As String
Public Local3 As String
Public Local4 As String
Public Local5 As String
Public Local6 As String
Public Local7 As String
Public Local8 As String
Public Local9 As String

''cache
Public $AppCachePatientDemographics As String
Public $AppCachePatientVisits As String
Public $AppCacheLaboratoryConstants As String
Public $AppCacheTestValueModifiers As String
Public $AppCacheExaminationConstants As String
Public $AppCacheExamValueModifiers As String
Public $AppCacheRadiologyConstants As String
Public $AppCachePatientLabValues As String
Public $AppCachePathologyConstants As String
Public $AppCacheBillingConstants As String
Public $AppCacheMedicineConstants As String
Public $AppCacheInventoryParameters As String
Public $AppCacheDrugRelatedProblems As String
Public $AppCacheDataRepository As String
Public $AppCacheDateConversion As String
Public $AppCacheScriptOutputs As String
Public $AppCacheGeneralParameters As String
Public $AppCacheGridViewData As String
Public $AppCacheUserShareParameters As String
Public $AppCacheSettingsParameters As String

''general
Public $PatPortalURL As String
Public $GlobalUserID As String
Public $PatientImageSplash As Integer
Public $PatientEncLock As String
Public $PatInfoEncrypt As Boolean
Public $PatRepoDBase As String
Public $PatRepoAutoSync As String

Public $InfoMusic As String
Public $InfoMusicVol As Integer
Public $dictPathList As String[]
Public $dictadvPath As String
Public $mediaPath As String
Public $currency As String
Public $centUnit As String
Public $NumFormat As String '
Public $NumFont As String
Public $QuantiUnitEnable As String
Public $NullOnZero As String'
Public $DateFormat As String
Public $DateContent As String
Public $PatNameFormat As String
Public $PatNameUCase As String
Public $PatNameModification As String
Public $PatAddressFormat As String
Public $PatDBAgeGroupList As Variant[]
Public $PatAgeFormat As String
Public $AbnFormat As String
Public $CommentColumn As String
Public $SearchBothSide As Boolean
Public $ErrorLastString As String
Public $TabletModeEnable As String
Public $RichtextResizeRow As String
Public $AutoRefreshEnable As String
Public $DefaultViewPath As String
Public $DefaultViewShell As String

Public $ConvImagePDF As String
Public $ConvHtmlPDF As String
Public $ConvChromePath As String
Public $ConvNumberText As String

''for web only
Public $AppSelect2JS As String

Public $WebViewApp As String
Public $WebktEnableJS As String
Public $FactorForm As String
Public $TextWriterControl As String
Public $ItemListFormat As String
Public $ItemListModalCentre As String
Public $browserFormat As String
Public $MultiMediaFormat As String
Public $LockInTime As String
Public $SamplingYear As Integer
Public $ShowDayMedReport As String
Public $SHowDayDiagnosticReport As String
Public $ShowDayMesStartReport As String

Public $SignaPopUp As String
Public $ShowQuantiMedReport As String
Public $ShowQualiMedReport As String
Public $ShowScaleMedFormat As String
Public $ShowHistorySource As String

Public $FormPicture As String
Public $FormBackColor As String
Public $FormForeColor As String
Public $FormLeftAdv As String
Public $FormRightAdv As String
Public $FormLeftURL As String
Public $FormRightURL As String
Public $FormLeftWidth As Integer

Public $DataOddBackColor As Integer
Public $DataOddForeColor As Integer
Public $DataEvenBackColor As Integer
Public $DataEvenForeColor As Integer
Public $DataViewPadding As String
Public $DataViewTextFont As String

Public $LabelForeColor As Integer
Public $LabelTextFont As String
Public $TextBoxForeColor As Integer
Public $TextBoxTextFont As String
Public $ComboBoxForeColor As Integer
Public $ComboBoxTextFont As String
Public $FocusBackColor As Integer

Public $DebugMode As Boolean
Public $DebugDB As Boolean
Public $DebugAPI As Boolean
Public $DebugMsg As Boolean
Public $HelpMode As String
Public $DumpCache As String
Public $BalloonDelay As Integer
Public $MedRepoBody As String
Public $HighLightColor As Integer
Public $AutoEncPrefix As String
Public $AutoEncSuffix As String
Public $AutoReadNotice As String
Public $WebZoomValue As Float
Public $WebViewFunction As String

Public $FtpUploader As String
Public $cURLCACert As String
Public $UploadLocalrepo As String
Public $ReportingPopUp As String
Public $CSVDelimiter As String
Public $DataAnalysis As String

''barcode settings
Public $BarCodeFormatString As String
Public $BarCodeDisplayText As String
Public $BarCodeWidth As Float
Public $BarCodeWhiteSpace As Integer
Public $BarCodeForeGround As Integer
Public $BarCodeBackGround As Integer
Public $BarCodePixelSize As Integer
Public $BarCodeImageDPI As Integer
Public $BarCodeMarginWidth As Integer

''Patient Prefixes
Public $HospCode As String
Public $PatNoPrefix As String
Public $EncIdPrefix As String
Public $BookNoPrefix As String
Public $PatNoLen As Integer
Public $EncIdLen As Integer
Public $BookNoLen As Integer
Public $InvoicePrefix As String

''patient data entry
Public $regF1Dispensing As String
Public $regF1Sampling As String
Public $regF1Clinic As String
Public $WardAdmission As String
Public $SymptomScale As String

''clin activity
Public $TriageMode As String
Public $ClinVitalInterval As Float
Public $ClinDoseToTime As String
Public $ClinOPDExamination As String
Public $ClinIPDExamination As String
Public $ClinConsultationList As String
Public $ClinOPVisitList As String
Public $ClinPatientForms As String

''for registration
Public $regF1Cashier As String
Public $RegistEssAddress As String
Public $RegistEssDistrict As String
Public $RegistEssWardNo As String
Public $RegistEssEthnic As String
Public $RegistEssAge As String
Public $RegistEssGuardian As String
Public $RegistEssRelation As String
Public $RegistEssContact As String
Public $RegistEssEMail As String
Public $RegistEssCode As String
Public $RegistScanDoc As String

Public $AdmitEssAddress As String
Public $AdmitEssDistrict As String
Public $AdmitEssWardNo As String
Public $AdmitEssEthnic As String
Public $AdmitEssAge As String
Public $AdmitEssGuardian As String
Public $AdmitEssRelation As String
Public $AdmitEssContact As String
Public $AdmitEssEMail As String
Public $AdmitEssCode As String
Public $AdmitEssDiary As String
Public $AdmitScanDoc As String

Public $RegistDataRepo As String
Public $RegistStaffFormat As String

Public $RegistGridFormat As String
Public $RegistAutoWebcam As String
Public $RegistAutoDemograph As String
Public $RegistEmbedDemograph As String
Public $RegistAutoBarcode As String
Public $RegistAutoSticker As String
Public $RegistAutoPrescription As String
Public $RegistAutoPhysicianSMS As String
Public $RegistAutoPatientSMS As String
Public $RegistEthnicityPopUp As String
Public $RegistSurnamePopUp As String
Public $RegistConsultInterval As Integer
Public $RegistConsultStart As Date

Public $DiaryAutoInc As String
Public $DiaryUnique As String
Public $DiaryCharLen As Integer

Public $RegistNewbornLocat As String
Public $RegistSlipInvoice As String
Public $RegistOneDaily As String
Public $RegistClearPast As String
Public $RegistNewClaimEnc As String
Public $AutoClaimtoIPD As String
Public $AutoConsultation As String
Public $AutoConsultLock As String
Public $AutoRegistBilling As String
Public $AutoRegistNoBillHour As String
Public $RegistQuotaQueMode As String
Public $RegistOPQuotaQueMode As String
Public $AllowPatNoEntry As String
Public $BulkConsulInput As String
' Public $RegistScheduleMode As String
Public $RegistDefaultMode As String
Public $RegistFixMode As String
Public $RegistDiscountType As String
Public $RegistDefaultDisc As String
Public $RegistDiscountFix As String
Public $RegistLockToQuota As String
Public $RegistrationOnline As String

Public $UnLockDistrict As String
Public $UnLockAddress As String
Public $UnLockRelation As String
Public $LockConsultant As String

Public $SurNameList As String[]
Public $DistrictList As String[]
Public $MunicipalList As String[]
Public $RelationList As String[]

Public $RegGender As String
Public $RegDistrict As String
Public $RegRelation As String
Public $RegDepart As String
Public $RegERDeparts As String[]
Public $RegConsultant As String

Public $RegStartTime As Date
Public $ResEndTime As Date

Public $ClinChartDataCurve As String
Public $ClinChartShowPoint As String
Public $ClinChartShowLabel As String
Public $ClinChartShowUpper As String
Public $ClinChartShowLower As String
Public $ClinChartShowNormal As String
Public $ClinChartShowHourGrid As String
Public $ClinChartShowGridLabel As String

Public $ClinColorData As Integer
Public $ClinColorPoints As Integer
Public $ClinColorLabel As Integer
Public $ClinColorUpper As Integer
Public $ClinColorLower As Integer
Public $ClinColorNormal As Integer
Public $ClinColorHourGrid As Integer
Public $ClinColorDayGrid As Integer
Public $ClinColorGridLabel As Integer
Public $ClinChartHourDiff As Integer

''inventory chart
Public $InvChShowTitle As String
Public $InvChShowXLabel As String
Public $InvChShowYLabel As String
Public $InvChDataGrouping As String
Public $InvChQTYGrouping As String
Public $InvChAMTGrouping As String
Public $InvChartLeft As Integer
Public $InvChartTop As Integer
Public $InvChartRight As Integer
Public $InvChartBottom As Integer

Public $ChartExecStat As String
Public $StatConfInterval As Float
Public $ChartSummaryFormat As String

''billing setting
Public $BillFixBilling As String
Public $BillLockBilling As String
Public $BillDiscMethod As String
Public $BillTaxMethod As String
Public $BillSubsidyMode As String
Public $BillTaxFixedValue As Float
Public $BillDiscFixedValue As Float
Public $BillFixTax As String
Public $BillFixDisc As String
Public $BillFixTaxSaved As String
Public $BillFixDiscSaved As String
Public $BillFixSumTax As String
Public $BillFixSumDisc As String
Public $BillInvReprintForm As String
Public $BillPunchItems As String
Public $BillDuplication As String
Public $BillReturnByEnc As String
Public $BillItemMode As String
Public $BillAutoReturn As String
Public $BillReturnPunching As String  ''for backward compatibility
Public $BillServReturnPunching As String
Public $BillPharmReturnPunching As String
Public $BillAlterPackage As String
Public $BillFixBillMode As String
Public $BillDefaultMode As String
Public $BillPackageSett As String
Public $BillFixPackage As String

Public $BillReportSummary As String
Public $BillFixedRateSale As String
Public $BillReturnDueClear As String
Public $BillBedCharge As String
Public $BillAddDiagnosis As String
Public $BillLockDiagnosis As String
Public $BillCashSource As String
Public $BillLowDeposit As String
Public $BillFractionQty As String
Public $BillExpiredEntry As String
Public $BillPunchingLock As Integer
Public $BillPharmFixedModes As String[]

Public $BillPharmSalesOption As String
Public $BillPharmReturnOption As String
Public $BillCashOption As String
Public $BillReturnOption As String
Public $BillDepositOption As String
Public $BillDischargeOption As String
Public $BillDischargeAutoLock As String
Public $HandOverLockInvoice As String
Public $HandOverLockSubmission As String
Public $HandOverZeroSubmission As String
Public $HandOverOtherCash As String

Public $BillPastInvoices As String
Public $BillInvoiceWiseReturn As String
Public $BillTwoStepBilling As String
Public $BillSeparateReturn As String
Public $BillReceiptCategory As String
Public $BillLockToOwnEntry As String
Public $BillLockAdmitted As String
Public $BillLockIPPrintInvoice As String
Public $BillLockIPCreditReceipt As String
Public $BillLockIPDepositReturn As String
Public $BillLockAdmitDeposit As String
Public $BillPharmacyOrigin As String
Public $BillEditPayable As String
Public $BillEditSavePack As String
Public $BillVerifyReturn As String

Public $BillServiceSection As String
Public $BillTestSection As String
Public $BillEquipSection As String
Public $BillRadioSection As String
Public $BillProcSection As String
Public $BillOtherSection As String
Public $BillAllItemSection As String

Public $AutoBillConsult As String
Public $AutoBillBed As String
Public $AutoBillService As String
Public $AutoBillProcedure As String
Public $AutoBillEquipment As String
Public $AutoBillTest As String
Public $AutoBillRadio As String
Public $AutoBillPharmacy As String
Public $AutoBillOthers As String
Public $AutoBillSaveZero As String
Public $AutoBillSaveFullCredit As String
Public $AutoBedChargeMode As String
Public $AutoBillUseOwn As String
Public $PayableLockEntry As String
Public $ReferralLockEntry As String

Public $LowDepoPharm As String
Public $LowDepoEquip As String
Public $LowDepoTest As String
Public $LowDepoProc As String
Public $LowDepoRadio As String
Public $LowDepoOther As String
Public $LowDepoService As String
Public $DichargeOnClear As String

''Account rules
Public $PayableCalculation As String
Public $PayableTDSMode As String
Public $PayableManualVerify As String
Public $PayableSettingVerify As String
Public $PayableGroupSource As String
Public $PayableUserFormat As String
Public $ShareProcedureAccess As String
Public $ShareRadiologyAccess As String

Public $BillReportNullLedger As String

''invoicing
Public $BillEditRate As String
Public $BillEditRateSaved As String
Public $BillAmtRounding As String
Public $BillInvoiceCopy As String
Public $BillLockInvoiceToOwn As String
Public $BillTargetMedicine As String
Public $BillTargetSurgical As String
Public $BillTargetSutures As String
Public $BillTargetOrthopedics As String
Public $BillTargetExtras As String
Public $BillAlterPharmStock As String
Public $BillPrintTime As String
Public $BillAfterPrintDisplay As String
Public $BillEditTaxDiscForm As String
Public $BillShowAutoPayable As String
Public $BillWarnCredits As String
Public $BillWithInvoicePrint As String
Public $BillSkipPrinting As String
Public $BillPharmSelection As String

Public $BillMedicineFormat As String
Public $BillExpiryFormat As String
Public $SalesHistoryAlert As String
Public $QRPaymentScript As String
Public $QRPaymentShell As String

''Lists for General Billings
Public $BillDiscountRegd As String[]
Public $BillDiscountAll As String[]
Public $BillDiscountCash As String[]
Public $BillDiscAllType As String[]
Public $BillBillingMode As String[]
Public $ReferenceSubs As Collection
Public $ACLedgerListCash As String[]
Public $ACLedgerListCredit As String[]
Public $ACLedgerListAll As String[]
Public $CashPayVendors As String[]

Public $RegistLockProfile As Float

''medicine setting
Public $MedErrorEnable As String
Public $MedDoseRecommend As String
Public $MedDiseaseDose As String
Public $MedNoRegimen As String
Public $MedLogRecommend As String

''inventory
Public $SkipExpiry As String
Public $SalesOutOrder As String
Public $RetnOutOrder As String
Public $InvQuickReport As String
Public $InvReportCost As String
Public $SurgProfit As Float
Public $MedProfit As Float
Public $PurCompList As String
Public $PurExtraParam As String
Public $PurExpiryDay As Float
Public $BatchSuffix As String

''inventory access
Public $AccessStockTransfer As String
Public $AccessStockConsume As String
Public $AccessPurchaseRequest As String
Public $AccessPurchaseOrder As String
Public $AccessStockReturn As String
Public $AccessPurchaseEntry As String

''Serial Port
Public $SerialPort As String
Public $SerialClear As String
Public $ShowStorage As String
Public $HideStorage As String

''Global Clinic
Public $ClinicDisableCompo As String[]
Public $FixedDepartment As String
Public $LockToOwnDepart As String
Public $LockToOwnConsultant As String
Public $LockToOwnProcedure As String
Public $ClinMidBedRelease As String
Public $ClinDepartFormat As String
Public $ClinBedHoldTime As Integer
Public $FixDiagnosisDischarge As String
Public $FixDiagnosisOPOutcome As String
Public $ClinicTelemed As String
Public $ClinVideoServer As String
Public $ClinVideoPass As String
Public $ClinConsultTelemed As String

Public $LockExamList As String
Public $LockSymptomList As String
Public $LockDiagnosisList As String
Public $LockDelTypeInput As String
Public $LockProcedCompInput As String
Public $LockAnesTechnInput As String
Public $ClinHistoryInput As String
Public $ClinDietApprove As String
Public $ClinICDGroupDiagno As String
Public $ClinHistoryDischarge As String
Public $DisplayExamOption As String
Public $DisplayQualiArea As String
Public $SelectMultiSymptoms As String
Public $ClinTestGrouping As String
Public $ClinRadioGrouping As String
Public $ClinFlagAbnormExam As String
Public $ClinSliderValue As String
Public $ClinICDPunchFormat As String
Public $CliniDiagnosticReport As String
Public $ClinCategoryGrid As String
Public $ClinPastDiagnosis As String

Public $ClinInjSubRoutes As String

Public $DefaultTestList As String
Public $DefaultRadioList As String
Public $ProvDiagnosisRule As String
Public $FinalDiagnosisRule As String
Public $FixDiagnoGroupOPD As String
Public $FixDiagnoGroupER As String

Public $CommRefRange As String
Public $CommSensSpec As String
Public $CommMedEffect As String
Public $CommCauseSyndro As String
Public $CommInterpret As String
Public $CommFooterInfo As String

Public $EBMAge As String
Public $EBMAgeRange As Integer
Public $EBMGender As String
Public $EBMDistrict As String
Public $EBMMethod As String
Public $EBMDiagno As String
Public $EBMEthnic As String

''custom report sources
Public $CustomImage As String
Public $CustomDataQR As String
Public $CustomUser As String
Public $CustomDemog As String
Public $CustomParagraph As String
Public $CustomTest As String
Public $CustomExam As String
Public $CustomRadio As String
Public $CustomCalc As String
Public $CustomSQLQuery As String
Public $CustomScript As String
Public $CustomExec As String

Public $CustomConsult As String
Public $CustomBirth As String
Public $CustomHistory As String
Public $CustomSelExam As String
Public $CustomProcedure As String

''General values
Public $UploadMaxSize As String
Public $UploadEncryptPDF As String
Public $UploadFTPFolder As String
Public $SMSQueDisable As String

''Print Log
Public $ReportLogPrint As String
Public $ReportLogHTML As String
Public $ReportLogPDF As String
Public $ReportLogExport As String
Public $ReportLogSend As String
Public $ReportLogSave As String
Public $ReportLogFTP As String

''view control
Public $ViewLockInvoice As String
Public $ViewLockVoucher As String
Public $ViewLockInventory As String
Public $ViewLockAssets As String

''Restrict Printing
Public $PrintLockPersonal As String
Public $PrintLockBrowser As String
Public $PrintLockArchived As String

''Alerts
Public $AlertRadioList As String
Public $AlertTestList As String

''Laboratory/Radiology
Public $LabAutoFooter As String
Public $LabAutoSpecimen As String
Public $LabAutoSampleID As String
Public $LabAutoSampleSuffix As String
Public $LabWorkSheet As String
Public $LabAddHidden As String
Public $LabLockSpecimen As String
Public $AutoEncounterF1 As String
Public $LabSamplePrint As Integer
Public $LabBarMultiPrint As String
Public $TestAddSource As String
Public $AutoSampleLoad As String

Public $LabBarCode As String
Public $LabBarFormat As String
Public $LabBarDisplayText As String
Public $LabBarWidth As String
Public $LabBarWhiteSpace As String
Public $LabBarPrint As String
Public $LabExtraPrint As String
Public $LabQueFormat As String
Public $LabBarPath As String
Public $LabSamplingFrom As String
Public $LabSamplingComp As String
Public $LabReportingFrom As String
Public $LabReportingComp As String
Public $LabAutoSampNo As String
Public $LabSamplePrefix As String
Public $RadioSamplePrefix As String
Public $LabReportGroup As String
Public $LabQuickMulti As String
Public $LabArchComment As String
Public $LabArchieveLog As String
Public $LabTestOrdering As String
Public $LabSMSReportLock As String
Public $LabPrintWithEntry As String
Public $LabSensitivityReport As String
Public $LabReportSections As String
Public $LabExtraColumn As String
Public $LabOutputLock As String
Public $LabInterfaceCompDate As String

''Dispensing Label settings
Public $DispLabelAutoEnable As String
Public $DispLabelRegimen As String
Public $DispPrescibeSource As String
Public $DispRequestStatus As String
Public $MedRequestForm As String

''FTP Setting for manual Report Saving
Public $RepoManHost As String
Public $RepoManFolder As String
Public $RepoManUser As String
Public $RepoManPass As String

''SMTP setting for e mail
Public $emailSMTPHost As String
Public $emailSMTPUser As String
Public $emailSMTPPass As String
Public $emailSMTPFrom As String

''Claim Code Upload
Public $ClaimUser As String
Public $ClaimPass As String
Public $ClaimCheckURL As String
Public $ClaimSaveURL As String
Public $ClaimLoadURL As String
Public $ClaimAutoDocs As String

''imis manage
Public $HIChronicList As String[]
Public $HIPackLst As String[]
Public $HIPackage As String
Public $HIPackageER As String
Public $HICancelPack As String
Public $IMISUser As String
Public $IMISPass As String
Public $IMISRemoUser As String
Public $IMISPatientURL As String
Public $IMISEligibleURL As String
Public $IMISClaimURL As String
Public $IMISValidateURL As String
Public $IMISHospUUID As String
Public $IMISAdminUUID As String
Public $IMISCACert As String
Public $IMISQuote As String
Public $IMISICDForm As String
Public $IMISAgent As String
Public $IMISAutoClaim As String

''ssf api
Public $SSFCriticalList As String[]
Public $SSFAccident As String
Public $SSFMedical As String
Public $SSFMedExtra As String
Public $SSFCritical As String
Public $SSFAccList As String[]
Public $SSFUser As String
Public $SSFPass As String
Public $SSFRemoUser As String
Public $SSFPatientURL As String
Public $SSFEligibleURL As String
Public $SSFClaimURL As String
Public $SSFImageURL As String
Public $SSFEmployerURL As String
Public $SSFAttachURL As String
Public $SSFBookingURL As String
Public $SSFHospUUID As String
Public $SSFAdminUUID As String
Public $SSFPracRole As String
Public $SSFCACert As String
Public $SSFQuote As String
Public $SSFICDForm As String
Public $SSFBookLock As String
Public $SSFUserAgent As String

''Right Panel Login
Public $RightPanelURL As String
Public $RightPanelUser As String
Public $RightPanelPass As String
Public $RightImisHIURL As String
Public $RightImisHIUser As String
Public $RightImisHIPass As String
Public $RightClDocHIURL As String
Public $RightClDocHIUser As String
Public $RightClDocHIPass As String
Public $RightImisSSFURL As String
Public $RightImisSSFUser As String
Public $RightImisSSFPass As String

''Remote Log In
Public $RemoteUserType As String
Public $RemotePassValidity As Integer
Public $RemotePassLen As Integer
Public $RemotePassPrint As String

''WebCam parameters
Public $CamMethod As String
Public $CamImageQuality As Integer
Public $CamImageSize As String
Public $CamImageFormat As String
Public $CamGrayScale As String
Public $CamOpacity As Integer
Public $CamThreshold As Integer
Public $CamOutputMode As String

''Cloud AI parameters
Public $CloudAIURL As String
Public $CloudAIModel As String
Public $CloudAIKey As String
Public $CloudAIClinQuery As String[]
Public $CloudAIDrugQuery As String[]

''Sys Constants
Public $sysCustomList As String[]
Public $sysExamList As String[]
Public $sysTestList As String[]
Public $sysRadioList As String[]
Public $DemogList As String[]
Public $structExamList As String[]
Public $sysExamDualList As String[]
Public $sysTestDualList As String[]

''Large Lists
Public $ICDDiagnoAllList As String[]

''Lists for Clinical Desks
Public $GenericMedName As String[]   'modmedicine GetGenericMedList()
Public $ClinBodyFluidAll As String[]  'modmedicine  GetBodyFluidList()
Public $IPDDepartmentsAll As String[]  ' modGeneral.GetDepartmentWithBedList()
Public $IPDServDepartments As String[]
Public $ClinComplaintComp As String[]
Public $ClinFindingComp As String[]
Public $ClinEssentialComp As String[]
Public $ClinNursingComp As String[]
Public $ClinTriageComp As String[]
Public $ClinDischargeComp As String[]

Public $ClinComplaintCompFlag As String[]
Public $ClinFindingCompFlag As String[]

Public $ClinComplaintCompGrouped As String[]
Public $ClinFindingCompGrouped As String[]
Public $ClinDiagnoChapterGrouped As String[]
Public $ClinDiagnoSelectGrouped As String[]
Public $ClinDiagnoSelectERGroup As String[]

''lab and radiology list
Public $LabSpecimenList As String[]
Public $LabConditionList As String[]

Public $LabOrganismList As String[]
Public $LabAntibioticList As String[]

''General List
Public $PayUserList As Variant[]
Public $ReferUserList As Variant[]
Public $OPConsulUserList As Variant[]
Public $IPConsultUserList As Variant[]
Public $OPConsultCodeList As Variant[]
Public $IPConsultCodeList As Variant[]
Public $OnlineUserList As Variant[]
Public $SignaUserList As Variant[]
Public $ExpoRepoUser As Boolean
Public $SuperUser As Boolean

Public $AllCompList As String[]
Public $AllCompPerList As String[]
Public $DemogAccList As String[]
Public $RepQuerytable As String[]
Public $RepoOptionList As String[]
Public $FiscalYearList As String[]
Public $FiscalCurYear As String
Public $FiscalCurSymbol As String

Public $YearlabtestList As String[]
Public $YearpatexamList As String[]

''--------------------- General functions ----------------------------------------
Public Sub PrintErrorString(sText As String)

  Try WebForm.PrintLog(Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText)
  ' If MMain.$IsGUIApp = True Then
  '   Error Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText
  ' Else
  '   Print Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText
  ' Endif

End

Public Sub DebugString(sText As String)

  If $DebugMode = True Then
    Try WebForm.PrintLog(Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText)
    ' If MMain.$IsGUIApp = True Then
    '   Error Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText
    ' Else
    '   Print Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText
    ' Endif
  Endif

End

Public Sub DebugAPIString(sText As String)

  If $DebugAPI = True Then
    Try WebForm.PrintLog(Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText)
    ' If MMain.$IsGUIApp = True Then
    '   Error Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText
    ' Else
    '   Print Format(Now(), "yyyy-mm-dd hh:nn:ss:uu") & ": " & Application.Name & ": v" & Application.Version & ": " & sText
    ' Endif
  Endif

End

Public Sub LoadLocalNumbers()

  If $NumFont Then
    Local0 = modApplication.ConvertToLocalNumber("0", $NumFont)
    Local1 = modApplication.ConvertToLocalNumber("1", $NumFont)
    Local2 = modApplication.ConvertToLocalNumber("2", $NumFont)
    Local3 = modApplication.ConvertToLocalNumber("3", $NumFont)
    Local4 = modApplication.ConvertToLocalNumber("4", $NumFont)
    Local5 = modApplication.ConvertToLocalNumber("5", $NumFont)
    Local6 = modApplication.ConvertToLocalNumber("6", $NumFont)
    Local7 = modApplication.ConvertToLocalNumber("7", $NumFont)
    Local8 = modApplication.ConvertToLocalNumber("8", $NumFont)
    Local9 = modApplication.ConvertToLocalNumber("9", $NumFont)
  Endif

End

Public Sub LoadWebCamVariables()

  Dim xquali As String
  Dim xopac As String
  Dim xthresh As String

  $CamMethod = modSettings.ShowSettingFromFIle("WebCamSettings/Method")
  xquali = modSettings.ShowSettingFromFIle("WebCamSettings/ImageQuality")
  If xquali Then
    $CamImageQuality = CInt(xquali)
  Endif
  $CamImageSize = modSettings.ShowSettingFromFIle("WebCamSettings/ImageSize")
  $CamImageFormat = modSettings.ShowSettingFromFIle("WebCamSettings/ImageFormat")

  xopac = modSettings.ShowSettingFromFIle("WebCamSettings/ImageOpacity")
  If xopac Then
    $CamOpacity = CInt(xopac)
  Endif
  xthresh = modSettings.ShowSettingFromFIle("WebCamSettings/ImageThreshold")
  If xthresh Then
    $CamThreshold = CInt(xthresh)
  Endif

  $CamGrayScale = modSettings.ShowSettingFromFIle("WebCamSettings/Conversion")
  $CamOutputMode = modSettings.ShowSettingFromFIle("WebCamSettings/OutputMode")

End

''------------------ Application Variables --------------------------
''General variables
Public Sub LoadGeneralVariables()

  Dim xbaloon As String
  Dim xsplash As String
  Dim highcolor As String
  Dim xscale As String
  Dim xleft As String
  Dim xpatencrp As String
  Dim fnRatio As Float
  Dim xkeyaval As Boolean
  Dim xzoom As String
  Dim xcompList As String[]

  DebugString("Loading Application variables")
  ''general
  xscale = modSettings.ShowSettingFromFIle("Application/DesktopScale")
  If xscale Then
    $AppScaleFactor = 1 ''CInt(xscale) / 8
  Else
    $AppScaleFactor = 1 ''Desktop.Scale / 8
  Endif
  fnRatio = 1 ''(Application.Font.TextWidth("a") / Font["Ubuntu,11"].TextWidth("a"))
  $AppWidthRatio = 1 ''fnRatio * (Desktop.Resolution / 96)
  $AppHeightRatio = 1 ''fnRatio * (Desktop.Resolution / 96)
  $AppGridRowHeight = 1  ''25 * modBasic.$AppHeightRatio

  $FiscalCurYear = modDate.GetNepaliFiscalYear(Now())
  If $FiscalCurYear Then
    $FiscalCurSymbol = modDate.GetNepaliFiscalSymbol($FiscalCurYear)
  Endif
  $YearlabtestList = modControlSub.GetDirectFillresultNoNull(modDatabase.$myConn.Exec("select fldpatlabtest as col from tblfisclosing"))
  $YearpatexamList = modControlSub.GetDirectFillresultNoNull(modDatabase.$myConn.Exec("select fldpatientexam as col from tblfisclosing"))
  GetAppCacheSettings()

  $PatPortalURL = modSettings.ShowSettingFromFIle("GeneralSettings/PatientPortalURL")
  $GlobalUserID = modSettings.ShowSettingFromFIle("GeneralSettings/GlobalUser")
  $NumFormat = modSettings.ShowSettingFromFIle("ReportFormat/NumberFormat")
  $NumFont = modSettings.ShowSettingFromFIle("ReportFormat/NumberFont")
  $QuantiUnitEnable = modSettings.ShowSettingFromFIle("ReportFormat/ShowQuantiUnit")
  $NullOnZero = modSettings.ShowSettingFromFIle("ReportFormat/NullOnZeroValue")
  $currency = modString.GetCurrency()
  $centUnit = modString.GetCentUnit()
  $DateFormat = modSettings.ShowSettingFromFIle("ReportFormat/DateFormat")
  $DateContent = modSettings.ShowSettingFromFIle("ReportFormat/DateContent")
  LoadLocalNumbers()
  GetReferenceCodeColl()
  $PatDBAgeGroupList = modMisc.GetDBAgeFormatList()

  ''for reports
  $PatNameFormat = modSettings.ShowSettingFromFIle("ReportFormat/NameFormat")
  $PatNameUCase = modSettings.ShowSettingFromFIle("ReportFormat/NameUCase")
  $PatNameModification = modSettings.ShowSettingFromFIle("ReportFormat/NameModification")
  $PatAddressFormat = modSettings.ShowSettingFromFIle("ReportFormat/AddressFormat")
  $CommentColumn = modSettings.ShowSettingFromFIle("ReportFormat/CommentColumn")
  $PatAgeFormat = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_AgeFormat")
  $AbnFormat = modSettings.ShowSettingFromFIle("ReportFormat/ReportBody_AbnormalMark")
  $SMSQueDisable = modGlobalSetting.ShowSettingFromDB("GeneralSettings/SMSQue_Disable")

  $MedRepoBody = modSettings.ShowSettingFromFIle("ClinicalReport/BodyFormat")
  $ShowDayMedReport = modSettings.ShowSettingFromFIle("ClinicalReport/ShowDay_Report")
  $SHowDayDiagnosticReport = modSettings.ShowSettingFromFIle("ClinicalReport/ShowDiagnosticDay_Report")
  $ShowDayMesStartReport = modSettings.ShowSettingFromFIle("ClinicalReport/ShowMedicineStartDate_Report")

  $SignaPopUp = modSettings.ShowSettingFromFIle("ReportFormat/FooterPopUp")
  $ShowQuantiMedReport = modSettings.ShowSettingFromFIle("ClinicalReport/QuantiValue_Format")
  $ShowQualiMedReport = modSettings.ShowSettingFromFIle("ClinicalReport/QualiValue_Format")
  $ShowScaleMedFormat = modSettings.ShowSettingFromFIle("ClinicalReport/ScaleValue_Format")
  $ShowHistorySource = modSettings.ShowSettingFromFIle("ClinicalReport/HistorySource")

  UploadDataSetting()
  LoadCustomReportSource()
  LoadManualFTPSett()
  LoadSMTPEmailSetting()
  ReportLogSetting()
  ViewAccessControl()
  RestrictPrinting()
  RightPanelLoginSet()

  ''user wise
  $FormPicture = modSettings.ShowUserWiseSettingFromFIle("AppSetting_FormPicture")
  $FormBackColor = modSettings.ShowUserWiseSettingFromFIle("AppSetting_FormBackColor")
  $FormForeColor = modSettings.ShowUserWiseSettingFromFIle("AppSetting_FormForeColor")

  $LockInTime = modSettings.ShowSettingFromFIle("AppSetting/LockTime")
  $ItemListFormat = modSettings.ShowSettingFromFIle("AppSetting/ItemView")
  $ItemListModalCentre = modSettings.ShowSettingFromFIle("AppSetting/ItemViewCentre")
  $browserFormat = modSettings.ShowSettingFromFIle("AppSetting/ReportBrowser")
  $MultiMediaFormat = modSettings.ShowSettingFromFIle("AppSetting/MediaPlayerFormat")
  $mediaPath = modSettings.ShowSettingFromFIle("AppSetting/MediaPath")
  $TextWriterControl = modSettings.ShowSettingFromFIle("AppSetting/TextWriter")
  $WebktEnableJS = modSettings.ShowSettingFromFIle("AppSetting/EnableJS")
  $FactorForm = modSettings.ShowSettingFromFIle("AppSetting/ComponentForms")
  $WebViewApp = modSettings.ShowSettingFromFIle("AppSetting/WebViewerApp")

  LoadInfoMusic()
  GetDictionaryPathAll()
  LoadEBMSetting()

  $PatientEncLock = modGlobalSetting.ShowSettingFromDB("TableLock/EncounterLock")
  xpatencrp = modGlobalSetting.ShowSettingFromDB("PatientInfo/Encryption")
  If xpatencrp = "Yes" Then
    $PatInfoEncrypt = True
  Else
    $PatInfoEncrypt = False
  Endif
  $PatRepoDBase = modGlobalSetting.ShowSettingFromDB("Repository/Database")
  $PatRepoAutoSync = modGlobalSetting.ShowSettingFromDB("Repository/AutoSync")

  $TabletModeEnable = modSettings.ShowSettingFromFIle("GeneralSettings/EnableTabletMode")
  $AutoRefreshEnable = modSettings.ShowSettingFromFIle("GeneralSettings/EnableAutoRefresh")
  $AutoEncPrefix = modSettings.ShowSettingFromFIle("GeneralSettings/AutoEncounterPrefix")
  $AutoEncSuffix = modSettings.ShowSettingFromFIle("GeneralSettings/AutoEncounterSuffix")
  $AutoReadNotice = modSettings.ShowSettingFromFIle("GeneralSettings/ReadNotification")
  $SearchBothSide = modSettings.ShowSettingFromFIle("GeneralSettings/GridViewSearch")
  $RichtextResizeRow = modSettings.ShowSettingFromFIle("GeneralSettings/ResizeRowheight")
  $DefaultViewPath = modSettings.ShowSettingFromFIle("GeneralSettings/DefaultView_Path")
  $DefaultViewShell = modSettings.ShowSettingFromFIle("GeneralSettings/DefaultView_Shell")
  $WebViewFunction = modSettings.ShowSettingFromFIle("GeneralSettings/WebViewFunction")

  $ConvImagePDF = modSettings.ShowSettingFromFIle("Converter/imagetopdf")
  $ConvHtmlPDF = modSettings.ShowSettingFromFIle("Converter/htmltopdf")
  $ConvChromePath = modSettings.ShowSettingFromFIle("Converter/ChromePath")
  $ConvNumberText = modSettings.ShowSettingFromFIle("Converter/NumberToText")

  xsplash = modSettings.ShowSettingFromFIle("AppSetting/ImageSplash")
  If xsplash Then
    $PatientImageSplash = CInt(xsplash)
  Else
    $PatientImageSplash = 0
  Endif

  $FtpUploader = modSettings.ShowSettingFromFIle("GeneralSettings/FTPUploader")
  $cURLCACert = modSettings.ShowSettingFromFIle("GeneralSettings/cURLCACertificate")
  $UploadLocalrepo = modSettings.ShowSettingFromFIle("GeneralSettings/LocalRepoUpload")
  $ReportingPopUp = modSettings.ShowSettingFromFIle("GeneralSettings/ReportingOutput")
  $CSVDelimiter = modSettings.ShowSettingFromFIle("GeneralSettings/CSVDelimiter")
  $DataAnalysis = modSettings.ShowSettingFromFIle("GeneralSettings/DataAnalysis")

  xbaloon = modSettings.ShowSettingFromFIle("GeneralSettings/BalloonDelay")
  If xbaloon Then
    $BalloonDelay = CInt(xbaloon)
  Else
    $BalloonDelay = 2000
  Endif

  xzoom = modSettings.ShowSettingFromFIle("GeneralSettings/WebView_Zoom")
  If xzoom Then
    $WebZoomValue = Val(xzoom) / 100
  Else
    $WebZoomValue = $AppScaleFactor
  Endif

  highcolor = modSettings.ShowSettingFromFIle("GeneralSettings/HighLightColor")
  If highcolor Then
    $HighLightColor = CInt(highcolor)
  Else
    $HighLightColor = Color.DarkRed
  Endif

  DataViewRowCOlor()
  LoadBarCodeSettingAll()
  LabelDesignSetting()
  LoadWebCamVariables()
  $DumpCache = modSettings.ShowSettingFromFIle("GeneralSettings/LocalDataCaching_Dump")
  $HelpMode = modSettings.ShowSettingFromFIle("GeneralSettings/HelpMode")
  xkeyaval = modPassword.GetKeyPresence()
  If xkeyaval = True Then
    $FormLeftAdv = modSettings.ShowUserWiseSettingFromFIle("DisableAdvertise_Left")
    $FormRightAdv = modSettings.ShowUserWiseSettingFromFIle("DisableAdvertise_Right")
    $FormLeftURL = modSettings.ShowUserWiseSettingFromFIle("CustomWebURL_Left")
    $FormRightURL = modSettings.ShowUserWiseSettingFromFIle("CustomWebURL_Right")
  Else
    $FormLeftAdv = "No"
    $FormRightAdv = "No"
  Endif

  xleft = modSettings.ShowSettingFromFIle("Application/LeftPanel_Width")
  If xleft Then
    $FormLeftWidth = CInt(xleft)
  Endif

  ShowUserPrivilege()
  $AllCompList = modGeneral.CompList()

  xcompList = modGeneral.CompList()
  xcompList.Add("%")
  $AllCompPerList = xcompList
  $FiscalYearList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldlabel) as col from tblfiscalid"))
  $BillPastInvoices = modGlobalSetting.ShowSettingFromDB("CashBilling/PastInvoices")

  $RepQuerytable = modReportVar.SQLAllowTableList()
  $RepoOptionList = modMisc.GetReportOptionList()
  modPatient.GetPatientNoPrefixes()

  If Not modHelpVariable.$AutoRepoUpload Then
    modHelpVariable.$AutoRepoUpload = modSettings.ShowSettingFromFIle("Application/AutoRepositoryUpload")
  Endif
  If Not modHelpVariable.$AutoImgRepoUpload Then
    modHelpVariable.$AutoImgRepoUpload = modSettings.ShowSettingFromFIle("Application/AutoImgRepositoryUpload")
  Endif

End

Public Sub ShowUserPrivilege()

  $PayUserList = modGeneral.CategoricalUserList("fldpayable")
  $ReferUserList = modGeneral.CategoricalUserList("fldreferral")
  $OPConsulUserList = modGeneral.CategoricalUserList("fldopconsult")
  $IPConsultUserList = modGeneral.CategoricalUserList("fldipconsult")
  $OnlineUserList = modGeneral.CategoricalUserList("fldonline")
  $SignaUserList = modGeneral.CategoricalUserList("fldsigna")

  $OPConsultCodeList = modGeneral.CategoricalUserCodeList("fldopconsult")
  $IPConsultCodeList = modGeneral.CategoricalUserCodeList("fldipconsult")

  $ExpoRepoUser = modGeneral.GetExpoReportUser(modBasic.$lbluser)
  $SuperUser = modGeneral.GetSuperUser(modBasic.$lbluser)

End

Public Sub GetAppCacheSettings()

  Dim xlabcons As String
  Dim xexamcons As String
  Dim xradiocons As String
  Dim xpathocons As String
  Dim xmedcons As String
  Dim xdrugprob As String
  Dim xdateconv As String

  $AppCachePatientVisits = modSettings.ShowSettingFromFIle("AppCacheEnable/PatientVisits")
  $AppCachePatientDemographics = modSettings.ShowSettingFromFIle("AppCacheEnable/PatientDemographics")
  $AppCacheTestValueModifiers = modSettings.ShowSettingFromFIle("AppCacheEnable/TestValueModifiers")
  $AppCacheExamValueModifiers = modSettings.ShowSettingFromFIle("AppCacheEnable/ExamValueModifiers")
  $AppCachePatientLabValues = modSettings.ShowSettingFromFIle("AppCacheEnable/PatientLabValues")
  $AppCacheBillingConstants = modSettings.ShowSettingFromFIle("AppCacheEnable/BillingConstants")
  $AppCacheInventoryParameters = modSettings.ShowSettingFromFIle("AppCacheEnable/InventoryParameters")
  $AppCacheDataRepository = modSettings.ShowSettingFromFIle("AppCacheEnable/DataRepository")
  $AppCacheScriptOutputs = modSettings.ShowSettingFromFIle("AppCacheEnable/ScriptOutputs")
  $AppCacheGeneralParameters = modSettings.ShowSettingFromFIle("AppCacheEnable/GeneralParameters")
  $AppCacheGridViewData = modSettings.ShowSettingFromFIle("AppCacheEnable/GridViewData")
  $AppCacheUserShareParameters = modSettings.ShowSettingFromFIle("AppCacheEnable/UserShareParameters")
  $AppCacheSettingsParameters = modSettings.ShowSettingFromFIle("AppCacheEnable/ApplicationSettings")

  xlabcons = modSettings.ShowSettingFromFIle("AppCacheEnable/LaboratoryConstants")
  If xlabcons Then
    $AppCacheLaboratoryConstants = xlabcons
  Else
    $AppCacheLaboratoryConstants = "Yes"
  Endif

  xexamcons = modSettings.ShowSettingFromFIle("AppCacheEnable/ExaminationConstants")
  If xexamcons Then
    $AppCacheExaminationConstants = xexamcons
  Else
    $AppCacheExaminationConstants = "Yes"
  Endif

  xradiocons = modSettings.ShowSettingFromFIle("AppCacheEnable/RadiologyConstants")
  If xradiocons Then
    $AppCacheRadiologyConstants = xradiocons
  Else
    $AppCacheRadiologyConstants = "Yes"
  Endif

  xpathocons = modSettings.ShowSettingFromFIle("AppCacheEnable/PathologyConstants")
  If xpathocons Then
    $AppCachePathologyConstants = xpathocons
  Else
    $AppCachePathologyConstants = "Yes"
  Endif

  xmedcons = modSettings.ShowSettingFromFIle("AppCacheEnable/MedicineConstants")
  If xmedcons Then
    $AppCacheMedicineConstants = xmedcons
  Else
    $AppCacheMedicineConstants = "Yes"
  Endif

  xdrugprob = modSettings.ShowSettingFromFIle("AppCacheEnable/DrugRelatedProblems")
  If xdrugprob Then
    $AppCacheDrugRelatedProblems = xdrugprob
  Else
    $AppCacheDrugRelatedProblems = "Yes"
  Endif

  xdateconv = modSettings.ShowSettingFromFIle("AppCacheEnable/DateConversion")
  If xdateconv Then
    $AppCacheDateConversion = xdateconv
  Else
    $AppCacheDateConversion = "Yes"
  Endif

End

Private Sub LoadBarCodeSettingAll()

  Dim xwid As String
  Dim xwhite As String
  Dim xfore As String
  Dim xback As String

  Dim xpixel As String
  Dim xdpi As String
  Dim xmargin As String

  $BarCodeFormatString = modSettings.ShowSettingFromFIle("BarCodeFormat/FormatString")
  $BarCodeDisplayText = modSettings.ShowSettingFromFIle("BarCodeFormat/DisplayText")

  xwid = modSettings.ShowSettingFromFIle("BarCodeFormat/Width")
  If xwid Then
    $BarCodeWidth = CFloat(xwid)
  Endif
  xwhite = modSettings.ShowSettingFromFIle("BarCodeFormat/WhiteSpace")
  If xwhite Then
    $BarCodeWhiteSpace = CInt(xwhite)
  Endif
  xfore = modSettings.ShowSettingFromFIle("BarCodeFormat/ForeGround")
  If xfore Then
    $BarCodeForeGround = CInt(xfore)
  Endif
  xback = modSettings.ShowSettingFromFIle("BarCodeFormat/BackGround")
  If xback Then
    $BarCodeBackGround = CInt(xback)
  Endif

  xpixel = modSettings.ShowSettingFromFIle("BarCodeFormat/PixelSize")
  If xpixel Then
    $BarCodePixelSize = CInt(xpixel)
  Endif
  xdpi = modSettings.ShowSettingFromFIle("BarCodeFormat/ImageDPI")
  If xdpi Then
    $BarCodeImageDPI = CInt(xdpi)
  Endif
  xmargin = modSettings.ShowSettingFromFIle("BarCodeFormat/MarginWidth")
  If xmargin Then
    $BarCodeMarginWidth = CInt(xmargin)
  Endif

End

Private Sub LoadManualFTPSett()

  $RepoManHost = modSettings.ShowSettingFromFIle("RemoteFTP/HostName")
  $RepoManFolder = modSettings.ShowSettingFromFIle("RemoteFTP/FTPFolder")
  $RepoManUser = UnBase64(modSettings.ShowSettingFromFIle("RemoteFTP/UserName"))
  $RepoManPass = UnBase64(modSettings.ShowSettingFromFIle("RemoteFTP/PassWord"))

End

Public Sub LoadSMTPEmailSetting()

  $emailSMTPHost = modSettings.ShowSettingFromFIle("SMTPEmail/HostName")
  $emailSMTPUser = modSettings.ShowSettingFromFIle("SMTPEmail/UserName")
  $emailSMTPPass = UnBase64(modSettings.ShowSettingFromFIle("SMTPEmail/PassWord"))
  $emailSMTPFrom = modSettings.ShowSettingFromFIle("SMTPEmail/SenderName")

End

Public Sub LoadClaimParametes()

  Dim aList As String[]
  Dim bList As String[]
  Dim xList As String[]
  Dim yList As String[]
  Dim zList As String[]

  $ClaimUser = UnBase64(modSettings.ShowSettingFromFIle("InsuranceClaim/UserName"))
  $ClaimPass = UnBase64(modSettings.ShowSettingFromFIle("InsuranceClaim/PassWord"))
  $ClaimCheckURL = modSettings.ShowSettingFromFIle("InsuranceClaim/CheckURL")
  $ClaimSaveURL = modSettings.ShowSettingFromFIle("InsuranceClaim/SaveURL")
  $ClaimLoadURL = modSettings.ShowSettingFromFIle("InsuranceClaim/UploadLoadURL")
  $ClaimAutoDocs = modSettings.ShowSettingFromFIle("InsuranceClaim/AutoUpload")

  bList = modControlSub.GetDirectFillresultNoNull(modDatabase.$myConn.Exec("select fldcodenew as col from tblbilldisease where fldgroup=&1", "HI Chronic Disease"))
  If bList And If bList.Count Then
    $HIChronicList = bList
  Endif
  aList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1 and fldreserved=&2", "Claim Code", "Scheme"))
  If aList And If aList.Count Then
    $HIPackLst = aList
  Endif
  xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1 and fldreserved=&2 and fldfixdepart IS NULL", "Claim Code", "Scheme"))
  If xList And If xList.Count Then
    $HIPackage = xList[0]
  Endif
  yList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1 and fldreserved=&2 and fldfixdepart like &3", "Claim Code", "Scheme", "Emergency"))
  If yList And If yList.Count Then
    $HIPackageER = yList[0]
  Endif
  zList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1 and fldreserved=&2", "Claim Code", "Cancel"))
  If zList And If zList.Count Then
    $HICancelPack = zList[0]
  Endif
  $IMISUser = UnBase64(modSettings.ShowSettingFromFIle("InsuranceMain/UserName"))
  $IMISPass = UnBase64(modSettings.ShowSettingFromFIle("InsuranceMain/Password"))
  $IMISRemoUser = UnBase64(modSettings.ShowSettingFromFIle("InsuranceMain/RemoteUser"))
  $IMISPatientURL = modSettings.ShowSettingFromFIle("InsuranceMain/PatientURL")
  $IMISEligibleURL = modSettings.ShowSettingFromFIle("InsuranceMain/EligibleURL")
  $IMISClaimURL = modSettings.ShowSettingFromFIle("InsuranceMain/ClaimURL")
  $IMISValidateURL = modSettings.ShowSettingFromFIle("InsuranceMain/ValidationURL")
  $IMISHospUUID = modSettings.ShowSettingFromFIle("InsuranceMain/HospitalUUID")
  $IMISAdminUUID = modSettings.ShowSettingFromFIle("InsuranceMain/ClaimAdminUUID")
  $IMISCACert = modSettings.ShowSettingFromFIle("InsuranceMain/CACertificate")
  $IMISQuote = modSettings.ShowSettingFromFIle("InsuranceMain/QuotePass")
  $IMISICDForm = modSettings.ShowSettingFromFIle("InsuranceMain/ICDFormat")
  $IMISAgent = modSettings.ShowSettingFromFIle("InsuranceMain/UserAgent")
  $IMISAutoClaim = modSettings.ShowSettingFromFIle("InsuranceMain/AutoClaim")

End

Public Sub LoadSSFClaim()

  Dim bList As String[]
  Dim xList As String[]
  Dim yList As String[]
  Dim zList As String[]
  Dim wList As String[]

  xList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1", "Accident SSF"))
  If xList And If xList.Count Then
    $SSFAccident = xList[0]
  Endif
  yList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1", "Medical SSF"))
  If yList And If yList.Count Then
    $SSFMedical = yList[0]
  Endif
  wList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1", "MedExtra SSF"))
  If wList And If wList.Count Then
    $SSFMedExtra = wList[0]
  Endif
  zList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype as col from tbldiscount where fldreference=&1", "Critical SSF"))
  If zList And If zList.Count Then
    $SSFCritical = zList[0]
  Endif
  $SSFAccList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldacledger) as col from tbldiscount where fldreference=&1 or fldreference=&2 or fldreference=&3 or fldreference=&4", "Accident SSF", "Medical SSF", "MedExtra SSF", "Critical SSF"))

  bList = modControlSub.GetDirectFillresultNoNull(modDatabase.$myConn.Exec("select fldcodenew as col from tblbilldisease where fldgroup=&1", "SSF Critical Disease"))
  If bList And If bList.Count Then
    $SSFCriticalList = bList
  Endif

  $SSFUser = UnBase64(modSettings.ShowSettingFromFIle("SocialSecurityFund/UserName"))
  $SSFPass = UnBase64(modSettings.ShowSettingFromFIle("SocialSecurityFund/Password"))
  $SSFRemoUser = UnBase64(modSettings.ShowSettingFromFIle("SocialSecurityFund/RemoteUser"))
  $SSFPatientURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/PatientURL")
  $SSFEligibleURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/EligibleURL")
  $SSFClaimURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/ClaimURL")
  $SSFImageURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/ImageURL")
  $SSFEmployerURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/EmployerURL")
  $SSFAttachURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/AttachmentURL")
  $SSFBookingURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/BookingURL")

  $SSFHospUUID = modSettings.ShowSettingFromFIle("SocialSecurityFund/HospitalUUID")
  $SSFAdminUUID = modSettings.ShowSettingFromFIle("SocialSecurityFund/ClaimAdminUUID")
  $SSFPracRole = modSettings.ShowSettingFromFIle("SocialSecurityFund/PractRole")
  $SSFCACert = modSettings.ShowSettingFromFIle("SocialSecurityFund/CACertificate")
  $SSFQuote = modSettings.ShowSettingFromFIle("SocialSecurityFund/QuotePass")
  $SSFICDForm = modSettings.ShowSettingFromFIle("SocialSecurityFund/ICDFormat")
  $SSFBookLock = modSettings.ShowSettingFromFIle("SocialSecurityFund/BookingLock")
  $SSFUserAgent = modSettings.ShowSettingFromFIle("SocialSecurityFund/UserAgent")

End

Public Sub RightPanelLoginSet()

  Dim xuser As String
  Dim xpass As String

  Dim auser As String
  Dim apass As String
  Dim buser As String
  Dim bpass As String
  Dim cuser As String
  Dim cpass As String

  $RightPanelURL = modSettings.ShowSettingFromFIle("RightPanelWeb/URL")
  xuser = modSettings.ShowSettingFromFIle("RightPanelWeb/UserName")
  If xuser Then
    $RightPanelUser = UnBase64(xuser)
  Endif
  xpass = modSettings.ShowSettingFromFIle("RightPanelWeb/PassWord")
  If xpass Then
    $RightPanelPass = UnBase64(xpass)
  Endif

  $RightImisHIURL = modSettings.ShowSettingFromFIle("HealthInsurance/imis_URL")
  auser = modSettings.ShowSettingFromFIle("HealthInsurance/imis_UserName")
  If auser Then
    $RightImisHIUser = UnBase64(auser)
  Endif
  apass = modSettings.ShowSettingFromFIle("HealthInsurance/imis_PassWord")
  If apass Then
    $RightImisHIPass = UnBase64(apass)
  Endif

  $RightClDocHIURL = modSettings.ShowSettingFromFIle("HealthInsurance/claimdoc_URL")
  buser = modSettings.ShowSettingFromFIle("HealthInsurance/claimdoc_UserName")
  If buser Then
    $RightClDocHIUser = UnBase64(buser)
  Endif
  bpass = modSettings.ShowSettingFromFIle("HealthInsurance/claimdoc_PassWord")
  If bpass Then
    $RightClDocHIPass = UnBase64(bpass)
  Endif

  $RightImisSSFURL = modSettings.ShowSettingFromFIle("SocialSecurityFund/imis_URL")
  cuser = modSettings.ShowSettingFromFIle("SocialSecurityFund/imis_UserName")
  If cuser Then
    $RightImisSSFUser = UnBase64(cuser)
  Endif
  cpass = modSettings.ShowSettingFromFIle("SocialSecurityFund/imis_PassWord")
  If cpass Then
    $RightImisSSFPass = UnBase64(cpass)
  Endif

End

Public Sub LoadEBMSetting()

  Dim xagerange As String

  $EBMAge = modSettings.ShowSettingFromFIle("EvidenceBasis/Age")
  xagerange = modSettings.ShowSettingFromFIle("EvidenceBasis/AgeRange")
  If xagerange Then
    $EBMAgeRange = CInt(modSettings.ShowSettingFromFIle("EvidenceBasis/AgeRange"))
  Endif
  $EBMGender = modSettings.ShowSettingFromFIle("EvidenceBasis/Gender")
  $EBMDistrict = modSettings.ShowSettingFromFIle("EvidenceBasis/District")
  $EBMMethod = modSettings.ShowSettingFromFIle("EvidenceBasis/Method")
  $EBMDiagno = modSettings.ShowSettingFromFIle("EvidenceBasis/Diagnosis")
  $EBMEthnic = modSettings.ShowSettingFromFIle("EvidenceBasis/Ethnicity")

End

Private Sub LoadInfoMusic()

  Dim xmusic As String
  Dim xmusicvol As String

  xmusic = modSettings.ShowSettingFromFIle("AppSetting/InformMusic")
  If xmusic Then
    If Exist(xmusic) Then
      $InfoMusic = xmusic
    Else
      $InfoMusic = ""
    Endif
  Else
    $InfoMusic = ""
  Endif

  xmusicvol = modSettings.ShowSettingFromFIle("AppSetting/VolumeMusic")
  If xmusicvol Then
    $InfoMusicVol = CInt(xmusicvol)
  Endif

End

Private Sub GetDictionaryPathAll()

  Dim xdict As String

  $dictadvPath = modSettings.ShowSettingFromFIle("AdvancedDictionary/Path")
  xdict = modSettings.ShowSettingFromFIle("AppSetting/Dictionary")
  If xdict And If Exist(xdict) Then
    $dictPathList = modString.GetStringArrayFromFile(xdict)
  Else
    $dictPathList = New String[]
  Endif

End

Private Sub LabelDesignSetting()

  Dim xback As String
  Dim xcombo As String
  Dim xtextbox As String
  Dim xfocus As String

  xback = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TextLabelForeColor")
  If xback Then
    $LabelForeColor = CInt(xback)
  Endif
  $LabelTextFont = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TextLabelFont")

  xtextbox = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TextBoxForeColor")
  If xtextbox Then
    $TextBoxForeColor = CInt(xtextbox)
  Endif
  $TextBoxTextFont = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TextBoxFont")

  xcombo = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TextComboForeColor")
  If xcombo Then
    $ComboBoxForeColor = CInt(xcombo)
  Endif
  $ComboBoxTextFont = modSettings.ShowUserWiseSettingFromFIle("AppSetting_TextComboFont")

  xfocus = modSettings.ShowUserWiseSettingFromFIle("AppSetting_FocusBackColor")
  If xfocus Then
    $FocusBackColor = CInt(xfocus)
  Endif

End

Private Sub DataViewRowCOlor()

  Dim xevenback As String
  Dim xevenfore As String
  Dim xoddback As String
  Dim xoddfore As String

  xevenback = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DataViewEvenRowBackColor")
  If xevenback Then
    $DataEvenBackColor = CInt(xevenback)
  Else
    $DataEvenBackColor = Color.Default
  Endif

  xevenfore = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DataViewEvenRowForeColor")
  If xevenfore Then
    $DataEvenForeColor = CInt(xevenfore)
  Else
    $DataEvenForeColor = Color.Default
  Endif

  xoddback = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DataViewOddRowBackColor")
  If xoddback Then
    $DataOddBackColor = CInt(xoddback)
  Else
    $DataOddBackColor = Color.Default
  Endif

  xoddfore = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DataViewOddRowForeColor")
  If xoddfore Then
    $DataOddForeColor = CInt(xoddfore)
  Else
    $DataOddForeColor = Color.Default
  Endif

  $DataViewPadding = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DataViewPadding")
  $DataViewTextFont = modSettings.ShowUserWiseSettingFromFIle("AppSetting_DataViewFont")

End

''---------------------------  Variables used outside of this module ----------------------------
''for cashier billing
Public Sub LoadCashierBillingSettings()

  Dim xtaxval As String
  Dim xdiscval As String
  Dim xpunch As String

  $BillFixBilling = modGlobalSetting.ShowSettingFromDB("CashBilling/FixBilling")
  $BillLockBilling = modGlobalSetting.ShowSettingFromDB("CashBilling/LockBilling")
  $BillVerifyReturn = modGlobalSetting.ShowSettingFromDB("CashBilling/VerifyReturn")
  $BillDiscMethod = modGlobalSetting.ShowSettingFromDB("CashBilling/DiscMode")
  $BillTaxMethod = modGlobalSetting.ShowSettingFromDB("CashBilling/TaxMode")
  $BillSubsidyMode = modGlobalSetting.ShowSettingFromDB("CashBilling/SubsidyMode")

  xtaxval = modGlobalSetting.ShowSettingFromDB("CashBilling/FixedTaxValue")
  If xtaxval Then
    $BillTaxFixedValue = CFloat(xtaxval)
  Else
    $BillTaxFixedValue = 0
  Endif
  xdiscval = modGlobalSetting.ShowSettingFromDB("CashBilling/FixedDiscValue")
  If xdiscval Then
    $BillDiscFixedValue = CFloat(xdiscval)
  Else
    $BillDiscFixedValue = 0
  Endif

  $BillFixTax = modGlobalSetting.ShowSettingFromDB("CashBilling/FixTax")
  $BillFixDisc = modGlobalSetting.ShowSettingFromDB("CashBilling/FixDisc")
  $BillFixTaxSaved = modGlobalSetting.ShowSettingFromDB("CashBilling/FixTaxSaved")
  $BillFixDiscSaved = modGlobalSetting.ShowSettingFromDB("CashBilling/FixDiscSaved")
  $BillFixSumTax = modGlobalSetting.ShowSettingFromDB("CashBilling/FixSumTax")
  $BillFixSumDisc = modGlobalSetting.ShowSettingFromDB("CashBilling/FixSumDisc")
  $BillInvReprintForm = modGlobalSetting.ShowSettingFromDB("CashBilling/InvoiceReprintFormat")
  $BillPunchItems = modGlobalSetting.ShowSettingFromDB("CashBilling/GroupPunchingItems")
  $BillDuplication = modGlobalSetting.ShowSettingFromDB("CashBilling/DuplicateEntry")
  $BillItemMode = modSettings.ShowSettingFromFIle("CashBilling/ItemMode")
  $BillAlterPackage = modGlobalSetting.ShowSettingFromDB("CashBilling/AlterPackage")
  $BillFixBillMode = modGlobalSetting.ShowSettingFromDB("BillingGroup/FixMode")
  $BillDefaultMode = modGlobalSetting.ShowSettingFromDB("BillingGroup/DefaultMode")
  $BillPackageSett = modGlobalSetting.ShowSettingFromDB("CashBilling/SchedulePackage")
  $BillFixPackage = modGlobalSetting.ShowSettingFromDB("CashBilling/FixedPackage")

  $BillReportSummary = modGlobalSetting.ShowSettingFromDB("BillingReport/SummaryPanel")
  $BillFixedRateSale = modGlobalSetting.ShowSettingFromDB("CashBilling/FixedRateSale")
  $BillPharmFixedModes = modStock.GetFixedBillingModes()

  $BillReturnByEnc = modGlobalSetting.ShowSettingFromDB("CashBilling/ReturnByEncID")
  $BillAutoReturn = modGlobalSetting.ShowSettingFromDB("CashBilling/AutoReturn")
  $BillReturnPunching = modGlobalSetting.ShowSettingFromDB("CashBilling/ReturnPunching")  ''for backward compatibility
  $BillServReturnPunching = modGlobalSetting.ShowSettingFromDB("CashBilling/ServiceReturnPunching")
  $BillPharmReturnPunching = modGlobalSetting.ShowSettingFromDB("CashBilling/PharmacyReturnPunching")
  $BillReturnDueClear = modGlobalSetting.ShowSettingFromDB("CashBilling/ReturnDueClearance")
  $BillBedCharge = modGlobalSetting.ShowSettingFromDB("CashBilling/BedCharges")
  $BillAddDiagnosis = modGlobalSetting.ShowSettingFromDB("CashBilling/AddDiagnosis")
  $BillLockDiagnosis = modGlobalSetting.ShowSettingFromDB("CashBilling/LockDiagnosis")
  $BillCashSource = modGlobalSetting.ShowSettingFromDB("CashBilling/CashRecording")
  $BillLowDeposit = modGlobalSetting.ShowSettingFromDB("CashBilling/LowDeposit")
  $BillFractionQty = modGlobalSetting.ShowSettingFromDB("CashBilling/FractionQuantity")
  $BillExpiredEntry = modGlobalSetting.ShowSettingFromDB("CashBilling/ExpiredPunching")

  xpunch = modGlobalSetting.ShowSettingFromDB("CashBilling/LockPunchingAfter")
  If xpunch Then
    $BillPunchingLock = CInt(xpunch)
  Else
    $BillPunchingLock = 0
  Endif

  $BillEditPayable = modGlobalSetting.ShowSettingFromDB("SavedBillingEntry/EditPayable")
  $BillEditSavePack = modGlobalSetting.ShowSettingFromDB("SavedBillingEntry/EditPackageSaved")

  $BillInvoiceWiseReturn = modGlobalSetting.ShowSettingFromDB("CashBilling/InvoiceWiseReturn")
  $BillTwoStepBilling = modGlobalSetting.ShowSettingFromDB("CashBilling/TwoStepBilling")
  $BillSeparateReturn = modGlobalSetting.ShowSettingFromDB("CashBilling/SeparateReturns")
  $BillReceiptCategory = modGlobalSetting.ShowSettingFromDB("CashBilling/FixReceiptCategory")
  $BillLockToOwnEntry = modGlobalSetting.ShowSettingFromDB("CashBilling/LockToOwnEntry")
  $BillLockAdmitted = modGlobalSetting.ShowSettingFromDB("CashBilling/LockAdmitted")
  $BillLockInvoiceToOwn = modGlobalSetting.ShowSettingFromDB("CashBilling/RestrictToOwnItems")
  $BillLockIPPrintInvoice = modGlobalSetting.ShowSettingFromDB("CashBilling/DisableIPCreditInvoice")
  $BillLockIPCreditReceipt = modGlobalSetting.ShowSettingFromDB("CashBilling/DisableIPCreditReceipt")
  $BillLockIPDepositReturn = modGlobalSetting.ShowSettingFromDB("CashBilling/DisableIPDepositReturn")
  $BillLockAdmitDeposit = modGlobalSetting.ShowSettingFromDB("CashBilling/AdmissionDeposit")
  $BillPharmacyOrigin = modGlobalSetting.ShowSettingFromDB("CashBilling/PharmacyOrigin")

  $BillServiceSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_Service")
  $BillEquipSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_Equipment")
  $BillRadioSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_Radio")
  $BillTestSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_Test")
  $BillProcSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_Procedure")
  $BillOtherSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_Others")
  $BillAllItemSection = modGlobalSetting.ShowSettingFromDB("CashBilling/Section_AllItems")

  $BillPharmSalesOption = modGlobalSetting.ShowSettingFromDB("BillingOption/PharmacySales")
  $BillPharmReturnOption = modGlobalSetting.ShowSettingFromDB("BillingOption/PharmacyReturn")
  $BillCashOption = modGlobalSetting.ShowSettingFromDB("BillingOption/CashierBilling")
  $BillReturnOption = modGlobalSetting.ShowSettingFromDB("BillingOption/CashierReturn")
  $BillDepositOption = modGlobalSetting.ShowSettingFromDB("BillingOption/DepositBilling")
  $BillDischargeOption = modGlobalSetting.ShowSettingFromDB("BillingOption/DischargeBilling")
  $BillDischargeAutoLock = modGlobalSetting.ShowSettingFromDB("BillingOption/DischargeAutoLock")

  $HandOverLockInvoice = modGlobalSetting.ShowSettingFromDB("CashHandover/LockInvoice")
  $HandOverLockSubmission = modGlobalSetting.ShowSettingFromDB("CashHandover/LockSubmission")
  $HandOverZeroSubmission = modGlobalSetting.ShowSettingFromDB("CashHandover/ZeroSubmission")
  $HandOverOtherCash = modGlobalSetting.ShowSettingFromDB("CashHandover/OtherCash")

  $FixDiagnosisDischarge = modGlobalSetting.ShowSettingFromDB("IPClinic/FixDiagnosisDischarge")

End

Public Sub LoadAutoBillingOptions()

  $AutoBillConsult = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Consultation")
  $AutoBillBed = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/BedCharge")
  $AutoBillService = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/GenServices")

  $AutoBillProcedure = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Procedure")
  $AutoBillEquipment = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Equipment")
  $AutoBillTest = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Test")
  $AutoBillRadio = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Radio")
  $AutoBillPharmacy = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Pharmacy")
  $AutoBillOthers = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Others")

  $AutoBillSaveZero = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/AutoSaveZero")
  $AutoBillSaveFullCredit = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/AutoSaveFullCredit")
  $AutoBedChargeMode = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/BedChargeMode")
  $AutoBillUseOwn = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/UseOwnBilling")
  $PayableLockEntry = modGlobalSetting.ShowSettingFromDB("FixPayableUser/LockEntry")
  $ReferralLockEntry = modGlobalSetting.ShowSettingFromDB("FixReferralUser/LockEntry")

  $LowDepoPharm = modGlobalSetting.ShowSettingFromDB("LowDeposit/Pharmacy")
  $LowDepoEquip = modGlobalSetting.ShowSettingFromDB("LowDeposit/Equipment")
  $LowDepoTest = modGlobalSetting.ShowSettingFromDB("LowDeposit/Test")
  $LowDepoProc = modGlobalSetting.ShowSettingFromDB("LowDeposit/Procedure")
  $LowDepoRadio = modGlobalSetting.ShowSettingFromDB("LowDeposit/Radio")
  $LowDepoOther = modGlobalSetting.ShowSettingFromDB("LowDeposit/Others")
  $LowDepoService = modGlobalSetting.ShowSettingFromDB("LowDeposit/Service")

  $DichargeOnClear = modGlobalSetting.ShowSettingFromDB("DischargePrint/OnClearance")

End

Public Sub SetAccountRules()

  $PayableCalculation = modGlobalSetting.ShowSettingFromDB("PayableCalculation/Formula")
  $PayableTDSMode = modGlobalSetting.ShowSettingFromDB("PayableCalculation/TDSMode")

  $PayableManualVerify = modGlobalSetting.ShowSettingFromDB("PayableVerification/Manual")
  $PayableSettingVerify = modGlobalSetting.ShowSettingFromDB("PayableVerification/Setting")
  $PayableGroupSource = modGlobalSetting.ShowSettingFromDB("PayableDataSource/Group")
  $PayableUserFormat = modGlobalSetting.ShowSettingFromDB("PayableUsers/Format")

  $ShareProcedureAccess = modGlobalSetting.ShowSettingFromDB("ShareEntryAccess/Procedure")
  $ShareRadiologyAccess = modGlobalSetting.ShowSettingFromDB("ShareEntryAccess/Radiology")

  $BillReportNullLedger = modGlobalSetting.ShowSettingFromDB("BillingReport/ShowNullLedger")

End

Public Sub LoadInvoicingSetting()

  $BillEditRate = modGlobalSetting.ShowSettingFromDB("CashBilling/EditRate")
  $BillEditRateSaved = modGlobalSetting.ShowSettingFromDB("CashBilling/EditRateSaved")
  $BillAmtRounding = modGlobalSetting.ShowSettingFromDB("CashBilling/AmountRounding")
  $BillInvoiceCopy = modGlobalSetting.ShowSettingFromDB("CashBilling/InvoiceExtraCopy")
  $BillTargetMedicine = modGlobalSetting.ShowSettingFromDB("CashBilling/TargetPharmacyStock")
  $BillTargetSurgical = modGlobalSetting.ShowSettingFromDB("CashBilling/TargetSurgicalStock")
  $BillTargetSutures = modGlobalSetting.ShowSettingFromDB("CashBilling/TargetSutureStock")
  $BillTargetOrthopedics = modGlobalSetting.ShowSettingFromDB("CashBilling/TargetOrthopedicStock")
  $BillTargetExtras = modGlobalSetting.ShowSettingFromDB("CashBilling/TargetExtraItemStock")
  $BillAlterPharmStock = modGlobalSetting.ShowSettingFromDB("CashBilling/AlterPharmacyStock")

  $BillPrintTime = modGlobalSetting.ShowSettingFromDB("CashBilling/BillPrintTime")

  $BillAfterPrintDisplay = modSettings.ShowSettingFromFIle("BillingSettings/AfterPrintAutoDisplay")
  $BillAfterPrintDisplay = modSettings.ShowSettingFromFIle("BillingSettings/AfterPrintAutoDisplay")
  $BillEditTaxDiscForm = modSettings.ShowSettingFromFIle("BillingSettings/EditTaxDiscount")
  $BillShowAutoPayable = modSettings.ShowSettingFromFIle("BillingSettings/AutoDisplayPayable")
  $BillWarnCredits = modSettings.ShowSettingFromFIle("BillingSettings/PastCreditsDisplay")
  $BillWithInvoicePrint = modSettings.ShowSettingFromFIle("Invoice/PostInvoicePrint")
  $BillSkipPrinting = modSettings.ShowSettingFromFIle("Invoice/SkipInvoicePrinting")
  $BillPharmSelection = modSettings.ShowSettingFromFIle("Invoice/PharmacySelection")

  $BillMedicineFormat = modSettings.ShowSettingFromFIle("Invoice/MedicineName")
  $BillExpiryFormat = modSettings.ShowSettingFromFIle("Invoice/ShowExpiry")
  $SalesHistoryAlert = modSettings.ShowSettingFromFIle("HistoryAlert/PatientCode")
  $QRPaymentScript = modSettings.ShowSettingFromFIle("Invoice/QRCodeScript")
  $QRPaymentShell = modSettings.ShowSettingFromFIle("Invoice/QRCodeShell")

End

Public Sub LoadBillingLists()

  Dim xlock As String
  Dim xgroup As String
  Dim xdeflt As String
  Dim xdefall As String

  xgroup = modGlobalSetting.ShowSettingFromDB("CashRegistration/DiscountGroup")
  If xgroup Then
    $BillDiscountRegd = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldpackage as col from tblpackgroup where fldpackgroup=&1", xgroup))                                                  ''
  Else
    $BillDiscountRegd = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldtype from tbldiscount where fldreserved IS &1", Null))
  Endif

  xdefall = modGlobalSetting.ShowSettingFromDB("CashBilling/DefaultFullPackage")
  If xdefall Then
    $BillDiscountAll = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldpackage as col from tblpackgroup where fldpackgroup=&1", xdefall))
  Else
    $BillDiscountAll = $BillDiscountRegd  'New String[]
  Endif

  xdeflt = modGlobalSetting.ShowSettingFromDB("CashBilling/DefaultPackage")
  If xdeflt Then
    $BillDiscountCash = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldpackage as col from tblpackgroup where fldpackgroup=&1", xdeflt))
  Else
    $BillDiscountCash = New String[]
  Endif
  $BillDiscAllType = modNonMedical.FillDiscountCombo()
  $BillBillingMode = modNonMedical.FillCashModeCombo()
  $ACLedgerListCash = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldacledger as col from tblacledger where fldbilltype=&1", "Cash"))
  $ACLedgerListCredit = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldacledger as col from tblacledger where fldbilltype=&1", "Credit"))
  $ACLedgerListAll = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldacledger) as col from tblacledger"))
  $CashPayVendors = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldvendor) as col from tblcashvendor"))

  xlock = modGlobalSetting.ShowSettingFromDB("RegistrationData/LockProfileHour")
  If xlock Then
    $RegistLockProfile = CInt(xlock)
  Endif

End

''collection for reference subscript
Private Sub GetReferenceCodeColl()

  Dim res As Result

  $ReferenceSubs = New Collection
  res = modDatabase.$myConn.Exec("select fldinvcode,fldinvsub from tblinvid")
  If res.Available Then
    For Each res
      $ReferenceSubs.Add(res["fldinvsub"], res["fldinvcode"] & ":" & CStr(Date()))
    Next
  Endif

End

''For Registration
Public Sub LoadRegistrationSetting()

  Dim xx As String

  $regF1Cashier = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RegistrationAccess_CashierForm")

  $RegistEssAddress = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/Address")
  $RegistEssDistrict = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/District")
  $RegistEssWardNo = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/WardNo")
  $RegistEssEthnic = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/Ethnicity")
  $RegistEssAge = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/Age")
  $RegistEssGuardian = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/Guardian")
  $RegistEssRelation = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/Relation")
  $RegistEssContact = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/Contact")
  $RegistEssEMail = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/EMail")
  $RegistEssCode = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/ExtCode")
  $RegistScanDoc = modGlobalSetting.ShowSettingFromDB("RegistrationEssential/ScannedDocs")

  $AdmitEssAddress = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/Address")
  $AdmitEssDistrict = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/District")
  $AdmitEssWardNo = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/WardNo")
  $AdmitEssEthnic = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/Ethnicity")
  $AdmitEssAge = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/Age")
  $AdmitEssGuardian = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/Guardian")
  $AdmitEssRelation = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/Relation")
  $AdmitEssContact = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/Contact")
  $AdmitEssEMail = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/EMail")
  $AdmitEssCode = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/ExtCode")
  $AdmitEssDiary = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/DiaryNo")
  $AdmitScanDoc = modGlobalSetting.ShowSettingFromDB("AdmissionEssential/ScannedDocs")

  $DiaryAutoInc = modGlobalSetting.ShowSettingFromDB("Admission/AutoDiaryNo")
  $DiaryUnique = modGlobalSetting.ShowSettingFromDB("Admission/UniqueDiaryNo")
  xx = modGlobalSetting.ShowSettingFromDB("Admission/DiaryCharacters")
  If xx Then
    $DiaryCharLen = CInt(xx)
  Endif

  $RegistNewbornLocat = modGlobalSetting.ShowSettingFromDB("RegistrationData/NewbornLocation")
  $RegistSlipInvoice = modGlobalSetting.ShowSettingFromDB("RegistrationData/SlipAfterInvoice")
  $RegistOneDaily = modGlobalSetting.ShowSettingFromDB("RegistrationCount/LockToOne")
  $RegistClearPast = modGlobalSetting.ShowSettingFromDB("RegistrationCount/ClearPastVisits")
  $RegistNewClaimEnc = modGlobalSetting.ShowSettingFromDB("RegistrationCount/NewClaimRegistration")
  $AutoClaimtoIPD = modGlobalSetting.ShowSettingFromDB("Admission/ContinueHIClaim")
  $AutoConsultation = modGlobalSetting.ShowSettingFromDB("AutoConsultation/Registration")
  $AutoConsultLock = modGlobalSetting.ShowSettingFromDB("AutoConsultation/Registration_Lock")
  $AutoRegistBilling = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/Registration")
  $AutoRegistNoBillHour = modGlobalSetting.ShowSettingFromDB("AutoIPBilling/NoBillHours")
  $RegistQuotaQueMode = modGlobalSetting.ShowSettingFromDB("ConsultationQuotaQue/Mode")
  $RegistOPQuotaQueMode = modGlobalSetting.ShowSettingFromDB("OPVisitQuotaQue/Mode")
  $AllowPatNoEntry = modGlobalSetting.ShowSettingFromDB("GeneralSettings/Registration_AllowPatNoInput")
  $BulkConsulInput = modGlobalSetting.ShowSettingFromDB("ConsultationList/BulkMode")

  ' $RegistScheduleMode = modGlobalSetting.ShowSettingFromDB("RegBillingGroup/ScheduleMode")
  $RegistDefaultMode = modGlobalSetting.ShowSettingFromDB("RegBillingGroup/DefaultMode")
  $RegistFixMode = modGlobalSetting.ShowSettingFromDB("RegBillingGroup/FixMode")

  $RegistDiscountType = modGlobalSetting.ShowSettingFromDB("CashRegistration/DiscountMode_Type")
  $RegistDefaultDisc = modGlobalSetting.ShowSettingFromDB("CashRegistration/Default_DiscountMode")
  $RegistDiscountFix = modGlobalSetting.ShowSettingFromDB("CashRegistration/FixDiscountMode")
  $RegistrationOnline = modSettings.ShowSettingFromFIle("CashRegistration/OnlinePayment")

  $UnLockAddress = modGlobalSetting.ShowSettingFromDB("RegistrationForm/AddressList_UnLock")
  $UnLockRelation = modGlobalSetting.ShowSettingFromDB("RegistrationForm/RelationList_UnLock")
  $UnLockDistrict = modGlobalSetting.ShowSettingFromDB("RegistrationForm/DistrictList_UnLock")

  $RegistDataRepo = modSettings.ShowSettingFromFIle("RegistrationData/UseRepository")
  $RegistStaffFormat = modSettings.ShowSettingFromFIle("RegistrationData/StaffFormat")

  $RegistGridFormat = modSettings.ShowSettingFromFIle("RegistrationForm/GridViewFormat")
  $RegistAutoWebcam = modSettings.ShowSettingFromFIle("RegistrationWebCam/AutoStart")
  $RegistAutoDemograph = modSettings.ShowSettingFromFIle("RegistrationForm/Auto_Demographics")
  $RegistEmbedDemograph = modSettings.ShowSettingFromFIle("RegistrationForm/Demographics_Embed")
  $RegistAutoBarcode = modSettings.ShowSettingFromFIle("RegistrationPrint/Barcode")
  $RegistAutoSticker = modSettings.ShowSettingFromFIle("RegistrationPrint/Sticker")
  $RegistAutoPrescription = modSettings.ShowSettingFromFIle("RegistrationForm/AutoPrint")
  $RegistAutoPhysicianSMS = modSettings.ShowSettingFromFIle("RegistrationSMS/Auto_Physician")
  $RegistAutoPatientSMS = modSettings.ShowSettingFromFIle("RegistrationSMS/Auto_Patient")
  $RegistEthnicityPopUp = modSettings.ShowSettingFromFIle("RegistrationPopUp/Ethnicity")
  $RegistSurnamePopUp = modSettings.ShowSettingFromFIle("RegistrationPopUp/Surname")
  $LockConsultant = modSettings.ShowSettingFromFIle("RegistrationForm/ConsultantList_Mode")

  If modSettings.ShowSettingFromFIle("AutoRegistrationDateTime/Increment_minute") Then
    $RegistConsultInterval = CInt(modSettings.ShowSettingFromFIle("AutoRegistrationDateTime/Increment_minute"))
  Else
    $RegistConsultInterval = 0
  Endif
  $RegistConsultStart = Val(modSettings.ShowSettingFromFIle("AutoRegistrationDateTime/StartTime"))
  $RegistLockToQuota = modSettings.ShowSettingFromFIle("CashRegistration/LimitRegistration")

  $RegGender = modSettings.ShowSettingFromFIle("RegistrationForm/DefaultGender")
  $RegDistrict = modSettings.ShowSettingFromFIle("RegistrationForm/DefaultDistrict")
  $RegRelation = modSettings.ShowSettingFromFIle("RegistrationForm/DefaultRelation")
  $RegDepart = modSettings.ShowSettingFromFIle("RegistrationForm/DefaultDepartment")
  $RegERDeparts = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flddept as col from tbldepartment where fldactive=&1", "Emergency"))
  $DemogAccList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select flddemoid as col from tblaccdemograp"))
  $RegConsultant = modSettings.ShowSettingFromFIle("RegistrationForm/DefaultConsultant")

  FillMunicipalList()
  FillSurnameList()
  FillRelationList()

End

Public Sub FillMunicipalList()

  Dim res As Result
  Dim xx As String[]
  Dim xlist As String[]
  Dim xdstLst As String[]

  xx = New String[]
  xlist = New String[]
  res = modDatabase.$myConn.Exec("select fldpality,flddistrict from tblmunicipals")
  If res.Available Then
    For Each res
      xx.Add(res["flddistrict"] & "@" & res["fldpality"])
      xlist.Add(res["flddistrict"])
    Next
    xdstLst = modString.BinaryDistinctStringArray(xlist, gb.Ascent)
    xdstLst.Sort()
  Endif
  $MunicipalList = xx
  $DistrictList = xdstLst

End

Public Sub FillSurnameList()

  Dim xsurnamelist As String

  xsurnamelist = modSettings.ShowSettingFromFIle("RegistrationForm/SurnameList")
  If xsurnamelist Then
    If Exist(xsurnamelist) Then
      $SurNameList = modString.GetStringArrayFromFile(xsurnamelist)
    Endif
  Else
    $SurNameList = modMedicine.GetSurNameListFromDB()
  Endif
  If $SurNameList Then
    $SurNameList.Sort()
  Endif

End

Public Sub FillRelationList()

  Dim xrelationlist As String

  xrelationlist = modSettings.ShowSettingFromFIle("RegistrationForm/RelationList")
  If xrelationlist Then
    If Exist(xrelationlist) Then
      $RelationList = modString.GetStringArrayFromFile(xrelationlist, True)
    Endif
  Else
    $RelationList = modMedicine.GetRelationListFromDB()
  Endif
  If $RelationList Then
    $RelationList.Sort()
  Endif

End

Public Sub RegistrationFormTime()

  Dim xsta As String
  Dim xend As String

  xsta = modGlobalSetting.ShowSettingFromDB("RegistrationData/StartTime")
  If xsta
    If Val(xsta) Then
      $RegStartTime = Val(xsta)
    Else
      $RegStartTime = ""
    Endif
  Else
    $RegStartTime = ""
  Endif

  xend = modGlobalSetting.ShowSettingFromDB("RegistrationData/EndTime")
  If xend Then
    If Val(xend) Then
      $ResEndTime = Val(xend)
    Else
      $ResEndTime = ""
    Endif
  Else
    $ResEndTime = ""
  Endif

End

Public Sub RemoteLogInSetting()

  Dim xvalid As String
  Dim xlen As String

  $RemoteUserType = modGlobalSetting.ShowSettingFromDB("RemoteLogIn/PatientSMS_UserType")
  If Not $RemoteUserType Then
    $RemoteUserType = modSettings.ShowSettingFromFIle("RemoteLogIn/PatientSMS_UserType")
  Endif

  xvalid = modGlobalSetting.ShowSettingFromDB("RemoteLogIn/PatientSMS_PassValidity")
  If Not xvalid Then
    xvalid = modSettings.ShowSettingFromFIle("RemoteLogIn/PatientSMS_PassValidity")
  Endif
  If xvalid Then
    If CInt(xvalid) Then
      $RemotePassValidity = CInt(xvalid)
    Else
      $RemotePassValidity = 365
    Endif
  Else
    $RemotePassValidity = 365
  Endif

  xlen = modGlobalSetting.ShowSettingFromDB("RemoteLogIn/PatientSMS_PassLength")
  If Not xlen Then
    xlen = modSettings.ShowSettingFromFIle("RemoteLogIn/PatientSMS_PassLength")
  Endif
  If xlen Then
    If CInt(xlen) Then
      $RemotePassLen = CInt(xlen)
    Else
      $RemotePassLen = 6
    Endif
  Else
    $RemotePassLen = 6
  Endif

  $RemotePassPrint = modGlobalSetting.ShowSettingFromDB("RemoteLogIn/PrintPass_Multidays")

End

''for patient data entry (except cashier)
Public Sub DisplayPatientSettings()

  $regF1Dispensing = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RegistrationAccess_DispensingForm")
  $regF1Sampling = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RegistrationAccess_SamplingForm")
  $regF1Clinic = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RegistrationAccess_ClinicForm")
  $WardAdmission = modGlobalSetting.ShowSettingFromDB("Admission/WardAdmission")
  $SymptomScale = modGlobalSetting.ShowSettingFromDB("IPClinic/SymptomCauseScale")

End

Public Sub SetClinicalProcedures()

  Dim xinter As String

  $TriageMode = modGlobalSetting.ShowSettingFromDB("IPClinic/TriageColorValue")
  xinter = modGlobalSetting.ShowSettingFromDB("IPClinic/VitalsInterval")
  If xinter Then
    $ClinVitalInterval = CInt(xinter)
  Endif
  $ClinDoseToTime = modGlobalSetting.ShowSettingFromDB("IPClinic/RestrictToDoseTime")
  modFixPatho.LoadTriageValues()

  $ClinOPDExamination = modGlobalSetting.ShowSettingFromDB("ClinicForms/OPDExaminations")
  $ClinIPDExamination = modGlobalSetting.ShowSettingFromDB("ClinicForms/IPDExaminations")

  $ClinConsultationList = modGlobalSetting.ShowSettingFromDB("ClinicForms/ConsultationList")
  $ClinOPVisitList = modGlobalSetting.ShowSettingFromDB("ClinicForms/OPVisitList")
  $ClinPatientForms = modGlobalSetting.ShowSettingFromDB("ClinicForms/PatientForms")

End

''for Clinical charts
Public Sub LoadClinicalChartSetting()

  Dim xshdata As String
  Dim xshpoint As String
  Dim xshlabel As String
  Dim xuprange As String
  Dim xlowrange As String
  Dim xnormrange As String
  Dim xhourgrid As String
  Dim xdaygrid As String
  Dim xlabelgrid As String
  Dim xhourdiff As String

  $ClinChartDataCurve = modSettings.ShowSettingFromFIle("ClinicalChart/DataCurve")
  $ClinChartShowPoint = modSettings.ShowSettingFromFIle("ClinicalChart/ShowPoints")
  $ClinChartShowLabel = modSettings.ShowSettingFromFIle("ClinicalChart/ShowLabels")
  $ClinChartShowUpper = modSettings.ShowSettingFromFIle("ClinicalChart/ShowUpperRange")
  $ClinChartShowLower = modSettings.ShowSettingFromFIle("ClinicalChart/ShowLowerRange")
  $ClinChartShowNormal = modSettings.ShowSettingFromFIle("ClinicalChart/ShowNormalRange")
  $ClinChartShowHourGrid = modSettings.ShowSettingFromFIle("ClinicalChart/ShowHourGrid")
  $ClinChartShowGridLabel = modSettings.ShowSettingFromFIle("ClinicalChart/ShowGridLabel")

  xshdata = modSettings.ShowSettingFromFIle("ClinicalChart/ShowData_Color")
  If xshdata Then
    $ClinColorData = CInt(xshdata)
  Endif

  xshpoint = modSettings.ShowSettingFromFIle("ClinicalChart/ShowPoints_Color")
  If xshpoint Then
    $ClinColorPoints = CInt(xshpoint)
  Endif

  xshlabel = modSettings.ShowSettingFromFIle("ClinicalChart/ShowLabels_Color")
  If xshlabel Then
    $ClinColorLabel = CInt(xshlabel)
  Endif

  xuprange = modSettings.ShowSettingFromFIle("ClinicalChart/ShowUpperRange_Color")
  If xuprange Then
    $ClinColorUpper = CInt(xuprange)
  Endif

  xlowrange = modSettings.ShowSettingFromFIle("ClinicalChart/ShowLowerRange_Color")
  If xlowrange Then
    $ClinColorLower = CInt(xlowrange)
  Endif

  xnormrange = modSettings.ShowSettingFromFIle("ClinicalChart/ShowNormalRange_Color")
  If xnormrange Then
    $ClinColorNormal = CInt(xnormrange)
  Endif

  xhourgrid = modSettings.ShowSettingFromFIle("ClinicalChart/ShowHourGrid_Color")
  If xhourgrid Then
    $ClinColorHourGrid = CInt(xhourgrid)
  Endif

  xdaygrid = modSettings.ShowSettingFromFIle("ClinicalChart/ShowDayGrid_Color")
  If xdaygrid Then
    $ClinColorDayGrid = CInt(xdaygrid)
  Endif

  xlabelgrid = modSettings.ShowSettingFromFIle("ClinicalChart/ShowGridLabel_Color")
  If xlabelgrid Then
    $ClinColorGridLabel = CInt(xlabelgrid)
  Endif

  ''hour diff
  xhourdiff = modSettings.ShowSettingFromFIle("ClinicalChart/HourDifference")
  If xhourdiff Then
    $ClinChartHourDiff = CInt(xhourdiff)
  Endif

End

''for medicine review and dose recommendation
Public Sub MedicineDoseSetting()

  $MedErrorEnable = modSettings.ShowSettingFromFIle("MedicineSetting/EnableDrugProblems")
  $MedDoseRecommend = modSettings.ShowSettingFromFIle("MedicineSetting/DisplayDoseRecommendation")
  $MedDiseaseDose = modSettings.ShowSettingFromFIle("MedicineSetting/DoseRecommendationByDisease")
  $MedNoRegimen = modSettings.ShowSettingFromFIle("MedicineSetting/DisableDoseRegimen")
  $MedLogRecommend = modSettings.ShowSettingFromFIle("MedicineSetting/LogDrugProblems")
  modMedError.MedicationReviewSettings()

End

''for inventory
Public Sub InventorySettings()

  Dim xmed As String
  Dim xsurg As String
  Dim xpurday As String

  $SerialPort = modSettings.ShowSettingFromFIle("SerialPort/Device")
  $SerialClear = modSettings.ShowSettingFromFIle("SerialPort/ClearString")
  $ShowStorage = modSettings.ShowSettingFromFIle("InventorySetting/ShowStorageLocation")
  $HideStorage = modSettings.ShowSettingFromFIle("InventorySetting/HideStorageLocation")

  $SkipExpiry = modSettings.ShowSettingFromFIle("InventorySetting/SkipExpiry")
  $SalesOutOrder = modSettings.ShowSettingFromFIle("InventorySetting/SalesOutOrder")
  $RetnOutOrder = modSettings.ShowSettingFromFIle("InventorySetting/ReturnOutOrder")
  $InvQuickReport = modSettings.ShowSettingFromFIle("InventorySetting/QuickInventory")
  $InvReportCost = modSettings.ShowSettingFromFIle("InventorySetting/InventoryAmount")

  xsurg = modSettings.ShowSettingFromFIle("Purchase/Profit_Surgicals")
  If xsurg Then
    $SurgProfit = CFloat(xsurg)
  Else
    $SurgProfit = 0
  Endif

  xmed = modSettings.ShowSettingFromFIle("Purchase/Profit_Medicines")
  If xmed Then
    $MedProfit = CFloat(xmed)
  Else
    $MedProfit = 0
  Endif

  $PurCompList = modSettings.ShowSettingFromFIle("Purchase/CompWiseList")
  $PurExtraParam = modSettings.ShowSettingFromFIle("Purchase/ExtraParameters")

  xpurday = modSettings.ShowSettingFromFIle("Purchase/ExpiryDays")
  If xpurday Then
    $PurExpiryDay = CFloat(xpurday)
  Else
    $PurExpiryDay = 0
  Endif

  ''db setting
  $BatchSuffix = modBillLock.GetSubScriptValue("Batch")

End

Public Sub InventoryChartSettings()

  $InvChShowTitle = modSettings.ShowSettingFromFIle("InventoryChart/ShowTitle")
  $InvChShowXLabel = modSettings.ShowSettingFromFIle("InventoryChart/ShowXLabel")
  $InvChShowYLabel = modSettings.ShowSettingFromFIle("InventoryChart/ShowYLabel")
  $InvChDataGrouping = modSettings.ShowSettingFromFIle("InventoryChart/DataGrouping")
  $InvChQTYGrouping = modSettings.ShowSettingFromFIle("InventoryChart/QTYGrouping")
  $InvChAMTGrouping = modSettings.ShowSettingFromFIle("InventoryChart/AMTGrouping")
  $ChartExecStat = modSettings.ShowSettingFromFIle("InventoryChart/Statistics")
  $ChartSummaryFormat = modSettings.ShowSettingFromFIle("InventoryChart/SummaryBy")
  ResizeInventoryChartSet()

End

Public Sub ResizeInventoryChartSet()

  If modSettings.ShowSettingFromFIle("InventoryChart/ChartLeft") Then
    $InvChartLeft = CInt(modSettings.ShowSettingFromFIle("InventoryChart/ChartLeft"))
  Endif
  If modSettings.ShowSettingFromFIle("InventoryChart/ChartTop") Then
    $InvChartTop = CInt(modSettings.ShowSettingFromFIle("InventoryChart/ChartTop"))
  Endif
  If modSettings.ShowSettingFromFIle("InventoryChart/ChartRight") Then
    $InvChartRight = CInt(modSettings.ShowSettingFromFIle("InventoryChart/ChartRight"))
  Endif
  If modSettings.ShowSettingFromFIle("InventoryChart/ChartBottom") Then
    $InvChartBottom = CInt(modSettings.ShowSettingFromFIle("InventoryChart/ChartBottom"))
  Endif

End

Public Sub StatisticalParameters()

  Dim xconf As String

  xconf = modSettings.ShowSettingFromFIle("StatisticsSetting/ConfidenceInterval")
  If xconf Then
    $StatConfInterval = CFloat(xconf)
  Else
    $StatConfInterval = 0.95
  Endif

End

''for clinics
Public Sub GlobalClinicSettings()

  Dim xbedhold As String

  $ClinicDisableCompo = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldaccess as col from tblclinicentry where flduserid=&1 and fldstatus=&2 and (fldcomp=&3 or fldcomp=&4)", modBasic.$lbluser, "Inactive", modBasic.$compID, "%"))                                            ''
  $FixedDepartment = modGlobalSetting.ShowSettingFromDB("IPClinic/FixedDepartment")
  $LockToOwnDepart = modGlobalSetting.ShowSettingFromDB("IPClinic/LockToOwnDepartment")
  $LockToOwnConsultant = modGlobalSetting.ShowSettingFromDB("IPClinic/LockToOwnConsultant")
  $LockToOwnProcedure = modGlobalSetting.ShowSettingFromDB("IPClinic/LockToOwnProcedures")
  $ClinMidBedRelease = modGlobalSetting.ShowSettingFromDB("IPClinic/MidBedRelease")
  $ClinDepartFormat = modGlobalSetting.ShowSettingFromDB("IPClinic/DepartmentType")
  xbedhold = modGlobalSetting.ShowSettingFromDB("IPClinic/BedHoldingDuration")
  If xbedhold Then
    $ClinBedHoldTime = CInt(xbedhold)
  Else
    $ClinBedHoldTime = 0
  Endif

  ' $FixDiagnosisDischarge = modGlobalSetting.ShowSettingFromDB("IPClinic/FixDiagnosisDischarge")
  $FixDiagnosisOPOutcome = modGlobalSetting.ShowSettingFromDB("IPClinic/FixDiagnosisOPDOutcome")
  $ClinicTelemed = modGlobalSetting.ShowSettingFromDB("IPClinic/TelemedicineRequest")
  $ClinVideoServer = modGlobalSetting.ShowSettingFromDB("IPClinic/TelemedicineServer")
  $ClinVideoPass = modGlobalSetting.ShowSettingFromDB("IPClinic/TelemedicinePassword")
  $ClinConsultTelemed = modGlobalSetting.ShowSettingFromDB("IPClinic/TelemedicineConsultant")

  $LockExamList = modGlobalSetting.ShowSettingFromDB("ClinicForms/ExamList_Lock")
  $LockSymptomList = modGlobalSetting.ShowSettingFromDB("ClinicForms/SymptomList_Lock")
  $LockDiagnosisList = modGlobalSetting.ShowSettingFromDB("ClinicForms/Diagnosis_Lock")
  $LockDelTypeInput = modGlobalSetting.ShowSettingFromDB("ClinicForms/DeliveryType_InputLock")
  $LockProcedCompInput = modGlobalSetting.ShowSettingFromDB("ClinicForms/ProcedureComp_InputLock")
  $LockAnesTechnInput = modGlobalSetting.ShowSettingFromDB("ClinicForms/AnesTechnique_InputLock")
  $ClinHistoryInput = modGlobalSetting.ShowSettingFromDB("ClinicForms/History_InputFormat")
  $ClinDietApprove = modGlobalSetting.ShowSettingFromDB("ClinicForms/User_DietApproval")
  $ClinICDGroupDiagno = modGlobalSetting.ShowSettingFromDB("ClinicForms/ICDGroup_Diagnosis")
  $ClinHistoryDischarge = modGlobalSetting.ShowSettingFromDB("ClinicForms/History_Discharge_Variables")

  $FixDiagnoGroupOPD = modGlobalSetting.ShowSettingFromDB("ClinicForms/DefaultOPDDiagnoGroup")
  $FixDiagnoGroupER = modGlobalSetting.ShowSettingFromDB("ClinicForms/DefaultERDiagnoGroup")

  $SelectMultiSymptoms = modSettings.ShowSettingFromFIle("ClinicForms/MultipleSymptoms")
  $DisplayExamOption = modSettings.ShowSettingFromFIle("ClinicForms/Display_Options")
  $DisplayQualiArea = modSettings.ShowSettingFromFIle("ClinicForms/DisplayTextArea")
  $DefaultTestList = modSettings.ShowSettingFromFIle("ClinicForms/Default_TestGroup")
  $DefaultRadioList = modSettings.ShowSettingFromFIle("ClinicForms/Default_RadioGroup")
  $ProvDiagnosisRule = modSettings.ShowSettingFromFIle("ClinicalList/ProvDiagnosis_Rule")
  $FinalDiagnosisRule = modSettings.ShowSettingFromFIle("ClinicalList/FinalDiagnosis_Rule")
  $ClinTestGrouping = modSettings.ShowSettingFromFIle("ClinicForms/TestGrouping")
  $ClinRadioGrouping = modSettings.ShowSettingFromFIle("ClinicForms/RadioGroupings")
  $ClinFlagAbnormExam = modSettings.ShowSettingFromFIle("ClinicForms/FlagAbnormalExam")
  $ClinSliderValue = modSettings.ShowSettingFromFIle("ClinicForms/EnableSliderValue")
  $ClinICDPunchFormat = modSettings.ShowSettingFromFIle("ClinicForms/ICDEntryFormat")
  $CliniDiagnosticReport = modSettings.ShowSettingFromFIle("ClinicForms/DiagnosticReports")
  $ClinCategoryGrid = modSettings.ShowSettingFromFIle("ClinicForms/CategoryGridView")
  $ClinPastDiagnosis = modSettings.ShowSettingFromFIle("ClinicForms/PastDiagnosis")

  $ClinInjSubRoutes = modSettings.ShowSettingFromFIle("ClinicForms/ShowInjectionSubRoutes")

End

Public Sub ClinicalCommentSett()

  $CommRefRange = modSettings.ShowSettingFromFIle("ClinicalComment/ReferenceRange")
  $CommSensSpec = modSettings.ShowSettingFromFIle("ClinicalComment/Sensitivity_Specificity")
  $CommMedEffect = modSettings.ShowSettingFromFIle("ClinicalComment/MedicineEffect")
  $CommCauseSyndro = modSettings.ShowSettingFromFIle("ClinicalComment/CausitiveSyndrome")
  $CommInterpret = modSettings.ShowSettingFromFIle("ClinicalComment/Interpretation")
  $CommFooterInfo = modSettings.ShowSettingFromFIle("ClinicalComment/TestFooterInfo")

End

''custom report source
Public Sub LoadCustomReportSource()

  $CustomConsult = modSettings.ShowSettingFromFIle("CustomVariable/Consultation")
  $CustomBirth = modSettings.ShowSettingFromFIle("CustomVariable/BirthDetail")
  $CustomHistory = modSettings.ShowSettingFromFIle("CustomVariable/SelectedHistory")
  $CustomSelExam = modSettings.ShowSettingFromFIle("CustomVariable/SelectedExam")
  $CustomProcedure = modSettings.ShowSettingFromFIle("CustomVariable/ProcedureDetail")

  $CustomImage = modSettings.ShowSettingFromFIle("CustomVariable/CustomImages")
  $CustomDataQR = modSettings.ShowSettingFromFIle("CustomVariable/CustomReportQR")
  $CustomUser = modSettings.ShowSettingFromFIle("CustomVariable/CustomUser")
  $CustomTest = modSettings.ShowSettingFromFIle("CustomVariable/CustomTest")
  $CustomExam = modSettings.ShowSettingFromFIle("CustomVariable/CustomExam")
  $CustomRadio = modSettings.ShowSettingFromFIle("CustomVariable/CustomRadio")
  $CustomDemog = modSettings.ShowSettingFromFIle("CustomVariable/CustomDemographics")
  $CustomParagraph = modSettings.ShowSettingFromFIle("CustomVariable/CustomParagraph")

  $CustomCalc = modSettings.ShowSettingFromFIle("CustomVariable/CustomCalculation")
  $CustomSQLQuery = modSettings.ShowSettingFromFIle("CustomVariable/CustomSQLQuery")
  $CustomScript = modSettings.ShowSettingFromFIle("CustomVariable/CustomScripts")
  $CustomExec = modSettings.ShowSettingFromFIle("CustomVariable/CustomExecs")

End

Public Sub ViewAccessControl()

  $ViewLockInvoice = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RestrictToOwnBilling")
  $ViewLockVoucher = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RestrictToOwnVoucher")
  $ViewLockInventory = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RestrictToOwnInventory")
  $ViewLockAssets = modGlobalSetting.ShowSettingFromDB("GeneralSettings/RestrictToOwnAssets")

End

Public Sub RestrictPrinting()

  $PrintLockPersonal = modGlobalSetting.ShowSettingFromDB("PrintRestriction/PersonalPage")
  $PrintLockBrowser = modGlobalSetting.ShowSettingFromDB("PrintRestriction/Browser")
  $PrintLockArchived = modGlobalSetting.ShowSettingFromDB("PrintRestriction/ArchivedReport")

End

Public Sub ReportLogSetting()

  $ReportLogPrint = modGlobalSetting.ShowSettingFromDB("ReportLog/Print")
  $ReportLogHTML = modGlobalSetting.ShowSettingFromDB("ReportLog/HTML")
  $ReportLogPDF = modGlobalSetting.ShowSettingFromDB("ReportLog/PDF")
  $ReportLogExport = modGlobalSetting.ShowSettingFromDB("ReportLog/Export")
  $ReportLogSend = modGlobalSetting.ShowSettingFromDB("ReportLog/Send")
  $ReportLogSave = modGlobalSetting.ShowSettingFromDB("ReportLog/Save")
  $ReportLogFTP = modGlobalSetting.ShowSettingFromDB("ReportLog/FTP")

End

Public Sub UploadDataSetting()

  $UploadMaxSize = modGlobalSetting.ShowSettingFromDB("GeneralSettings/MaxFileSize")
  $UploadEncryptPDF = modGlobalSetting.ShowSettingFromDB("GeneralSettings/PDFEncrypt")
  $UploadFTPFolder = modGlobalSetting.ShowSettingFromDB("GeneralSettings/AppendFTPFolder")

End

Public Sub LoadLabRadioList()

  $LabSpecimenList = modMedicine.GetLabSampleTypeList()
  $LabConditionList = modMedicine.GetTestConditionList()

End

Public Sub LabRadiologySeting()

  ''alerts
  $AlertRadioList = modSettings.ShowSettingFromFIle("Laboratory/RadioAlertList")
  $AlertTestList = modSettings.ShowSettingFromFIle("Laboratory/TestAlertList")

  ''sampling
  $LabAutoFooter = modSettings.ShowSettingFromFIle("FooterNote/AutoFillSource")
  $LabAutoSpecimen = modSettings.ShowSettingFromFIle("TestAddition/AutoSpecimen")
  $LabAutoSampleID = modSettings.ShowSettingFromFIle("TestAddition/AutoSampleID")
  $LabAutoSampleSuffix = modSettings.ShowSettingFromFIle("TestAddition/AutoSampleSuffix")

  $LabWorkSheet = modSettings.ShowSettingFromFIle("LabWorksheet/PrintMode")
  $LabAddHidden = modSettings.ShowSettingFromFIle("TestAddition/HiddenMode")
  $LabLockSpecimen = modSettings.ShowSettingFromFIle("TestAddition/LockSpecimen")
  $AutoEncounterF1 = modSettings.ShowSettingFromFIle("TestAddition/AutoEncounterF1")

  If modSettings.ShowSettingFromFIle("SampleBarcode/Count") Then
    $LabSamplePrint = CInt(modSettings.ShowSettingFromFIle("SampleBarcode/Count"))
  Endif
  $LabBarMultiPrint = modSettings.ShowSettingFromFIle("SampleBarcode/PDF_MultiPage")

  $LabBarCode = modSettings.ShowSettingFromFIle("SampleBarcode/DataContent")
  $LabBarPrint = modSettings.ShowSettingFromFIle("SampleBarcode/Separation")
  $LabExtraPrint = modSettings.ShowSettingFromFIle("SampleBarcode/ExtraPrint")
  $LabQueFormat = modSettings.ShowSettingFromFIle("SampleBarcode/QueFormat")
  $LabBarPath = modSettings.ShowSettingFromFIle("SampleBarcode/Templete")
  If Not $LabBarPath Then
    $LabBarPath = modHelpVariable.$htmlDirectory &/ "samplingbarcode.tpl"
  Endif

  modBasic.$LabBarFormat = modSettings.ShowSettingFromFIle("SampleBarcode/FormatString")
  modBasic.$LabBarDisplayText = modSettings.ShowSettingFromFIle("SampleBarcode/DisplayText")
  If modSettings.ShowSettingFromFIle("SampleBarcode/Width") Then
    modBasic.$LabBarWidth = CFloat(modSettings.ShowSettingFromFIle("SampleBarcode/Width"))
  Endif
  If modSettings.ShowSettingFromFIle("SampleBarcode/WhiteSpace") Then
    modBasic.$LabBarWhiteSpace = CInt(modSettings.ShowSettingFromFIle("SampleBarcode/WhiteSpace"))
  Endif

  $TestAddSource = modSettings.ShowSettingFromFIle("TestAddition/SourceFormat")
  $AutoSampleLoad = modSettings.ShowSettingFromFIle("TestAddition/AutoSampleLoad")

  ''target restriction
  $LabSamplingFrom = modSettings.ShowSettingFromFIle("Laboratory/SenderType_Sampling")
  $LabSamplingComp = modSettings.ShowSettingFromFIle("Laboratory/FixSender_Sampling")
  $LabReportingFrom = modSettings.ShowSettingFromFIle("Laboratory/SenderType_Reporting")
  $LabReportingComp = modSettings.ShowSettingFromFIle("Laboratory/FixSender_Reporting")

  $LabQuickMulti = modSettings.ShowSettingFromFIle("Laboratory/QuickMultiForm")
  $LabReportGroup = modSettings.ShowSettingFromFIle("Laboratory/ReportingInGroup")
  $LabAutoSampNo = modSettings.ShowSettingFromFIle("Laboratory/SampleNoAutoincrement")
  $LabSamplePrefix = modSettings.ShowSettingFromFIle("Laboratory/SampleNoPrefix")
  $RadioSamplePrefix = modSettings.ShowSettingFromFIle("Radiology/SamplePrefix")
  $LabArchComment = modSettings.ShowSettingFromFIle("Laboratory/ArchivingComment")

  $LabArchieveLog = modSettings.ShowSettingFromFIle("Laboratory/ArchiveLogReport")
  $LabTestOrdering = modSettings.ShowSettingFromFIle("Laboratory/Report_Order")
  $LabSMSReportLock = modSettings.ShowSettingFromFIle("Laboratory/LockSMSReport")
  $LabPrintWithEntry = modSettings.ShowSettingFromFIle("Laboratory/Print_EntryForm")
  $LabSensitivityReport = modSettings.ShowSettingFromFIle("Laboratory/SensitivityReport")
  $LabReportSections = modSettings.ShowSettingFromFIle("Laboratory/ReportSections")
  $LabExtraColumn = modSettings.ShowSettingFromFIle("Laboratory/ExtraColumn")
  $LabOutputLock = modSettings.ShowSettingFromFIle("Laboratory/OutputLock")

  $LabInterfaceCompDate = modSettings.ShowSettingFromFIle("Interface/ReportingDate")

End

Public Sub LoadLargeLists()

  ''nothing now

End

Public Sub LoadClinicalLists()

  $GenericMedName = modMedicine.GetGenericMedList()
  $ClinBodyFluidAll = modmedicine.GetBodyFluidList()
  $IPDDepartmentsAll = modGeneral.GetDepartmentWithBedList()
  $IPDServDepartments = modControlSub.GetDirectFillresultNoNull(modDatabase.$myConn.Exec("select flditem as col from tblipdservice"))

  $ClinDiagnoChapterGrouped = modControlSub.GetDirectFillresult(modDatabase.$icdConn.Exec("select distinct(fldicdchpter) as col from tblicddisease"))
  $ClinDiagnoSelectGrouped = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldgroupname) as col from tbldiagnogroup where fldformat=&1", "Diagnosis Groups"))
  $ClinDiagnoSelectERGroup = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldgroupname) as col from tbldiagnogroup where fldformat=&1", "Emergency Groups"))

  $DemogList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(flddemoid) as col from tbldemographic"))

  $sysExamList = modSysCons.GetSysconstList("Exam")
  $sysTestList = modSysCons.GetSysconstList("Test")
  $sysRadioList = modSysCons.GetSysconstList("Radio")
  $sysCustomList = modSysCons.GetSysconstList("Custom")
  $structExamList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldheadcode from tblstructexam"))
  $sysExamDualList = modSysCons.SysExaminationList()
  $sysTestDualList = modSysCons.SysLabTestList()

  $LabOrganismList = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select fldorganism as col from tblorganism"))
  $LabAntibioticList = modControlSub.GetDirectFillresult(modDatabase.$medConn.Exec("select flclass as col from tblsensidrugs"))

End

Public Sub LoadClinicalExtras()

  Dim xcompl As String[]
  Dim xfindg As String[]

  $ClinNursingComp = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldexamid) as col from tblcompexam where (fldcomp=&1 or fldcomp=&2) and fldcategory=&3", modBasic.$compID, "%", "Nursing Examinations"))
  $ClinEssentialComp = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldexamid) as col from tblcompexam where (fldcomp=&1 or fldcomp=&2) and fldcategory=&3", modBasic.$compID, "%", "Essential Examinations"))
  $ClinTriageComp = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldexamid) as col from tblcompexam where (fldcomp=&1 or fldcomp=&2) and fldcategory=&3", modBasic.$compID, "%", "Triage Examinations"))
  $ClinDischargeComp = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldexamid) as col from tblcompexam where (fldcomp=&1 or fldcomp=&2) and fldcategory=&3", modBasic.$compID, "%", "Discharge Examinations"))

  $ClinFindingComp = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldexamid) as col from tblcompexam where (fldcomp=&1 or fldcomp=&2) and fldcategory=&3", modBasic.$compID, "%", "Physician Examinations"))
  $ClinFindingCompGrouped = modFixClinic.GetExamWithCategory(modBasic.$ClinFindingComp)

  xfindg = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldexamid) as col from tblcompexam where (fldcomp=&1 or fldcomp=&2) and fldcategory=&3 and fldflag=&4", modBasic.$compID, "%", "Physician Examinations", True))
  If xfindg Then
    xfindg.Sort()
  Endif
  $ClinFindingCompFlag = modFixClinic.GetExamWithCategory(xfindg)

  $ClinComplaintComp = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldsymptom) as col from tblcomplaints where (fldcomp=&1 or fldcomp=&2)", modBasic.$compID, "%"))                           ''
  $ClinComplaintCompGrouped = modFixPatho.GetSymptomWithCategory(modBasic.$ClinComplaintComp)

  xcompl = modControlSub.GetDirectFillresult(modDatabase.$myConn.Exec("select distinct(fldsymptom) as col from tblcomplaints where (fldcomp=&1 or fldcomp=&2) and fldflag=&3", modBasic.$compID, "%", True))
  If xcompl Then
    xcompl.Sort()
  Endif
  $ClinComplaintCompFlag = modFixPatho.GetSymptomWithCategory(xcompl)

End

Public Sub DispLabelSettings()

  $DispLabelRegimen = modSettings.ShowSettingFromFIle("DispensingLabel/ShowRegimen")
  $DispLabelAutoEnable = modSettings.ShowSettingFromFIle("DispensingLabel/AutoEnable")

  $DispPrescibeSource = modSettings.ShowSettingFromFIle("Prescription/Source")
  $DispRequestStatus = modSettings.ShowSettingFromFIle("MedicineRequest/DefaultStatus")
  $MedRequestForm = modSettings.ShowSettingFromFIle("MedicineRequest/FormFormat")

End

Public Sub InventoryUserAccessList()

  $AccessStockTransfer = modGlobalSetting.ShowSettingFromDB("InventorySaveAccess/StockTransfer")
  $AccessStockConsume = modGlobalSetting.ShowSettingFromDB("InventorySaveAccess/StockConsume")
  $AccessPurchaseRequest = modGlobalSetting.ShowSettingFromDB("InventorySaveAccess/PurchaseRequest")
  $AccessPurchaseOrder = modGlobalSetting.ShowSettingFromDB("InventorySaveAccess/PurchaseOrder")
  $AccessStockReturn = modGlobalSetting.ShowSettingFromDB("InventorySaveAccess/StockReturn")
  $AccessPurchaseEntry = modGlobalSetting.ShowSettingFromDB("InventorySaveAccess/PurchaseEntry")

End

Public Sub ChartSettingsAll()

  modBasic.InventoryChartSettings()
  modBasic.StatisticalParameters()
  modCustPatient.LoadEncChartSetting()
  modCustPatient.LoadCrossChartSetting()
  modCustPatient.LoadRegressionSetting()
  modCustPatient.LoadTimeChartSetting()
  modCustPatient.LoadTabCrossSetting()
  modCustPatient.LoadSummationSetting()

End

Public Sub CloudAISettings()

  Dim xPath As String
  Dim yPath As String

  $CloudAIURL = modSettings.ShowSettingFromFIle("CloudAI/API_URL")
  $CloudAIModel = modSettings.ShowSettingFromFIle("CloudAI/Modality")
  $CloudAIKey = modSettings.ShowSettingFromFIle("CloudAI/API_Key")

  xPath = modSettings.ShowSettingFromFIle("CloudAI/Clinic_QueryList")
  If Exist(xPath) Then
    $CloudAIClinQuery = modString.GetStringArrayFromFile(xPath)
  Else
    $CloudAIClinQuery = New String[]
  Endif

  yPath = modSettings.ShowSettingFromFIle("CloudAI/Medicine_QueryList")
  If Exist(yPath) Then
    $CloudAIDrugQuery = modString.GetStringArrayFromFile(yPath)
  Else
    $CloudAIDrugQuery = New String[]
  Endif

End

' Gambas module file

Public $HistoryComment As Boolean

Public Function GetTotalCoponentFood(id As Long, sField As String) As Float

  Dim res As Result
  Dim totfld As Float

  res = modDatabase.$myConn.Exec("select flditem,fldreportquanti,fldreportquali from tblexamgeneral where fldid=&1", id)
  If res.Available Then
    If res["fldreportquanti"] Then
      totfld = modFixPatho.GetNutritionValue(res["fldreportquali"], res["flditem"], res["fldreportquanti"], sField)
    Else
      totfld = 0
    Endif
  Else
    totfld = 0
  Endif
  Return Round(totfld, -3)

End

Public Function GetALLReportFoodSelString(encid As String, sFood As String, sDate As Date) As String[]

  Dim sql As String
  Dim res As Result
  Dim xList As String[]

  xList = New String[]
  sql = "select fldreportquali,fldreportquanti,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3 and fldtime>=&4 and fldtime<=&5"
  res = modDatabase.$syConn.Exec(sql, encid, "Input Food/Fluid", sFood, modDate.StartSqlDate(sDate), modDate.EndSqlDate(sDate))
  If res.Available = True Then
    For Each res
      If res["fldreportquanti"] Then
        xList.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.MediumTime) & " ] " & " : " & CStr(res["fldreportquanti"]) & Space(1) & "GRAMS")
      Endif
    Next
  Endif
  Return xList

End

Public Function GetDietUsePatient(encid As String, sDate As Date) As String[]

  Dim res As Result
  Dim xxx As String[]

  xxx = New String[]
  res = modDatabase.$myConn.Exec("select flditem,flddose,fldfreq from tblextradosing where fldencounterval=&1 and flddosetime>=&2 and flddosetime<=&3 and fldtype=&4 and (fldstatus=&5 or fldstatus=&6)", encid, modDate.StartSqlDate(sDate), modDate.EndSqlDate(sDate), "Input Food/Fluid", "Continue", "Completed")
  If res.Available Then
    For Each res
      If res["flditem"] And If res["flddose"] Then
        If res["flddose"] = 1 Then
          xxx.Add(res["flditem"])
        Else
          xxx.Add(res["flditem"] & " x " & res["flddose"])
        Endif
      Endif
    Next
  Endif

  Return xxx

End

'''---------------------------------------History -----------------------------------------
Public Function ShowSelectedHistoryValue(encid As String, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddetail,fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3", encid, "History", sType)
  If res.Available Then
    res.MoveLast
    If res["flddetail"] Then
      xx = res["flddetail"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function ShowSelectedHistory(encid As String, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddetail,fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3", encid, "History", sType)
  If res.Available Then
    res.MoveLast
    If res["flddetail"] Then
      xx = res["flddetail"]
      If $HistoryComment = True Then
        If res["fldreportquali"] Then
          xx = xx & gb.NewLine & "[Doctor: " & res["fldreportquali"] & "]"
        Endif
      Endif
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function ShowSelNoteImpression(encid As String, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3 and fldreportquali like &4", encid, "Notes", sType, "%")
  If res.Available Then
    res.MoveLast
    If res["fldreportquali"] Then
      xx = res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function ShowSelectedNotes(encid As String, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddetail from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3 and flddetail like &4", encid, "Notes", sType, "%")
  If res.Available Then
    res.MoveLast
    If res["flddetail"] Then
      xx = res["flddetail"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function ShowSelectedNoteUser(encid As String, sType As String) As String[]

  Dim res As Result
  Dim xx As String[]

  xx = New String[]
  res = modDatabase.$myConn.Exec("select flddetail,flduserid,fldtime from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3 and flddetail like &4", encid, "Notes", sType, "%")
  If res.Available Then
    res.MoveLast
    xx.Add(res["flddetail"])
    If res["flduserid"] Then
      xx.Add(modGeneral.GetUserFullName(res["flduserid"]) & " [" & modReportVar.GetDateTimeReport(res["fldtime"], gb.MediumDate) & "]")
    Else
      xx.Add("")
    Endif
  Endif
  Return xx

End

Public Function ShowSelectedNotesWithSumm(encid As String, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldtime,fldreportquali,flddetail from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3", encid, "Notes", sType)
  If res.Available Then
    res.MoveLast
    If res["fldreportquali"] Or If res["flddetail"] Then
      xx = "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "]<br>" & res["flddetail"] & "<br> <b>" & "IMPRESSION: " & res["fldreportquali"] & "</b>"
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

''''------------------------------------------------ SYMPTOMS --------------------------------------------------------------
Private Function GetSymptomFromSymID(symid As Long) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flditem from tblexamgeneral where fldid=&1", symid)
  If res.Available Then
    If res["flditem"] Then
      xx = res["flditem"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Private Function GetEncIDFromSymID(symid As Long) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldencounterval from tblexamgeneral where fldid=&1", symid)
  If res.Available Then
    If res["fldencounterval"] Then
      xx = res["fldencounterval"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif
  Return xx

End

Public Function GetSymptomTypePatient(symid As Variant) As String

  Dim res As Result
  Dim xx As String

  If MMain.$WebEntry = True Then  ''remoteoptimized
    res = modDatabase.$myConn.Exec("select fldreportquali from tblexamgeneral where fldrepoid=&1", symid)
  Else
    res = modDatabase.$myConn.Exec("select fldreportquali from tblexamgeneral where fldid=&1", symid)
  Endif
  If res.Available Then
    If res["fldreportqual"] Then
      xx = res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetComplaintsPatient(symid As Variant) As String

  Dim res As Result
  Dim xx As String

  If MMain.$WebEntry = True Then  ''remoteoptimized
    res = modDatabase.$myConn.Exec("select fldreportquanti,fldreportquali from tblexamgeneral where fldrepoid=&1", symid)
  Else
    res = modDatabase.$myConn.Exec("select fldreportquanti,fldreportquali from tblexamgeneral where fldid=&1", symid)
  Endif
  If res.Available Then
    If res["fldreportquanti"] Then
      xx = CStr(res["fldreportquanti"]) & Space(1) & res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetComplainDayByID(symid As Long) As Float

  Dim res As Result
  Dim xx As Float

  res = modDatabase.$myConn.Exec("select fldreportquanti,fldreportquali from tblexamgeneral where fldid=&1", symid)
  If res.Available Then
    If res["fldreportquanti"] Then
      If res["fldreportquali"] = "Hours"
        xx = Round(res["fldreportquanti"] / 24, -2)
      Else If res["fldreportquali"] = "Days"
        xx = res["fldreportquanti"]
      Else If res["fldreportquali"] = "Weeks"
        xx = res["fldreportquanti"] * 7
      Else If res["fldreportquali"] = "Months"
        xx = res["fldreportquanti"] * 30
      Else If res["fldreportquali"] = "Years"
        xx = res["fldreportquanti"] * 365
      Endif
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif
  Return xx

End

'NOTE:TWO CON
Public Function GetPatientDrugSymptom(sympid As Long) As String

  Dim xxx As String
  Dim res As Result

  xxx = ""
  res = modDatabase.$myConn.Exec("select distinct(fldparent) from tblmedadveffect where fldchild=&1 and fldparent in(select fldcodename from tbldrug where flddrug in(select flddrug from tblmedbrand where fldbrandid in(select flditem from tblpatdosing where fldencounterval=&2)))", GetSymptomFromSymID(sympid), GetEncIDFromSymID(sympid))                                                       ''
  If res.Available = True Then
    xxx = "Drugs causing: " & modControlSub.GetDirectFillresult(res).Join(";")
  Endif

  Return xxx

End

'NOTE:TWO CON
Public Function GetPatientDiseaseSymptom(sympid As Long) As String

  Dim xxx As String
  Dim res As Result

  xxx = ""
  res = modDatabase.$myConn.Exec("select distinct(fldparent) from tblpathosymp where fldchild=&1 and fldparent in(select fldcode from tblpatfindings where fldencounterval=&2 and fldsave=&3)", GetSymptomFromSymID(sympid), GetEncIDFromSymID(sympid), True)                                                       ''
  If res.Available = True Then
    xxx = "Disease causing: " & modControlSub.GetDirectFillresult(res).Join(";")
  Endif

  Return xxx

End

''---------------------------------------------------equipment/service duration----------------------------------------------------------------------------
Public Function GetEquiDurationSetting(sType As String, sMode As String, dt1 As Date, dt2 As Date, xbol As Boolean) As Float

  Dim hr As Float
  Dim xequip As String
  Dim xservice As String

  If sType = "Equipment" Then
    xequip = modGlobalSetting.ShowSettingFromDB("EquipmentDurationRounding/Method")

    If sMode = "Minute" Then
      If modGlobalSetting.ShowSettingFromDB("EquipmentDurationRounding/Minute") = "Yes" Then
        If xequip = "Smart" Then
          If xbol = True Then
            hr = Ceil(DateDiff(dt1, dt2, gb.Second) / 60)
          Else If xbol = False Then
            hr = 0
          Endif
        Else
          hr = Ceil(DateDiff(dt1, dt2, gb.Second) / 60)
        Endif
      Else
        hr = Round(DateDiff(dt1, dt2, gb.Second) / 60, -2)
      Endif

    Else If sMode = "Hour" Then
      If modGlobalSetting.ShowSettingFromDB("EquipmentDurationRounding/Hour") = "Yes" Then
        If xequip = "Smart" Then
          If xbol = True Then
            hr = Ceil(DateDiff(dt1, dt2, gb.Minute) / 60)
          Else If xbol = False Then
            hr = 0
          Endif
        Else
          hr = Ceil(DateDiff(dt1, dt2, gb.Minute) / 60)
        Endif
      Else
        hr = Round(DateDiff(dt1, dt2, gb.Minute) / 60, -2)
      Endif

    Else
      If modGlobalSetting.ShowSettingFromDB("EquipmentDurationRounding/Day") = "Yes" Then
        If xequip = "Smart" Then
          If xbol = True Then
            hr = Ceil(DateDiff(dt1, dt2, gb.Hour) / 24)
          Else If xbol = False Then
            hr = 0
          Endif
        Else
          hr = Ceil(DateDiff(dt1, dt2, gb.Hour) / 24)
        Endif
      Else
        hr = Round(DateDiff(dt1, dt2, gb.Hour) / 24, -2)
      Endif
    Endif

  Else If sType = "General Services" Then
    If modBasic.$AutoBedChargeMode = "Daily" Then
      hr = DateDiff(modDate.EndSqlDate(dt1), dt2, gb.Day) + 1
    Else

      xservice = modGlobalSetting.ShowSettingFromDB("ServiceDurationRounding/Method")
      If sMode = "Minute" Then
        If modGlobalSetting.ShowSettingFromDB("ServiceDurationRounding/Minute") = "Yes" Then
          If xservice = "Smart" Then
            If xbol = True Then
              hr = Ceil(DateDiff(dt1, dt2, gb.Second) / 60)
            Else If xbol = False Then
              hr = 0
            Endif
          Else
            hr = Ceil(DateDiff(dt1, dt2, gb.Second) / 60)
          Endif
        Else
          hr = Round(DateDiff(dt1, dt2, gb.Second) / 60, -2)
        Endif
      Else If sMode = "Hour" Then
        If modGlobalSetting.ShowSettingFromDB("ServiceDurationRounding/Hour") = "Yes" Then
          If xservice = "Smart" Then
            If xbol = True Then
              hr = Ceil(DateDiff(dt1, dt2, gb.Minute) / 60)
            Else If xbol = False Then
              hr = 0
            Endif
          Else
            hr = Ceil(DateDiff(dt1, dt2, gb.Minute) / 60)
          Endif
        Else
          hr = Round(DateDiff(dt1, dt2, gb.Minute) / 60, -2)
        Endif
      Else
        If modGlobalSetting.ShowSettingFromDB("ServiceDurationRounding/Day") = "Yes" Then
          If xservice = "Smart" Then
            If xbol = True Then
              hr = Ceil(DateDiff(dt1, dt2, gb.Hour) / 24)
            Else If xbol = False Then
              hr = 0
            Endif
          Else
            hr = Ceil(DateDiff(dt1, dt2, gb.Hour) / 24)
          Endif
        Else
          hr = Round(DateDiff(dt1, dt2, gb.Hour) / 24, -2)
        Endif
      Endif
    Endif

  Endif   ''service or equipment

  Return hr
  'don't catch error. used for billing

End

Public Function GetServiceUseDuration(encid As String, sType As String, txtitem As String, sMode As String, dt1 As Date, dt2 As Date) As Float

  Dim hr As Float
  Dim sql As String
  Dim res As Result
  Dim xbol As Boolean

  If sMode = "Unit" Then
    hr = 1
  Else

    sql = "select fldfirsttime,fldsecondtime from tblpattiming where fldencounterval=&1 and fldtype=&2 and flditem=&3 and fldfirstsave=&4 and fldsecondsave=&5 and fldsecondtime>=&6 and fldsecondtime<=&7"
    If sMode = "Minute" Then
      res = modDatabase.$myConn.Exec(sql, encid, sType, txtitem, True, True, modDate.StartSqlMinute(dt2), modDate.EndSqlMinute(dt2))
    Else If sMode = "Hour" Then
      res = modDatabase.$myConn.Exec(sql, encid, sType, txtitem, True, True, modDate.StartSqlHour(dt2), modDate.EndSqlHour(dt2))
    Else
      res = modDatabase.$myConn.Exec(sql, encid, sType, txtitem, True, True, modDate.StartSqlDate(dt2), modDate.EndSqlDate(dt2))
    Endif
    If res.Available Then
      If res.Count = 1 Then
        xbol = True
      Else If res.Count > 1 Then
        xbol = False
      Endif
      hr = GetEquiDurationSetting(sType, sMode, dt1, dt2, xbol)
    Else
      hr = 0
    Endif

  Endif ''unit or time

  Return hr
  'don't catch error. used for billing

End

Public Function GetEquipServiceInterval(sdid As Variant) As String

  Dim res As Result
  Dim xdura As String
  Dim sMode As String
  Dim xhr As Float

  If MMain.$WebEntry = True Then  ''remoteoptimized
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtype,flditem,fldfirsttime,fldsecondtime,fldhospcode from tblpattiming where fldfirstsave=&1 and fldsecondsave=&2 and fldrepoid=&3", True, True, sdid)
    If res.Available Then
      xdura = CStr(DateDiff(res["fldfirsttime"], res["fldsecondtime"], gb.Hour)) & Space(1) & "Hours"
    Endif

  Else
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtype,flditem,fldfirsttime,fldsecondtime from tblpattiming where fldfirstsave=&1 and fldsecondsave=&2 and fldid=&3", True, True, sdid)
    If res.Available Then
      sMode = modNonMedical.GetBillingTargeDept(res["flditem"], res["fldtype"])
      If sMode Then
        If sMode = "Unit" Then
          xdura = "1 Unit"
        Else
          xhr = GetEquiDurationSetting(res["fldtype"], sMode, res["fldfirsttime"], res["fldsecondtime"], True)
          xdura = CStr(xhr) & Space(1) & sMode
        Endif
      Else
        xdura = CStr(DateDiff(res["fldfirsttime"], res["fldsecondtime"], gb.Hour)) & Space(1) & "Hours"
      Endif
    Endif

  Endif
  Return xdura

End

Public Function GetBedTransitionInterval(sdid As Variant) As String

  Dim res As Result
  Dim xdura As String
  Dim sMode As String
  Dim xhr As Float

  If MMain.$WebEntry = True Then  ''remoteoptimized
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtype,flditem,fldbillitem,flddisctype,fldfirsttime,fldsecondtime from tblpattiming where fldfirstsave=&1 and fldsecondsave=&2 and fldrepoid=&3", True, True, sdid)
    If res.Available Then
      xdura = CStr(DateDiff(res["fldfirsttime"], res["fldsecondtime"], gb.Hour)) & Space(1) & "Hours"
    Endif

  Else
    res = modDatabase.$myConn.Exec("select fldencounterval,fldtype,flditem,fldbillitem,flddisctype,fldfirsttime,fldsecondtime from tblpattiming where fldfirstsave=&1 and fldsecondsave=&2 and fldid=&3", True, True, sdid)
    If res.Available Then
      sMode = modNonMedical.GetBillingTargeDept(res["fldbillitem"], res["fldtype"])
      If sMode Then
        If sMode = "Unit" Then
          xdura = "1 Unit"
        Else
          xhr = GetEquiDurationSetting(res["fldtype"], sMode, res["fldfirsttime"], res["fldsecondtime"], True)
          xdura = CStr(xhr) & Space(1) & sMode
        Endif
      Else
        xdura = CStr(DateDiff(res["fldfirsttime"], res["fldsecondtime"], gb.Hour)) & Space(1) & "Hours"
      Endif
    Endif

  Endif
  Return xdura

End

Public Function GetPatientTransition(encid As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  xxx = New String[]
  res = modDatabase.$myConn.Exec("select fldid,flditem,fldfirsttime,fldsecondtime,fldsecondreport from tblpattiming where fldencounterval=&1 and fldtype=&2 and fldfirstreport=&3", encid, "General Services", "Bed")
  If res.Available Then
    For Each res
      If res["fldsecondreport"] Then
        xxx.Add(res["flditem"] & " [" & res["fldsecondreport"] & "] : " & modReportVar.GetDateTimeReport(res["fldfirsttime"], gb.GeneralDate) & " TO " & modReportVar.GetDateTimeReport(res["fldsecondtime"], gb.GeneralDate) & " :: " & Format(DateDiff(res["fldfirsttime"], res["fldsecondtime"], gb.Minute) / 1440, gb.Fixed) & " Day")
      Endif
    Next
  Endif
  Return xxx

End

Public Function GetPatientEquipmentUse(encid As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  xxx = New String[]
  res = modDatabase.$myConn.Exec("select flditem,fldfirsttime,fldsecondtime,fldsecondreport from tblpattiming where fldencounterval=&1 and fldtype=&2", encid, "Equipment")
  If res.Available Then
    For Each res
      xxx.Add(res["flditem"] & " : " & modReportVar.GetDateTimeReport(res["fldfirsttime"], gb.GeneralDate) & " TO " & modReportVar.GetDateTimeReport(res["fldsecondtime"], gb.GeneralDate))
    Next
  Endif
  Return xxx

End

Public Function GetPatientEventProfile(encid As String, sType As String) As String[]

  Dim xxx As String[]
  Dim res As Result

  xxx = New String[]
  res = modDatabase.$myConn.Exec("select flditem,fldfirsttime,fldsecondtime,flddetail from tblpatevents where fldencounterval=&1 and fldtype=&2", encid, sType)
  If res.Available Then
    For Each res
      If res["flddetail"] Then
        xxx.Add(res["flditem"] & " [" & res["flddetail"] & "]" & " : " & modReportVar.GetDateTimeReport(res["fldfirsttime"], gb.GeneralDate) & " TO " & modReportVar.GetDateTimeReport(res["fldsecondtime"], gb.GeneralDate))
      Else
        xxx.Add(res["flditem"] & " : " & modReportVar.GetDateTimeReport(res["fldfirsttime"], gb.GeneralDate) & " TO " & modReportVar.GetDateTimeReport(res["fldsecondtime"], gb.GeneralDate))
      Endif
    Next
  Endif
  Return xxx

End

Public Function GetEventDuration(sID As Long) As Float

  Dim res As Result
  Dim sVal As Float

  res = modDatabase.$myConn.Exec("select fldfirsttime,fldsecondtime from tblpatevents where fldid=&1", sID)
  If res.Available Then
    If res["fldfirsttime"] And If res["fldsecondtime"] Then
      sVal = DateDiff(res["fldfirsttime"], res["fldsecondtime"], gb.Hour)
    Else
      sVal = 0
    Endif
  Else
    sVal = 0
  Endif

  Return sVal

End

''----------------------------------------- PROCEDURE ---------------------------------------------------------
Public Function PatSelectProcedureString(encid As String, strType As String, sCondi As String) As String

  Dim res As Result
  Dim xx As String

  xx = ""
  res = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldnewdate,flditem,flddetail,fldorduserid from tblpatgeneral where fldencounterval=&1 and fldinput=&2 and fldreportquali=&3", encid, strType, sCondi)
  If res.Available = True Then
    For Each res
      If res["flditem"] And If res["flddetail"] Then
        If modBasic.$ShowDayMedReport = "User" Then
          xx = xx & "<p>" & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "SUMMARY : " & "<br>" & res["flddetail"] & "<br>" & "[User: " & res["fldorduserid"] & "]"
          xx = xx & "</p>"
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx = xx & "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "SUMMARY : " & "<br>" & res["flddetail"] & "<br>" & "[User: " & res["fldorduserid"] & "]"
          xx = xx & "</p>"
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx = xx & "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "SUMMARY : " & "<br>" & res["flddetail"]
          xx = xx & "</p>"
        Else
          xx = xx & "<p>" & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "SUMMARY : " & "<br>" & res["flddetail"]
          xx = xx & "</p>"
        Endif
      Else If res["flditem"] Then
        If modBasic.$ShowDayMedReport = "User" Then
          xx = xx & "<p>" & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "[User: " & res["fldorduserid"] & "]"
          xx = xx & "</p>"
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx = xx & "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "[User: " & res["fldorduserid"] & "]"
          xx = xx & "</p>"
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx = xx & "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "</p>"
        Else
          xx = xx & "<p>" & "<b>" & res["flditem"] & "<b>"
          xx = xx & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"]))
          xx = xx & "</p>"
        Endif
      Endif
    Next
  Endif

  Return xx

End

Public Function GetComponentProcedure(encid As String, itemid As Long) As String[]

  Dim res As Result
  Dim xx As String[]

  xx = New String[]
  res = modDatabase.$myConn.Exec("select fldreportquali,fldreport from tblpatsubgeneral where flditemid=&1 and fldchapter=&2 and fldencounterval=&3", itemid, "Components", encid)
  If res.Available Then
    For Each res
      If res["fldreport"] Then
        xx.Add("[" & Trim(res["fldreport"]) & "]" & Space(1) & res["fldreportquali"])
      Else
        xx.Add(res["fldreportquali"])
      Endif
    Next
  Endif

  Return xx

End

Public Function GetDiscusPanels(encid As String, itemid As Long) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$myConn.Exec("select fldreportquali from tblpatsubgeneral where flditemid=&1 and fldchapter=&2 and fldencounterval=&3", itemid, "Discussion Panel", encid)
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

Public Function GetProcedureItemValue(encid As String, itemid As Long, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreportquali from tblpatsubgeneral where flditemid=&1 and fldchapter=&2 and fldencounterval=&3", itemid, sType, encid)
  If res.Available Then
    res.MoveLast
    If res["fldreportquali"] Then
      xx = res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetUniProcedureDetail(encid As String, itemid As Long, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreport from tblpatsubgeneral where flditemid=&1 and fldchapter=&2 and fldencounterval=&3", itemid, sType, encid)
  If res.Available Then
    res.MoveLast
    If res["fldreport"] Then
      xx = res["fldreport"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetUserAllUniProcedure(encid As String, itemid As Long) As String

  Dim xx As String
  Dim res As Result
  Dim xFinal As Variant[]
  Dim sColl As Collection

  xFinal = New Variant[]
  res = modDatabase.$myConn.Exec("select fldusertype,fldvalue from tblpatgenshare where fldencounterval=&1 and fldcategory=&2 and flditemid in(select fldgroupid from tblpatgeneral where fldid=&3)", encid, "Procedures", itemid)
  If res.Available Then
    For Each res
      sColl = New Collection
      sColl.Add(res["fldusertype"], CStr(0))
      sColl.Add(modGeneral.GetUserFullName(res["fldvalue"]), CStr(1))
      xFinal.Add(sColl)
    Next
    xx = modString.GetRichTableNoHeadFromVariant(2, xFinal)
  Endif

  Return xx

End

''------------------------------- Particular values --------------------------------
Public Function GetDemographicValue(encid As String, sDemographic As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3", encid, "Demographics", sDemographic)
  If res.Available Then
    If res["fldreportquali"] Then
      xx = res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetQuantiObstetricValue(encid As String, sHead As String) As Float

  Dim res As Result
  Dim xx As Float

  res = modDatabase.$myConn.Exec("select fldreportquanti from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3 and fldtype=&4", encid, "Obstetrics", sHead, "Quantitative")
  If res.Available Then
    res.MoveLast
    If res["fldreportquanti"] Then
      xx = res["fldreportquanti"]
    Else
      xx = 0
    Endif
  Else
    xx = 0
  Endif
  Return xx

End

Public Function GetQualiiObstetricValue(encid As String, sHead As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select fldreportquali from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3 and fldtype=&4", encid, "Obstetrics", sHead, "Qualitative")
  If res.Available Then
    res.MoveLast
    If res["fldreportquali"] Then
      xx = res["fldreportquali"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

'''---------------------------------------------- Monitoring -------------------------------
Public Function GetMonitorList(encid As String, sCategory As String, sStatus As String, sType As String) As String[]

  Dim xx As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select flditem from tblmonitor where fldencounterval=&1 and fldcategory=&2 and fldstatus like &3 and fldtype like &4", encid, sCategory, sStatus, sType)
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

''---------------------- Extra Procedure ----------------------------
Public Function GetExtProcId(encid As String, xinput As String, xhead As String) As Long

  Dim res As Result
  Dim xval As Long

  res = modDatabase.$myConn.Exec("select fldid from tblpatientexam where fldencounterval=&1 and fldinput like &2 and fldsave=&3 and fldhead=&4", encid, xinput, True, xhead)
  If res.Available Then
    res.MoveLast
    xval = res["fldid"]
  Endif
  Return xval

End

Public Function GetExtProcedTable(xid As Long, encid As String, sProcName As String) As String

  Dim xval As String
  Dim xstr As String[]
  Dim res As Result

  res = modDatabase.$myConn.Exec("select distinct(fldhead) as col from tblpatientexam where fldencounterval=&1 and fldinput like &2 and fldsave=&3", encid, "%:" & sProcName & ":" & CStr(xid), True)
  If res.Available Then
    xval = modRepoTemplete.HTMLTableSyntax()

    xval = xval & "<tr>" & gb.NewLine
    xstr = New String[]
    xstr.Add("<td class='reportmid_table_h'>" & "Examination" & "</td>" & gb.NewLine)
    xstr.Add("<td class='reportmid_table_h'>" & "Pre-Procedure" & "</td>" & gb.NewLine)
    xstr.Add("<td class='reportmid_table_h'>" & "On-Procedure" & "</td>" & gb.NewLine)
    xstr.Add("<td class='reportmid_table_h'>" & "Post-Procedure" & "</td>" & gb.NewLine)
    xval = xval & xstr.Join(gb.NewLine)
    xval = xval & "</tr>" & gb.NewLine

    For Each res
      xval = xval & "<tr>" & gb.NewLine
      xstr = New String[]
      xstr.Add("<td>" & res["col"] & "</td>" & gb.NewLine)
      xstr.Add("<td>" & modClinic.GetExamValueSubString(modPatPatho.GetExtProcId(encid, "Pre:" & sProcName & ":" & CStr(xid), res["col"]), encid) & "</td>" & gb.NewLine)
      xstr.Add("<td>" & modClinic.GetExamValueSubString(modPatPatho.GetExtProcId(encid, "On:" & sProcName & ":" & CStr(xid), res["col"]), encid) & "</td>" & gb.NewLine)
      xstr.Add("<td>" & modClinic.GetExamValueSubString(modPatPatho.GetExtProcId(encid, "Post:" & sProcName & ":" & CStr(xid), res["col"]), encid) & "</td>" & gb.NewLine)
      xval = xval & xstr.Join(gb.NewLine)
      xval = xval & "</tr>" & gb.NewLine
    Next

    xval = xval & "</table>" & gb.NewLine
    xval = xval & "<br>"
  Endif
  Return xval

End

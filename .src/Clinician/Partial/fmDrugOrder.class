' Gambas class file

Private $encid As String
Private $status As String
Private $DiscPackage As String
Private $Dept As String = "IPD"
Private $doa As Date
Private $xFinClear As Boolean
Private $PatientNum As String
Private $xNHISCode As String

Private $PatAge As Float
Private $PatSex As String
Private $PatWeight As Float
Private $PatHeight As Float

Private $rDataM As Result
Private $aMyFieldsM As String[]
Private $LastEncid As String

Private $HideErr As Boolean
Private $HideDos As Boolean
Private $ShowReview As String
Private $AlphaList As String[]
Private $LedgerAC As String
Private $xBillType As String
Private $sBillMode As String
Private $LabelType As String
Private xYear As Integer

Private $ClinicianLst As String[]

Public Sub _new(encid As String, sStatus As String, DiscPackage As String)

  Dim mfglist As String
  Dim accLst As String[]
  Dim xbirthDate As Date

  $encid = encid
  $status = sStatus
  $DiscPackage = DiscPackage

  modGeneralMain.GetOpenModalForm(Me)

  accLst = modBasic.$BillDiscountCash
  If accLst.Count = 0 Then
    accLst.Add($DiscPackage)
  Endif
  cmbdisctype.List = accLst
  cmbdisctype.Text = $DiscPackage
  If modSettings.ShowSettingFromFIle("ClinicForms/ShowInjectionSubRoutes") = "Disable" Then
    cmbroute.List = modMedicine.AllComboRoute()
  Else
    cmbroute.List = modMedicine.InpatientRoute(False)
  Endif
  cmbfreq.List = modMedicine.FrequencyCombo()
  $ClinicianLst = modGeneral.GetClinicianCodeList()
  modStockSub.DisplayDefaultDispensingMode(rbrand, rbgeneric)
  modSettings.ShowCheckBox(chkout, "OutOfStock/Dispensing")

  mfglist = modSettings.ShowSettingFromFIle("PharmacyForm/AdviceList")
  If mfglist Then
    If Exist(mfglist) Then
      txtdirection.List = modString.GetStringArrayFromFile(mfglist)
    Endif
  Endif

  $PatSex = modPatient.GetPatientSex($encid)
  xbirthDate = modPatient.GetPatientBirthDay($encid)
  xYear = DateDiff(xbirthDate, Now(), gb.Year)
  $doa = modPatient.GetRecordDate($encid)
  $PatientNum = modPatient.GetPatientNoByEnc($encid)
  $xNHISCode = modPatient.GetPatientExtCOdebyEnc($encid)

  $PatAge = xYear
  $PatHeight = modClinic.GetPatientHeightinCm($encid)
  $PatWeight = modClinic.GetBodyWeight($encid)

  ShowBillingParam($DiscPackage)
  If $status = "Admitted" Then
    $LabelType = "Inpatient"
  Else
    $LabelType = "Outpatient"
  Endif

  If $status = "Registered" Then
    $LastEncid = modPatient.GetSecondLastEncidPatient($encid)
  Else
    $LastEncid = $encid
  Endif
  $xFinClear = modNonMedical.GetFinanceClearance($encid)

  $ShowReview = modBasic.$MedErrorEnable
  If modPharmacy.DisableEncounterForReview($encid) = True Then
    $ShowReview = "No"
  Endif

  $AlphaList = New String[]
  GetDoseFormatType()

  If $xFinClear = True Then
    btnsetregimen.Visible = False
    btngroup.Visible = False
    btnrepeat.Visible = False
    chksave.Visible = False
  Endif
  modSysCons.ClearPatParameterCalc()
  ShowBasicParamStatus()

  ''show tab value
  If modBasic.$AppSelect2JS = "Enable" Then
    cmbfreq.ReadOnly = True
    modJavaScript.SetSelect2Combo(cmbfreq)
  Endif
  BlankDosingBox()
  FillDosingGrid()

End

Private Sub ShowBasicParamStatus()

  Dim xmsg As String

  If $ShowReview = "No" Then
  Else

    xmsg = ""
    If Not $PatHeight Then
      $PatHeight = modSysCons.GetPatientEmptyHeight($PatAge, $PatSex)
      If $PatHeight Then
        xmsg = "Patient's height not set. Using " & $PatHeight & " cm for now" & "<br>"
        ' WebForm.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", xmsg, modBasic.$BalloonDelay))
      Endif
    Endif
    If Not $PatWeight Then
      If $PatHeight Then
        $PatWeight = modSysCons.GetPatientEmptyWeight($PatHeight, $PatSex)
        If $PatWeight Then
          xmsg = xmsg & "Patient's weight not set. Using " & $PatWeight & " Kg for now"
          ' WebForm.Exec(Subst("Toastify({text: '&1', duration: &2}).showToast()", xmsg, modBasic.$BalloonDelay))
        Endif
      Endif
    Endif

    If xmsg Then
      Message.Warning(xmsg, ("OK"))
    Endif

  Endif

End

Private Sub BlankDosingBox()

  cmbroute.Text = ""
  cmbmedicine.Text = ""
  txtdose.Value = 0
  If modBasic.$AppSelect2JS = "Enable" Then
    modJavaScript.TriggerSelect2Combo(cmbfreq)
  Endif
  cmbfreq.Text = ""
  txtday.Tag = ""
  txtday.Value = 0
  txtqty.Tag = ""
  txtqty.Value = 0
  txtdirection.Text = ""
  $HideErr = False
  $HideDos = False
  lbldose.Text = ""

End

Private Sub ShowBillingParam(sDisctype As String)

  Dim resx As Result

  resx = modDatabase.$myConn.Exec("select fldmode,fldbillingmode,fldacledger,fldbilltype,fldreference,fldlimit,fldlockstate from tbldiscount where fldtype=&1", sDisctype)
  If resx.Available Then
    ''billingmode
    If resx["fldbillingmode"] Then
      $sBillMode = resx["fldbillingmode"]
    Else
      $sBillMode = modPatient.GetPatBillingMode($encid)
    Endif
    ''ledger A/C
    $LedgerAC = resx["fldacledger"]
    ''BillType
    $xBillType = resx["fldbilltype"]
    If Not $xBillType Then
      $xBillType = "Cash"
    Endif
  Endif

End

''------------------------------ Request ---------------------------------
Public Sub chkout_Click()

  modSettings.EnterCheckSetting(chkout, "OutOfStock/Dispensing")

End

Public Sub rbgeneric_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Dispensing", "Generic")

End

Public Sub rbrand_Click()

  modSettings.SaveSettingsToFile("BrandOrGeneric/Dispensing", "Brand")

End

Private Function GetBrandGenerricType() As String

  Dim brandOrGeneric As String

  If rbrand.Value = True Then
    brandOrGeneric = "Brand"
  Else
    brandOrGeneric = "Generic"
  Endif
  Return brandOrGeneric

End

Public Sub cmbdisctype_Click()

  If cmbdisctype.Text Then
    ShowBillingParam(cmbdisctype.Text)
  Endif

End

Private Sub RegimenBoxSetting(sBool As Boolean)

  txtdose.Enabled = sBool
  cmbfreq.Enabled = sBool
  txtday.Enabled = sBool

End

Public Sub cmbroute_Click()

  cmbmedicine.Text = ""
  RegimenBoxSetting(True)
  If modBasic.$TabletModeEnable = "Yes" Then
  Else
    cmbmedicine.SetFocus
  Endif

End

Private Function GetPharmTarget(sRoute As String) As String

  Dim xtarg As String

  Select sRoute
    Case "msurg"
      xtarg = modBasic.$BillTargetSurgical
    Case "suture"
      xtarg = modBasic.$BillTargetSutures
    Case "ortho"
      xtarg = modBasic.$BillTargetOrthopedics
    Case "extra"
      xtarg = modBasic.$BillTargetExtras
    Case Else
      xtarg = modBasic.$BillTargetMedicine
  End Select

  Return xtarg

End

Private Function GetMedicineList() As String[]

  Dim res As Result
  Dim xlist As String[]

  If cmbroute.Text = "suture" Or If cmbroute.Text = "msurg" Or If cmbroute.Text = "ortho" Or If cmbroute.Text = "extra" Then
    If chkout.Value = True Then
      res = modStock.ItemListForPurchaseBillMode(cmbroute.Text, GetBrandGenerricType(), $sBillMode)
    Else
      If modBasic.$ClinLockPharmStock = "Enable" Then
        res = modStock.FillMedicinesDispensingComboResult(cmbroute.Text, GetBrandGenerricType(), GetPharmTarget(cmbroute.Text), $sBillMode)
      Else
        res = modStock.FillMedicinesPrescribingComboResult(cmbroute.Text, GetBrandGenerricType(), $sBillMode)
      Endif
    Endif
    xlist = modControlSub.GetDirectFillresult(res)
  Else
    If chkout.Value = True Then
      res = modStock.ItemListForPurchaseBillMode(cmbroute.Text, GetBrandGenerricType(), $sBillMode)
    Else
      If modBasic.$ClinLockPharmStock = "Enable" Then
        res = modStock.FillMedicinesDispensingComboResult(cmbroute.Text, GetBrandGenerricType(), GetPharmTarget(cmbroute.Text), $sBillMode)
      Else
        res = modStock.FillMedicinesPrescribingComboResult(cmbroute.Text, GetBrandGenerricType(), $sBillMode)
      Endif
    Endif
    xlist = modControlSub.GetDirectFillresult(res)
  Endif

  Return xlist

End

Public Sub cmbmedicine_Completion(Text As String)

  Dim xallLst As String[]
  Dim xList As String[]

  xallLst = GetMedicineList()
  If xallLst And If xallLst.Count Then
    xList = modString.SelectStringArrayToText(Text, xallLst, False)
    cmbmedicine.CompleteWith(xList)
  Endif

End

Public Sub btnmedlist_Click()

  Dim xlist As String[]
  Dim xlist1 As String[]

  $HideErr = False
  xlist = GetMedicineList()
  If xlist Then
    If cmbroute.Text = "suture" Or If cmbroute.Text = "msurg" Or If cmbroute.Text = "ortho" Or If cmbroute.Text = "extra" Then
      cmbmedicine.Text = GridViewNew("Select Particulars", xlist, False)
    Else
      If modBasic.$ClinCategoryGrid = "Yes" Then
        xlist1 = modMedConstant.GetStockIDWithCategory(xlist)
        If xlist1 Then
          cmbmedicine.Text = GridViewGroup("Select Medicine", xlist1, False)
        Endif
      Else
        cmbmedicine.Text = GridViewNew("Select Particulars", xlist, False)
      Endif
    Endif
  Endif
  CheckMedicineName()

End

Private Sub CheckMedicineName()
  ' ' Dim hForm As FmDiseaseDose

  If cmbmedicine.Text Then
    If cmbroute.Text = "suture" Or If cmbroute.Text = "msurg" Or If cmbroute.Text = "ortho" Or If cmbroute.Text = "extra" Then
      RegimenBoxSetting(False)
      txtqty.SetFocus
      Me.Exec("$_(" & JS(txtqty.Name & ":entry") & ").select()")
    Else
      If rbrand.Value = True Then
        cmbmedicine.Text = modMedConstant.ConvertBrandToGeneric(cmbroute.Text, cmbmedicine.Text)
      Endif
      RegimenBoxSetting(True)
      lbldose.Text = modMedConstant.GetDrugDosingUnit(cmbmedicine.Text)

      If modBasic.$MedDoseRecommend = "Yes" Then
        txtdose.Value = modMedDosing.RecommendedDoseDrug($encid, xYear, cmbmedicine.Text)
        cmbfreq.Text = modMedDosing.RecommendedFrequencyDrug(xYear, cmbmedicine.Text, True)
      Endif
      If $HideDos = False Then
        CheckLastDispensing(cmbmedicine.Text)
      Endif

      ' '   If modBasic.$MedDiseaseDose Then
      ' '     If modBasic.$MedDiseaseDose = "None" Then
      ' '     Else
      ' '       hForm = New FmDiseaseDose(modBasic.$MedDiseaseDose, $encid, cmbroute.Text, cmbmedicine.Text, txtdose, cmbfreq, txtday)
      ' '       hForm.ShowModal
      ' '     Endif
      ' '   Endif

      txtdose.SetFocus()
      Me.Exec("$_(" & JS(txtdose.Name & ":entry") & ").select()")
    Endif
  Endif

End

Private Sub CheckLastDispensing(xmedicine As String)

  Dim cForm As CLastDispensing
  Dim xdate As Date
  Dim xdays As Integer

  If modBasic.$SalesHistoryAlert Then
    cForm = New CLastDispensing(xmedicine, $PatientNum, $xNHISCode, cmbdisctype.Text)
    txttotalqty.Value = cForm.GetLastQty()
    xdate = cForm.GetLastDate()
    xdays = cForm.GetLastDays()

    If xdate Then
      txtlastdispdate.Text = modReportVar.GetDateTimeReport(xdate, gb.MediumDate)
      If DateDiff(xdate, Now(), gb.Month) <= 3 Then
        txtlastdispdate.Foreground = Color.Red
      Endif

      If xdays Then
        If DateAdd(xdate, gb.Day, xdays) > Now() Then
          $HideDos = True
          Message.Warning("Dispensed for " & xdays & " Days On " & modReportVar.GetDateTimeReport(xdate, gb.GeneralDate), ("OK"))
        Endif
      Else
        $HideDos = True
      Endif
    Endif

  Else
    $HideDos = True
  Endif

End

Public Sub cmbmedicine_Activate()

  If Not cmbroute.Text Then
    cmbroute.SetFocus
  Else If cmbroute.Text Then
    If Not cmbmedicine.Text Then
      btnmedlist_Click()
    Else
      CheckMedicineName()
    Endif
  Endif

End

Public Sub txtdose_Activate()

  If modBasic.$AppSelect2JS = "Enable" Then
    modJavaScript.PopUpSelect2Combo(cmbfreq)
  Endif
  cmbfreq.SetFocus

End

Public Sub cmbfreq_Click()

  txtday.SetFocus()
  If txtdose.Value Then
    Me.Exec("$_(" & JS(txtday.Name & ":entry") & ").select()")
  Endif

End

' Public Sub cmbfreq_Activate()
'
'   If cmbfreq.Text Then
'     txtday.SetFocus
'   Endif
'
' End

Public Sub txtday_Activate()

  Dim opt As String[]
  Dim xval As String
  Dim xcount As Integer

  If txtdose.Value And If cmbfreq.Text Then
    If txtday.Value Then
      xcount = 0
      If $HideErr = False Then
        If txtdose.Value And If cmbfreq.Text Then
          If $ShowReview = "No" Then
          Else
            opt = New String[]
            For Each $rDataM
              Select $rDataM["fldroute"]
                Case "suture", "msurg", "ortho", "extra", "topical"
                Case Else
                  xval = modMedConstant.GetDrugFromStockID($rDataM["flditem"])
                  If opt.Count = 0 Then
                    opt.Add(xval)
                  Else
                    If opt.Exist(xval) = False Then
                      opt.Add(xval)
                    Endif
                  Endif
              End Select
            Next

            Select cmbroute.Text
              Case "suture", "msurg", "ortho", "extra", "topical"
              Case Else
                $HideErr = True
                xcount = modMedError.ShowMedicationReviewPunching($encid, cmbroute.Text, cmbmedicine.Text, txtdose.Value, cmbfreq.Text, opt, "Message Box")
            End Select
          Endif
        Endif
      Endif

      txtqty.Value = Ceil(modMedConstant.GetQuantityDosing(cmbmedicine.Text, txtdose.Value, cmbfreq.Text, txtday.Value))
      txtqty.SetFocus()
      Me.Exec("$_(" & JS(txtqty.Name & ":entry") & ").select()")
    Endif
  Endif

End

Public Sub txtqty_Activate()

  txtdirection.SetFocus

End

Public Sub txtdirection_Activate()

  chksave_Click()

End

Public Sub chksave_Click()

  If chksave.Visible = True Then
    If cmbroute.Text And If cmbmedicine.Text And If txtqty.Value Then
      If modStockSub.GetComboStockControl(cmbroute.Text, cmbmedicine.Text, rbgeneric, rbrand, modDatabase.$medConn) = False Then
        cmbmedicine.Text = ""
        Message.Warning(("Item not listed"), "OK")
        cmbroute.SetFocus
      Else
        EnterDosingRecord()
        If modBasic.$TabletModeEnable = "Yes" Then
        Else
          If modBasic.$AppSelect2JS = "Enable" Then
            modJavaScript.TriggerSelect2Combo(cmbfreq)
          Endif
          cmbroute.SetFocus
        Endif
      Endif '
    Endif
  Endif

End

Private Sub EnterDosingRecord()

  Dim txprescriber As String
  Dim txpresno As String

  Dim xtax As Float
  Dim xdisc As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim xcurVal As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  If modBasic.$DispRequestStatus = "Reserve" Then
    xcurVal = "Reserve"
  Else
    xcurVal = "Continue"
  Endif
  If cmbroute.Text And If cmbmedicine.Text Then

    If cmbroute.Text = "suture" Or If cmbroute.Text = "msurg" Or If cmbroute.Text = "ortho" Or If cmbroute.Text = "extra" Then
      itemtype = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
      CPharmFix = New CFixRatePharmacy(itemtype, cmbmedicine.Text, $sBillMode)
      xfixrate = CPharmFix.GetFixRate()
      xfixname = CPharmFix.GetFixItem()
      ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, cmbmedicine.Text, $sBillMode)
      ' If xvarfix Then
      '   xfixrate = xvarfix[1]
      '   xfixname = xvarfix[0]
      ' Else
      '   xfixrate = 0
      '   xfixname = ""
      ' Endif
      itemmode = $sBillMode
      xtax = modNonMedical.ShowTaxValues(itemtype, cmbmedicine.Text)
      xdisc = modNonMedical.DiscPercentForCategoryValue($encid, cmbdisctype.Text, itemtype, cmbmedicine.Text, itemmode)
      modPharmSub.InsertNonMedDosingEntry(itemtype, $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, cmbroute.Text, cmbmedicine.Text, txtqty.Value, $status, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, Trim(txtdirection.Text), False, xcurVal)

    Else
      If modMedConstant.GetNarcoticType(cmbmedicine.Text) = "Yes" Then
        xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
        If xnarcotic Then
          txprescriber = xnarcotic[1]
          txpresno = xnarcotic[0]
        Endif
      Else
        txprescriber = ""
        txpresno = ""
      Endif
      itemtype = modNonMedical.GetBillItemCategoryFromCombo(cmbroute.Text)
      CPharmFix = New CFixRatePharmacy(itemtype, cmbmedicine.Text, $sBillMode)
      xfixrate = CPharmFix.GetFixRate()
      xfixname = CPharmFix.GetFixItem()
      ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, cmbmedicine.Text, $sBillMode)
      ' If xvarfix Then
      '   xfixrate = xvarfix[1]
      '   xfixname = xvarfix[0]
      ' Else
      '   xfixrate = 0
      '   xfixname = ""
      ' Endif
      itemmode = $sBillMode
      xtax = modNonMedical.ShowTaxValues(itemtype, cmbmedicine.Text)
      xdisc = modNonMedical.DiscPercentForCategoryValue($encid, cmbdisctype.Text, itemtype, cmbmedicine.Text, itemmode)
      modPharmSub.InsertDosingEntry($encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, cmbroute.Text, cmbmedicine.Text, txtdose.Value, cmbfreq.Text, txtday.Value, txtqty.Value, $status, txprescriber, txpresno, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, Trim(txtdirection.Text), False, xcurVal)                     '
    Endif

    FillDosingGrid()
    BlankDosingBox()
  Endif

End

Public Sub btngroup_Click()

  Dim rsx As Result
  Dim xgroup As String

  Dim res As Result
  Dim txprescriber As String
  Dim txpresno As String
  Dim xdose As Float
  Dim xtax As Float
  Dim xdisc As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  ' Dim xvarfix As Variant[]
  Dim itemmode As String
  Dim xcurVal As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  If modBasic.$DispRequestStatus = "Reserve" Then
    xcurVal = "Reserve"
  Else
    xcurVal = "Continue"
  Endif
  rsx = modDatabase.$myConn.Exec("select distinct(fldmedgroup) as col from tblproductgroup")
  xgroup = GridViewNew("Select Particulars", modControlSub.GetDirectFillresult(rsx), False)
  If xgroup Then

    res = modDatabase.$myConn.Exec("select fldroute,flditem,flddose,flddoseunit,fldfreq,fldday,fldqty,fldstart,fldadvice from tblproductgroup where fldmedgroup=&1", xgroup)
    If res.Available Then
      For Each res

        itemtype = modNonMedical.GetBillItemCategoryFromCombo(res["fldroute"])
        CPharmFix = New CFixRatePharmacy(itemtype, res["flditem"], $sBillMode)
        xfixrate = CPharmFix.GetFixRate()
        xfixname = CPharmFix.GetFixItem()
        If xfixname Then
          itemmode = $sBillMode
        Else
          itemmode = "%"
        Endif
        ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, res["flditem"], $sBillMode)
        ' If xvarfix Then
        '   xfixrate = xvarfix[1]
        '   xfixname = xvarfix[0]
        '   itemmode = $sBillMode
        ' Else
        '   xfixrate = 0
        '   xfixname = ""
        '   itemmode = "%"
        ' Endif
        xtax = modNonMedical.ShowTaxValues(itemtype, res["flditem"])
        xdisc = modNonMedical.DiscPercentForCategoryValue($encid, cmbdisctype.Text, itemtype, res["flditem"], itemmode)
        Select res["fldroute"]
          Case "suture", "msurg", "ortho"
            modPharmSub.InsertNonMedDosingEntry("Surgicals", $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["flditem"], res["fldqty"], $status, res["fldstart"], xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["fldadvice"], False, xcurVal)
          Case "extra"
            modPharmSub.InsertNonMedDosingEntry("Extra Items", $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["flditem"], res["fldqty"], $status, res["fldstart"], xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["fldadvice"], False, xcurVal)
          Case Else
            xdose = modMedDosing.GetDoseInMg(res["flddose"], res["flddoseunit"], $encid)
            If xdose Then
              If modMedConstant.GetNarcoticType(res["flditem"]) = "Yes" Then
                xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
                If xnarcotic Then
                  txprescriber = xnarcotic[1]
                  txpresno = xnarcotic[0]
                Endif
              Else
                txprescriber = ""
                txpresno = ""
              Endif
              modPharmSub.InsertDosingEntry($encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["flditem"], xdose, res["fldfreq"], res["fldday"], res["fldqty"], $status, txprescriber, txpresno, res["fldstart"], xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["fldadvice"], False, xcurVal)
            Endif
        End Select

      Next
    Endif

    BlankDosingBox()
    FillDosingGrid()
  Endif

End

Private Sub FillDosingGrid()

  Dim sql As String

  If rblabel.Value = True Then
    sql = "select fldid,fldstarttime,fldroute,flditem,fldid,fldfreq,flddays,fldqtydisp,flduserid_order,fldid,fldid,fldstarttime,fldcurval,flddirection from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstatus=&3 and fldorder=&4 and (fldcurval=&5 or fldcurval=&6)"
  Else
    sql = "select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,flduserid_order,fldid,fldid,fldstarttime,fldcurval,flddirection from tblpatdosing where fldencounterval=&1 and fldsave_order=&2 and fldstatus=&3 and fldorder=&4 and (fldcurval=&5 or fldcurval=&6)"                                                   ''
  Endif
  $rDataM = modDatabase.$myConn.Exec(sql, $encid, False, $status, "Request", "Continue", "Reserve")
  $aMyFieldsM = New String[]
  modGridView.ReadSmallData(GridView1, $rDataM, $aMyFieldsM)

  With GridView1
    .Columns[0].Hidden = True
    .Columns[1].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[2].Width = CStr(100 * modBasic.$AppWidthRatio) & "px"
    .Columns[3].Width = CStr(250 * modBasic.$AppWidthRatio) & "px"
    .Columns[4].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[5].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[6].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[7].Width = CStr(50 * modBasic.$AppWidthRatio) & "px"
    .Columns[8].Hidden = True
    .Columns[9].Hidden = True
    .Columns[10].Hidden = True
    .Columns[11].Hidden = True
    .Columns[12].Width = CStr(75 * modBasic.$AppWidthRatio) & "px"
    .Columns[13].Width = CStr(125 * modBasic.$AppWidthRatio) & "px"

    .Columns[1].Text = "Start"
    .Columns[2].Text = "Route"
    .Columns[3].Text = "Particulars"
    .Columns[4].Text = "Dose"
    .Columns[5].Text = "Freq"
    .Columns[6].Text = "Day"
    .Columns[7].Text = "QTY"
    .Columns[12].Text = "Status"
    .Columns[13].Text = "Direction"
  End With

End

Public Sub GridView1_Data(Row As Integer, Column As Integer, Data As WebTableData)

  $rDataM.MoveTo(Row)
  modGridView.GridViewDecoration(Data, Row)
  If Column = 1 Then
    Data.Text = modReportVar.GetDateTimeReport($rDataM[$aMyFieldsM[Column]], gb.GeneralDate)
  Else If Column = 4 Then
    If rblabel.Value = True Then
      Data.Text = modPharmacy.GetMedicineDoseInFormat($rDataM[$aMyFieldsM[Column]], "Label")
    Else
      Data.Text = $rDataM[$aMyFieldsM[Column]]
    Endif
  Else
    Data.Text = $rDataM[$aMyFieldsM[Column]]
  Endif

End

Public Sub btnsetregimen_Click()

  Dim itmList As Long[]
  Dim idx As Long

  Dim res As Result
  Dim txprescriber As String
  Dim txpresno As String

  Dim xtax As Float
  Dim xdisc As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  Dim itemmode As String
  Dim xcurVal As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  If modBasic.$DispRequestStatus = "Reserve" Then
    xcurVal = "Reserve"
  Else
    xcurVal = "Continue"
  Endif

  If modMisc.AllowDiagnoBilling($encid) = True Then
    itmList = GetSetRegimen("Personal")
    If itmList And If itmList.Count Then

      For Each idx In itmList
        res = modDatabase.$myConn.Exec("select fldroute,fldbrandid,flddose,fldfreq,fldday,fldqty,fldusage from tblmedregimen where fldid=&1", idx)
        If res.Available Then
          itemtype = modNonMedical.GetBillItemCategoryFromCombo(res["fldroute"])
          CPharmFix = New CFixRatePharmacy(itemtype, res["fldbrandid"], $sBillMode)
          xfixrate = CPharmFix.GetFixRate()
          xfixname = CPharmFix.GetFixItem()
          If xfixname Then
            itemmode = $sBillMode
          Else
            itemmode = "%"
          Endif
          ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, res["flditem"], $sBillMode)
          ' If xvarfix Then
          '   xfixrate = xvarfix[1]
          '   xfixname = xvarfix[0]
          '   itemmode = $sBillMode
          ' Else
          '   xfixrate = 0
          '   xfixname = ""
          '   itemmode = "%"
          ' Endif
          xtax = modNonMedical.ShowTaxValues(itemtype, res["fldbrandid"])
          xdisc = modNonMedical.DiscPercentForCategoryValue($encid, cmbdisctype.Text, itemtype, res["fldbrandid"], itemmode)
          Select res["fldroute"]
            Case "suture", "msurg", "ortho"
              modPharmSub.InsertNonMedDosingEntry("Surgicals", $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["fldbrandid"], res["fldqty"], $status, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["fldusage"], False, xcurVal)
            Case "extra"
              modPharmSub.InsertNonMedDosingEntry("Extra Items", $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["fldbrandid"], res["fldqty"], $status, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["fldusage"], False, xcurVal)
            Case Else
              If modMedConstant.GetNarcoticType(res["fldbrandid"]) = "Yes" Then
                xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
                If xnarcotic Then
                  txprescriber = xnarcotic[1]
                  txpresno = xnarcotic[0]
                Endif
              Else
                txprescriber = ""
                txpresno = ""
              Endif
              modPharmSub.InsertDosingEntry($encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["fldbrandid"], res["flddose"], res["fldfreq"], res["fldday"], res["fldqty"], $status, txprescriber, txpresno, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["fldusage"], False, xcurVal)
          End Select
        Endif
      Next

      BlankDosingBox()
      FillDosingGrid()
    Endif
  Else
    Message.Warning("Diagnosis not provided", ("OK"))
  Endif

End

Public Sub btnrepeat_Click()

  Dim itmList As Long[]
  Dim idx As Long

  Dim res As Result
  Dim txprescriber As String
  Dim txpresno As String

  Dim xtax As Float
  Dim xdisc As Float
  Dim itemtype As String
  Dim xfixrate As Float
  Dim xfixname As String
  Dim itemmode As String
  Dim xcurVal As String
  Dim xnarcotic As String[]
  Dim CPharmFix As CFixRatePharmacy

  If modBasic.$DispRequestStatus = "Reserve" Then
    xcurVal = "Reserve"
  Else
    xcurVal = "Continue"
  Endif

  If modMisc.AllowDiagnoBilling($encid) = True Then
    itmList = GetSetRegimen("Used Medicines", $encid)
    If itmList And If itmList.Count Then

      For Each idx In itmList
        res = modDatabase.$myConn.Exec("select fldroute,flditem,flddose,fldfreq,flddays,fldqtydisp,flddirection from tblpatdosing where fldid=&1", idx)
        If res.Available Then
          itemtype = modNonMedical.GetBillItemCategoryFromCombo(res["fldroute"])
          CPharmFix = New CFixRatePharmacy(itemtype, res["flditem"], $sBillMode)
          xfixrate = CPharmFix.GetFixRate()
          xfixname = CPharmFix.GetFixItem()
          If xfixname Then
            itemmode = $sBillMode
          Else
            itemmode = "%"
          Endif
          ' xvarfix = modStock.GetSellingPriceFixByStockID(itemtype, res["flditem"], $sBillMode)
          ' If xvarfix Then
          '   xfixrate = xvarfix[1]
          '   xfixname = xvarfix[0]
          '   itemmode = $sBillMode
          ' Else
          '   xfixrate = 0
          '   xfixname = ""
          '   itemmode = "%"
          ' Endif
          xtax = modNonMedical.ShowTaxValues(itemtype, res["flditem"])
          xdisc = modNonMedical.DiscPercentForCategoryValue($encid, cmbdisctype.Text, itemtype, res["flditem"], itemmode)
          Select res["fldroute"]
            Case "suture", "msurg", "ortho"
              modPharmSub.InsertNonMedDosingEntry("Surgicals", $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["flditem"], res["fldqtydisp"], $status, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["flddirection"], False, xcurVal)
            Case "extra"
              modPharmSub.InsertNonMedDosingEntry("Extra Items", $encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["flditem"], res["fldqtydisp"], $status, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["flddirection"], False, xcurVal)
            Case Else
              If modMedConstant.GetNarcoticType(res["flditem"]) = "Yes" Then
                xnarcotic = DualGridValue(("Select Narcotic Prescriber"), $ClinicianLst, False)
                If xnarcotic Then
                  txprescriber = xnarcotic[1]
                  txpresno = xnarcotic[0]
                Endif
              Else
                txprescriber = ""
                txpresno = ""
              Endif
              modPharmSub.InsertDosingEntry($encid, $xBillType, $sBillMode, cmbdisctype.Text, $LedgerAC, res["fldroute"], res["flditem"], res["flddose"], res["fldfreq"], res["flddays"], res["fldqtydisp"], $status, txprescriber, txpresno, 0, xtax, xdisc, xfixname, xfixrate, "Request", $Dept, res["flddirection"], False, xcurVal)
          End Select
        Endif
      Next

      BlankDosingBox()
      FillDosingGrid()
    Endif
  Else
    Message.Warning("Diagnosis not provided", ("OK"))
  Endif

End

Public Sub btnmeddate_Click()

  Dim xdate As Date

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If modGeneral.AllowClinicalEdit($rDataM["flduserid_order"]) = True Then
      xdate = GetDateValue($rDataM["flditem"], ("Alter Starting Date"), $rDataM["fldstarttime"])
      If xdate Then
        modPharmSub.UpdateStartBefDispensing($rDataM["fldid"], xdate)
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub txtmeddose_Click()

  Dim xval As Float

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If modGeneral.AllowClinicalEdit($rDataM["flduserid_order"]) = True Then
      xval = InputValue($rDataM["flditem"], ("Alter Unit Dose"), $rDataM["flddose"])
      If xval Then
        modPharmSub.UpdateDoseBefDispensing($rDataM["fldid"], xval)
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub btnmedfreq_Click()

  Dim yval As String

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If modGeneral.AllowClinicalEdit($rDataM["flduserid_order"]) = True Then
      yval = InputCombo($rDataM["flditem"], ("Alter Frequency"), modMedicine.FrequencyCombo(), $rDataM["fldfreq"], True)
      If yval Then
        modPharmSub.UpdateFreqBefDispensing($rDataM["fldid"], yval)
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub btnmeddays_Click()

  Dim xval As Float

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If modGeneral.AllowClinicalEdit($rDataM["flduserid_order"]) = True Then
      xval = InputValue($rDataM["flditem"], ("Alter Duration"), $rDataM["flddays"])
      If xval Then
        modPharmSub.UpdateDaysBefDispensing($rDataM["fldid"], xval)
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub btnmedqty_Click()

  Dim xval As Float

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    xval = InputValue($rDataM["flditem"], ("Alter Quantity"), $rDataM["fldqtydisp"])
    If xval Then
      modPharmSub.UpdateQTYBefDispensing($rDataM["fldid"], xval)
      FillDosingGrid()
    Endif
  Endif

End

Public Sub btnadvice_Click()

  Dim yval As String

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If modGeneral.AllowClinicalEdit($rDataM["flduserid_order"]) = True Then
      yval = InputBox($rDataM["flditem"], ("Alter Direction"), $rDataM["flddirection"])
      If yval Then
        modPharmSub.UpdateAdviceBefDispensing($rDataM["fldid"], yval)
        FillDosingGrid()
      Endif
    Endif
  Endif

End

Public Sub btnmeddelete_Click()

  Dim res As Result

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If Message.Question(("Are you sure?"), ("No"), ("Yes")) = 2 Then
      res = modDatabase.$myConn.Edit("tblpatdosing", "fldid=&1 and fldsave_order=&2", $rDataM["fldid"], False)
      If modGeneral.AllowClinicalEdit(res["flduserid_order"]) = True Then
        modDatabase.$myConn.Delete("tblpatdosing", "fldid=&1 and fldsave_order=&2", $rDataM["fldid"], False)
      Else
        res["fldcurval"] = "Cancelled"
        res["flduserid_order"] = modBasic.$lbluser
        res["xyz"] = False
        res.Update
      Endif
      FillDosingGrid()
    Endif
  Endif

End

Public Sub btnmedlabel_Click()

  Dim hClabel As CLabelSize

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    hClabel = New CLabelSize($rDataM["fldid"], $LabelType)
    ' modPrint.PrintPopUp(CStr($rDataM["fldid"], hClabel.LabelPath(), "LabelSize")
  Endif

End

Public Sub btnreview_Click()

  Dim opt As Long[]

  If GridView1.Count Then
    opt = New Long[]
    For Each $rDataM
      Select $rDataM["fldroute"]
        Case "suture", "msurg", "ortho", "extra", "topical"
        Case Else
          opt.Add($rDataM["fldid"])
      End Select
    Next
    modMedError.ShowMedicationReviewMultipleDosID($encid, opt, "Report")
  Endif

End

Public Sub btnaireview_Click()

  Dim opt As Long[]
  Dim xdata As String
  Dim xans As String

  If GridView1.Count Then
    opt = New Long[]
    For Each $rDataM
      Select $rDataM["fldroute"]
        Case "suture", "msurg", "ortho", "extra", "topical"
        Case Else
          opt.Add($rDataM["fldid"])
      End Select
    Next

    If opt.Count Then
      xdata = modPharmacy.ShowMedicationListDosID($encid, opt).Join(gb.NewLine)
      xans = modCloudAI.GetComboCloudAIResponse(xdata, modBasic.$CloudAIDrugQuery)
      If xans Then
        xans = MessageHtml("Cloud AI Response", modString.TextToHTML(xans), [("Useless"), ("Neutral"), ("Useful")])
      Endif
    Endif

  Endif

End

Public Sub btnshow_Click()

  Dim xPath As String

  xPath = modCHTMLPatient.ShowMedicationOrder($encid)
  modControlSub.OpenHTMLPreview($encid, xPath, "ReportSize")

End

' Public Sub GridView1_Menu()
'
'   mnuhide.Popup
'
' End

Public Sub mnutaper_Click()

  Dim hForm As Fmtaperdose

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    If $rDataM["fldfreq"] = "Tapering" Then
      hForm = New Fmtaperdose($rDataM["fldid"])
      hForm.ShowModal
    Endif
  Endif

End

Public Sub btndispown_Click()

  If GridView1.Selection.Count Then
    If Message.Question(("Dispense from LOCAL Stock. Are you sure ?"), ("No"), ("Yes")) = 2 Then
      $rDataM.MoveTo(GridView1.Selection[0])
      FillDosingGrid()
    Endif
  Endif

End

Public Sub mnusave_Click()

  If GridView1.Selection.Count Then
    If Message.Question(("Bring from OUTSIDE. Are you sure ?"), ("No"), ("Yes")) = 2 Then
      $rDataM.MoveTo(GridView1.Selection[0])
      modPharmSub.UpdateDispensing($rDataM["fldid"], True)
      FillDosingGrid()
    Endif
  Endif

End

Public Sub mnuonline_Click()

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    modPharmSub.DisableDispOnline($rDataM["fldid"])
    FillDosingGrid()
    Me.Exec("Toastify({text: 'Request updated', duration: 3000}).showToast()")
  Endif

End

Public Sub mnucontinue_Click()

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    modPharmSub.ContinueDispReq($rDataM["fldid"])
    FillDosingGrid()
    Me.Exec("Toastify({text: 'Request updated', duration: 3000}).showToast()")
  Endif

End

Public Sub mnureview_Click()

  Dim opt As String[]
  Dim xval As String

  opt = New String[]
  For Each $rDataM
    Select $rDataM["fldroute"]
      Case "suture", "msurg", "ortho", "extra", "topical"
      Case Else
        xval = modMedConstant.GetDrugFromStockID($rDataM["flditem"])
        If opt.Count = 0 Then
          opt.Add(xval)
        Else
          If opt.Exist(xval) = False Then
            opt.Add(xval)
          Endif
        Endif
    End Select
  Next

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    modMedError.ShowMedicationReviewSingleDosID($rDataM["fldid"], opt, "Report")
  Endif

End

Public Sub mnudisplabel_Click()

  Dim xPath As String

  If GridView1.Selection.Count Then
    $rDataM.MoveTo(GridView1.Selection[0])
    xPath = modCHTMLPatient.ShowSingleCounselingReport($rDataM["fldid"])
    modControlSub.OpenHTMLPreview("", xPath, "ReportSize")
  Endif

End

Private Sub GetDoseFormatType()

  Dim def As String

  def = modSettings.ShowSettingFromFIle("DoseFormat/Dispensing")
  If def Then
    If def = "Label" Then
      rblabel.Value = True
    Else
      rbvalue.Value = True
    Endif
  Else
    rbvalue.Value = True
  Endif

End

Public Sub rbvalue_Click()

  modSettings.SaveSettingsToFile("DoseFormat/Dispensing", "Value")
  FillDosingGrid()

End

Public Sub rblabel_Click()

  modSettings.SaveSettingsToFile("DoseFormat/Dispensing", "Label")
  FillDosingGrid()

End

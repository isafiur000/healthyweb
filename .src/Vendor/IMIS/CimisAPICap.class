' Gambas class file

Private $xAuthString As String
Private $HeadString As String

Private $PatCode As String
Private $VarPat As Variant[]

Private Sub SetAuthentication()

  If modBasic.$IMISQuote = "Yes" Then
    $xAuthString = "'" & modBasic.$IMISUser & ":" & modBasic.$IMISPass & "'"
  Else
    $xAuthString = modBasic.$IMISUser & ":" & modBasic.$IMISPass
  Endif
  $HeadString = "remote-user:" & modBasic.$IMISRemoUser

End

Public Sub _new(sPatcode As String)

  $PatCode = sPatcode
  GetIMISCappingDetails($PatCode)

End

Private Function GetIMISCappingDetails(sPatCode As String) As Variant[]

  Dim acmd As String
  Dim xurl As String
  Dim xpatout As String
  Dim xResColl As Collection

  Dim xhead As String

  SetAuthentication()
  xurl = modBasic.$IMISValidateURL & "?CHFID=" & sPatCode

  xhead = Space(1)
  If modBasic.$IMISCACert = "Disable" Then
    xhead = xhead & "-k" & Space(1)
  Endif
  If modBasic.$IMISAgent Then
    xhead = xhead & "-A " & modBasic.$IMISAgent & Space(1)
  Endif

  acmd = "curl" & xhead & "-u " & $xAuthString & " -H " & Quote($HeadString) & " -X GET " & xurl
  modBasic.DebugAPIString(Replace("Execute " & acmd, $xAuthString, "****"))
  Shell acmd To xpatout
  modBasic.DebugAPIString("Response: " & xpatout)

  If xpatout Then
    Try xResColl = JSON.Decode(xpatout)
    If xResColl Then
      $VarPat = xResColl["entries"]
      Return $VarPat
    Else
      Message.Warning("Error in getting data", "OK")
    Endif
  Else
    Message.Warning("No Response from server", "OK")
  Endif

End

Public Function GetCapValidationItems() As Variant[]

  Return $VarPat

End

Public Function GetMedicineLimits() As Collection

  Dim xcoll As Collection
  Dim medColl As Collection

  medColl = New Collection
  If $VarPat And If $VarPat.Count Then
    For Each xcoll In $VarPat
      Try medColl.Add(xcoll["QtyRemain"], xcoll["Code"])
    Next
  Endif

  Return medColl

End

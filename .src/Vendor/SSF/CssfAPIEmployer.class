' Gambas class file

Private $xAuthString As String
Private $HeadString As String

Private $PatUUID As String
Private $EmployerVar As Variant[]
Private $EmployerID As String

Private Sub SetAuthentication()

  If modBasic.$SSFQuote = "Yes" Then
    $xAuthString = "'" & modBasic.$SSFUser & ":" & modBasic.$SSFPass & "'"
  Else
    $xAuthString = modBasic.$SSFUser & ":" & modBasic.$SSFPass
  Endif
  $HeadString = "remote-user:" & modBasic.$SSFRemoUser

End

Public Sub _new(sUUID As String)

  $PatUUID = sUUID
  GetEmloyerDetailSSF($PatUUID)

End

Private Sub GetEmloyerDetailSSF(sPatUUID As String)

  Dim acmd As String
  Dim xurl As String
  Dim xpatout As String
  Dim xResColl As Collection
  Dim xVarPat As Variant[]
  Dim xhead As String

  SetAuthentication()
  xurl = modBasic.$SSFEmployerURL &/ sPatUUID

  xhead = Space(1)
  If modBasic.$SSFCACert = "Disable" Then
    xhead = xhead & "-k" & Space(1)
  Endif
  If modBasic.$SSFUserAgent Then
    xhead = xhead & "-A " & modBasic.$SSFUserAgent & Space(1)
  Endif

  acmd = "curl" & xhead & "-L -u " & $xAuthString & " -H " & Quote($HeadString) & " -X GET " & xurl
  modBasic.DebugAPIString(Replace("Execute " & acmd, $xAuthString, "****"))
  Shell acmd To xpatout
  modBasic.DebugAPIString("Response: " & xpatout)

  If xpatout Then
    Try xResColl = JSON.Decode(xpatout)
    If xResColl Then
      xVarPat = xResColl["company"]
      If xVarPat Then
        Try $EmployerID = xVarPat[0][0]["E_SSID"]
        Try $EmployerVar = xVarPat[0] ''["E_SSID"]
      Else
        Message.Warning("Error in Decoding patient", "OK")
      Endif
    Else
      Message.Warning("Error in getting data", "OK")
    Endif
  Else
    Message.Warning("No Response from server", "OK")
  Endif

End

Public Function GetEmployerList() As Variant[]

  Return $EmployerVar

End

Public Function GetEmployerID() As String

  Return $EmployerID

End

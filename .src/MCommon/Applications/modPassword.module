' Gambas module file

Public $HostLoginPassword As String

'NOTE: ----------------------------------- Simple Encryption/Decryption ------------------------------------
Public Function EncryptSimple(txtinput As String) As String

  Dim dw As String
  Dim i As Integer
  Dim a As String
  Dim xx As String

  dw = ""
  For i = 1 To Len(txtinput)
    a = Mid(txtinput, i, 1)
    xx = Asc(a)
    If Len(xx) = 1 Then
      xx = "00" & xx
    Else If Len(xx) = 2 Then
      xx = "0" & xx
    Endif
    dw = dw & xx
  Next

  Return dw

End

Public Function DecryptSimple(txtoutput As String) As String

  Dim Iw As String
  Dim i As Integer
  Dim a As String
  Dim xx As String

  xx = txtoutput
  Iw = ""
  For i = 0 To (Len(xx) / 3) - 1
    a = CInt(Mid(xx, ((i * 3) + 1), 3))
    Iw = Iw & Chr(a)
  Next

  Return Iw

End

'NOTE: ------------------------------ SSL Encryption/Decryption -----------------------
Public Function EncryptSSL(txtinput As String, CryptValue As String) As String

  ' Dim sCipher As String
  Dim xval As String

  ' sCipher = Cipher["aes256"].EncryptSalted(txtinput, CryptValue, modHelpVariable.$SaltValue)
  ' xval = Base64(sCipher)

  If System.Exist("openssl") Then
    Shell "echo " & txtinput & " | openssl enc -base64 -e -aes-256-cbc -nosalt -pass pass:" & CryptValue To xval
  Else
    modApplSub.InstallSelectedApplication(["openssl"])
  Endif

  Return Trim(xval)

End

Public Function DecryptSSL(txtoutput As String, CryptValue As String) As String

  ' Dim sCipher As String
  Dim xval As String

  ' sCipher = UnBase64(txtoutput)
  ' xval = Cipher["aes256"].DecryptSalted(sCipher, CryptValue)

  If System.Exist("openssl") Then
    Shell "echo " & Quote(txtoutput) & " | openssl enc -base64 -d -aes-256-cbc -nosalt -pass pass:" & CryptValue To xval
    If Not Trim(xval) Then
      ''to resolve encryption with older version of openssl
      Shell "echo " & Quote(txtoutput) & " | openssl enc -base64 -md md5 -d -aes-256-cbc -nosalt -pass pass:" & CryptValue To xval
    Endif
  Else
    modApplSub.InstallSelectedApplication(["openssl"])
  Endif

  Return Trim(xval)

End

''--------------------------- Patient Profile Encryption --------------------------------
Public Function EncryptPatSimple(txtinput As String) As String

  Dim xx As String

  If txtinput Then
    If MMain.$RepoReportMode = True Then
      xx = EncryptSSL(txtinput, modHelpVariable.$CryptRepo)
    Else
      xx = EncryptSSL(txtinput, modHelpVariable.$CryptValue)
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function EncryptPatData(sText As String) As String

  Dim xx As String

  If modBasic.$PatInfoEncrypt = True Then
    xx = EncryptPatSimple(sText)
  Else
    xx = sText
  Endif
  Return xx

End

Private Function DecryptPatSimple(txtoutput As String) As String

  Dim xx As String

  If txtoutput Then
    If MMain.$RepoReportMode = True Then
      xx = DecryptSSL(txtoutput, modHelpVariable.$CryptRepo)
    Else
      xx = DecryptSSL(txtoutput, modHelpVariable.$CryptValue)
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function DecryptPatData(sText As String, sEncrypt As Boolean) As String

  Dim xx As String

  If sEncrypt = True Then
    xx = DecryptPatSimple(sText)
  Else
    xx = sText
  Endif
  Return xx

End

''-------------------------------- Data Repository ------------------
Public Function EncryptPatRepo(txtinput As String) As Variant

  Dim xx As Variant

  If txtinput Then
    xx = EncryptSSL(txtinput, modHelpVariable.$CryptRepo)
  Else
    xx = Null
  Endif
  Return xx

End

Public Function EncryptPatEncryptedRepo(txtinput As String) As Variant

  Dim xx As Variant

  If txtinput Then
    If modHelpVariable.$CryptRepo = modHelpVariable.$CryptValue Then
      xx = txtinput
    Else
      xx = modPassword.EncryptPatRepo(modPassword.DecryptPatSimple(txtinput))
    Endif
  Else
    xx = Null
  Endif
  Return xx

End

''------------------------------ DB Password Encryption/Decryption ----------------------------
Public Function EncryptDBPass(txtinput As String, UseSSL As Boolean) As String

  Dim xval As String

  If txtinput Then
    If UseSSL = True Then
      xval = EncryptSSL(txtinput, modHelpVariable.$CryptDBVal)
    Else
      xval = EncryptSimple(txtinput)
    Endif
  Else
    xval = ""
  Endif
  Return xval

End

Public Function DecryptDBPass(txtoutput As String, UseSSL As Boolean) As String

  Dim xval As String

  If UseSSL = True Then
    xval = DecryptSSL(txtoutput, modHelpVariable.$CryptDBVal)
  Else
    xval = DecryptSimple(txtoutput)
  Endif
  Return xval

End

'NOTE:--------------------------- LogIn Parameter -------------------

Public Function LogInActiveDuration(sDate1 As Date, sDate2 As Date) As Boolean

  Dim xx As Boolean

  If sDate1 And If sDate2 Then
    If sDate1 <= Date() And If sDate2 >= Date() Then
      xx = True
    Else
      xx = False
    Endif
  Else
    xx = False
  Endif
  Return xx

End

Public Function AloowMacAddressCheck(xmacaddress As String) As Boolean

  Dim xbool As Boolean
  Dim rs As Result

  Select MMain.$SISHAppMode
    Case "REP", "HMIS", "Dashboard", "TeleMed", "Insurance", "Registry"
      xbool = True

    Case Else
      If xmacaddress Then
        ' rs = modDatabase.$myConn.Exec("select fldaccess from tblmacaccess where lower(fldhostmac)=&1 and fldhostname=&2 and fldcomp=&3", LCase(xmacaddress), System.Host, modBasic.$compID)                                                     ''
        rs = modDatabase.$myConn.Exec("select fldaccess from tblmacaccess where lower(fldhostmac)=&1 and fldhostname=&2", LCase(xmacaddress), System.Host)
        If rs.Available = False Then
          xbool = False
          Message.Warning(("Wrong computer parameters"), ("OK"))
        Else
          If rs["fldaccess"] = "Inactive" Then
            xbool = False
            Message.Warning(("Computer connection to server disabled"), ("OK"))
          Else If rs["fldaccess"] = "Active" Then
            xbool = True
          Endif
        Endif
      Else
        xbool = True
      Endif

  End Select

  Return xbool

End

Public Function GetKeyPresence() As Boolean

  Dim res As Result
  Dim xx As Boolean

  res = modDatabase.$myConn.Exec(Subst("select key1,key2 from &1", "tblnewkey"))
  If res.Available Then
    xx = True
  Else
    xx = False
  Endif
  Return xx

End

'NOTE: ------------------------------------ App Key --------------------------
Public Function ValidateKey() As Integer

  Dim newkey As Integer

  If MMain.$GovtApp = "Yes" Then
    newkey = 0
  Else
    newkey = modSecure.ValidateKeyLatest()
  Endif
  Return newkey

End

''================== Web Password =================
Public Function GetPatientWebPassword(sUser As String, xSameDay As Boolean) As String

  Dim res As Result
  Dim xx As String

  If xSameDay = True Then
    If modBasic.$RemotePassPrint = "Enable" Then
      res = modDatabase.$myConn.Exec("select fldpass from tblpatientpass where fldpatientval=&1 and fldpatientval in(select fldpatientval from tblencounter where Date(fldregdate)=&2)", sUser, Date())
    Else
      res = modDatabase.$myConn.Exec("select fldpass from tblpatientpass where fldpatientval=&1 and Date(fldfromdate)=&2", sUser, Date())
    Endif
  Else
    res = modDatabase.$myConn.Exec("select fldpass from tblpatientpass where fldpatientval=&1", sUser)
  Endif
  If res.Available Then
    If res["fldpass"] Then
      xx = modPassword.DecryptSimple(res["fldpass"])
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function LogInActivePatientDuration(usr As String) As Boolean

  Dim sql As String
  Dim res As Result
  Dim xx As Boolean

  sql = "select fldfromdate,fldtodate from tblpatientpass where fldpatientval=&1"
  res = modDatabase.$myConn.Exec(sql, usr)
  If res.Available = True Then
    If res["fldfromdate"] <= Date() And If res["fldtodate"] >= Date() Then
      xx = True
    Else
      xx = False
    Endif
  Else
    xx = False
  Endif
  Return xx

End

''================= Random Password ===============
Public Function GetRandomPassword() As String

  Dim xx As String

  If System.Exist("openssl") Then
    Exec ["openssl", "rand", "-hex", "16"] To xx
  Else
    modApplSub.InstallSelectedApplication(["openssl"])
  Endif
  Return Trim(xx)

End

''================= Super Verification ===================
Public Function GetSuperVerification(sUser As String, sPass As String) As Boolean

  Dim res As Result
  Dim xbool As Boolean

  xbool = False
  res = modDatabase.$myConn.Exec("select fldroot from tbluser where flduserid=&1", sUser)
  If res.Available Then
    If res["fldroot"] Then
      If Trim(sPass) Then

        If res["fldroot"] = Base64(Trim(sPass)) Then
          xbool = True
        Endif

      Endif
    Endif
  Endif

  Return xbool

End

''================== Two factor authentication =============
Public Function GetLoginAuthentication(sUser As String, sComp As String) As Boolean

  Dim sMode As String
  Dim xgo As Boolean

  sMode = modGlobalSetting.ShowSettingFromDBAny("TwoFactorAuthentication/DeskAccess", sComp)
  If sMode Then
    If sMode = "None" Then
      xgo = True
    Else
      xgo = GetTwoFactorAuthPassword(sUser, sComp, sMode)
    Endif
  Else
    xgo = True
  Endif

  Return xgo

End

Public Function GetRootAuthentication(sUser As String, sComp As String) As Boolean

  Dim sMode As String
  Dim xgo As Boolean

  sMode = modGlobalSetting.ShowSettingFromDBAny("TwoFactorAuthentication/RootAccess", sComp)
  If sMode Then
    If sMode = "None" Then
      xgo = True
    Else
      xgo = GetTwoFactorAuthPassword(sUser, sComp, sMode)
    Endif
  Else
    xgo = True
  Endif

  Return xgo

End

Private Function GetTwoFactorAuthPassword(sUser As String, sComp As String, sMode As String) As Boolean

  Dim xval As String
  Dim xhash As String
  Dim xcontact As String
  Dim xblank As String[]
  Dim xgo As Boolean

  xhash = modApplication.GetMD5SumString(modString.GetDateString(Now()) & "_" & sUser & "_" & sComp)
  If xhash Then
    If sMode = "SMS" Then
      xcontact = modGeneral.GetUserContact(sUser)
      If xcontact Then
        xval = InsertFactorAuth(xhash)
        If xval Then
          modAppSupport.SendSMSSingle(xcontact, "Your OTP is " & xval)
          Wait
          xgo = CCompareText(xval, "Check Email and Write OPT")
        Endif
      Else
        xgo = True
      Endif

    Else If sMode = "Email" Then
      xcontact = modGeneral.GetUserEMail(sUser)
      If xcontact Then
        xval = InsertFactorAuth(xhash)
        If xval Then
          xblank = New String[]
          modBasic.LoadSMTPEmailSetting()
          modDevAll.SendSMTPEmail([xcontact], xblank, xblank, "Authentication Code", "Your OTP is " & xval, "")
          Wait
          xgo = CCompareText(xval, "Check Message and Write OTP")
        Endif
      Else
        xgo = True
      Endif

    Endif
  Endif

  Return xval

End

Private Function InsertFactorAuth(sHash As String) As String

  Dim res As Result
  Dim sCode As String

  sCode = UCase(Left(modPassword.GetRandomPassword(), 6))
  res = modDatabase.$myConn.Create("tblauthenticate")
  res["fldhash"] = sHash
  res["fldcode"] = sCode
  res.Update

  Return sCode

End

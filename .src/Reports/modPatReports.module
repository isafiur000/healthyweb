' Gambas module file

Private $FootComment As String

Public Function GetLockClinicSQL() As String

  Dim compLst As String[]
  Dim xvarsql As String
  Dim i As Integer

  Select modHelpVariable.$LogInCategory
    Case "Clinician"
      If modBasic.$ViewLockClinic = "User" Then
        xvarsql = db.Subst(" and flduserid like &1", modBasic.$lbluser)
        $FootComment = modBasic.$lbluser
      Else If modBasic.$ViewLockClinic = "Branch" Then
        compLst = modBasic.$branchList.Copy()
        For i = 0 To compLst.Count - 1
          compLst[i] = "'" & compLst[i] & "'"
        Next
        xvarsql = " and fldcomp in(" & compLst.Join(",") & ")"
        $FootComment = modBasic.$branch
      Else If modBasic.$ViewLockClinic = "Location" Then
        xvarsql = db.Subst(" and fldcomp like &1", modBasic.$compID)
        $FootComment = modBasic.$compID
      Else
        xvarsql = ""
        $FootComment = ""
      Endif
    Case Else
      xvarsql = ""
      $FootComment = ""
  End Select

  Return xvarsql

End

'NOTE: ----------------------------- Medical Report --------------------------------------------
Public Function AddCustomReport(stChapter As String, stObservation As String) As String[]

  Dim asx As New String[0]

  With asx
    If modBasic.$MedRepoBody = "Paragraph" Then
      .Add("<b>" & stChapter & "</b><br>" & modString.TextToHTML(stObservation))
    Else
      .Add(stChapter)
      .Add(modString.TextToHTML(stObservation))
    Endif
  End With
  Return asx

End

Public Function AddCustomParam(sParam As String) As String[]

  Dim asx As New String[0]
  Dim xx As String

  Dim stChapter As String
  Dim stObservation As String

  xx = GetRichTextArea(sParam, "")
  stChapter = sParam
  stObservation = xx
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddCourseOfTreatment(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Course of Treatment"
  Endif
  stObservation = modString.GetHTMLListFormat(GetCourseOfTreatment(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddChiefComplaints(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Chief Complaints"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatientPresentingSymptomReport(encid)) & modString.TextToHTML(GetPatientHistoryReport(encid, "General Complaints"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddPresentingComplaints(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Presenting Complaints"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatientPresentingSymptomReport(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddGenComplaints(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "General Complaints"
  Endif
  stObservation = modString.TextToHTML(GetPatientHistoryReport(encid, "General Complaints"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

''----------------------- Exam Types -------------
Public Function AddClinFindingsAll(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]
  Dim xlist As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Clinical Findings"
  Endif
  xlist = PaientSelExamNameArray(encid, "Non-Vital")
  If xlist Then
    stObservation = GetExaminationHTMLProfile(encid, xlist)
    asx = AddCustomReport(stChapter, stObservation)
  Endif
  Return asx

End

Public Function AddPhysicianFindings(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]
  Dim xlist As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Physician Examinations"
  Endif
  xlist = PaientSelExamNameArray(encid, "Physician Examinations")
  If xlist Then
    stObservation = GetExaminationHTMLProfile(encid, xlist)
    asx = AddCustomReport(stChapter, stObservation)
  Endif
  Return asx

End

Public Function AddNursingFindings(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]
  Dim xlist As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Nursing Examinations"
  Endif
  xlist = PaientSelExamNameArray(encid, "Nursing Examinations")
  If xlist Then
    stObservation = GetExaminationHTMLProfile(encid, xlist)
    asx = AddCustomReport(stChapter, stObservation)
  Endif
  Return asx

End

Public Function AddEssentialFindings(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]
  Dim xlist As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Essential Examinations"
  Endif
  xlist = PaientSelExamNameArray(encid, "Essential Examinations")
  If xlist Then
    stObservation = GetExaminationHTMLProfile(encid, xlist)
    asx = AddCustomReport(stChapter, stObservation)
  Endif
  Return asx

End

Public Function AddTriageFindings(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]
  Dim xlist As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Triage Examinations"
  Endif
  xlist = PaientSelExamNameArray(encid, "Triage Examinations")
  If xlist Then
    stObservation = GetExaminationHTMLProfile(encid, xlist)
    asx = AddCustomReport(stChapter, stObservation)
  Endif
  Return asx

End

Public Function AddDischargeFindings(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]
  Dim xlist As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Discharge Examinations"
  Endif
  xlist = PaientSelExamNameArray(encid, "Discharge Examinations")
  If xlist Then
    stObservation = GetExaminationHTMLProfile(encid, xlist)
    asx = AddCustomReport(stChapter, stObservation)
  Endif
  Return asx

End

Public Function AddPhysicianStructured(encid As String, Optional sTitle As String) As String[]

  Dim asx As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Physician Examinations"
  Endif
  stObservation = modPatReports.GetRecommendedExam(encid, "Physician Examinations")
  asx = AddCustomReport(stChapter, stObservation)

  Return asx

End

Public Function AddDepartmentStructured(encid As String, Optional sTitle As String) As String[]

  Dim asx As String[]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Departmental Examinations"
  Endif
  stObservation = modPatReports.GetRecommendedExam(encid, "Departmental")
  asx = AddCustomReport(stChapter, stObservation)

  Return asx

End

''------------------------------ Notes ----------------------------
Public Function AddCauseofAdmission(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Cause of Admission"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Cause of Admission")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddHistoryOfIllness(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "History of Illness"
  Endif
  stObservation = GetPatientHistoryReport(encid, "History of Illness")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

''=================== For backward compatibility only ===================
Public Function AddPastHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Past History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Past History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddTreatmentHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Treatment History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Treatment History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddMedicatHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Medication History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Medication History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddPersonalHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Personal History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Personal History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSurgicalHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Surgical History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Surgical History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddOccupationalHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Occupational History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Occupational History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSocialHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Social History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Social History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddFamilyHistory(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Family History"
  Endif
  stObservation = GetPatientHistoryReport(encid, "Family History")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End
''===================== End backward Compatibility ======================

Public Function AddProvisionalDiagnosis(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Provisional Diagnosis"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatient.PatientFindingList(encid, "Provisional Diagnosis"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddFinalDiagnosis(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Final Diagnosis"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatient.PatientFindingList(encid, "Final Diagnosis"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddInvestigationAdvised(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Investigation Advised"
  Endif
  stObservation = modString.GetHTMLListFormat(OPDOrderLabRequest(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddTreatmentAdvised(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Treatment Advised"
  Endif
  stObservation = OPDRequestMedString(encid, "Medicines")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSurgicalsRequests(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Surgical Requests"
  Endif
  stObservation = OPDRequestMedString(encid, "Surgicals")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddExtraItemsRequests(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Extra Requests"
  Endif
  stObservation = OPDRequestMedString(encid, "Extra Items")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

''Dispensed
Public Function AddNutritionApproved(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Nutrition Approved"
  Endif
  stObservation = modString.GetHTMLListFormat(GetDietApprovedList(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddMedicineDispensed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Medicines Dispensed"
  Endif
  stObservation = OPDDispensedPharm(encid, "Medicines")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSurgicalsDispensed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Surgicals Dispensed"
  Endif
  stObservation = OPDDispensedPharm(encid, "Surgicals")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddExtraDispensed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Extra Items Dispensed"
  Endif
  stObservation = OPDDispensedPharm(encid, "Extra Items")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

'''-------
Public Function AddConsultationAll(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Consultations"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatient.GetPatientCOnsultList(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddBedTransition(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Bed Transitions"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatPatho.GetPatientTransition(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddEquipmentsUsed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Equipments Used"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatPatho.GetPatientEquipmentUse(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddEventProfile(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Event Timings"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatPatho.GetPatientEventProfile(encid, "Events"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddDevicesUsed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Devices Used"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatPatho.GetPatientEventProfile(encid, "Devices"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddDrugAllergy(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Drug Allergy"
  Endif
  stObservation = modString.GetHTMLListFormat(modPatient.PatientFindingList(encid, "Allergic Drugs"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddProminientSymptoms(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Prominent Symptoms"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatientSymptomReport(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddPatDemographics(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Demographics"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatientDemographicReport(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddMajorProcedures(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Major Procedures"
  Endif
  stObservation = modPatPatho.PatSelectProcedureString(encid, "Procedures", "Done")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddMajorProceduresCustom(sReport As String, encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Major Procedures"
  Endif
  stObservation = modString.GetHTMLListFormat(GetCustomProcedureMajor(encid, sReport))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddPlannedProcedures(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Planned Procedures"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatProcedureList(encid, "Procedures", "Planned"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddMinorProcedures(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Minor Procedures"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatProcedureList(encid, "Minor Procedures", "Done"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddExtraProcedures(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Extra Procedures"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatExtProcedureList(encid, "Planned"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddMedicationUsed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Medication Used"
  Endif
  stObservation = modPharmacy.NurDosingString(encid)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddIndoorMedication(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Indoor Medication"
  Endif
  stObservation = modPatReports.AdmittedMedString(encid)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddNutritionUsed(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Nutrition Consumed"
  Endif
  ''stObservation = modPharmacy.NurDosingString(encid)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddConditionAtDischarge(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Condition at Discharge"
  Endif
  stObservation = GetPatientNoteReport(encid, "Condition of Discharge")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddDischargeMedication(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Discharge Medication"
  Endif
  stObservation = modPatReports.DischargeMedString(encid)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddAdviceDischarge(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Advice on Discharge"
  Endif
  stObservation = GetPatientNoteReport(encid, "Advice on Discharge")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

''opd
Public Function AddOPDAdvice(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "OPD Advice"
  Endif
  stObservation = GetPatientNoteReport(encid, "Initial Planning")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddExpertAdvice(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Expert Advice"
  Endif
  stObservation = GetPatientNoteReport(encid, "Final Planning")
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddDeliveryProfile(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Delivery Profile"
  Endif
  stObservation = modString.GetHTMLListFormat(DeliveryReportbyMother(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddClinicalNotes(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Clinical Notes"
  Endif
  stObservation = modString.GetHTMLListFormat(GetClinNotesReport(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddProgressNotes(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Progress Note"
  Endif
  stObservation = modString.GetHTMLListFormat(GetClinNoteSpecificReport(encid, "Progress Note"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddCliniciansNotes(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Clinicians Note"
  Endif
  stObservation = modString.GetHTMLListFormat(GetClinNoteSpecificReport(encid, "Clinicians Note"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddNursesNotes(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Nurses Note"
  Endif
  stObservation = modString.GetHTMLListFormat(GetClinNoteSpecificReport(encid, "Nurses Note"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddTransferNotes(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Transfer Note"
  Endif
  stObservation = modString.GetHTMLListFormat(GetClinNoteSpecificReport(encid, "Transfer Note"))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddTherapeuticPlanning(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "Therapeutic Planning"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatientPlanningReport(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddIPMonitoring(encid As String, Optional sTitle As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  If sTitle Then
    stChapter = sTitle
  Else
    stChapter = "IP Monitoring"
  Endif
  stObservation = modString.GetHTMLListFormat(GetPatientMonitorReport(encid))
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSelectedExamination(encid As String, examList As String[]) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  stChapter = "Examinations"
  stObservation = GetExaminationHTMLProfile(encid, examList)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSelectedTest(encid As String, testList As String[], sUnit As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  stChapter = "Laboratory"
  stObservation = GetlaboratoryHTMLProfile(encid, testList, sUnit)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSelectedRadio(encid As String, examList As String[]) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  stChapter = "Radio Diagnostics"
  stObservation = GetRadiologyHTMLProfile(encid, examList)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSelectedHistory(encid As String, sType As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  stChapter = sType
  stObservation = GetPatientHistoryReport(encid, sType)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

Public Function AddSelectedDischarge(encid As String, sType As String) As String[]

  Dim asx As New String[0]

  Dim stChapter As String
  Dim stObservation As String

  stChapter = sType
  stObservation = modPatPatho.ShowSelectedNotes(encid, sType)
  asx = AddCustomReport(stChapter, stObservation)
  Return asx

End

'''------------------------------------Admission Sheet------------------------------------------------
Public Function ShowAdmissionSheet(encid As String) As String

  Dim $BillingReport As CReportHTML

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encid)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encid)
  Endif
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("ADMISSION REPORT", "PARAM1")

  $BillingReport.Add(AddChiefComplaints(encid))
  $BillingReport.Add(AddEssentialFindings(encid))
  $BillingReport.Add(AddPhysicianFindings(encid))
  $BillingReport.Add(AddHistoryOfIllness(encid))
  $BillingReport.Add(AddProvisionalDiagnosis(encid))
  $BillingReport.Add(AddOPDAdvice(encid))

  Return $BillingReport.NewHTMLPath()

End

Public Function ShowOPatSummary(encid As String) As String

  Dim $BillingReport As CReportHTML

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encid)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encid)
  Endif
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("OUTPATIENT REPORT", "PARAM1")

  $BillingReport.Add(AddChiefComplaints(encid))
  $BillingReport.Add(AddEssentialFindings(encid))
  $BillingReport.Add(AddPhysicianFindings(encid))
  $BillingReport.Add(AddProvisionalDiagnosis(encid))
  $BillingReport.Add(AddInvestigationAdvised(encid))
  $BillingReport.Add(AddTreatmentAdvised(encid))
  $BillingReport.Add(AddOPDAdvice(encid))

  Return $BillingReport.NewHTMLPath()

End

Public Function ShowOPDPostSummary(encid As String, strUnit As String) As String

  Dim $BillingReport As CReportHTML

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encid)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encid)
  Endif
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("OUTPATIENT REPORT", "PARAM1")

  $BillingReport.Add(AddChiefComplaints(encid))
  $BillingReport.Add(AddEssentialFindings(encid))
  $BillingReport.Add(AddPhysicianFindings(encid))
  $BillingReport.Add(AddProvisionalDiagnosis(encid))
  $BillingReport.Add(AddSelectedTest(encid, modLabTest.PaientAllTestNameArray(encid), strUnit))
  $BillingReport.Add(AddSelectedRadio(encid, modRadioTest.PaientAllRadioNameArray(encid)))
  $BillingReport.Add(AddMedicineDispensed(encid))
  $BillingReport.Add(AddSurgicalsDispensed(encid))
  $BillingReport.Add(AddOPDAdvice(encid))

  Return $BillingReport.NewHTMLPath()

End

Public Function ShowDischargeReport(encid As String, exam As String[], radio As String[], test As String[], strUnit As String) As String

  Dim $BillingReport As CReportHTML
  Dim xdelivery As String[]

  Dim res1 As Result
  Dim res2 As Result

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encid)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encid)
  Endif
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("DISCHARGE REPORT", "PARAM1")

  $BillingReport.AddSection("General", True)
  $BillingReport.Add(AddCourseOfTreatment(encid))
  $BillingReport.Add(AddPatDemographics(encid))

  $BillingReport.Add(AddChiefComplaints(encid))
  $BillingReport.Add(AddTriageFindings(encid))
  $BillingReport.Add(AddHistoryOfIllness(encid))

  res1 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tblhistory")
  If res1.Available Then
    For Each res1
      $BillingReport.Add(AddSelectedHistory(encid, res1["flditem"]))
    Next
  Endif

  $BillingReport.Add(AddDrugAllergy(encid))
  $BillingReport.Add(AddProvisionalDiagnosis(encid))
  $BillingReport.Add(AddOPDAdvice(encid))

  $BillingReport.Add(AddFinalDiagnosis(encid))
  $BillingReport.Add(AddProminientSymptoms(encid))
  $BillingReport.Add(AddMajorProcedures(encid))
  $BillingReport.Add(AddExtraProcedures(encid))
  $BillingReport.Add(AddMedicationUsed(encid))

  xdelivery = DeliveryReportbyMother(encid)
  If xdelivery Then
    $BillingReport.Add(AddCustomReport("Delivery Profile", xdelivery.Join(gb.NewLine)))
  Endif

  $BillingReport.AddSection("Investigations", True)
  $BillingReport.Add(AddSelectedExamination(encid, exam))
  $BillingReport.Add(AddSelectedTest(encid, test, strUnit))
  $BillingReport.Add(AddSelectedRadio(encid, radio))

  $BillingReport.AddSection("Discharge", True)
  $BillingReport.Add(AddPlannedProcedures(encid))
  $BillingReport.Add(AddDischargeFindings(encid))
  $BillingReport.Add(AddDischargeMedication(encid))

  res2 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tbldischarge")
  If res2.Available Then
    For Each res2
      $BillingReport.Add(AddSelectedDischarge(encid, res2["flditem"]))
    Next
  Else
    $BillingReport.Add(AddConditionAtDischarge(encid))
    $BillingReport.Add(AddAdviceDischarge(encid))
  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function ShowAllCompleteReport(encid As String, strUnit As String) As String

  Dim $BillingReport As CReportHTML
  Dim xdelivery As String[]

  Dim res1 As Result
  Dim res2 As Result

  $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encid)
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("COMPLETE REPORT", "PARAM1")

  $BillingReport.AddSection("General", True)
  $BillingReport.Add(AddCourseOfTreatment(encid))
  $BillingReport.Add(AddBedTransition(encid))
  $BillingReport.Add(AddPatDemographics(encid))

  $BillingReport.Add(AddChiefComplaints(encid))
  $BillingReport.Add(AddTriageFindings(encid))
  $BillingReport.Add(AddCauseofAdmission(encid))
  $BillingReport.Add(AddHistoryOfIllness(encid))

  res1 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tblhistory")
  If res1.Available Then
    For Each res1
      $BillingReport.Add(AddSelectedHistory(encid, res1["flditem"]))
    Next
  Endif

  $BillingReport.Add(AddDrugAllergy(encid))
  $BillingReport.Add(AddProvisionalDiagnosis(encid))
  $BillingReport.Add(AddOPDAdvice(encid))
  $BillingReport.Add(AddTreatmentAdvised(encid))

  $BillingReport.Add(AddFinalDiagnosis(encid))
  $BillingReport.Add(AddProminientSymptoms(encid))
  $BillingReport.Add(AddMajorProcedures(encid))
  $BillingReport.Add(AddMinorProcedures(encid))
  $BillingReport.Add(AddConsultationAll(encid))
  $BillingReport.Add(AddEquipmentsUsed(encid))
  $BillingReport.Add(AddExtraProcedures(encid))

  $BillingReport.Add(AddMedicineDispensed(encid))
  $BillingReport.Add(AddSurgicalsDispensed(encid))
  $BillingReport.Add(AddExtraDispensed(encid))
  $BillingReport.Add(AddMedicationUsed(encid))

  xdelivery = DeliveryReportbyMother(encid)
  If xdelivery Then
    $BillingReport.Add(AddCustomReport("Delivery Profile", xdelivery.Join(gb.NewLine)))
  Endif

  $BillingReport.AddSection("Investigations & Planning", True)
  $BillingReport.Add(AddEssentialFindings(encid))
  $BillingReport.Add(AddPhysicianFindings(encid))
  $BillingReport.Add(AddNursingFindings(encid))
  $BillingReport.Add(AddPhysicianStructured(encid))
  $BillingReport.Add(AddDepartmentStructured(encid))
  $BillingReport.Add(AddSelectedTest(encid, modLabTest.PaientAllTestNameArray(encid), strUnit))
  $BillingReport.Add(AddSelectedRadio(encid, modRadioTest.PaientAllRadioNameArray(encid)))
  $BillingReport.Add(AddClinicalNotes(encid))
  $BillingReport.Add(AddIPMonitoring(encid))
  $BillingReport.Add(AddTherapeuticPlanning(encid))

  If modPatient.CurrentAdmissionStatus(encid) = "Discharged" Then
    $BillingReport.AddSection("Discharge", True)
    $BillingReport.Add(AddPlannedProcedures(encid))
    $BillingReport.Add(AddDischargeFindings(encid))
    $BillingReport.Add(AddDischargeMedication(encid))

    res2 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tbldischarge")
    If res2.Available Then
      For Each res2
        $BillingReport.Add(AddSelectedDischarge(encid, res2["flditem"]))
      Next
    Else
      $BillingReport.Add(AddConditionAtDischarge(encid))
      $BillingReport.Add(AddAdviceDischarge(encid))
    Endif
  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function ShowCompleteReport(encid As String, xList As String[], examlist As String[], lablist As String[], radiolist As String[], strUnit As String, HTMLOnly As Boolean, Optional sColl As Collection) As String

  Dim $BillingReport As CReportHTML
  Dim xdelivery As String[]
  Dim xitem As String

  Dim res1 As Result
  Dim res2 As Result
  Dim xxx As String

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encid)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encid)
  Endif
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("SELECTED PARAMETERS", "PARAM1")

  $BillingReport.AddSection("General", True)
  For Each xitem In xList

    If xitem = "Course of Treatment" Then
      $BillingReport.Add(AddCourseOfTreatment(encid))
    Endif
    If xitem = "Bed Transitions" Then
      $BillingReport.Add(AddBedTransition(encid))
    Endif
    If xitem = "Demographics" Then
      $BillingReport.Add(AddPatDemographics(encid))
    Endif
    If xitem = "Triage Examinations" Then
      $BillingReport.Add(AddTriageFindings(encid))
    Endif
    If xitem = "Cause of Admission" Then
      $BillingReport.Add(AddCauseofAdmission(encid))
    Endif
    If xitem = "Chief Complaints" Then
      $BillingReport.Add(AddChiefComplaints(encid))
    Endif
    If xitem = "Presenting Complaints" Then
      $BillingReport.Add(AddPresentingComplaints(encid))
    Endif
    If xitem = "General Complaints" Then
      $BillingReport.Add(AddGenComplaints(encid))
    Endif
    If xitem = "History of Illness" Then
      $BillingReport.Add(AddHistoryOfIllness(encid))
    Endif

    res1 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tblhistory")
    If res1.Available Then
      For Each res1
        If xitem = "History@" & res1["flditem"] Then
          $BillingReport.Add(AddSelectedHistory(encid, res1["flditem"]))
        Endif
      Next
    Endif

    If xitem = "Past History" Then
      $BillingReport.Add(AddPastHistory(encid))
    Endif
    If xitem = "Treatment History" Then
      $BillingReport.Add(AddTreatmentHistory(encid))
    Endif
    If xitem = "Medication History" Then
      $BillingReport.Add(AddMedicatHistory(encid))
    Endif
    If xitem = "Family History" Then
      $BillingReport.Add(AddFamilyHistory(encid))
    Endif
    If xitem = "Personal History" Then
      $BillingReport.Add(AddPersonalHistory(encid))
    Endif
    If xitem = "Surgical History" Then
      $BillingReport.Add(AddSurgicalHistory(encid))
    Endif
    If xitem = "Occupational History" Then
      $BillingReport.Add(AddOccupationalHistory(encid))
    Endif
    If xitem = "Social History" Then
      $BillingReport.Add(AddSocialHistory(encid))
    Endif
    If xitem = "Drug Allergy" Then
      $BillingReport.Add(AddDrugAllergy(encid))
    Endif
    If xitem = "Provisional Diagnosis" Then
      $BillingReport.Add(AddProvisionalDiagnosis(encid))
    Endif
    If xitem = "Initial Planning" Then
      $BillingReport.Add(AddOPDAdvice(encid))
    Endif
    If xitem = "Final Planning" Then
      $BillingReport.Add(AddExpertAdvice(encid))
    Endif
    If xitem = "Treatment Advised" Then
      $BillingReport.Add(AddTreatmentAdvised(encid))
    Endif

    If xitem = "Final Diagnosis" Then
      $BillingReport.Add(AddFinalDiagnosis(encid))
    Endif
    If xitem = "Prominent Symptoms" Then
      $BillingReport.Add(AddProminientSymptoms(encid))
    Endif
    If xitem = "Major Procedures" Then
      $BillingReport.Add(AddMajorProcedures(encid))
    Endif
    If xitem = "Minor Procedures" Then
      $BillingReport.Add(AddMinorProcedures(encid))
    Endif
    If xitem = "Consultations" Then
      $BillingReport.Add(AddConsultationAll(encid))
    Endif
    If xitem = "Equipments Used" Then
      $BillingReport.Add(AddEquipmentsUsed(encid))
    Endif
    If xitem = "Event Timings" Then
      $BillingReport.Add(AddEventProfile(encid))
    Endif
    If xitem = "Devices Used" Then
      $BillingReport.Add(AddDevicesUsed(encid))
    Endif
    If xitem = "Extra Procedures" Then
      $BillingReport.Add(AddExtraProcedures(encid))
    Endif

    If xitem = "Medicines Dispensed" Then
      $BillingReport.Add(AddMedicineDispensed(encid))
    Endif
    If xitem = "Surgicals Dispensed" Then
      $BillingReport.Add(AddSurgicalsDispensed(encid))
    Endif
    If xitem = "Extra Items Dispensed" Then
      $BillingReport.Add(AddExtraDispensed(encid))
    Endif
    If xitem = "Nutrition Approved" Then
      $BillingReport.Add(AddNutritionApproved(encid))
    Endif

    If xitem = "Delivery Profile" Then
      xdelivery = DeliveryReportbyMother(encid)
      If xdelivery Then
        $BillingReport.Add(AddCustomReport("Delivery Profile", xdelivery.Join(gb.NewLine)))
      Endif
    Endif
  Next

  $BillingReport.AddSection("Investigations", True)
  For Each xitem In xList

    If xitem = "Selected Investigations" Then
      If examlist Then
        If examlist.Count Then
          $BillingReport.Add(AddSelectedExamination(encid, examlist))
        Endif
      Endif
      If lablist Then
        If lablist.Count Then
          $BillingReport.Add(AddSelectedTest(encid, lablist, strUnit))
        Endif
      Endif
      If radiolist Then
        If radiolist.Count Then
          $BillingReport.Add(AddSelectedRadio(encid, radiolist))
        Endif
      Endif
    Endif

    If xitem = "Essential Examinations" Then
      $BillingReport.Add(AddEssentialFindings(encid))
    Endif
    If xitem = "Physician Examinations" Then
      $BillingReport.Add(AddPhysicianFindings(encid))
    Endif
    If xitem = "Clinical Findings" Then
      $BillingReport.Add(AddClinFindingsAll(encid))
    Endif
    If xitem = "Nursing Examinations" Then
      $BillingReport.Add(AddNursingFindings(encid))
    Endif
    If xitem = "Physician Structured" Then
      $BillingReport.Add(AddPhysicianStructured(encid))
    Endif
    If xitem = "Department Structured" Then
      $BillingReport.Add(AddDepartmentStructured(encid))
    Endif

    If xitem = "Laboratory Tests" Then
      $BillingReport.Add(AddSelectedTest(encid, modLabTest.PaientAllTestNameArray(encid), strUnit))
    Endif
    If xitem = "Radiological Findings" Then
      $BillingReport.Add(AddSelectedRadio(encid, modRadioTest.PaientAllRadioNameArray(encid)))
    Endif
    If xitem = "Clinical Notes" Then
      $BillingReport.Add(AddClinicalNotes(encid))
    Endif
    If xitem = "IP Monitoring" Then
      $BillingReport.Add(AddIPMonitoring(encid))
    Endif
    If xitem = "Therapeutic Planning" Then
      $BillingReport.Add(AddTherapeuticPlanning(encid))
    Endif
    If xitem = "Medication Used" Then
      $BillingReport.Add(AddMedicationUsed(encid))
    Endif
    If xitem = "Indoor Medication" Then
      $BillingReport.Add(AddIndoorMedication(encid))
    Endif
    If xitem = "Nutrition Consumed" Then
      $BillingReport.Add(AddNutritionUsed(encid))
    Endif

  Next

  If modPatient.CurrentAdmissionStatus(encid) = "Discharged" Then
    $BillingReport.AddSection("Discharge", True)
    For Each xitem In xList

      If xitem = "Planned Procedures" Then
        $BillingReport.Add(AddPlannedProcedures(encid))
      Endif
      If xitem = "Discharge Examinations" Then
        $BillingReport.Add(AddDischargeFindings(encid))
      Endif
      If xitem = "Condition at Discharge" Then
        $BillingReport.Add(AddConditionAtDischarge(encid))
      Endif
      If xitem = "Discharge Medication" Then
        $BillingReport.Add(AddDischargeMedication(encid))
      Endif
      If xitem = "Advice on Discharge" Then
        $BillingReport.Add(AddAdviceDischarge(encid))
      Endif

      res2 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tbldischarge")
      If res2.Available Then
        For Each res2
          If xitem = "Discharge@" & res2["flditem"] Then
            $BillingReport.Add(AddSelectedDischarge(encid, res2["flditem"]))
          Endif
        Next
      Endif

    Next
  Endif

  If sColl Then
    $BillingReport.AddSection("Others", True)
    For Each xxx In sColl
      $BillingReport.Add(AddCustomReport(sColl.Key, xxx))
    Next
  Endif

  If HTMLOnly And If HTMLOnly = True Then
    Return $BillingReport.NewHTMLString()
  Else
    Return $BillingReport.NewHTMLPath()
  Endif

End

Public Function ShowAllEncounterReport(encounter As String, xList As String[], examlist As String[], lablist As String[], radiolist As String[], strUnit As String) As String

  Dim $BillingReport As CReportHTML
  Dim encid As String
  Dim encList As String[]
  Dim xdelivery As String[]
  Dim xitem As String

  Dim res1 As Result
  Dim res2 As Result

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encounter)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encounter)
  Endif
  $BillingReport.UserData.Add("REPORT", "Report")
  $BillingReport.UserData.Add("ALL ENCOUNTERS REPORT", "PARAM1")

  encList = modPatient.GetEncListFromEncSetting(encounter)
  For Each encid In encList
    $BillingReport.AddSection(encid & " (" & modReportVar.GetDateTimeReport(modPatient.GetRecordDate(encid), gb.MediumDate) & ")", True)

    For Each xitem In xList

      If xitem = "Course of Treatment" Then
        $BillingReport.Add(AddCourseOfTreatment(encid))
      Endif
      If xitem = "Bed Transitions" Then
        $BillingReport.Add(AddBedTransition(encid))
      Endif
      If xitem = "Demographics" Then
        $BillingReport.Add(AddPatDemographics(encid))
      Endif
      If xitem = "Triage Examinations" Then
        $BillingReport.Add(AddTriageFindings(encid))
      Endif
      If xitem = "Cause of Admission" Then
        $BillingReport.Add(AddCauseofAdmission(encid))
      Endif
      If xitem = "Chief Complaints" Then
        $BillingReport.Add(AddChiefComplaints(encid))
      Endif
      If xitem = "Presenting Complaints" Then
        $BillingReport.Add(AddPresentingComplaints(encid))
      Endif
      If xitem = "General Complaints" Then
        $BillingReport.Add(AddGenComplaints(encid))
      Endif
      If xitem = "History of Illness" Then
        $BillingReport.Add(AddHistoryOfIllness(encid))
      Endif

      res1 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tblhistory")
      If res1.Available Then
        For Each res1
          If xitem = "History@" & res1["flditem"] Then
            $BillingReport.Add(AddSelectedHistory(encid, res1["flditem"]))
          Endif
        Next
      Endif

      If xitem = "Past History" Then
        $BillingReport.Add(AddPastHistory(encid))
      Endif
      If xitem = "Treatment History" Then
        $BillingReport.Add(AddTreatmentHistory(encid))
      Endif
      If xitem = "Medication History" Then
        $BillingReport.Add(AddMedicatHistory(encid))
      Endif
      If xitem = "Family History" Then
        $BillingReport.Add(AddFamilyHistory(encid))
      Endif
      If xitem = "Personal History" Then
        $BillingReport.Add(AddPersonalHistory(encid))
      Endif
      If xitem = "Surgical History" Then
        $BillingReport.Add(AddSurgicalHistory(encid))
      Endif
      If xitem = "Occupational History" Then
        $BillingReport.Add(AddOccupationalHistory(encid))
      Endif
      If xitem = "Social History" Then
        $BillingReport.Add(AddSocialHistory(encid))
      Endif
      If xitem = "Drug Allergy" Then
        $BillingReport.Add(AddDrugAllergy(encid))
      Endif
      If xitem = "Provisional Diagnosis" Then
        $BillingReport.Add(AddProvisionalDiagnosis(encid))
      Endif
      If xitem = "Initial Planning" Then
        $BillingReport.Add(AddOPDAdvice(encid))
      Endif
      If xitem = "Final Planning" Then
        $BillingReport.Add(AddExpertAdvice(encid))
      Endif

      If xitem = "Final Diagnosis" Then
        $BillingReport.Add(AddFinalDiagnosis(encid))
      Endif
      If xitem = "Prominent Symptoms" Then
        $BillingReport.Add(AddProminientSymptoms(encid))
      Endif
      If xitem = "Major Procedures" Then
        $BillingReport.Add(AddMajorProcedures(encid))
      Endif
      If xitem = "Minor Procedures" Then
        $BillingReport.Add(AddMinorProcedures(encid))
      Endif
      If xitem = "Consultations" Then
        $BillingReport.Add(AddConsultationAll(encid))
      Endif
      If xitem = "Equipments Used" Then
        $BillingReport.Add(AddEquipmentsUsed(encid))
      Endif
      If xitem = "Event Timings" Then
        $BillingReport.Add(AddEventProfile(encid))
      Endif
      If xitem = "Devices Used" Then
        $BillingReport.Add(AddDevicesUsed(encid))
      Endif
      If xitem = "Extra Procedures" Then
        $BillingReport.Add(AddExtraProcedures(encid))
      Endif
      If xitem = "Medication Used" Then
        $BillingReport.Add(AddMedicationUsed(encid))
      Endif
      If xitem = "Indoor Medication" Then
        $BillingReport.Add(AddIndoorMedication(encid))
      Endif
      If xitem = "Nutrition Consumed" Then
        $BillingReport.Add(AddNutritionUsed(encid))
      Endif
      If xitem = "Treatment Advised" Then
        $BillingReport.Add(AddTreatmentAdvised(encid))
      Endif

      If xitem = "Delivery Profile" Then
        xdelivery = DeliveryReportbyMother(encid)
        If xdelivery Then
          $BillingReport.Add(AddCustomReport("Delivery Profile", xdelivery.Join(gb.NewLine)))
        Endif
      Endif

      If xitem = "Selected Investigations" Then
        If examlist Then
          If examlist.Count Then
            $BillingReport.Add(AddSelectedExamination(encid, examlist))
          Endif
        Endif
        If lablist Then
          If lablist.Count Then
            $BillingReport.Add(AddSelectedTest(encid, lablist, strUnit))
          Endif
        Endif
        If radiolist Then
          If radiolist.Count Then
            $BillingReport.Add(AddSelectedRadio(encid, radiolist))
          Endif
        Endif
      Endif

      If xitem = "Essential Examinations" Then
        $BillingReport.Add(AddEssentialFindings(encid))
      Endif
      If xitem = "Physician Examinations" Then
        $BillingReport.Add(AddPhysicianFindings(encid))
      Endif
      If xitem = "Clinical Findings" Then
        $BillingReport.Add(AddClinFindingsAll(encid))
      Endif
      If xitem = "Nursing Examinations" Then
        $BillingReport.Add(AddNursingFindings(encid))
      Endif
      If xitem = "Physician Structured" Then
        $BillingReport.Add(AddPhysicianStructured(encid))
      Endif
      If xitem = "Department Structured" Then
        $BillingReport.Add(AddDepartmentStructured(encid))
      Endif

      If xitem = "Laboratory Tests" Then
        $BillingReport.Add(AddSelectedTest(encid, modLabTest.PaientAllTestNameArray(encid), strUnit))
      Endif
      If xitem = "Radiological Findings" Then
        $BillingReport.Add(AddSelectedRadio(encid, modRadioTest.PaientAllRadioNameArray(encid)))
      Endif
      If xitem = "Clinical Notes" Then
        $BillingReport.Add(AddClinicalNotes(encid))
      Endif
      If xitem = "IP Monitoring" Then
        $BillingReport.Add(AddIPMonitoring(encid))
      Endif
      If xitem = "Therapeutic Planning" Then
        $BillingReport.Add(AddTherapeuticPlanning(encid))
      Endif

      If xitem = "Planned Procedures" Then
        $BillingReport.Add(AddPlannedProcedures(encid))
      Endif
      If xitem = "Discharge Examinations" Then
        $BillingReport.Add(AddDischargeFindings(encid))
      Endif
      If xitem = "Discharge Medication" Then
        $BillingReport.Add(AddDischargeMedication(encid))
      Endif
      If xitem = "Condition at Discharge" Then
        $BillingReport.Add(AddConditionAtDischarge(encid))
      Endif
      If xitem = "Advice on Discharge" Then
        $BillingReport.Add(AddAdviceDischarge(encid))
      Endif

      res2 = modDatabase.$myConn.Exec("select distinct(flditem) as flditem from tbldischarge")
      If res2.Available Then
        For Each res2
          If xitem = "Discharge@" & res2["flditem"] Then
            $BillingReport.Add(AddSelectedDischarge(encid, res2["flditem"]))
          Endif
        Next
      Endif

    Next
  Next

  Return $BillingReport.NewHTMLPath()

End

Public Function ShowAllEncounterSpecific(encounter As String, strUnit As String, sType As String) As String

  Dim $BillingReport As CReportHTML
  Dim encid As String
  Dim encList As String[]

  If modBasic.$MedRepoBody = "Paragraph" Then
    $BillingReport = New CReportHTML([("Description")], "PatientReport", encounter)
  Else
    $BillingReport = New CReportHTML([("Category"), ("Observations")], "PatientReport", encounter)
  Endif
  $BillingReport.UserData.Add("REPORT: " & sType, "Report")
  $BillingReport.UserData.Add("ALL ENCOUNTERS REPORT", "PARAM1")

  encList = modPatient.GetEncListFromEncSetting(encounter)
  For Each encid In encList
    $BillingReport.AddSection(encid & " (" & modReportVar.GetDateTimeReport(modPatient.GetRecordDate(encid), gb.MediumDate) & ")", True)

    If sType = "Medicines" Then
      $BillingReport.Add(AddMedicineDispensed(encid))
      $BillingReport.Add(AddMedicationUsed(encid))
      $BillingReport.Add(AddTreatmentAdvised(encid))
    Else If sType = "Laboratory" Then
      $BillingReport.Add(AddSelectedTest(encid, modLabTest.PaientAllTestNameArray(encid), strUnit))
    Else If sType = "Radiology" Then
      $BillingReport.Add(AddSelectedRadio(encid, modRadioTest.PaientAllRadioNameArray(encid)))
    Else If sType = "Examination" Then
      $BillingReport.Add(AddSelectedExamination(encid, modClinic.PaientAllExamNameArray(encid)))
    Endif

  Next

  Return $BillingReport.NewHTMLPath()

End

''------------------------ General ------------------------------------------------------
Public Function GetPatientSymptomReport(encid As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]

  sql = "select fldtime,flditem,fldreportquali,flddetail,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3" & GetLockClinicSQL()
  res = modDatabase.$syConn.Exec(sql, encid, "Patient Symptoms", True)
  xx = New String[]
  If res.Available = True Then
    For Each res
      If res["fldreportquali"] Then
        If modBasic.$ShowDayMedReport = "User" Then
          xx.Add(res["flditem"] & " : " & res["fldreportquali"] & " [" & res["flddetail"] & " ]" & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx.Add("[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & res["flditem"] & " : " & res["fldreportquali"] & " [" & res["flddetail"] & " ]" & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx.Add("[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & res["flditem"] & " : " & res["fldreportquali"] & " [" & res["flddetail"] & " ]")
        Else
          xx.Add(res["flditem"] & " : " & res["fldreportquali"] & " [" & res["flddetail"] & " ]")
        Endif
      Else
        If modBasic.$ShowDayMedReport = "User" Then
          xx.Add(res["flditem"] & " [" & res["flddetail"] & " ]" & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx.Add("[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & res["flditem"] & " [" & res["flddetail"] & " ]" & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx.Add("[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & res["flditem"] & " [" & res["flddetail"] & " ]")
        Else
          xx.Add(res["flditem"] & " [" & res["flddetail"] & " ]")
        Endif
      Endif
    Next
  Endif

  Return xx

End

Public Function GetPatientPresentingSymptomReport(encid As String) As String[]

  Dim xUnitLst As String[] = ["Hours", "Days", "Weeks", "Months", "Years", "Episodes"]
  Dim sql As String
  Dim res As Result
  Dim xx As String[]
  Dim xstr As String

  sql = "select fldtime,flditem,fldreportquali,fldreportquanti,flddetail,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and fldsave=&3" & GetLockClinicSQL()
  res = modDatabase.$syConn.Exec(sql, encid, "Presenting Symptoms", True)
  xx = New String[]
  If res.Available = True Then
    For Each res

      If xUnitLst.Exist(res["fldreportquali"]) Then
        xstr = CStr(res["fldreportquanti"]) & Space(1) & res["fldreportquali"]
      Else
        If res["fldreportquanti"] Then
          xstr = modDate.ConvertHoursToString(res["fldreportquanti"])
        Else
          xstr = ""
        Endif
        If res["fldreportquali"] Then
          xstr = xstr & Space(1) & res["fldreportquali"]
        Endif
      Endif

      If res["flddetail"] Then
        If modBasic.$ShowDayMedReport = "User" Then
          xx.Add(res["flditem"] & " : " & xstr & " [" & res["flddetail"] & "]" & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & res["flditem"] & " : " & xstr & " [" & res["flddetail"] & "]" & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & res["flditem"] & " : " & xstr & " [" & res["flddetail"] & "]")
        Else
          xx.Add(res["flditem"] & " : " & xstr & " [" & res["flddetail"] & "]")
        Endif
      Else
        If modBasic.$ShowDayMedReport = "User" Then
          xx.Add(res["flditem"] & " : " & xstr & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & res["flditem"] & " : " & xstr & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & res["flditem"] & " : " & xstr)
        Else
          xx.Add(res["flditem"] & " : " & xstr)
        Endif
      Endif

    Next
  Endif

  Return xx

End

Public Function GetPatientDemographicReport(encid As String) As String[]

  Dim sql As String
  Dim res As Result
  Dim xx As String[]

  sql = "select fldtime,flditem,fldreportquali,flddetail,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2" & GetLockClinicSQL()
  res = modDatabase.$syConn.Exec(sql, encid, "Demographics")
  xx = New String[]
  If res.Available = True Then
    For Each res
      If res["fldreportquali"] Then
        If modBasic.$ShowDayMedReport = "User" Then
          xx.Add(res["flditem"] & " : " & res["fldreportquali"] & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx.Add("[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & res["flditem"] & " : " & res["fldreportquali"] & gb.NewLine & "[User: " & res["flduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx.Add("[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & res["flditem"] & " : " & res["fldreportquali"])
        Else
          xx.Add(res["flditem"] & " : " & res["fldreportquali"])
        Endif
      Endif
    Next
  Endif

  Return xx

End

Public Function GetPatProcedureList(encid As String, strType As String, sCondi As String) As String[]

  Dim res As Result
  Dim xlst As String[]
  Dim xx As String
  Dim xval As String

  xlst = New String[]
  res = modDatabase.$syConn.Exec("select fldid,fldnewdate,flditem,flddetail,fldorduserid from tblpatgeneral where fldencounterval=&1 and fldinput=&2 and fldreportquali=&3" & GetLockClinicSQL(), encid, strType, sCondi)
  If res.Available = True Then
    For Each res
      If res["flddetail"] Then
        xval = " : " & res["flddetail"] & gb.NewLine
      Else
        xval = ""
      Endif
      If modBasic.$ShowDayMedReport = "User" Then
        xx = res["flditem"] & xval & gb.NewLine & "[User: " & res["fldorduserid"] & "]"
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx = "[ " & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & " ] " & res["flditem"] & xval & gb.NewLine & "[User: " & res["fldorduserid"] & "]"
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx = "[ " & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & " ] " & res["flditem"] & xval
      Else
        xx = res["flditem"] & xval
      Endif
      xlst.Add(xx)
    Next
  Endif
  Return xlst

End

Public Function GetPatExtProcedureList(encid As String, sCondi As String) As String[]

  Dim res As Result
  Dim xlst As String[]
  Dim xx As String
  Dim xval As String

  xlst = New String[]
  res = modDatabase.$syConn.Exec("select fldid,fldnewdate,flditem,flddetail,fldorduserid from tblpatgeneral where fldencounterval=&1 and fldinput=&2 and fldreportquali=&3" & GetLockClinicSQL(), encid, "Extra Procedures", sCondi)
  If res.Available = True Then
    For Each res
      xval = modPatPatho.GetExtProcedTable(res["fldid"], encid, res["flditem"])
      If modBasic.$ShowDayMedReport = "User" Then
        xx = res["flditem"] & xval & gb.NewLine & "[User: " & res["fldorduserid"] & "]"
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx = "[ " & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & " ] " & res["flditem"] & xval & gb.NewLine & "[User: " & res["fldorduserid"] & "]"
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx = "[ " & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & " ] " & res["flditem"] & xval
      Else
        xx = res["flditem"] & xval
      Endif
      xlst.Add(xx)
    Next
  Endif
  Return xlst

End

''-------------History/Notes -----------------------------
Public Function GetPatientHistoryReport(encid As String, sType As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$myConn.Exec("select flddetail,fldreportquali,fldtime,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3" & GetLockClinicSQL(), encid, "History", sType)
  If res.Available = True Then
    res.MoveLast
    If modBasic.$ShowDayMedReport = "User" Then
      xx = res["flddetail"] & gb.NewLine & "[User: " & res["flduserid"] & "]"
    Else If modBasic.$ShowDayMedReport = "Date+User" Then
      xx = "[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ]" & " : " & res["flddetail"] & gb.NewLine & "[User: " & res["flduserid"] & "]"
    Else If modBasic.$ShowDayMedReport = "Date" Then
      xx = "[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ]" & " : " & res["flddetail"]
    Else
      xx = res["flddetail"]
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetPatientNoteReport(encid As String, sType As String) As String

  Dim sql As String
  Dim res As Result
  Dim xx As String

  sql = "select flddetail,fldtime,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3" & GetLockClinicSQL()
  res = modDatabase.$syConn.Exec(sql, encid, "Notes", sType)
  If res.Available = True Then
    res.MoveLast
    If modBasic.$ShowDayMedReport = "User" Then
      xx = res["flddetail"] & gb.NewLine & "[User: " & res["flduserid"] & "]"
    Else If modBasic.$ShowDayMedReport = "Date+User" Then
      xx = "[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ]" & " : " & res["flddetail"] & gb.NewLine & "[User: " & res["flduserid"] & "]"
    Else If modBasic.$ShowDayMedReport = "Date" Then
      xx = "[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ]" & " : " & res["flddetail"]
    Else
      xx = res["flddetail"]
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetClinNotesReport(encid As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$syConn.Exec("select fldtime,flditem,fldreportquali,flddetail,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and (flditem=&3 or flditem=&4 or flditem=&5 or flditem=&6)" & GetLockClinicSQL(), encid, "Notes", "Progress Note", "Clinicians Note", "Nurses Note", "Transfer Note")
  xx = New String[]
  If res.Available = True Then
    For Each res
      If modBasic.$ShowDayMedReport = "User" Then
        xx.Add("<p>" & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "<br>" & "[User: " & res["flduserid"] & "]" & "</p>")
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx.Add("<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "<br>" & "[User: " & res["flduserid"] & "]" & "</p>")
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx.Add("<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "</p>")
      Else
        xx.Add("<p>" & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "</p>")
      Endif
    Next
  Endif
  Return xx

End

Public Function GetClinNoteSpecificReport(encid As String, sType As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$syConn.Exec("select fldtime,flditem,fldreportquali,flddetail,flduserid from tblexamgeneral where fldencounterval=&1 and fldinput=&2 and flditem=&3" & GetLockClinicSQL(), encid, "Notes", sType)
  xx = New String[]
  If res.Available = True Then
    For Each res
      If modBasic.$ShowDayMedReport = "User" Then
        xx.Add("<p>" & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "<br>" & "[User: " & res["flduserid"] & "]" & "</p>")
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx.Add("<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "<br>" & "[User: " & res["flduserid"] & "]" & "</p>")
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx.Add("<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "] " & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "</p>")
      Else
        xx.Add("<p>" & "<b>" & res["flditem"] & "</b>" & "<br>" & modString.TextToHTML(res["flddetail"]) & "<br>" & "IMPRESSION: " & res["fldreportquali"] & "</p>")
      Endif
    Next
  Endif
  Return xx

End

''-------------------------- Daily -------------------------------------------------------
Public Function OPDRequestMedString(encid As String, sType As String) As String

  Dim rs As Result
  Dim xx As String
  Dim xFinal As Variant[]
  Dim i As Integer
  Dim xRowVal As Collection
  Dim colLst As String[]
  Dim k As Integer
  Dim strItem As String[]

  xFinal = New Variant[]

  strItem = ["Registered", "Admitted", "Recorded", "Follow Up", "Refer(OPD)", "LAMA(OPD)", "Death(OPD)"]
  For k = 0 To strItem.Count - 1
    strItem[k] = "'" & strItem[k] & "'"
  Next

  i = 1
  rs = modDatabase.$myConn.Exec("select fldid,fldroute,flditem,flddose,fldfreq,flddays,flditemtype,(fldqtydisp-fldqtyret) as fldqtydisp,flddirection,fldstarttime from tblpatdosing where fldencounterval=&1 and flditemtype=&2 and fldstatus in(" & strItem.Join(",") & ") and fldorder=&3 and fldsave_order=&4 and fldlevel=&5 and fldcurval=&6", encid, sType, "Request", False, "Requested", "Continue")                 ''
  If rs.Available = True Then
    If sType = "Medicines" Then
      If modBasic.$ShowDayMesStartReport = "Yes" Then
        colLst = ["", "Medicines", "Regimen", "QTY", "Direction", "Date"]
      Else
        colLst = ["", "Medicines", "Regimen", "QTY", "Direction"]
      Endif

      For Each rs
        xRowVal = New Collection
        xRowVal.Add(CStr(i), CStr(0))
        xRowVal.Add(modPharmacy.GetMedFormatForMedReport(rs["flditem"], rs["fldroute"]), CStr(1))
        If rs["flddose"] Then
          If rs["fldfreq"] = "Tapering" Then
            xRowVal.Add(modPharmacy.GetTaperingRegimen(rs["fldid"]).Join("<br>"), CStr(2))
          Else
            xRowVal.Add(modPharmacy.GetMedicineRegimenInFormat(rs["fldroute"], rs["flditem"], rs["flddose"], rs["fldfreq"], rs["flddays"]), CStr(2))
          Endif
        Else
          xRowVal.Add("", CStr(2))
        Endif
        xRowVal.Add(rs["fldqtydisp"], CStr(3))
        If rs["flddirection"] Then
          xRowVal.Add(rs["flddirection"], CStr(4))
        Else
          xRowVal.Add("", CStr(4))
        Endif
        If modBasic.$ShowDayMesStartReport = "Yes" Then
          xRowVal.Add(modReportVar.GetDateTimeReport(rs["fldstarttime"], gb.GeneralDate), CStr(5))
        Endif

        xFinal.Add(xRowVal)
        i = i + 1
      Next

    Else
      If modBasic.$ShowDayMesStartReport = "Yes" Then
        colLst = ["", "Particulars", "QTY", "Date"]
      Else
        colLst = ["", "Particulars", "QTY"]
      Endif

      For Each rs
        xRowVal = New Collection
        xRowVal.Add(CStr(i), CStr(0))
        xRowVal.Add(rs["flditem"], CStr(1))
        xRowVal.Add(rs["fldqtydisp"], CStr(2))
        If modBasic.$ShowDayMesStartReport = "Yes" Then
          xRowVal.Add(modReportVar.GetDateTimeReport(rs["fldstarttime"], gb.GeneralDate), CStr(3))
        Endif

        xFinal.Add(xRowVal)
        i = i + 1
      Next
    Endif
    xx = modString.GetRichTableStringFromVariant(colLst, xFinal)

  Else
    xx = ""
  Endif

  Return xx

End

Public Function OPDDispensedPharm(encid As String, sType As String) As String

  Dim rs As Result
  Dim xx As String
  Dim xFinal As Variant[]
  Dim i As Integer
  Dim xRowVal As Collection
  Dim sColmList As String[]

  xFinal = New Variant[]
  If sType = "Medicines" Then
    sColmList = ["", "Medicines", "Regimen", "QTY", "Direction"]
  Else
    sColmList = ["", "Particulars", "QTY"]
  Endif
  If modBasic.$ShowDayMesStartReport = "Yes" Then
    sColmList.Add("Date")
  Endif

  i = 1
  rs = modDatabase.$syConn.Exec("select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,flddirection,(fldqtydisp-fldqtyret) as fldqtydisp from tblpatdosing where fldencounterval=&1 and flditemtype=&2 and (fldorder=&3 or fldorder=&4) and fldsave_order=&5 and fldlevel=&6 and fldqtydisp>fldqtyret", encid, sType, "Request", "UseOwn", True, "Dispensed")       ''
  If rs.Available Then
    For Each rs
      xRowVal = New Collection
      xRowVal.Add(CStr(i), CStr(0))

      If sType = "Medicines" Then
        xRowVal.Add(modPharmacy.GetMedFormatForMedReport(rs["flditem"], rs["fldroute"]), CStr(1))
        If rs["flddose"] Then
          If rs["fldfreq"] = "Tapering" Then
            xRowVal.Add(modPharmacy.GetTaperingRegimen(rs["fldid"]).Join("<br>"), CStr(2))
          Else
            xRowVal.Add(modPharmacy.GetMedicineRegimenInFormat(rs["fldroute"], rs["flditem"], rs["flddose"], rs["fldfreq"], rs["flddays"]), CStr(2))
          Endif
        Else
          xRowVal.Add("", CStr(2))
        Endif
        xRowVal.Add(rs["fldqtydisp"], CStr(3))
        If rs["flddirection"] Then
          xRowVal.Add(rs["flddirection"], CStr(4))
        Else
          xRowVal.Add("", CStr(4))
        Endif
        If modBasic.$ShowDayMesStartReport = "Yes" Then
          xRowVal.Add(modReportVar.GetDateTimeReport(rs["fldstarttime"], gb.GeneralDate), CStr(5))
        Endif

      Else
        xRowVal.Add(rs["flditem"], CStr(1))
        xRowVal.Add(rs["fldqtydisp"], CStr(2))
        If modBasic.$ShowDayMesStartReport = "Yes" Then
          xRowVal.Add(modReportVar.GetDateTimeReport(rs["fldstarttime"], gb.GeneralDate), CStr(3))
        Endif
      Endif

      xFinal.Add(xRowVal)
      i = i + 1
    Next
    xx = modString.GetRichTableStringFromVariant(sColmList, xFinal)
  Endif

  Return xx

End

Public Function AdmittedMedString(encid As String) As String

  Dim rs As Result
  Dim xx As String
  Dim xFinal As Variant[]
  Dim i As Integer
  Dim xRowVal As Collection
  Dim sColmList As String[]

  xFinal = New Variant[]
  sColmList = ["", "Medicines", "Regimen", "QTY", "Direction"]
  If modBasic.$ShowDayMesStartReport = "Yes" Then
    sColmList.Add("Date")
  Endif

  i = 1
  rs = modDatabase.$myConn.Exec("select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,flditemtype,flddirection,fldqtydisp from tblpatdosing where fldencounterval=&1 and fldstatus=&2 and fldcurval=&3", encid, "Admitted", "Continue")
  If rs.Available = True Then
    For Each rs
      xRowVal = New Collection
      xRowVal.Add(CStr(i), CStr(0))
      xRowVal.Add(modPharmacy.GetMedFormatForMedReport(rs["flditem"], rs["fldroute"]), CStr(1))
      If rs["flddose"] Then
        If rs["fldfreq"] = "Tapering" Then
          xRowVal.Add(modPharmacy.GetTaperingRegimen(rs["fldid"]).Join("<br>"), CStr(2))
        Else
          xRowVal.Add(modPharmacy.GetMedicineRegimenInFormat(rs["fldroute"], rs["flditem"], rs["flddose"], rs["fldfreq"], rs["flddays"]), CStr(2))
        Endif
      Else
        xRowVal.Add("", CStr(2))
      Endif
      xRowVal.Add(rs["fldqtydisp"], CStr(3))
      If rs["flddirection"] Then
        xRowVal.Add(rs["flddirection"], CStr(4))
      Else
        xRowVal.Add("", CStr(4))
      Endif
      If modBasic.$ShowDayMesStartReport = "Yes" Then
        xRowVal.Add(modReportVar.GetDateTimeReport(rs["fldstarttime"], gb.GeneralDate), CStr(5))
      Endif
      xFinal.Add(xRowVal)
      i = i + 1
    Next
    xx = modString.GetRichTableStringFromVariant(sColmList, xFinal)
  Endif

  Return xx

End

Public Function DischargeMedString(encid As String) As String

  Dim rs As Result
  Dim xx As String
  Dim xFinal As Variant[]
  Dim i As Integer
  Dim xRowVal As Collection
  Dim sColmList As String[]

  xFinal = New Variant[]
  sColmList = ["", "Medicines", "Regimen", "QTY", "Direction"]
  If modBasic.$ShowDayMesStartReport = "Yes" Then
    sColmList.Add("Date")
  Endif

  i = 1
  rs = modDatabase.$myConn.Exec("select fldid,fldstarttime,fldroute,flditem,flddose,fldfreq,flddays,flditemtype,flddirection,fldqtydisp from tblpatdosing where fldencounterval=&1 and (fldstatus=&2 or fldstatus=&3 or fldstatus=&4 or fldstatus=&5 or fldstatus=&6) and fldcurval=&7", encid, "Discharged", "LAMA", "Death", "Refer", "Absconder", "Continue")
  If rs.Available = True Then
    For Each rs
      xRowVal = New Collection
      xRowVal.Add(CStr(i), CStr(0))
      xRowVal.Add(modPharmacy.GetMedFormatForMedReport(rs["flditem"], rs["fldroute"]), CStr(1))
      If rs["flddose"] Then
        If rs["fldfreq"] = "Tapering" Then
          xRowVal.Add(modPharmacy.GetTaperingRegimen(rs["fldid"]).Join("<br>"), CStr(2))
        Else
          xRowVal.Add(modPharmacy.GetMedicineRegimenInFormat(rs["fldroute"], rs["flditem"], rs["flddose"], rs["fldfreq"], rs["flddays"]), CStr(2))
        Endif
      Else
        xRowVal.Add("", CStr(2))
      Endif
      xRowVal.Add(rs["fldqtydisp"], CStr(3))
      If rs["flddirection"] Then
        xRowVal.Add(rs["flddirection"], CStr(4))
      Else
        xRowVal.Add("", CStr(4))
      Endif
      If modBasic.$ShowDayMesStartReport = "Yes" Then
        xRowVal.Add(modReportVar.GetDateTimeReport(rs["fldstarttime"], gb.GeneralDate), CStr(5))
      Endif
      xFinal.Add(xRowVal)
      i = i + 1
    Next
    xx = modString.GetRichTableStringFromVariant(sColmList, xFinal)
  Endif

  Return xx

End

''----------------------- Diet -------------------
Public Function GetDietApprovedList(encid As String) As String[]

  Dim res As Result
  Dim xx As String
  Dim xlst As String[]
  Dim xval As String
  Dim xunit As String

  Dim res1 As Result
  Dim dtList As Date[]
  Dim xdate As Date
  Dim xFinal As String[]

  xFinal = New String[]
  res1 = modDatabase.$syConn.Exec("select MIN(flddosetime) as xmindate,MAX(flddosetime) as xmaxdate from tblextradosing where fldencounterval=&1 and fldtype=&2 and (fldstatus=&3 or fldstatus=&4)", encid, "Input Food/Fluid", "Continue", "Completed")
  If res1.Available Then
    dtList = modDate.GetDateArrayBetween(res1["xmindate"], res1["xmaxdate"])
    For Each xdate In dtList

      xx = ""
      res = modDatabase.$syConn.Exec("select flddosetime,fldcategory,flditem,flddose,fldfreq,flduserid from tblextradosing where fldencounterval=&1 and fldtype=&2 and (fldstatus=&3 or fldstatus=&4) and flddosetime>=&5 and flddosetime<=&6", encid, "Input Food/Fluid", "Continue", "Completed", modDate.StartSqlDate(xdate), modDate.EndSqlDate(xdate))
      If res.Available Then
        xx = "<p>" & "Date : " & "<b>" & modReportVar.GetDateTimeReport(xdate, gb.MediumDate) & "</b>"
        xlst = New String[]
        For Each res
          If res["fldcategory"] = "Group" Then
            xunit = "Unit"
          Else If res["fldcategory"] = "Mixture" Then
            xunit = "Unit"
          Else
            xunit = "Gram"
          Endif

          If res["fldfreq"] Then
            xval = res["flddose"] & Space(1) & xunit & " Every " & res["fldfreq"] & " Hour"
          Else
            xval = res["flddose"] & Space(1) & xunit
          Endif

          If modBasic.$ShowDayMedReport = "User" Then
            xlst.Add(res["flditem"] & " : " & xval & gb.NewLine & "[User: " & res["flduserid"] & "]")
          Else If modBasic.$ShowDayMedReport = "Date+User" Then
            xlst.Add("[" & modReportVar.GetDateTimeReport(res["flddosetime"], gb.MediumTime) & "]" & res["flditem"] & " : " & xval & gb.NewLine & "[User: " & res["flduserid"] & "]")
          Else If modBasic.$ShowDayMedReport = "Date" Then
            xlst.Add("[" & modReportVar.GetDateTimeReport(res["flddosetime"], gb.MediumTime) & "]" & res["flditem"] & " : " & xval)
          Else
            xlst.Add(res["flditem"] & " : " & xval)
          Endif
        Next
        xx = xx & "<br>" & xlst.Join("<br>") & "</p>"
      Endif

      xFinal.Add(xx)
    Next
  Endif
  Return xFinal

End

Public Function GetPatientPlanningReport(encid As String) As String[]

  Dim res As Result
  Dim xx As String
  Dim xlst As String[]
  Dim aCompo As String[]

  xlst = New String[]
  res = modDatabase.$syConn.Exec("select fldtime,fldproblem,fldsubjective,fldobjective,fldassess,fldplan,flduserid from tblpatplanning where fldencounterval=&1 and fldplancategory=&2" & GetLockClinicSQL(), encid, "Clinician Plan")
  If res.Available = True Then
    For Each res
      If modBasic.$ShowDayMedReport = "User" Then
        xx = "<p>" & "<b>" & res["fldproblem"] & "</b>"
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx = "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "]" & "<b>" & res["fldproblem"] & "</b>"
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx = "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "]" & "<b>" & res["fldproblem"] & "</b>"
      Else
        xx = "<p>" & "<b>" & res["fldproblem"] & "</b>"
      Endif
      aCompo = New String[]
      If res["fldsubjective"] Then
        aCompo.Add("<u>Subjective:</u> " & modString.TextToHTML(res["fldsubjective"]))
      Endif
      If res["fldobjective"] Then
        aCompo.Add("<u>Objective:</u> " & modString.TextToHTML(res["fldobjective"]))
      Endif
      If res["fldassess"] Then
        aCompo.Add("<u>Assessment:</u> " & modString.TextToHTML(res["fldassess"]))
      Endif
      If res["fldplan"] Then
        aCompo.Add("<u>Planning:</u> " & modString.TextToHTML(res["fldplan"]))
      Endif
      xx = xx & modString.GetHTMLListFormat(aCompo)
      If modBasic.$ShowDayMedReport = "User" Then
        xx = xx & "[User: " & res["flduserid"] & "]"
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx = xx & "[User: " & res["flduserid"] & "]"
      Endif
      xx = xx & "</p>"                       ''
      xlst.Add(xx)
      xx = ""
    Next
  Endif
  Return xlst

End

Public Function GetPatientMonitorReport(encid As String) As String[]

  Dim res As Result
  Dim xx As String
  Dim xlst As String[]
  Dim aCompo As String[]

  res = modDatabase.$syConn.Exec("select fldid,fldtime,fldproblem,fldsubjective,fldobjective,fldassess,fldplan,flduserid from tblpatplanning where fldencounterval=&1 and fldplancategory=&2" & GetLockClinicSQL(), encid, "IP Monitoring")
  xlst = New String[]
  If res.Available = True Then
    For Each res
      If modBasic.$ShowDayMedReport = "User" Then
        xx = "<p>"
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx = "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "]"
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx = "<p>" & "[" & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "]"
      Else
        xx = "<p>"
      Endif
      aCompo = New String[]
      If res["fldsubjective"] Then
        aCompo.Add("<u>Problems:</u> " & modString.TextToHTML(res["fldsubjective"]))
      Endif
      If res["fldobjective"] Then
        aCompo.Add("<u>Treatment:</u> " & modString.TextToHTML(res["fldobjective"]))
      Endif
      If res["fldassess"] Then
        aCompo.Add("<u>I/O Assessment:</u> " & modString.TextToHTML(res["fldassess"]))
      Endif
      aCompo.Add("<u>On Examination:</u>" & "<br>" & modString.GetHTMLListFormat(UniProcedureExamination(encid, res["fldid"], "IP Monitoring")))
      If res["fldproblem"] Then
        aCompo.Add("<u>Impression:</u> " & modString.TextToHTML(res["fldproblem"]))
      Endif
      If res["fldplan"] Then
        aCompo.Add("<u>Planning:</u> " & modString.TextToHTML(res["fldplan"]))
      Endif
      xx = xx & modString.GetHTMLListFormat(aCompo)
      If modBasic.$ShowDayMedReport = "User" Then
        xx = xx & "[User: " & res["flduserid"] & "]"
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx = xx & "[User: " & res["flduserid"] & "]"
      Endif
      xx = xx & "</p>"             ''
      xlst.Add(xx)
      xx = ""
    Next
  Endif
  Return xlst

End

''-------------------------- exam/test ----------------------------------------------
Public Function OPDOrderLabRequest(encid As String) As String[]

  Dim res As Result
  Dim sql As String
  Dim xx As String[]

  sql = "select flditemname,flditemqty,fldretqty,fldordtime,fldorduserid from tblpatbilling where fldencounterval=&1 and (flditemtype=&2 or flditemtype=&3) order by flditemtype"
  res = modDatabase.$syConn.Exec(sql, encid, "Diagnostic Tests", "Radio Diagnostics")
  xx = New String[]
  If res.Available = True Then
    For Each res
      If res["flditemqty"] > res["fldretqty"] Then
        If modBasic.$ShowDayMedReport = "User" Then
          xx.Add(res["flditemname"] & gb.NewLine & "[User: " & res["fldorduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date+User" Then
          xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldordtime"], gb.GeneralDate) & " ] " & res["flditemname"] & gb.NewLine & "[User: " & res["fldorduserid"] & "]")
        Else If modBasic.$ShowDayMedReport = "Date" Then
          xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldordtime"], gb.GeneralDate) & " ] " & res["flditemname"])
        Else
          xx.Add(res["flditemname"])
        Endif
      Endif
    Next
  Endif
  Return xx

End

'''-------------------------- Test and Examination Functions --------------------------------
Public Function GetChartImageExam(encid As String, exam As String) As String

  Dim sql As String
  Dim res As Result
  Dim maxval As Float
  Dim minval As Float
  Dim normval As Float
  Dim pointsArr_x As Float[]
  Dim pointsArr_y As Float[]
  Dim xx As String
  Dim xlimit As Float[]

  pointsArr_x = New Float[]
  pointsArr_y = New Float[]

  sql = "select fldrepquanti,fldtime from tblpatientexam where fldencounterval=&1 and fldhead=&2 and fldtype=&3 and fldsave=&4" & GetLockClinicSQL() & " ORDER BY fldtime"
  res = modDatabase.$syConn.Exec(sql, encid, exam, "Quantitative", True)
  If res.Available Then
    xlimit = modClinic.GetBothQuantiExamVal(exam, encid)
    minval = xlimit[0]
    maxval = xlimit[1]
    normval = modClinic.GetNormalQuantiExamVal(exam, encid)

    For Each res
      pointsArr_x.Add(res["fldtime"])
      pointsArr_y.Add(res["fldrepquanti"])
    Next
    ' xx = modChart.ClinicalChart(100, encid, pointsArr_x, pointsArr_y, maxval, minval, normval)
  Endif

  Return xx

End

Public Function GetChartImageTest(encid As String, test As String, strUnit As String) As String

  Dim sql As String
  Dim res As Result
  Dim maxval As Float
  Dim minval As Float
  Dim normval As Float
  Dim pointsArr_x As Float[]
  Dim pointsArr_y As Float[]
  Dim xx As String
  Dim xlimit As Float[]

  pointsArr_x = New Float[]
  pointsArr_y = New Float[]

  sql = "select fldid,fldencounterval,fldtime_sample,fldtestid,fldreportquanti,fldtestunit,fldmethod from tblpatlabtest where fldencounterval=&1 and fldtestid=&2 and fldtest_type=&3 and (fldstatus=&4 or fldstatus=&5) and flvisible=&6 ORDER BY fldtime_sample"
  res = modDatabase.$syConn.Exec(sql, encid, test, "Quantitative", "Reported", "Verified", "Visible")
  If res.Available Then
    xlimit = modLabTest.LabBothLimitValue(test, encid, strUnit)
    minval = xlimit[0]
    maxval = xlimit[1]
    normval = modLabTest.LabNormalValue(test, encid, strUnit)

    For Each res
      pointsArr_x.Add(res["fldtime_sample"])
      pointsArr_y.Add(modLabTest.GetLabQuantiValueAll(res["fldencounterval"], res["fldtestid"], res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], strUnit))
    Next
    ' xx = modChart.ClinicalChart(100, encid, pointsArr_x, pointsArr_y, maxval, minval, normval)
  Endif

  Return xx

End

Public Function GetChartImageRadio(encid As String, test As String) As String

  Dim sql As String
  Dim res As Result
  Dim maxval As Float
  Dim minval As Float
  Dim normval As Float
  Dim pointsArr_x As Float[]
  Dim pointsArr_y As Float[]
  Dim xx As String

  pointsArr_x = New Float[]
  pointsArr_y = New Float[]

  sql = "select fldid,fldtime_report from tblpatradiotest where fldencounterval=&1 and fldtestid=&2 and fldtest_type=&3 and (fldstatus=&4 or fldstatus=&5) and flvisible=&6 ORDER BY fldtime_report"
  res = modDatabase.$syConn.Exec(sql, encid, test, "Quantitative", "Reported", "Verified", "Visible")
  If res.Available Then
    maxval = modRadioTest.GetMaxQuantiRadioVal(test, encid)
    minval = modRadioTest.GetMinQuantiRadioVal(test, encid)
    normval = modRadioTest.RadioNormalValue(test, encid)

    For Each res
      pointsArr_x.Add(res["fldtime_report"])
      pointsArr_y.Add(modRadioTest.GetRadioTestValue(res["fldid"]))
    Next
    ' xx = modChart.ClinicalChart(100, encid, pointsArr_x, pointsArr_y, maxval, minval, normval)
  Endif

  Return xx

End

Public Function UniProcedureExamination(encid As String, itemid As Long, sType As String) As String[]

  Dim res As Result
  Dim xx As String[]
  Dim xType As String
  Dim xval As String

  res = modDatabase.$syConn.Exec("select fldtime,fldhead,fldrepquali,fldrepquanti,fldoption,flduserid from tblpatientexam where fldencounterval=&1 and fldinput=&2 and fldsave=&3" & GetLockClinicSQL(), encid, sType & ":" & CStr(itemid), True)
  xx = New String[]
  If res.Available Then
    For Each res
      xType = res["fldoption"]
      If xType = "Clinical Scale" Then
        If modBasic.$ShowScaleMedFormat = "GroupWise" Then
          xval = modString.GetJSONToDualHTMLTable(Trim(res["fldrepquali"]))
        Else
          xval = CStr(res["fldrepquanti"])
        Endif
      Else If xType = "Left and Right" Then
        xval = modString.GetJSONToDualHTMLTable(Trim(res["fldrepquali"]))
      Else
        xval = Trim(res["fldrepquali"])
      Endif
      If modBasic.$ShowDayMedReport = "User" Then
        xx.Add(res["fldhead"] & " : " & xval & gb.NewLine & "[User: " & res["flduserid"] & "]")
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & res["fldhead"] & ": " & xval & gb.NewLine & "[User: " & res["flduserid"] & "]")
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xx.Add("[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & res["fldhead"] & ": " & xval)
      Else
        xx.Add(res["fldhead"] & " : " & xval)
      Endif
    Next
  Endif
  Return xx

End

Public Function DeliveryReportbyMother(encid As String) As String[]

  Dim res As Result
  Dim xx As String
  Dim xlst As String[]

  xlst = New String[]
  res = modDatabase.$syConn.Exec("select fldid,flddelresult,flddeltype,fldbabypatno,flddeltime,flddelwt,fldbabyref from tblconfinement where fldencounterval=&1", encid)
  If res.Available Then
    For Each res
      xx = "<p>"
      xx = xx & "Delivery Date: " & modReportVar.GetDateTimeReport(res["flddeltime"], gb.GeneralDate) & "<br>"
      xx = xx & "Delivery Type: " & res["flddeltype"] & "<br>"
      xx = xx & "Delivery Result: " & res["flddelresult"] & "<br>"
      If res["fldbabypatno"] Then
        xx = xx & "Baby Birth Code: " & res["fldbabyref"] & "<br>"
        xx = xx & "Baby Patient No: " & res["fldbabypatno"] & "<br>"
        xx = xx & "Baby Gender: " & modPatient.PatientGenderByPatNo(res["fldbabypatno"]) & "<br>"
        xx = xx & "Birth Weight: " & res["flddelwt"] & " grams" & "<br>"
      Endif
      xx = xx & "</p>"
      xlst.Add(xx)
      xx = ""
    Next
  Endif
  Return xlst

End

''-------------------------Laboratory -------------------------------
Public Function GetlaboratoryHTMLProfile(encid As String, testList As String[], sUnit As String) As String

  Dim aList As String[]
  Dim categList As String[]
  Dim xcatList As String[]
  Dim xcateg As String

  Dim bList As String[]
  Dim xtest As String
  Dim asx As String[]

  Dim stObservation As String
  Dim xtable As String

  aList = New String[]
  categList = New String[]
  For Each xtest In testList
    xcateg = modFixLab.GetLabTestCategory(xtest)
    If Not xcateg Then
      xcateg = "Null"
    Endif
    categList.Add(xcateg)
    aList.Add(xcateg & "|" & xtest)
  Next
  xcatList = modString.BinaryDistinctStringArray(categList)

  stObservation = ""
  For Each xcateg In xcatList

    bList = New String[]
    For Each xtest In aList
      asx = Split(xtest, "|")
      If asx[0] = xcateg Then
        bList.Add(asx[1])
      Endif
    Next

    xtable = ""
    If modBasic.$ShowQuantiMedReport = "AllValues" Then
      xtable = GetCompleteTestByEnc(encid, bList, sUnit, False)
    Else If modBasic.$ShowQuantiMedReport = "Chart" Then
      xtable = GetCompleteTestByEnc(encid, bList, sUnit, True)
    Else
      xtable = GetLaboratoryHTMLTable(encid, bList, sUnit, modBasic.$ShowQualiMedReport)
    Endif
    If xcateg = "Null" Then
      stObservation = stObservation & "<b>" & ". . ." & "</b>" & gb.NewLine
    Else
      stObservation = stObservation & "<b>" & xcateg & "</b>" & gb.NewLine
    Endif
    stObservation = stObservation & xtable & "<br>"

  Next

  Return stObservation

End

Public Function GetLaboratoryHTMLTable(encid As String, testList As String[], sUnit As String, sType As String) As String

  Dim xx As String
  Dim xtest As String
  Dim asx As String[]
  Dim bsx As String[]

  xx = modRepoTemplete.HTMLTableSyntax()
  If sType = "First-LastVal" Then
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine

    xx = xx & "<td class='reportmid_table_h'>" & "Specimen" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "First Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

    xx = xx & "<td class='reportmid_table_h'>" & "Specimen" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "Last Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

  Else If sType = "FitsrVal" Then
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "Specimen" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "First Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

  Else
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "Specimen" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "Last Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif
  Endif
  xx = xx & "</tr>" & gb.NewLine

  For Each xtest In testList
    xx = xx & "<tr>" & gb.NewLine
    If sType = "First-LastVal" Then
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      asx = modLabTest.GetLabotarotyValuePosition(encid, xtest, sUnit, "FitsrVal")
      xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      xx = xx & "<td>" & modString.TextToHTML(asx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & asx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & asx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
      Endif
      asx.Clear()

      bsx = modLabTest.GetLabotarotyValuePosition(encid, xtest, sUnit, "LastVal")
      xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      xx = xx & "<td>" & modString.TextToHTML(bsx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & bsx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & bsx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
      Endif
      bsx.Clear()

    Else If sType = "FitsrVal" Then
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      asx = modLabTest.GetLabotarotyValuePosition(encid, xtest, sUnit, "FitsrVal")
      xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      xx = xx & "<td>" & modString.TextToHTML(asx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & asx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & asx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
      Endif
      asx.Clear()

    Else
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      bsx = modLabTest.GetLabotarotyValuePosition(encid, xtest, sUnit, "LastVal")
      xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      xx = xx & "<td>" & modString.TextToHTML(bsx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & bsx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & bsx[3] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
      Endif
      bsx.Clear()

    Endif
    xx = xx & "</tr>" & gb.NewLine
  Next
  xx = xx & "</table>" & gb.NewLine

  Return xx

End

Private Function GetCompleteTestByEnc(encid As String, testList As String[], sUnit As String, withChart As Boolean) As String

  Dim xx As String[]
  Dim res As Result
  Dim xval As String
  Dim i As Integer
  Dim strTest As String
  Dim xtable As String
  Dim xall As String
  Dim xcaption As String

  xall = ""
  For Each strTest In testList
    xcaption = modFixLab.GetLabTestCaption(strTest)
    If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
      xall = "****"
    Else
      If modFixLab.GetLabTestType(strTest) = "Quantitative" And If withChart = True Then
        xall = xall & strTest & gb.NewLine & modString.GetImageForHTML(GetChartImageTest(encid, strTest, sUnit)) & "<br>"

      Else

        i = 1
        res = modDatabase.$syConn.Exec("select fldid,fldencounterval,fldtime_sample,fldsampletype,fldtestid,fldreportquali,fldtest_type,fldreportquanti,fldtestunit,fldmethod from tblpatlabtest where fldencounterval=&1 and fldtestid=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5", encid, strTest, "Reported", "Verified", "Visible")
        xx = New String[]
        If res.Available Then
          xx.Add(strTest & " [Spec: " & res["fldsampletype"] & "]")
          For Each res

            If res["fldtest_type"] = "Quantitative" Then
              xval = CStr(modLabTest.GetLabQuantiValueAll(encid, res["fldtestid"], res["fldreportquanti"], res["fldtestunit"], res["fldmethod"], sUnit))
            Else
              If res["fldreportquali"] Then
                xval = Trim(res["fldreportquali"])
              Else
                xval = ""
              Endif
              xtable = modLabTest.GetLabSubTestQuali(res["fldencounterval"], res["fldtestid"], res["fldid"])
              If xtable Then
                xval = modString.TextToHTML(xval & xtable)
              Endif
            Endif

            If modBasic.$SHowDayDiagnosticReport = "User" Then
            Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
            Else If modBasic.$SHowDayDiagnosticReport = "None" Then
              xval = CStr(i) & ".. " & modString.HTMLBlankSpace(3) & xval
            Else
              xval = CStr(i) & ".. " & modString.HTMLBlankSpace(3) & "[ " & modReportVar.GetDateTimeReport(res["fldtime_sample"], gb.GeneralDate) & " ] " & " : " & xval
            Endif
            xx.Add(xval)

            i = i + 1
          Next
        Endif
        xall = xall & xx.Join(gb.NewLine) & "<br>" & "<br>"

      Endif
    Endif
  Next

  Return xall

End

''----------------------- Examination ---------------------------------------------
Private Function PaientSelExamNameArray(encid As String, sType As String) As String[]

  Dim res As Result
  Dim sql As String
  Dim xx As String[]

  If sType = "Non-Vital" Then
    sql = "select distinct(fldhead) as col from tblpatientexam where fldencounterval=&1 and fldsave=&2 and fldhead not in(select fldexamid from tblcompexam where (fldcomp=&3 or fldcomp=&4) and fldcategory<>&5)" & GetLockClinicSQL() ''all except vital
    res = modDatabase.$syConn.Exec(sql, encid, True, modBasic.$compID, "%", "Essential Examinations")
  Else
    sql = "select distinct(fldhead) as col from tblpatientexam where fldencounterval=&1 and fldsave=&2 and fldinput like &3" & GetLockClinicSQL() '''for specific exam type
    res = modDatabase.$syConn.Exec(sql, encid, True, sType)
  Endif
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

Public Function GetExaminationHTMLProfile(encid As String, examList As String[]) As String

  Dim aList As String[]
  Dim categList As String[]
  Dim xcatList As String[]
  Dim xcateg As String

  Dim bList As String[]
  Dim xtest As String
  Dim asx As String[]

  Dim stObservation As String
  Dim xtable As String

  aList = New String[]
  categList = New String[]
  For Each xtest In examList
    xcateg = modFixClinic.GetExaminationCategory(xtest)
    If Not xcateg Then
      xcateg = "Null"
    Endif
    categList.Add(xcateg)
    aList.Add(xcateg & "|" & xtest)
  Next
  xcatList = modString.BinaryDistinctStringArray(categList)

  stObservation = ""
  For Each xcateg In xcatList

    bList = New String[]
    For Each xtest In aList
      asx = Split(xtest, "|")
      If asx[0] = xcateg Then
        bList.Add(asx[1])
      Endif
    Next

    xtable = ""
    If modBasic.$ShowQuantiMedReport = "AllValues" Then
      xtable = GetCompleteExamByEnc(encid, bList, False)
    Else If modBasic.$ShowQuantiMedReport = "Chart" Then
      xtable = GetCompleteExamByEnc(encid, bList, True)
    Else
      xtable = GetExamClinHTMLTable(encid, bList, modBasic.$ShowQuantiMedReport)
    Endif
    If xcateg = "Null" Then
      stObservation = stObservation & "<b>" & ". . ." & "</b>" & gb.NewLine
    Else
      stObservation = stObservation & "<b>" & xcateg & "</b>" & gb.NewLine
    Endif
    stObservation = stObservation & xtable & "<br>"

  Next

  Return stObservation

End

Private Function GetExamClinHTMLTable(encid As String, testList As String[], sType As String) As String

  Dim xx As String
  Dim xtest As String
  Dim asx As String[]
  Dim bsx As String[]

  xx = modRepoTemplete.HTMLTableSyntax()
  If sType = "First-LastVal" Then
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine

    xx = xx & "<td class='reportmid_table_h'>" & "First Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

    xx = xx & "<td class='reportmid_table_h'>" & "Last Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

  Else If sType = "FitsrVal" Then
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "First Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

  Else
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "Last Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif
  Endif
  xx = xx & "</tr>" & gb.NewLine

  For Each xtest In testList
    xx = xx & "<tr>" & gb.NewLine
    If sType = "First-LastVal" Then
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      asx = modClinic.GetExamClinValuePosition(encid, xtest, "FitsrVal")
      xx = xx & "<td>" & modString.TextToHTML(asx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
      Endif
      asx.Clear()

      bsx = modClinic.GetExamClinValuePosition(encid, xtest, "LastVal")
      xx = xx & "<td>" & modString.TextToHTML(bsx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
      Endif
      bsx.Clear()

    Else If sType = "FitsrVal" Then
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      asx = modClinic.GetExamClinValuePosition(encid, xtest, "FitsrVal")
      xx = xx & "<td>" & modString.TextToHTML(asx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
      Endif
      asx.Clear()

    Else
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      bsx = modClinic.GetExamClinValuePosition(encid, xtest, "LastVal")
      xx = xx & "<td>" & modString.TextToHTML(bsx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
      Endif
      bsx.Clear()

    Endif
    xx = xx & "</tr>" & gb.NewLine
  Next
  xx = xx & "</table>" & gb.NewLine

  Return xx

End

Private Function GetCompleteExamByEnc(encid As String, examList As String[], withChart As Boolean) As String

  Dim xx As String[]
  Dim sql As String
  Dim res As Result
  Dim i As Integer
  Dim xtable As String
  Dim xType As String
  Dim xval As String
  Dim strTest As String
  Dim xall As String

  xall = ""
  For Each strTest In examList
    If modFixClinic.GetExaminationType(strTest) = "Quantitative" And If withChart = True Then
      xall = xall & strTest & gb.NewLine & modString.GetImageForHTML(GetChartImageExam(encid, strTest)) & "<br>"

    Else

      i = 1
      sql = "select fldid,fldtime,fldhead,fldrepquali,fldrepquanti,fldtype,fldcomp,fldoption from tblpatientexam where fldencounterval=&1 and fldhead=&2 and fldsave=&3 and fldinput=&4" & GetLockClinicSQL()
      res = modDatabase.$syConn.Exec(sql, encid, strTest, True, "Examination")
      xx = New String[]
      If res.Available Then
        xx.Add(strTest & " [Dept: " & res["fldcomp"] & "]")
        For Each res

          If res["fldtype"] = "Quantitative" Then
            xval = CStr(res["fldrepquanti"])
          Else
            If res["fldrepquali"] Then

              xType = res["fldoption"]
              If xType = "Clinical Scale" Then
                If modBasic.$ShowScaleMedFormat = "GroupWise" Then
                  xval = modString.GetJSONToDualHTMLTable(Trim(res["fldrepquali"]))
                Else
                  xval = CStr(res["fldrepquanti"])
                Endif
              Else If xType = "Left and Right" Then
                xval = modString.GetJSONToDualHTMLTable(Trim(res["fldrepquali"]))
              Else
                xval = Trim(res["fldrepquali"])
              Endif
            Else
              xval = ""
            Endif
            xtable = modClinic.GetSubExamQualiList(encid, res["fldoption"], res["fldid"])
            If xtable Then
              xval = xval & xtable
            Endif
          Endif

          If modBasic.$SHowDayDiagnosticReport = "User" Then
          Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
          Else If modBasic.$SHowDayDiagnosticReport = "None" Then
            xval = CStr(i) & ".. " & modString.HTMLBlankSpace(3) & xval
          Else
            xval = CStr(i) & ".. " & modString.HTMLBlankSpace(3) & "[ " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & " ] " & " : " & xval
          Endif
          xx.Add(xval)

          i = i + 1
        Next
      Endif
      xall = xall & xx.Join(gb.NewLine) & "<br>" & "<br>"

    Endif
  Next
  Return xall

End

''------------------------------------- Radiology ---------------------------------------------
Public Function GetRadiologyHTMLProfile(encid As String, examList As String[]) As String

  Dim aList As String[]
  Dim categList As String[]
  Dim xcatList As String[]
  Dim xcateg As String

  Dim bList As String[]
  Dim xtest As String
  Dim asx As String[]

  Dim stObservation As String
  Dim xtable As String

  aList = New String[]
  categList = New String[]
  For Each xtest In examList
    xcateg = modFixRadio.GetRadioTestCategory(xtest)
    If Not xcateg Then
      xcateg = "Null"
    Endif
    categList.Add(xcateg)
    aList.Add(xcateg & "|" & xtest)
  Next
  xcatList = modString.BinaryDistinctStringArray(categList)

  stObservation = ""
  For Each xcateg In xcatList

    bList = New String[]
    For Each xtest In aList
      asx = Split(xtest, "|")
      If asx[0] = xcateg Then
        bList.Add(asx[1])
      Endif
    Next

    xtable = ""
    If modBasic.$ShowQuantiMedReport = "AllValues" Then
      xtable = GetCompleteRadioByEnc(encid, bList, False)
    Else If modBasic.$ShowQuantiMedReport = "Chart" Then
      xtable = GetCompleteRadioByEnc(encid, bList, True)
    Else
      xtable = GetRadioDiagnoHTMLTable(encid, bList, modBasic.$ShowQualiMedReport)
    Endif
    If xcateg = "Null" Then
      stObservation = stObservation & "<b>" & ". . ." & "</b>" & gb.NewLine
    Else
      stObservation = stObservation & "<b>" & xcateg & "</b>" & gb.NewLine
    Endif
    stObservation = stObservation & xtable & "<br>"

  Next

  Return stObservation

End

Private Function GetRadioDiagnoHTMLTable(encid As String, testList As String[], sType As String) As String

  Dim xx As String
  Dim xtest As String
  Dim asx As String[]
  Dim bsx As String[]

  xx = modRepoTemplete.HTMLTableSyntax()
  If sType = "First-LastVal" Then
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine

    xx = xx & "<td class='reportmid_table_h'>" & "First Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

    xx = xx & "<td class='reportmid_table_h'>" & "Last Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

  Else If sType = "FitsrVal" Then
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "First Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif

  Else
    xx = xx & "<td class='reportmid_table_h'>" & "Variable" & "</td>" & gb.NewLine
    xx = xx & "<td class='reportmid_table_h'>" & "Last Value" & "</td>" & gb.NewLine
    If modBasic.$SHowDayDiagnosticReport = "User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
      xx = xx & "<td class='reportmid_table_h'>" & "User" & "</td>" & gb.NewLine
    Else If modBasic.$SHowDayDiagnosticReport = "None" Then
    Else
      xx = xx & "<td class='reportmid_table_h'>" & "Date" & "</td>" & gb.NewLine
    Endif
  Endif
  xx = xx & "</tr>" & gb.NewLine

  For Each xtest In testList
    xx = xx & "<tr>" & gb.NewLine
    If sType = "First-LastVal" Then
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      asx = modRadioTest.GetRadioValuePosition(encid, xtest, "FitsrVal")
      xx = xx & "<td>" & modString.TextToHTML(asx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
      Endif
      asx.Clear()

      bsx = modRadioTest.GetRadioValuePosition(encid, xtest, "LastVal")
      xx = xx & "<td>" & modString.TextToHTML(bsx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
      Endif
      bsx.Clear()

    Else If sType = "FitsrVal" Then
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      asx = modRadioTest.GetRadioValuePosition(encid, xtest, "FitsrVal")
      xx = xx & "<td>" & modString.TextToHTML(asx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & asx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & asx[0] & "</td>" & gb.NewLine
      Endif
      asx.Clear()

    Else
      xx = xx & "<td>" & xtest & "</td>" & gb.NewLine
      bsx = modRadioTest.GetRadioValuePosition(encid, xtest, "LastVal")
      xx = xx & "<td>" & modString.TextToHTML(bsx[1]) & "</td>" & gb.NewLine
      If modBasic.$SHowDayDiagnosticReport = "User" Then
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
        xx = xx & "<td>" & bsx[2] & "</td>" & gb.NewLine
      Else If modBasic.$SHowDayDiagnosticReport = "None" Then
      Else
        xx = xx & "<td>" & bsx[0] & "</td>" & gb.NewLine
      Endif
      bsx.Clear()

    Endif
    xx = xx & "</tr>" & gb.NewLine
  Next
  xx = xx & "</table>" & gb.NewLine

  Return xx

End

Private Function GetCompleteRadioByEnc(encid As String, TestList As String[], withChart As Boolean) As String[]

  Dim xx As String[]
  Dim sql As String
  Dim res As Result
  Dim xval As String
  Dim i As Integer
  Dim xtable As String
  Dim strTest As String
  Dim xall As String
  Dim xcaption As String

  xall = ""
  For Each strTest In TestList
    xcaption = modFixRadio.GetRadiotestCaption(strTest)
    If modBasic.$SuperUser = False And If xcaption = "$Encryption" Then
      xall = "****"
    Else
      If modFixRadio.GetRadioTestType(strTest) = "Quantitative" And If withChart = True Then
        xall = xall & strTest & gb.NewLine & modString.GetImageForHTML(GetChartImageRadio(encid, strTest)) & "<br>"

      Else

        i = 1
        sql = "select fldid,fldtime_report,fldreportquanti,fldreportquali,fldtest_type,fldtestid from tblpatradiotest where fldencounterval=&1 and fldtestid=&2 and (fldstatus=&3 or fldstatus=&4) and flvisible=&5"
        res = modDatabase.$syConn.Exec(sql, encid, strTest, "Reported", "Verified", "Visible")
        xx = New String[]
        If res.Available Then
          xx.Add(strTest)
          For Each res

            If res["fldtest_type"] = "Quantitative" Then
              xval = CStr(res["fldreportquanti"])
            Else
              If res["fldrepquali"] Then
                xval = Trim(res["fldreportquali"])
              Else
                xval = ""
              Endif
              xtable = modRadioTest.GetRadioSubTestQuali(encid, res["fldtestid"], res["fldid"])
              If xtable Then
                xval = modString.TextToHTML(xval & xtable)
              Endif
            Endif

            If modBasic.$SHowDayDiagnosticReport = "User" Then
            Else If modBasic.$SHowDayDiagnosticReport = "Date+User" Then
            Else If modBasic.$SHowDayDiagnosticReport = "None" Then
              xval = CStr(i) & ".. " & modString.HTMLBlankSpace(3) & xval
            Else
              xval = CStr(i) & ".. " & modString.HTMLBlankSpace(3) & "[ " & modReportVar.GetDateTimeReport(res["fldtime_report"], gb.GeneralDate) & " ] " & " : " & xval
            Endif
            xx.Add(xval)

            i = i + 1
          Next
        Endif
        xall = xall & xx.Join(gb.NewLine) & "<br>" & "<br>"

      Endif
    Endif
  Next
  Return xall

End

''-------------------------- Recommended Examinations -----------------------------
Public Function GetRecommendedExam(encid As String, sType As String) As String

  Dim res As Result
  Dim catlst As String[]
  Dim xcateg As String

  Dim res1 As Result
  Dim xfull As String
  Dim xType As String
  Dim xquali As String

  Dim aColl As Collection
  Dim aVar As Variant[]
  Dim xHead As String[]

  If modBasic.$ShowDayMedReport = "User" Then
    xHead = ["Variable", "Observation", "User"]
  Else If modBasic.$ShowDayMedReport = "Date+User" Then
    xHead = ["Variable", "Observation", "DateTime", "User"]
  Else If modBasic.$ShowDayMedReport = "Date" Then
    xHead = ["Variable", "Observation", "DateTime"]
  Else
    xHead = ["Variable", "Observation"]
  Endif

  xfull = ""
  catlst = modMedicine.FillClinicalSubClass(sType)
  If catlst And If catlst.Count Then
    For Each xcateg In catlst

      res = modDatabase.$syConn.Exec("select distinct(fldinput) as fldinput,flduserid from tblpatientexam where fldserialval like &1 and fldencounterval=&2 and fldmethod=&3 and fldsave=&4" & GetLockClinicSQL(), "%", encid, xcateg, True)
      If res.Available Then
        For Each res
          xfull = xfull & "<li>" & xcateg & " : " & res["fldinput"] & "</li>"
          aVar = New Variant[]

          res1 = modDatabase.$syConn.Exec("select fldid,fldtime,fldhead,fldrepquali,fldrepquanti,fldtype,fldoption,flduserid from tblpatientexam where fldserialval like &1 and fldencounterval=&2 and fldmethod=&3 and fldinput=&4 and fldsave=&5" & GetLockClinicSQL(), "%", encid, xcateg, res["fldinput"], True)                                            ''
          If res1.Available Then
            For Each res1
              aColl = New Collection
              aColl.Add(res1["fldhead"], CStr(0))
              If res1["fldtype"] = "Quantitative" Then
                aColl.Add(CStr(res1["fldrepquanti"]) & Space(1) & modClinic.GetExamUnit(res1["fldhead"], encid), CStr(1))
              Else
                xType = res1["fldoption"]
                If xType = "Clinical Scale" Then
                  If modBasic.$ShowScaleMedFormat = "GroupWise" Then
                    xquali = modString.GetJSONToDualHTMLTable(Trim(res1["fldrepquali"]))
                  Else
                    xquali = CStr(res1["fldrepquanti"])
                  Endif
                Else If xType = "Left and Right" Then
                  xquali = modString.GetJSONToDualHTMLTable(Trim(res1["fldrepquali"]))
                Else
                  xquali = Trim(res1["fldrepquali"])
                Endif
                aColl.Add(xquali, CStr(1))
              Endif

              If modBasic.$ShowDayMedReport = "User" Then
                aColl.Add(res["flduserid"])
              Else If modBasic.$ShowDayMedReport = "Date+User" Then
                aColl.Add(modReportVar.GetDateTimeReport(res1["fldtime"], gb.GeneralDate), CStr(2))
                aColl.Add(res["flduserid"])
              Else If modBasic.$ShowDayMedReport = "Date" Then
                aColl.Add(modReportVar.GetDateTimeReport(res1["fldtime"], gb.GeneralDate), CStr(2))
              Endif
              aVar.Add(aColl)
            Next
          Endif

          xfull = xfull & modString.GetRichTableStringFromVariant(xHead, aVar)
        Next
      Endif

      xfull = xfull & "<br>"
    Next

  Else
    xfull = ""
  Endif

  Return xfull

End

''---------------------------- OPD Findings -----------------------------
Public Function GetSelectFindingReport(encid As String, sType As String) As String[]

  Dim xList As String[]
  Dim xname As String
  Dim bsx As String[]
  Dim xfinal As String[]

  xfinal = New String[]
  xlist = PaientSelExamNameArray(encid, sType)
  For Each xname In xList
    bsx = modClinic.GetExamClinValuePosition(encid, xname, "LastVal")
    If bsx And If bsx[1] Then
      If modBasic.$ShowDayMedReport = "User" Then
        xfinal.Add(xname & " : " & bsx[1] & gb.NewLine & "[User: " & bsx[2] & "]")
      Else If modBasic.$ShowDayMedReport = "Date+User" Then
        xfinal.Add("[" & bsx[0] & "] " & xname & " : " & bsx[1] & gb.NewLine & "[User: " & bsx[2] & "]")
      Else If modBasic.$ShowDayMedReport = "Date" Then
        xfinal.Add("[" & bsx[0] & "] " & xname & " : " & bsx[1])
      Else
        xfinal.Add(xname & " : " & bsx[1])
      Endif
    Endif
  Next

  Return xfinal

End

Public Function GetCourseOfTreatment(encid As String) As String[]

  Dim res As Result
  Dim res1 As Result
  Dim xx As String[]
  Dim xcom As String

  xx = New String[]
  res = modDatabase.$syConn.Exec("select fldhead,fldtime,fldcomment from tblpatientdate where fldencounterval=&1", encid)
  If res.Available Then
    For Each res
      xcom = ""
      If res["fldcomment"] Then
        xcom = " (" & res["fldcomment"] & ")"
      Endif
      xx.Add("Date: " & modReportVar.GetDateTimeReport(res["fldtime"], gb.GeneralDate) & "::" & res["fldhead"] & xcom)
    Next
  Endif

  res1 = modDatabase.$syConn.Exec("select fldreferto,fldfollowdate from tblencounter where fldencounterval=&1", encid)
  If res.Available Then
    If res["fldreferto"] Then
      If res["fldfollowdate"] Then
        xx.Add("Refer To: " & res["fldreferto"] & " [" & modReportVar.GetDateTimeReport(res["fldfollowdate"], gb.GeneralDate) & " ]")
      Else
        xx.Add("Refer To: " & res["fldreferto"])
      Endif
    Else
      If res["fldfollowdate"] Then
        xx.Add("Follow-up: " & modReportVar.GetDateTimeReport(res["fldfollowdate"], gb.GeneralDate))
      Endif
    Endif
  Endif

  Return xx

End

Public Function GetCustomProcedureMajor(encid As String, sReport As String) As String[]

  Dim res As Result
  Dim aList As String[]
  Dim xx As String

  aList = New String[]
  res = modDatabase.$myConn.Exec("select fldid,fldencounterval,fldnewdate,flditem,flddetail,fldreportquali from tblpatgeneral where fldencounterval=&1 and fldinput=&2 and fldreportquali=&3", encid, "Procedures", "Done")
  If res.Available = True Then
    For Each res

      xx = "<b>" & res["flditem"] & "</b>" & gb.NewLine
      xx = xx & modRepoTemplete.HTMLTableSyntax()
      If modSettings.ShowSettingFromFIle(sReport & "/" & "General:Status") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Status" & "</td><td>" & modReportVar.GetDateTimeReport(res["fldnewdate"], gb.GeneralDate) & " : " & res["fldreportquali"] & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "General:Personnel") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Personnel" & "</td><td>" & modString.TextToHTML(modPatPatho.GetUserAllUniProcedure(res["fldencounterval"], res["fldid"])) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "General:Summary") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Summary" & "</td><td>" & res["flddetail"] & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Pre-Operative:Indication") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Pre-Operative:Indication" & "</td><td>" & modPatPatho.GetProcedureItemValue(res["fldencounterval"], res["fldid"], "Pre-Operative Indication") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Pre-Operative:Discussion") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Pre-Operative:Discussion" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Pre-Operative Discussion") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Pre-Operative:Discussion Panel") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Pre-Operative:Discussion Panel" & "</td><td>" & modString.GetHTMLListFormat(modPatPatho.GetDiscusPanels(res["fldencounterval"], res["fldid"])) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Pre-Operative:Examination") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Pre-Operative:Examination" & "</td><td>" & modString.GetHTMLListFormat(modPatReports.UniProcedureExamination(res["fldencounterval"], res["fldid"], "Pre-Operative Exam")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Pre-Operative:Medications") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Pre-Operative:Medications" & "</td><td>" & modString.GetHTMLListFormat(modPharmacy.UniProcedureMedString(res["fldencounterval"], res["fldid"], "Pre-Operative")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Pre-Operative:Note") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Pre-Operative:Note" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Pre-Operative Note") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Components") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Procedure:Components" & "</td><td>" & modString.GetHTMLListFormat(modPatPatho.GetComponentProcedure(res["fldencounterval"], res["fldid"])) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Parameters") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Procedure:Parameters" & "</td><td>" & modString.GetHTMLListFormat(modPatReports.UniProcedureExamination(res["fldencounterval"], res["fldid"], "Operative Exam")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Medications") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Procedure:Medications" & "</td><td>" & modString.GetHTMLListFormat(modPharmacy.UniProcedureMedString(res["fldencounterval"], res["fldid"], "Procedure")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Incision") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Incision" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Incision") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Findings") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Findings" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Findings") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Proedures") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Proedures" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Proedures") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Closure") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Closure" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Closure") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Procedure:Note") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Procedure:Note" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Operation Note") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Anaesthesia:Technique") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Anaesthesia:Technique" & "</td><td>" & modPatPatho.GetProcedureItemValue(res["fldencounterval"], res["fldid"], "Anaesthesia Technique") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Anaesthesia:Parameters") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Anaesthesia:Parameters" & "</td><td>" & modString.GetHTMLListFormat(modPatReports.UniProcedureExamination(res["fldencounterval"], res["fldid"], "Anaesthesia")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Anaesthesia:Medications") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Anaesthesia:Medications" & "</td><td>" & modString.GetHTMLListFormat(modPharmacy.UniProcedureMedString(res["fldencounterval"], res["fldid"], "Anaesthesia")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Anaesthesia:Note") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Anaesthesia:Note" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Anaesthesia Note") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Post-Operative:Indication") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Post-Operative:Indication" & "</td><td>" & modPatPatho.GetProcedureItemValue(res["fldencounterval"], res["fldid"], "Post-Operative Indication") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Post-Operative:Examination") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Post-Operative:Examination" & "</td><td>" & modString.GetHTMLListFormat(modPatReports.UniProcedureExamination(res["fldencounterval"], res["fldid"], "Post-Operative Exam")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Post-Operative:Medications") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Post-Operative:Medications" & "</td><td>" & modString.GetHTMLListFormat(modPharmacy.UniProcedureMedString(res["fldencounterval"], res["fldid"], "Post-Operative")) & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      If modSettings.ShowSettingFromFIle(sReport & "/" & "Post-Operative:Note") = "Yes" Then
        xx = xx & "<tr>" & gb.NewLine
        xx = xx & "<td>" & "Post-Operative:Note" & "</td><td>" & modPatPatho.GetUniProcedureDetail(res["fldencounterval"], res["fldid"], "Post-Operative Note") & "</td>"
        xx = xx & "</tr>" & gb.NewLine
      Endif
      xx = xx & "</table>"

      aList.Add(xx)

    Next
  Endif

  Return aList

End

''==================== Archived Reports =======================
Public Sub GetArchiveReportResult(sType As String, xpatno As String)

  Dim xList As String[]
  Dim xFldList As String[]
  Dim res As Result
  Dim rex As Result
  Dim myRes As New MyResult
  Dim hForm As FMyRequest
  Dim i As Integer

  If xpatno Then
    If MMain.$WebEntry = True Then
      xList = ["fldrepoid", "fldtime", "fldencounterval", "fldtitle", "flddetail", "fldsave", "fldlink", "fldencounterval", "fldid"]
    Else
      xList = ["fldid", "fldtime", "fldencounterval", "fldtitle", "flddetail", "fldsave", "fldlink", "fldencounterval", "fldid"]
    Endif

    xFldList = New String[]
    xFldList.Insert(xList)
    xFldList.Add(Quote("tblpatreport") & " as tblname")
    For i = 0 To xList.Count - 1
      xFldList[i] = "t1." & xFldList[i]
    Next
    If sType = "%" Then
      res = modDatabase.$syConn.Exec("select " & xFldList.Join(",") & " from tblpatreport as t1 where t1.fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and (t1.fldcateg<>&2 and t1.fldcateg<>&3 and t1.fldcateg<>&4) and (t1.flvisible=&5 or t1.flvisible IS NULL) ORDER BY t1.fldtime DESC", xpatno, "PatientOrderSheet", "Diagnostic Tests Log", "Radio Diagnostics Log", "Visible")
    Else
      res = modDatabase.$syConn.Exec("select " & xFldList.Join(",") & " from tblpatreport as t1 where t1.fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and t1.fldcateg like &2 and (t1.flvisible=&3 or t1.flvisible IS NULL) ORDER BY t1.fldtime DESC", xpatno, sType, "Visible")
    Endif
    myRes.AddResult(res)

    rex = modDatabase.$syConn.Exec("select fldpatreport from tblfisclosing where (fldstate=&1 or fldstate IS NULL)", "Active")
    If rex.Available Then
      For Each rex
        If rex["fldpatreport"] = "tblpatreport" Then
        Else
          xFldList = New String[]
          xFldList.Insert(xList)
          xFldList.Add(Quote(rex["fldpatreport"]) & " as tblname")
          For i = 0 To xList.Count - 1
            xFldList[i] = "t1." & xFldList[i]
          Next
          If sType = "%" Then
            res = modDatabase.$syConn.Exec(Subst("select " & xFldList.Join(",") & " from &1", rex["fldpatreport"]) & " as t1 where t1.fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and (t1.fldcateg<>&2 and t1.fldcateg<>&3 and t1.fldcateg<>&4) and (t1.flvisible=&5 or t1.flvisible IS NULL) ORDER BY t1.fldtime DESC", xpatno, "PatientOrderSheet", "Diagnostic Tests Log", "Radio Diagnostics Log", "Visible")
          Else
            res = modDatabase.$syConn.Exec(Subst("select " & xFldList.Join(",") & " from &1", rex["fldpatreport"]) & " as t1 where t1.fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and t1.fldcateg like &2 and (t1.flvisible=&3 or t1.flvisible IS NULL) ORDER BY t1.fldtime DESC", xpatno, sType, "Visible")
          Endif
          myRes.AddResult(res)

        Endif
      Next
    Endif

    hForm = New FMyRequest(myRes, sType, "ArchivedReports", False)
    hForm.ShowModal
  Endif

End

Public Sub GetRepoArchiveReportResult(sType As String, xpatno As String)

  Dim res As Result
  Dim hForm As FRequest
  Dim sCon As Connection
  Dim xCon As Connection

  If xpatno Then
    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      sCon = modDatabase.$myConn
      xCon = modDatabase.$syConn
      modRepository.TransferRemoConn(xpatno)
      If MMain.$WebEntry = True Then
        If sType = "%" Then
          res = modDatabase.$syConn.Exec("select fldrepoid,fldtime,fldencounterval,fldtitle,flddetail,fldsave,fldlink,fldencounterval,fldhospcode,fldrepoid from tblpatreport where fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and (fldcateg<>&2 and fldcateg<>&3 and fldcateg<>&4) and (flvisible=&5 or flvisible IS NULL) ORDER BY fldtime DESC", xpatno, "PatientOrderSheet", "Diagnostic Tests Log", "Radio Diagnostics Log", "Visible")
        Else
          res = modDatabase.$syConn.Exec("select fldrepoid,fldtime,fldencounterval,fldtitle,flddetail,fldsave,fldlink,fldencounterval,fldhospcode,fldrepoid from tblpatreport where fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and fldcateg like &2 and (flvisible=&3 or flvisible IS NULL) ORDER BY fldtime DESC", xpatno, sType, "Visible")
        Endif
      Else
        If sType = "%" Then
          res = modDatabase.$syConn.Exec("select fldid,fldtime,fldencounterval,fldtitle,flddetail,fldsave,fldlink,fldencounterval,fldcomp,fldid from tblpatreport where fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and (fldcateg<>&2 and fldcateg<>&3 and fldcateg<>&4) and (flvisible=&5 or flvisible IS NULL) ORDER BY fldtime DESC", xpatno, "PatientOrderSheet", "Diagnostic Tests Log", "Radio Diagnostics Log", "Visible")
        Else
          res = modDatabase.$syConn.Exec("select fldid,fldtime,fldencounterval,fldtitle,flddetail,fldsave,fldlink,fldencounterval,fldcomp,fldid from tblpatreport where fldencounterval in(select fldencounterval from tblencounter where fldpatientval=&1) and fldcateg like &2 and (flvisible=&3 or flvisible IS NULL) ORDER BY fldtime DESC", xpatno, sType, "Visible")
        Endif
      Endif
      hForm = New FRequest(res, ("Archive History"), "ArchivedRepoReports", False)
      hForm.ShowModal
      modDatabase.$myConn = sCon
      modDatabase.$syConn = xCon
      MMain.InitialAppMode()
    Endif
  Endif

End

''======================= History =====================
Public Sub GetPatHistoryLocalResult(sType As String, encid As String, sUnit As String)

  Dim xPath As String
  Dim xpatno As String

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)
    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then

      If sType = "Laboratory" Then
        xPath = modCHTMLPatient.ShowPatientAllLaboratoryReport(encid, sUnit)
      Else If sType = "Examination" Then
        xPath = modCHTMLPatient.ShowPatientAllExaminationReport(encid, "%")
      Else
        xPath = modPatReports.ShowAllEncounterSpecific(encid, sUnit, sType)
      Endif

      modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
    Endif
  Endif

End

Public Sub GetRepoHistoryLocalResult(sType As String, encid As String, sUnit As String)

  Dim xPath As String
  Dim xpatno As String
  Dim sCon As Connection
  Dim xCon As Connection

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)

    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      sCon = modDatabase.$myConn
      xCon = modDatabase.$syConn

      modRepository.TransferRemoConn(xpatno)
      xPath = modPatReports.ShowAllEncounterSpecific(encid, sUnit, sType)

      modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
      modDatabase.$myConn = sCon
      modDatabase.$syConn = xCon
      MMain.InitialAppMode()
    Endif

  Endif

End

''================= Visit Listing =====================
Public Sub GetVisitHistoryResult(xpatno As String)

  Dim res As Result
  Dim hForm As FRequest

  If xpatno Then
    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      res = modDatabase.$myConn.Exec("select fldencounterval,fldregdate,fldadmission,fldcurrlocat,flduserid,flddisctype from tblencounter where fldpatientval=&1 ORDER BY fldregdate", xpatno)
      hForm = New FRequest(res, "Patient Encounters", "PatientEncounters", False)
      hForm.ShowModal
    Endif
  Endif

End

Public Sub GetRepoVisitHistoryResult(xpatno As String)

  Dim res As Result
  Dim hForm As FRequest
  Dim sCon As Connection
  Dim xCon As Connection

  If xpatno Then
    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      sCon = modDatabase.$myConn
      xCon = modDatabase.$syConn
      modRepository.TransferRemoConn(xpatno)
      res = modDatabase.$myConn.Exec("select fldencounterval,fldregdate,fldadmission,fldcurrlocat,flduserid,fldhospcode from tblencounter where fldpatientval=&1 ORDER BY fldregdate", xpatno)
      hForm = New FRequest(res, "Patient Encounters", "PatientRemoteEncounters", False)
      hForm.ShowModal
      modDatabase.$myConn = sCon
      modDatabase.$syConn = xCon
      MMain.InitialAppMode()
    Endif
  Endif

End

''======================= Selected History ===============
Public Sub GetSelectHistoryResult(encid As String, sUnit As String)

  Dim xPath As String
  Dim xpatno As String
  Dim xList As String[]
  Dim xvarList As Variant[]
  Dim examlist As String[]
  Dim lablist As String[]
  Dim radiolist As String[]

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)
    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      xList = SelectMedBody("")
      Wait
      If xList Then
        If xList.Exist("Selected Investigations") Then
          xvarList = ListViewMulti(encid)
          If xvarList Then
            examlist = xvarList[0]
            lablist = xvarList[1]
            radiolist = xvarList[2]
          Endif
        Endif
      Endif

      xPath = modPatReports.ShowAllEncounterReport(encid, xList, examlist, lablist, radiolist, sUnit)
      modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
    Endif
  Endif

End

Public Sub GetRepoSelectHistoryResult(encid As String, sUnit As String)

  Dim xPath As String
  Dim xpatno As String
  Dim sCon As Connection
  Dim xCon As Connection

  Dim xList As String[]
  Dim xvarList As Variant[]
  Dim examlist As String[]
  Dim lablist As String[]
  Dim radiolist As String[]

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)

    If modPatientSub.GetPatPassCheck(modDatabase.$myConn, xpatno) = True Then
      xList = SelectMedBody("")
      Wait
      If xList Then
        If xList.Exist("Selected Investigations") Then
          xvarList = ListViewMulti(encid)
          If xvarList Then
            examlist = xvarList[0]
            lablist = xvarList[1]
            radiolist = xvarList[2]
          Endif
        Endif
      Endif

      sCon = modDatabase.$myConn
      xCon = modDatabase.$syConn
      modRepository.TransferRemoConn(xpatno)
      xPath = modPatReports.ShowAllEncounterReport(encid, xList, examlist, lablist, radiolist, sUnit)
      modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
      modDatabase.$myConn = sCon
      modDatabase.$syConn = xCon
      MMain.InitialAppMode()
    Endif

  Endif

End

''================= Selected data from same visit ===========
Public Sub GetSelectedPatientValues(encid As String, sUnit As String, Optional sYear As String)

  Dim xPath As String
  Dim xList As String[]
  Dim xvarList As Variant[]
  Dim examlist As String[]
  Dim lablist As String[]
  Dim radiolist As String[]

  If encid Then
    xList = SelectMedBody("")
    Wait
    If xList Then
      If xList.Exist("Selected Investigations") Then
        If sYear Then
          xvarList = ListViewMulti(encid, sYear)
        Else
          xvarList = ListViewMulti(encid)
        Endif
        If xvarList Then
          examlist = xvarList[0]
          lablist = xvarList[1]
          radiolist = xvarList[2]
        Endif
      Endif
    Endif

    xPath = modPatReports.ShowCompleteReport(encid, xList, examlist, lablist, radiolist, sUnit, False)
    modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
  Endif

End

''======================= Expenses =======================
Public Function GetInvoiceDetailTable(encid As String, sStatus As String, sBillMode As String) As String

  Dim res As Result
  Dim xvar As Variant[]
  Dim sColl As Collection
  Dim i As Integer
  Dim xfinal As String

  xvar = New Variant[]
  If sStatus = "OPD" Then
    res = modDatabase.$myConn.Exec("select flditemname,flditemtype from tblpatbilling where fldencounterval=&1 and fldbillingmode=&2 and fldbillno in(select fldbillno from tblpatbilldetail where fldprevdeposit=&3)", encid, sBillMode, 1)
  Else If sStatus = "IPD" Then
    res = modDatabase.$myConn.Exec("select flditemname,flditemtype from tblpatbilling where fldencounterval=&1 and fldbillingmode=&2 and fldbillno in(select fldbillno from tblpatbilldetail where fldprevdeposit>&3)", encid, sBillMode, 1)
  Endif
  If res.Available Then
    i = 1
    For Each res
      sColl = New Collection
      sColl.Add(CStr(i), CStr(0))
      sColl.Add(modNonMedical.GetBillItemHIAbbv(res["flditemname"], res["flditemtype"]), CStr(1))
      sColl.Add(res["flditemname"], CStr(2))
      xvar.Add(sColl)
      i = i + 1
    Next
    xfinal = modString.GetRichTableStringFromVariant(["", "Code", "Particulars"], xvar)

  Else
    xfinal = ""
  Endif

  Return xfinal

End

Public Sub ShowRepoExpensePatient(encid As String)

  Dim xPath As String
  Dim xpatno As String
  Dim sCon As Connection
  Dim xCon As Connection

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)

    sCon = modDatabase.$myConn
    xCon = modDatabase.$syConn
    Message.Info(("Generating Report ...."), ("OK"))
    modRepository.TransferRemoConn(xpatno)
    xPath = modCHTMLInvoice.ShowTotalExpenseAllEncPatient(modDatabase.$syConn, encid)
    modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
    modDatabase.$myConn = sCon
    modDatabase.$syConn = xCon
    MMain.InitialAppMode()

  Endif

End

Public Sub ShowRepoPharmExpensePatient(encid As String, sType As String)

  Dim xPath As String
  Dim xpatno As String
  Dim sCon As Connection
  Dim xCon As Connection

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)

    sCon = modDatabase.$myConn
    xCon = modDatabase.$syConn
    Message.Info(("Generating Report ...."), ("OK"))
    modRepository.TransferRemoConn(xpatno)
    xPath = modCHTMLInvoice.ShowItemDispensedByPatientAllEnc(modDatabase.$syConn, encid, sType)
    modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
    modDatabase.$myConn = sCon
    modDatabase.$syConn = xCon
    MMain.InitialAppMode()

  Endif

End

Public Sub ShowRepoSummExpensePatient(encid As String)

  Dim xPath As String
  Dim xpatno As String
  Dim sCon As Connection
  Dim xCon As Connection

  If encid Then
    xpatno = modPatient.GetPatientNoByEnc(encid)

    sCon = modDatabase.$myConn
    xCon = modDatabase.$syConn
    Message.Info(("Generating Report ...."), ("OK"))
    modRepository.TransferRemoConn(xpatno)
    xPath = modCHTMLInvoice.ShowSummExpenseAllEncPatient(modDatabase.$syConn, encid)
    modControlSub.OpenHTMLPreview(encid, xPath, "ReportSize")
    modDatabase.$myConn = sCon
    modDatabase.$syConn = xCon
    MMain.InitialAppMode()

  Endif

End

' Gambas module file

' Private $ProgressBar1 As ProgressBar

Public Function SummaryStatReport(conn As Connection, tbltarget As String, fldindex As String, fldtarget As String, flddate As String, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String, Optional wherefield As String, Optional whereText As Variant, Optional wherefield1 As String, Optional whereText1 As Variant) As String

  Dim $BillingReport As CReportHTML
  Dim sql As String
  Dim tot As Integer
  Dim res As Result
  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim total As Integer
  Dim xtot As Integer
  Dim xper As Float
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Tag = "Const"
  ' Endif

  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  sql = Subst("select COUNT(&1) as cnt from &2", fldindex, tbltarget)
  If wherefield And If wherefield1 Then
    res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3 and " & wherefield1 & "=&4" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText, whereText1)
  Else
    If wherefield Then
      res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText)
    Else
      res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
    Endif
  Endif
  tot = res["cnt"]

  $BillingReport.UserData.Add("SUMMARY: " & modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM1")
  $BillingReport.UserData.Add("TOTAL: " & modReportVar.GetLocaleNumberFormat(tot, 0), "PARAM2")

  If tot Then
    i = 1
    xtot = 0
    xper = 0
    sql2 = Subst("select &1 as fld,COUNT(&2) as cnt from &3", fldtarget, fldindex, tbltarget)
    If wherefield And If wherefield1 Then
      res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3 and " & wherefield1 & "=&4" & RepoStr & " GROUP BY " & fldtarget, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText, whereText1)
    Else
      If wherefield Then
        res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3" & RepoStr & " GROUP BY " & fldtarget, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText)
      Else
        res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2" & RepoStr & " GROUP BY " & fldtarget, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))                                                      ''
      Endif
    Endif
    If res2.Available Then
      For Each res2

        total = res2["cnt"]
        xtot = xtot + total
        xper = xper + (total * 100 / tot)
        With asx
          .Add(i)
          If TypeOf(res2["fld"]) = gb.Boolean Then
            If res2["fld"] = True Then
              .Add("Flagged")
            Else
              .Add("Others")
            Endif
          Else
            .Add(res2["fld"])
          Endif
          .Add(modReportVar.GetLocaleNumberFormat(total, 0))
          .Add(modReportVar.GetLocaleNumberFormat(total * 100 / tot, -2))
        End With
        $BillingReport.Add(asx)
        asx.Clear()
        ' If MMain.$IsGUIApp = True Then
        '   $ProgressBar1.Value = i / res2.Count
        '   Wait
        ' Endif

        i = i + 1
      Next
    Endif

    With asx
      .Add("")
      .Add("***")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    With asx
      .Add("")
      .Add("Missing")
      .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
    End With

    $BillingReport.Add(asx)
    asx.Clear()

  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function SummarySectionStatReport(conn As Connection, tbltarget As String, fldindex As String, fldtest As String, fldcateg As String, tblcateg As String, fldcategtest As String, flddate As String, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String, Optional wherefield As String, Optional whereText As Variant) As String

  Dim $BillingReport As CReportHTML
  Dim sql1 As String
  Dim sql As String
  Dim tot As Integer
  Dim res As Result
  Dim res1 As Result
  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim total As Integer
  Dim xtot As Integer
  Dim xper As Float
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Tag = "Const"
  ' Endif

  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  sql = Subst("select COUNT(&1) as cnt from &2", fldindex, tbltarget)
  If wherefield Then
    res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText)
  Else
    res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
  Endif
  tot = res["cnt"]

  $BillingReport.UserData.Add("SUMMARY: " & modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM1")
  $BillingReport.UserData.Add("TOTAL: " & modReportVar.GetLocaleNumberFormat(tot, 0), "PARAM2")

  If tot Then
    sql1 = Subst("select distinct(&1) as fld from &2 where &3 in(select &4 from &5", fldcateg, tblcateg, fldcategtest, fldtest, tbltarget)
    If wherefield Then
      res1 = conn.Exec(sql1 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3)", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText)
    Else
      res1 = conn.Exec(sql1 & " where " & flddate & ">=&1 and " & flddate & "<=&2)", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
    Endif

    If res1.Available Then
      i = 1
      xtot = 0
      xper = 0
      For Each res1
        If res1["fld"] Then
          sql2 = Subst("select COUNT(&1) as cnt from &2", fldindex, tbltarget)
          If wherefield Then
            res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3 and " & Subst("&1 in(select &2 from &3 where &4", fldtest, fldcategtest, tblcateg, fldcateg) & "=&4)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), whereText, res1["fld"])
          Else
            res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & Subst("&1 in(select &2 from &3 where &4", fldtest, fldcategtest, tblcateg, fldcateg) & "=&3)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), res1["fld"])                                                      ''
          Endif
          total = res2["cnt"]
          xtot = xtot + total
          xper = xper + (total * 100 / tot)
          With asx
            .Add(i)
            If TypeOf(res1["fld"]) = gb.Boolean Then
              If res1["fld"] = True Then
                .Add("Flagged")
              Else
                .Add("Others")
              Endif
            Else
              .Add(res1["fld"])
            Endif
            .Add(modReportVar.GetLocaleNumberFormat(total, 0))
            .Add(modReportVar.GetLocaleNumberFormat(total * 100 / tot, -2))
          End With
          $BillingReport.Add(asx)
          asx.Clear()
          i = i + 1
        Endif
        ' If MMain.$IsGUIApp = True Then
        '   $ProgressBar1.Value = res1.Index / res1.Count
        '   Wait
        ' Endif

      Next

      With asx
        .Add("")
        .Add("***")
        .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()

      With asx
        .Add("")
        .Add("Missing")
        .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
      End With

      $BillingReport.Add(asx)
      asx.Clear()
    Endif
  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryStatDateWiseReport(conn As Connection, tbltarget As String, fldindex As String, fldtarget As String, flddate As String, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String, Optional wherefield As String, Optional whereText As Variant) As String

  Dim $BillingReport As CReportHTML
  Dim sql As String
  Dim tot As Integer
  Dim res As Result

  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim total As Integer
  Dim xtot As Integer
  Dim xper As Float
  Dim dtlst As Date[]
  Dim dt As Date
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  dtlst = modDate.GetDateArrayBetween(dt1, dt2)
  For Each dt In dtlst
    tot = 0
    $BillingReport.AddChapter(modReportVar.GetDateTimeReport(dt, gb.MediumDate))
    sql = Subst("select COUNT(&1) as cnt from &2", fldindex, tbltarget)
    If wherefield Then
      res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3" & RepoStr, modDate.StartSqlDate(dt), modDate.EndSqlDate(dt), whereText)
    Else
      res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2" & RepoStr, modDate.StartSqlDate(dt), modDate.EndSqlDate(dt))
    Endif
    tot = res["cnt"]

    If tot Then
      i = 1
      xtot = 0
      xper = 0
      sql2 = Subst("select &1 as fld,COUNT(&2) as cnt from &3", fldtarget, fldindex, tbltarget)
      If wherefield Then
        res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & wherefield & "=&3" & RepoStr & " GROUP BY " & fldtarget, modDate.StartSqlDate(dt), modDate.EndSqlDate(dt), whereText)
      Else
        res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2" & RepoStr & " GROUP BY " & fldtarget, modDate.StartSqlDate(dt), modDate.EndSqlDate(dt))                                                      ''
      Endif
      If res2.Available Then
        For Each res2
          If res2["fld"] Then
            total = 0

            total = res2["cnt"]
            xtot = xtot + total
            xper = xper + (total * 100 / tot)
            With asx
              .Add(i)
              If TypeOf(res2["fld"]) = gb.Boolean Then
                If res2["fld"] = True Then
                  .Add("Flagged")
                Else
                  .Add("Others")
                Endif
              Else
                .Add(res2["fld"])
              Endif
              .Add(modReportVar.GetLocaleNumberFormat(total, 0))
              .Add(modReportVar.GetLocaleNumberFormat(total * 100 / tot, -2))
            End With
            $BillingReport.Add(asx)
            asx.Clear()
            i = i + 1

          Endif
        Next
      Endif

      With asx
        .Add("")
        .Add("***")
        .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()

      With asx
        .Add("")
        .Add("Missing")
        .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
      End With

      $BillingReport.Add(asx)
      asx.Clear()
    Endif
  Next

  Return $BillingReport.NewHTMLPath()

End

Public Function SummarySectionStatDateWiseReport(conn As Connection, tbltarget As String, fldindex As String, fldtest As String, fldcateg As String, tblcateg As String, fldcategtest As String, flddate As String, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim sql1 As String
  Dim sql As String
  Dim tot As Integer
  Dim res As Result
  Dim res1 As Result
  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim total As Integer
  Dim xtot As Integer
  Dim xper As Float
  Dim dtlst As Date[]
  Dim dt As Date
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  dtlst = modDate.GetDateArrayBetween(dt1, dt2)
  For Each dt In dtlst
    $BillingReport.AddChapter(modReportVar.GetDateTimeReport(dt, gb.MediumDate))
    sql = Subst("select COUNT(&1) as cnt from &2", fldindex, tbltarget)
    res = conn.Exec(sql & " where " & flddate & ">=&1 and " & flddate & "<=&2" & RepoStr, modDate.StartSqlDate(dt), modDate.EndSqlDate(dt))
    tot = res["cnt"]

    If tot Then
      sql1 = Subst("select distinct(&1) as fld from &2 where &3 in(select &4 from &5", fldcateg, tblcateg, fldcategtest, fldtest, tbltarget)
      res1 = conn.Exec(sql1 & " where " & flddate & ">=&1 and " & flddate & "<=&2)", modDate.StartSqlDate(dt), modDate.EndSqlDate(dt))
      If res1.Available Then
        i = 1
        xtot = 0
        xper = 0
        For Each res1
          If res1["fld"] Then
            sql2 = Subst("select COUNT(&1) as cnt from &2", fldindex, tbltarget)
            res2 = conn.Exec(sql2 & " where " & flddate & ">=&1 and " & flddate & "<=&2 and " & Subst("&1 in(select &2 from &3 where &4", fldtest, fldcategtest, tblcateg, fldcateg) & "=&3)" & RepoStr, modDate.StartSqlDate(dt), modDate.EndSqlDate(dt), res1["fld"])                                                      ''
            total = res2["cnt"]
            xtot = xtot + total
            xper = xper + (total * 100 / tot)
            With asx
              .Add(i)
              If TypeOf(res1["fld"]) = gb.Boolean Then
                If res1["fld"] = True Then
                  .Add("Flagged")
                Else
                  .Add("Others")
                Endif
              Else
                .Add(res1["fld"])
              Endif
              .Add(modReportVar.GetLocaleNumberFormat(total, 0))
              .Add(modReportVar.GetLocaleNumberFormat((total * 100) / tot, -2))
            End With
            $BillingReport.Add(asx)
            asx.Clear()
            i = i + 1
          Endif
        Next

        With asx
          .Add("")
          .Add("***")
          .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
          .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
        End With
        $BillingReport.Add(asx)
        asx.Clear()

        With asx
          .Add("")
          .Add("Missing")
          .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
          .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
        End With

        $BillingReport.Add(asx)
        asx.Clear()
      Endif
    Endif
  Next

  Return $BillingReport.NewHTMLPath()

End

''------------------------------------------ IP EVENTS --------------------------------------------
Private Function GetTotalDateStatus(conn As Connection, dt1 As Date, dt2 As Date, sStatus As String, sLocaType As String, sLocation As String, Optional sComment As String, Optional sComment1 As String) As Integer

  Dim res As Result
  Dim xx As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  If sComment Then
    If sComment1 Then
      res = conn.Exec("select count(fldid) as cnt from tblpatientdate where fldtime>=&1 and fldtime<=&2 and fldhead=&3 and (fldcomment=&4 or fldcomment=&5)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment, sComment1)
    Else
      res = conn.Exec("select count(fldid) as cnt from tblpatientdate where fldtime>=&1 and fldtime<=&2 and fldhead=&3 and fldcomment=&4" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment)
    Endif
  Else
    res = conn.Exec("select count(fldid) as cnt from tblpatientdate where fldtime>=&1 and fldtime<=&2 and fldhead=&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus)
  Endif
  If res["cnt"] Then
    xx = res["cnt"]
  Endif
  Return xx

End

Private Function GetTotalPatStatus(conn As Connection, dt1 As Date, dt2 As Date, sDept As String, sStatus As String, sLocaType As String, sLocation As String, Optional sComment As String, Optional sComment1 As String) As Integer

  Dim res As Result
  Dim xx As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  If sComment Then
    If sComment1 Then
      res = conn.Exec("select count(fldid) as cnt from tblpatientdate where fldtime>=&1 and fldtime<=&2 and fldhead=&3 and (fldcomment=&4 or fldcomment=&5) and fldencounterval in(select fldencounterval from tblencounter where fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &6))" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment, sComment1, sDept)
    Else
      res = conn.Exec("select count(fldid) as cnt from tblpatientdate where fldtime>=&1 and fldtime<=&2 and fldhead=&3 and fldcomment=&4 and fldencounterval in(select fldencounterval from tblencounter where fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &5))" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment, sDept)
    Endif
  Else
    res = conn.Exec("select count(fldid) as cnt from tblpatientdate where fldtime>=&1 and fldtime<=&2 and fldhead=&3 and fldencounterval in(select fldencounterval from tblencounter where fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &4))" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sDept)
  Endif
  If res["cnt"] Then
    xx = res["cnt"]
  Endif
  Return xx

End

Public Function GenerDateIPReport(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim i As Integer

  Dim DateList As Date[]
  Dim xdate As Date

  Dim xadmit As Integer
  Dim xdisc As Integer
  Dim xdisnt As Integer
  Dim xaldtot As Integer
  Dim xlama As Integer
  Dim xrefer As Integer
  Dim xdeath As Integer
  Dim xabsc As Integer

  Dim totadmit As Integer
  Dim totdisc As Integer
  Dim totdisnt As Integer
  Dim totalldsc As Integer
  Dim totlama As Integer
  Dim totrefer As Integer
  Dim totdeath As Integer
  Dim totabsc As Integer

  $BillingReport = New CReportHTML([("SNo"), ("Date"), ("Admitted"), "Discharged" & "<br>" & "Improved", "Discharged" & "<br>" & "Not Improved", "Discharged" & "<br>" & "Total", ("LAMA"), ("Refer"), ("Death"), ("Absconder")], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")
  DateList = modDate.GetDateArrayBetween(dt1, dt2)

  i = 1
  totadmit = 0
  totdisc = 0
  totdisnt = 0
  totalldsc = 0
  totlama = 0
  totrefer = 0
  totdeath = 0
  totabsc = 0
  For Each xdate In DateList
    xadmit = GetTotalDateStatus(conn, xdate, xdate, "Admitted", sLocaType, sLocation)
    xdisc = GetTotalDateStatus(conn, xdate, xdate, "Discharged", sLocaType, sLocation, "Recovered", "Improved")
    xdisnt = GetTotalDateStatus(conn, xdate, xdate, "Discharged", sLocaType, sLocation, "Unchanged", "Worse")
    xaldtot = GetTotalDateStatus(conn, xdate, xdate, "Discharged", sLocaType, sLocation)
    xlama = GetTotalDateStatus(conn, xdate, xdate, "LAMA", sLocaType, sLocation)
    xrefer = GetTotalDateStatus(conn, xdate, xdate, "Refer", sLocaType, sLocation)
    xdeath = GetTotalDateStatus(conn, xdate, xdate, "Death", sLocaType, sLocation)
    xabsc = GetTotalDateStatus(conn, xdate, xdate, "Absconder", sLocaType, sLocation)

    totadmit = totadmit + xadmit
    totdisc = totdisc + xdisc
    totdisnt = totdisnt + xdisnt
    totalldsc = totalldsc + xaldtot
    totlama = totlama + xlama
    totrefer = totrefer + xrefer
    totdeath = totdeath + xdeath
    totabsc = totabsc + xabsc

    With asx
      .Add(modReportVar.GetLocaleNumberFormat(i, 0))
      .Add(modReportVar.GetDateTimeReport(xdate, gb.MediumDate) & " [" & modDate.GetWeekDay(xdate) & "]")
      .Add(modReportVar.GetLocaleNumberFormat(xadmit, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xdisc, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xdisnt, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xaldtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xlama, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xrefer, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xdeath, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xabsc, 0))
    End With
    $BillingReport.Add(asx)
    asx.Clear()
    i = i + 1
  Next

  With asx
    .Add("")
    .Add("")
    .Add(modReportVar.GetLocaleNumberFormat(totadmit, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totdisc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totdisnt, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totalldsc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totlama, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totrefer, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totdeath, 0))
    .Add(modReportVar.GetLocaleNumberFormat(totabsc, 0))
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  Return $BillingReport.NewHTMLPath()

End

Public Function GetIPBedOccupancyDeptWise(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim i As Integer
  Dim xpackList As String[]
  Dim xpack As String
  Dim chpList As String[]

  Dim DateList As Date[]
  Dim xdate As Date
  Dim res As Result
  Dim xtot As Integer
  Dim atot As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation, "tblencounter")
  xpackList = modGeneral.GetDepartmentWithBedList()
  chpList = [("SNo"), ("Date")]
  chpList.Insert(xpackList)
  chpList.Add("Total")
  $BillingReport = New CReportHTML(chpList, "", "")
  $BillingReport.UserData.Add("BED OCCUPANCY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  DateList = modDate.GetDateArrayBetween(dt1, dt2)
  i = 1
  For Each xdate In DateList
    atot = 0
    With asx
      .Add(modReportVar.GetLocaleNumberFormat(i, 0))
      .Add(modReportVar.GetDateTimeReport(xdate, gb.MediumDate) & " [" & modDate.GetWeekDay(xdate) & "]")
      For Each xpack In xpackList
        xtot = 0
        res = conn.Exec("select COUNT(DISTINCT(tbldepartmentbed.fldbed)) as xcnt from tbldepartmentbed inner join tblencounter on tbldepartmentbed.fldbed=tblencounter.fldcurrlocat where tblencounter.flddoa<=&1 and (tblencounter.flddod>=&2 or tblencounter.flddod IS NULL) and tbldepartmentbed.flddept=&3" & RepoStr, modDate.EndSqlDate(xdate), modDate.StartSqlDate(xdate), xpack)
        If res.Available And If res["xcnt"] Then
          xtot = res["xcnt"]
        Else
          xtot = 0
        Endif
        atot = atot + xtot
        .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      Next
      .Add(modReportVar.GetLocaleNumberFormat(atot, 0))
    End With
    $BillingReport.Add(asx)
    asx.Clear()
    i = i + 1

  Next

  Return $BillingReport.NewHTMLPath()

End

Public Function GetIPBedOccupancy(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim i As Integer
  Dim xpackList As String[]
  Dim xpack As String
  Dim chpList As String[]

  Dim DateList As Date[]
  Dim xdate As Date
  Dim res As Result
  Dim xtot As Integer
  Dim atot As Integer

  xpackList = modControlSub.GetDirectFillresult(conn.Exec("select distinct(flddisctype) as col from tblencounter where flddisctype like &1 and (flddod>=&2 or flddod IS NULL)" & modDataRepo.GetWhereStringRepo(sLocaType, sLocation), "%", modDate.EndSqlDate(dt1)))
  ' ' xpackList = modNonMedical.FillDiscountCombo()
  chpList = [("SNo"), ("Date")]
  chpList.Insert(xpackList)
  chpList.Add("Total")
  $BillingReport = New CReportHTML(chpList, "", "")
  $BillingReport.UserData.Add("BED OCCUPANCY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  DateList = modDate.GetDateArrayBetween(dt1, dt2)
  i = 1
  For Each xdate In DateList
    atot = 0
    With asx
      .Add(modReportVar.GetLocaleNumberFormat(i, 0))
      .Add(modReportVar.GetDateTimeReport(xdate, gb.MediumDate) & " [" & modDate.GetWeekDay(xdate) & "]")
      For Each xpack In xpackList
        xtot = 0
        ' res = conn.Exec("select COUNT(fldencounterval) as xcnt from tblencounter where flddisctype=&1 and flddoa<=&2 and (flddod>=&3 or flddod IS NULL) and fldcurrlocat in(select fldbed from tbldepartmentbed)", xpack, modDate.EndSqlDate(xdate), modDate.StartSqlDate(xdate))
        res = conn.Exec("select COUNT(DISTINCT(tbldepartmentbed.fldbed)) as xcnt from tbldepartmentbed inner join tblencounter on tbldepartmentbed.fldbed=tblencounter.fldcurrlocat where tblencounter.flddisctype=&1 and tblencounter.flddoa<=&2 and (tblencounter.flddod>=&3 or tblencounter.flddod IS NULL)" & modDataRepo.GetWhereStringRepo(sLocaType, sLocation, "tblencounter"), xpack, modDate.EndSqlDate(xdate), modDate.StartSqlDate(xdate))
        If res.Available And If res["xcnt"] Then
          xtot = res["xcnt"]
        Else
          xtot = 0
        Endif
        atot = atot + xtot
        .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      Next
      .Add(modReportVar.GetLocaleNumberFormat(atot, 0))
    End With
    $BillingReport.Add(asx)
    asx.Clear()
    i = i + 1

  Next

  Return $BillingReport.NewHTMLPath()

End

Public Function GenerStatIPReport(conn As Connection, dt1 As Date, dt2 As Date, deptlist As String[], sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xdept As String
  Dim i As Integer

  Dim xadmit As Integer
  Dim xdisc As Integer
  Dim xdisnt As Integer
  Dim xdisall As Integer
  Dim xlama As Integer
  Dim xrefer As Integer
  Dim xdeath As Integer
  Dim xabsc As Integer
  Dim xexit As Integer

  Dim yadmit As Integer
  Dim ydisc As Integer
  Dim ydisnt As Integer
  Dim ydisall As Integer
  Dim ylama As Integer
  Dim yrefer As Integer
  Dim ydeath As Integer
  Dim yabsc As Integer
  Dim yexit As Integer

  Dim totadmit As Integer
  Dim totdisc As Integer
  Dim totdisnt As Integer
  Dim totdisall As Integer
  Dim totlama As Integer
  Dim totrefer As Integer
  Dim totdeath As Integer
  Dim totabsc As Integer
  Dim totexit As Integer

  $BillingReport = New CReportHTML([("SNo"), ("Department"), ("Admitted"), "Discharged" & "<br>" & "Improved", "Discharged" & "<br>" & "Not Improved", "Discharged" & "<br>" & "Total", ("LAMA"), ("Refer"), ("Death"), ("Absconder"), "Exit" & "<br>" & "Total"], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  i = 1
  totadmit = 0
  totdisc = 0
  totdisnt = 0
  totdisall = 0
  totlama = 0
  totrefer = 0
  totdeath = 0
  totabsc = 0
  totexit = 0
  For Each xdept In deptlist
    If xdept = "%" Then
    Else
      xadmit = GetTotalPatStatus(conn, dt1, dt2, xdept, "Admitted", sLocaType, sLocation)
      xdisc = GetTotalPatStatus(conn, dt1, dt2, xdept, "Discharged", sLocaType, sLocation, "Recovered", "Improved")
      xdisnt = GetTotalPatStatus(conn, dt1, dt2, xdept, "Discharged", sLocaType, sLocation, "Unchanged", "Worse")
      xdisall = GetTotalPatStatus(conn, dt1, dt2, xdept, "Discharged", sLocaType, sLocation)
      xlama = GetTotalPatStatus(conn, dt1, dt2, xdept, "LAMA", sLocaType, sLocation)
      xrefer = GetTotalPatStatus(conn, dt1, dt2, xdept, "Refer", sLocaType, sLocation)
      xdeath = GetTotalPatStatus(conn, dt1, dt2, xdept, "Death", sLocaType, sLocation)
      xabsc = GetTotalPatStatus(conn, dt1, dt2, xdept, "Absconder", sLocaType, sLocation)
      xexit = xdisall + xlama + xrefer + xdeath + xabsc

      totadmit = totadmit + xadmit
      totdisc = totdisc + xdisc
      totdisnt = totdisnt + xdisnt
      totdisall = totdisall + xdisall
      totlama = totlama + xlama
      totrefer = totrefer + xrefer
      totdeath = totdeath + xdeath
      totabsc = totabsc + xabsc
      totexit = totexit + xexit

      With asx
        .Add(modReportVar.GetLocaleNumberFormat(i, 0))
        .Add(xdept)
        .Add(modReportVar.GetLocaleNumberFormat(xadmit, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdisc, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdisnt, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdisall, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xlama, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xrefer, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdeath, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xabsc, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xexit, 0))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Endif
  Next

  yadmit = GetTotalDateStatus(conn, dt1, dt2, "Admitted", sLocaType, sLocation)
  ydisc = GetTotalDateStatus(conn, dt1, dt2, "Discharged", sLocaType, sLocation, "Recovered", "Improved")
  ydisnt = GetTotalDateStatus(conn, dt1, dt2, "Discharged", sLocaType, sLocation, "Unchanged", "Worse")
  ydisall = GetTotalDateStatus(conn, dt1, dt2, "Discharged", sLocaType, sLocation)
  ylama = GetTotalDateStatus(conn, dt1, dt2, "LAMA", sLocaType, sLocation)
  yrefer = GetTotalDateStatus(conn, dt1, dt2, "Refer", sLocaType, sLocation)
  ydeath = GetTotalDateStatus(conn, dt1, dt2, "Death", sLocaType, sLocation)
  yabsc = GetTotalDateStatus(conn, dt1, dt2, "Absconder", sLocaType, sLocation)
  yexit = ydisall + ylama + yrefer + ydeath + yabsc

  With asx
    .Add("")
    .Add("Unallocated")
    .Add(modReportVar.GetLocaleNumberFormat(yadmit - totadmit, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisc - totdisc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisnt - totdisnt, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisall - totdisall, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ylama - totlama, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yrefer - totrefer, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydeath - totdeath, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yabsc - totabsc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yexit - totexit, 0))
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  With asx
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
  End With
  $BillingReport.Add(asx)
  asx.Clear()
  With asx
    .Add("")
    .Add("")
    .Add(modReportVar.GetLocaleNumberFormat(yadmit, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisnt, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisall, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ylama, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yrefer, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydeath, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yabsc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yexit, 0))
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  Return $BillingReport.NewHTMLPath()

End

''----------------------------------------------- Confinement -----------------------------------------
Public Function DeliveryStatReport(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim tot As Integer
  Dim res As Result
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim total As Integer
  Dim xtot As Integer
  Dim xper As Float
  Dim xsex As String[] = ["Male", "Female", "Other"]
  Dim xgen As String
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  res = conn.Exec("select COUNT(fldid) as cnt from tblconfinement where flddeltime>=&1 and flddeltime <=&2 and flddelresult=&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), "Live Baby")
  tot = res["cnt"]

  If tot Then
    i = 1
    For Each xgen In xsex
      res2 = conn.Exec("select COUNT(fldid) as cnt from tblconfinement where flddeltime>=&1 and flddeltime <=&2 and flddelresult=&3 and fldbabypatno in(select fldpatientval from tblpatientinfo where fldptsex=&4)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), "Live Baby", xgen)                                                      ''
      total = res2["cnt"]
      xtot = xtot + total
      xper = xper + (total * 100 / tot)
      With asx
        .Add(i)
        .Add(xgen)
        .Add(modReportVar.GetLocaleNumberFormat(total, 0))
        .Add(modReportVar.GetLocaleNumberFormat(total * 100 / tot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Next

    With asx
      .Add("")
      .Add("***")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    With asx
      .Add("")
      .Add("Missing")
      .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function DeliveryWeightReport(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim tot As Integer
  Dim res As Result
  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim xtot As Float
  Dim xper As Float

  Dim agegrplst As String[]
  Dim agegp As String
  Dim scol As String[]
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY : WEIGHT GROUP", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  res = conn.Exec("select COUNT(fldid) as cnt from tblconfinement where flddeltime>=&1 and flddeltime <=&2 and flddelresult=&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), "Live Baby")
  tot = res["cnt"]

  If tot Then
    agegrplst = modMedReports.WeightGroupGeneralList()
    i = 1
    xtot = 0
    xper = 0
    For Each agegp In agegrplst
      scol = Split(agegp, ";")
      sql2 = "select COUNT(fldid) as total from tblconfinement where flddeltime>=&1 and flddeltime <=&2 and flddelresult=&3 and flddelwt>=&4 and flddelwt<&5" & RepoStr
      res2 = conn.Exec(sql2, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), "Live Baby", CInt(scol[1]), CInt(scol[2]))                                                      ''
      If res2.Available Then
        xtot = xtot + res2["total"]
        xper = xper + (res2["total"] * 100 / tot)
        With asx
          .Add(i)
          .Add(scol[0])
          .Add(modReportVar.GetLocaleNumberFormat(res2["total"], 0))
          .Add(modReportVar.GetLocaleNumberFormat(res2["total"] * 100 / tot, -2))
        End With
        $BillingReport.Add(asx)
        asx.Clear()
        i = i + 1
      Endif

    Next

    With asx
      .Add("")
      .Add("***")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    With asx
      .Add("")
      .Add("Missing")
      .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryMotherAgeGroup(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim tot As Integer
  Dim res As Result
  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim xtot As Float
  Dim xper As Float

  Dim agegrplst As String[]
  Dim agegp As String
  Dim xdtstr As String
  Dim scol As String[]

  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY : AGE GROUP", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")
  xdtstr = modMedReports.GetAgeStringByTable("tblencounter", conn)

  res = conn.Exec("select COUNT(fldid) as fld from tblconfinement where flddeltime>=&1 and flddeltime <=&2" & modDataRepo.GetWhereStringRepo(sLocaType, sLocation), modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
  tot = res["fld"]

  If tot Then
    agegrplst = modMedReports.AgeGroupGeneralList()
    i = 1
    xtot = 0
    xper = 0
    For Each agegp In agegrplst
      scol = Split(agegp, ";")
      sql2 = "select COUNT(tblconfinement.fldid) as total from (tblconfinement inner join tblencounter on tblconfinement.fldencounterval=tblencounter.fldencounterval) inner join tblpatientinfo on tblencounter.fldpatientval=tblpatientinfo.fldpatientval where tblconfinement.flddeltime>=&1 and tblconfinement.flddeltime<=&2 and tblpatientinfo.fldptbirday IS NOT NULL and " & xdtstr & ">=&3 and " & xdtstr & "<&4" & modDataRepo.GetWhereStringRepo(sLocaType, sLocation, "tblconfinement")                         ''
      res2 = conn.Exec(sql2, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), CInt(scol[1]), CInt(scol[2]))                                                      ''
      xtot = xtot + res2["total"]
      xper = xper + (res2["total"] * 100 / tot)
      With asx
        .Add(i)
        .Add(scol[0])
        .Add(modReportVar.GetLocaleNumberFormat(res2["total"], 0))
        .Add(modReportVar.GetLocaleNumberFormat(res2["total"] * 100 / tot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1

    Next

    With asx
      .Add("")
      .Add("***")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    With asx
      .Add("")
      .Add("Missing")
      .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function DeliveryDistrictReport(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim tot As Integer
  Dim res As Result
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim total As Integer
  Dim xtot As Integer
  Dim xper As Float
  Dim xdist As String[]
  Dim xgen As String
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  res = conn.Exec("select COUNT(fldid) as cnt from tblconfinement where flddeltime>=&1 and flddeltime <=&2" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
  tot = res["cnt"]

  If tot Then
    xdist = modBasic.$DistrictList

    i = 1
    For Each xgen In xdist
      res2 = conn.Exec("select COUNT(fldid) as cnt from tblconfinement where flddeltime>=&1 and flddeltime <=&2 and fldencounterval in(select fldencounterval from tblencounter where fldpatientval in(select fldpatientval from tblpatientinfo where fldptadddist=&3))" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), xgen)                                                      ''
      total = res2["cnt"]
      xtot = xtot + total
      xper = xper + (total * 100 / tot)
      With asx
        .Add(i)
        .Add(xgen)
        .Add(modReportVar.GetLocaleNumberFormat(total, 0))
        .Add(modReportVar.GetLocaleNumberFormat(total * 100 / tot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Next

    With asx
      .Add("")
      .Add("***")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    With asx
      .Add("")
      .Add("Missing")
      .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

  Endif

  Return $BillingReport.NewHTMLPath()

End

''---------------------------------------- For Encounters ------------------------------
Public Function SummaryStatEncounter(conn As Connection, sType As String, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim sql1 As String
  Dim tot As Integer
  Dim res As Result
  Dim res1 As Result
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim xtot As Float
  Dim xper As Float
  Dim xval As String
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Tag = "Const"
  ' Endif

  xval = modMedReports.GetColumnEncounter(sType)
  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY : " & sType, "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  res = conn.Exec("select COUNT(fldencounterval) as fld from tblencounter where fldregdate>=&1 and fldregdate<=&2" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
  tot = res["fld"]

  If tot Then

    Select sType
      Case "Gender", "Surname", "District", "Municipality", "Ethnic Group", "Service Rank", "Service Unit", "Service Category"
        sql1 = Subst("select distinct(&1) as fld from tblpatientinfo", xval)
        res1 = conn.Exec(sql1 & "  where fldpatientval in(select fldpatientval from tblencounter where fldregdate>=&1 and fldregdate<=&2)" & RepoStr & " ORDER BY " & xval & " ASC", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
      Case Else
        sql1 = Subst("select distinct(&1) as fld from tblencounter", xval)
        res1 = conn.Exec(sql1 & " where fldregdate>=&1 and fldregdate<=&2" & RepoStr & " ORDER BY " & xval & " ASC", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
    End Select
    If res1.Available Then
      i = 1
      xtot = 0
      xper = 0
      For Each res1
        If res1["fld"] Then
          Select sType
            Case "Gender", "Surname", "District", "Municipality", "Ethnic Group", "Service Rank", "Service Unit", "Service Category"
              res2 = conn.Exec("select COUNT(fldencounterval) as total from tblencounter where fldregdate>=&1 and fldregdate<=&2 and fldpatientval in(select fldpatientval from tblpatientinfo where " & xval & " =&3)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), res1["fld"])                                                      ''
            Case Else
              res2 = conn.Exec("select COUNT(fldencounterval) as total from tblencounter where fldregdate>=&1 and fldregdate<=&2 and " & xval & " =&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), res1["fld"])                                                      ''
          End Select
          xtot = xtot + res2["total"]
          xper = xper + (res2["total"] * 100 / tot)
          With asx
            .Add(i)
            .Add(Trim(CStr(res1["fld"])))
            .Add(modReportVar.GetLocaleNumberFormat(res2["total"], 0))
            .Add(modReportVar.GetLocaleNumberFormat(res2["total"] * 100 / tot, -2))
          End With
          $BillingReport.Add(asx)
          asx.Clear()
          i = i + 1
        Endif
        ' If MMain.$IsGUIApp = True Then
        '   $ProgressBar1.Value = res1.Index / res1.Count
        '   Wait
        ' Endif
      Next

      With asx
        .Add("")
        .Add("***")
        .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()

      With asx
        .Add("")
        .Add("Missing")
        .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()

    Endif
  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryStatAgeGroup(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim tot As Integer
  Dim res As Result
  Dim sql2 As String
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim xtot As Float
  Dim xper As Float

  Dim agegrplst As String[]
  Dim agegp As String
  Dim xdtstr As String
  Dim scol As String[]

  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY : AGE GROUP", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")
  xdtstr = modMedReports.GetAgeStringByTable("tblencounter", conn)

  res = conn.Exec("select COUNT(fldencounterval) as fld from tblencounter where fldregdate>=&1 and fldregdate<=&2" & modDataRepo.GetWhereStringRepo(sLocaType, sLocation), modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
  tot = res["fld"]

  If tot Then
    agegrplst = modMedReports.AgeGroupGeneralList()
    i = 1
    xtot = 0
    xper = 0
    For Each agegp In agegrplst
      scol = Split(agegp, ";")
      sql2 = "select COUNT(tblencounter.fldencounterval) as total from tblencounter inner join tblpatientinfo on tblencounter.fldpatientval=tblpatientinfo.fldpatientval where tblencounter.fldregdate>=&1 and tblencounter.fldregdate<=&2 and tblpatientinfo.fldptbirday IS NOT NULL and " & xdtstr & ">=&3 and " & xdtstr & "<&4" & modDataRepo.GetWhereStringRepo(sLocaType, sLocation, "tblencounter")
      res2 = conn.Exec(sql2, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), CInt(scol[1]), CInt(scol[2]))                                                      ''
      xtot = xtot + res2["total"]
      xper = xper + (res2["total"] * 100 / tot)
      With asx
        .Add(i)
        .Add(scol[0])
        .Add(modReportVar.GetLocaleNumberFormat(res2["total"], 0))
        .Add(modReportVar.GetLocaleNumberFormat(res2["total"] * 100 / tot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1

    Next

    With asx
      .Add("")
      .Add("***")
      .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

    With asx
      .Add("")
      .Add("Missing")
      .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
      .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
    End With
    $BillingReport.Add(asx)
    asx.Clear()

  Endif

  Return $BillingReport.NewHTMLPath()

End

Public Function SummaryDemographics(conn As Connection, sType As String, dt1 As Date, dt2 As Date, sTable As String, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim tot As Integer
  Dim res As Result
  Dim res2 As Result
  Dim asx As New String[0]
  Dim i As Integer
  Dim xtot As Float
  Dim xper As Float
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  ' If MMain.$IsGUIApp = True Then
  '   $ProgressBar1 = modAppSupport.FindWorkProgressBar(modHelpVariable.$LogInCategory)
  '   $ProgressBar1.Tag = "Const"
  ' Endif

  $BillingReport = New CReportHTML([("SNo"), ("Variables"), ("Count"), ("Percent")], "", "")
  $BillingReport.UserData.Add("SUMMARY : " & sType, "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  tot = 0
  res = conn.Exec("select COUNT(fldid) as fld from " & sTable & " where fldtime>=&1 and fldtime<=&2 and fldinput=&3 and flditem=&4" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), "Demographics", sType)
  If res.Available Then
    tot = res["fld"]

    If tot Then
      i = 1
      xtot = 0
      xper = 0
      res2 = conn.Exec("select fldreportquali,COUNT(fldid) as total from " & sTable & " where fldtime>=&1 and fldtime<=&2 and fldinput=&3 and flditem=&4" & RepoStr & " GROUP BY fldreportquali", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), "Demographics", sType)                                                      ''
      If res2.Available Then
        For Each res2
          If res2["fldreportquali"] Then
            xtot = xtot + res2["total"]
            xper = xper + (res2["total"] * 100 / tot)
            With asx
              .Add(i)
              .Add(res2["fldreportquali"])
              .Add(modReportVar.GetLocaleNumberFormat(res2["total"], 0))
              .Add(modReportVar.GetLocaleNumberFormat(res2["total"] * 100 / tot, -2))
            End With
            $BillingReport.Add(asx)
            asx.Clear()
            i = i + 1
          Endif
          ' If MMain.$IsGUIApp = True Then
          '   $ProgressBar1.Value = res2.Index / res2.Count
          '   Wait
          ' Endif
        Next
      Endif

      With asx
        .Add("")
        .Add("***")
        .Add(modReportVar.GetLocaleNumberFormat(xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xper, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()

      With asx
        .Add("")
        .Add("Missing")
        .Add(modReportVar.GetLocaleNumberFormat(tot - xtot, 0))
        .Add(modReportVar.GetLocaleNumberFormat((tot - xtot) * 100 / tot, -2))
      End With
      $BillingReport.Add(asx)
      asx.Clear()

    Endif
  Endif

  Return $BillingReport.NewHTMLPath()

End

''--------------------- Visit events -----------------
Private Function GetAdmitTotalDateStatus(conn As Connection, dt1 As Date, dt2 As Date, sLocaType As String, sLocation As String) As Integer

  Dim res As Result
  Dim xx As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddoa>=&1 and flddoa<=&2" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2))
  If res["cnt"] Then
    xx = res["cnt"]
  Endif
  Return xx

End

Private Function GetVisitTotalDateStatus(conn As Connection, dt1 As Date, dt2 As Date, sStatus As String, sLocaType As String, sLocation As String, Optional sComment As String, Optional sComment1 As String) As Integer

  Dim res As Result
  Dim xx As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  If sComment Then
    If sComment1 Then
      res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3 and fldencounterval in(select fldencounterval from tblpatientdate where (fldcomment=&4 or fldcomment=&5))" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment, sComment1)
    Else
      res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3 and fldencounterval in(select fldencounterval from tblpatientdate where fldcomment=&4)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment)
    Endif
  Else
    res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus)
  Endif
  If res["cnt"] Then
    xx = res["cnt"]
  Endif
  Return xx

End

Private Function GetAdmitTotalPatStatus(conn As Connection, dt1 As Date, dt2 As Date, sDept As String, sLocaType As String, sLocation As String) As Integer

  Dim res As Result
  Dim xx As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddoa>=&1 and flddoa<=&2 and fldadmitward like &3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sDept)
  If res["cnt"] Then
    xx = res["cnt"]
  Endif
  Return xx

End

Private Function GetVisitTotalPatStatus(conn As Connection, dt1 As Date, dt2 As Date, sDept As String, sStatus As String, sLocaType As String, sLocation As String, Optional sComment As String, Optional sComment1 As String) As Integer

  Dim res As Result
  Dim xx As Integer
  Dim RepoStr As String

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  If sComment Then
    If sComment1 Then
      res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3 and fldencounterval in(select fldencounterval from tblpatientdate where (fldcomment=&4 or fldcomment=&5)) and fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &6)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment, sComment1, sDept)
    Else
      res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3 and fldencounterval in(select fldencounterval from tblpatientdate where fldcomment=&4) and fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &5)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sComment, sDept)
    Endif
  Else
    res = conn.Exec("select count(fldencounterval) as cnt from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3 and fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &4)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sStatus, sDept)
  Endif
  If res["cnt"] Then
    xx = res["cnt"]
  Endif
  Return xx

End

Public Function GenerStatVisitIPReport(conn As Connection, dt1 As Date, dt2 As Date, deptlist As String[], sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim xdept As String
  Dim i As Integer

  Dim xadmit As Integer
  Dim xdisc As Integer
  Dim xdisnt As Integer
  Dim xdisall As Integer
  Dim xlama As Integer
  Dim xrefer As Integer
  Dim xdeath As Integer
  Dim xabsc As Integer
  Dim xexit As Integer

  Dim yadmit As Integer
  Dim ydisc As Integer
  Dim ydisnt As Integer
  Dim ydisall As Integer
  Dim ylama As Integer
  Dim yrefer As Integer
  Dim ydeath As Integer
  Dim yabsc As Integer
  Dim yexit As Integer

  Dim totadmit As Integer
  Dim totdisc As Integer
  Dim totdisnt As Integer
  Dim totdisall As Integer
  Dim totlama As Integer
  Dim totrefer As Integer
  Dim totdeath As Integer
  Dim totabsc As Integer
  Dim totexit As Integer

  $BillingReport = New CReportHTML([("SNo"), ("Department"), ("Admitted"), ("Discharged" & "<br>" & "Improved"), ("Discharged" & "<br>" & "Not Improved"), ("Discharged" & "<br>" & "Total"), ("LAMA"), ("Refer"), ("Death"), ("Absconder"), ("Exit" & "<br>" & "Total")], "", "")
  $BillingReport.UserData.Add("SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  i = 1
  totadmit = 0
  totdisc = 0
  totdisnt = 0
  totdisall = 0
  totlama = 0
  totrefer = 0
  totdeath = 0
  totabsc = 0
  totexit = 0
  For Each xdept In deptlist
    If xdept = "%" Then
    Else
      xadmit = GetAdmitTotalPatStatus(conn, dt1, dt2, xdept, sLocaType, sLocation)
      xdisc = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "Discharged", sLocaType, sLocation, "Recovered", "Improved")
      xdisnt = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "Discharged", sLocaType, sLocation, "Unchanged", "Worse")
      xdisall = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "Discharged", sLocaType, sLocation)
      xlama = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "LAMA", sLocaType, sLocation)
      xrefer = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "Refer", sLocaType, sLocation)
      xdeath = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "Death", sLocaType, sLocation)
      xabsc = GetVisitTotalPatStatus(conn, dt1, dt2, xdept, "Absconder", sLocaType, sLocation)
      xexit = xdisall + xlama + xrefer + xdeath + xabsc

      totadmit = totadmit + xadmit
      totdisc = totdisc + xdisc
      totdisnt = totdisnt + xdisnt
      totdisall = totdisall + xdisall
      totlama = totlama + xlama
      totrefer = totrefer + xrefer
      totdeath = totdeath + xdeath
      totabsc = totabsc + xabsc
      totexit = totexit + xexit

      With asx
        .Add(modReportVar.GetLocaleNumberFormat(i, 0))
        .Add(xdept)
        .Add(modReportVar.GetLocaleNumberFormat(xadmit, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdisc, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdisnt, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdisall, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xlama, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xrefer, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xdeath, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xabsc, 0))
        .Add(modReportVar.GetLocaleNumberFormat(xexit, 0))
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Endif
  Next

  yadmit = GetAdmitTotalDateStatus(conn, dt1, dt2, sLocaType, sLocation)
  ydisc = GetVisitTotalDateStatus(conn, dt1, dt2, "Discharged", sLocaType, sLocation, "Recovered", "Improved")
  ydisnt = GetVisitTotalDateStatus(conn, dt1, dt2, "Discharged", sLocaType, sLocation, "Unchanged", "Worse")
  ydisall = GetVisitTotalDateStatus(conn, dt1, dt2, "Discharged", sLocaType, sLocation)
  ylama = GetVisitTotalDateStatus(conn, dt1, dt2, "LAMA", sLocaType, sLocation)
  yrefer = GetVisitTotalDateStatus(conn, dt1, dt2, "Refer", sLocaType, sLocation)
  ydeath = GetVisitTotalDateStatus(conn, dt1, dt2, "Death", sLocaType, sLocation)
  yabsc = GetVisitTotalDateStatus(conn, dt1, dt2, "Absconder", sLocaType, sLocation)
  yexit = ydisall + ylama + yrefer + ydeath + yabsc

  With asx
    .Add("")
    .Add("Unallocated")
    .Add(modReportVar.GetLocaleNumberFormat(yadmit - totadmit, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisc - totdisc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisnt - totdisnt, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisall - totdisall, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ylama - totlama, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yrefer - totrefer, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydeath - totdeath, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yabsc - totabsc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yexit - totexit, 0))
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  With asx
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
    .Add("***")
  End With
  $BillingReport.Add(asx)
  asx.Clear()
  With asx
    .Add("")
    .Add("")
    .Add(modReportVar.GetLocaleNumberFormat(yadmit, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisnt, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydisall, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ylama, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yrefer, 0))
    .Add(modReportVar.GetLocaleNumberFormat(ydeath, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yabsc, 0))
    .Add(modReportVar.GetLocaleNumberFormat(yexit, 0))
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  Return $BillingReport.NewHTMLPath()

End

Public Function GetIPEventsReport(conn As Connection, dt1 As Date, dt2 As Date, sDept As String, sLocaType As String, sLocation As String) As String

  Dim $BillingReport As CReportHTML
  Dim asx As New String[0]
  Dim i As Integer
  Dim RepoStr As String

  Dim xcount As Integer
  Dim xoutLst As String[] = ["Discharged", "LAMA", "Death", "Refer", "Absconder"]
  Dim xout As String

  Dim res1 As Result
  Dim res2 As Result
  Dim rsx1 As Result
  Dim rsx2 As Result
  'Dim rsx3 As Result

  RepoStr = modDataRepo.GetWhereStringRepo(sLocaType, sLocation)
  $BillingReport = New CReportHTML([("SNo"), ("EncID"), ("Name"), ("Age/Sex"), ("Bed")], "", "")
  $BillingReport.UserData.Add("INDOOR EVENTS SUMMARY", "PARAM1")
  $BillingReport.UserData.Add(modReportVar.GetDateTimeReport(dt1, gb.MediumDate) & " TO " & modReportVar.GetDateTimeReport(dt2, gb.MediumDate), "PARAM2")

  xcount = 0
  res1 = conn.Exec("select fldencounterval,fldcurrlocat from tblencounter where flddoa>=&1 and flddoa<=&2 and fldadmitward like &3" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), sDept)
  If res1.Available Then
    xcount = res1.Count
    $BillingReport.AddChapter("ADMISSION")

    i = 1
    For Each res1
      With asx
        .Add(CStr(i))
        .Add(res1["fldencounterval"])
        .Add(modPatient.GetPatientNameByEnc(res1["fldencounterval"], conn))
        .Add(modMedReports.GetPatientPastAgeString("tblencounter", res1["fldencounterval"]) & "/" & Left(modPatient.GetPatientSex(res1["fldencounterval"], conn), 1))
        .Add("")
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Next

  Endif

  With asx
    .Add("")
    .Add("")
    .Add("TOTAL ADMISSION")
    .Add("")
    .Add(xcount)
  End With
  $BillingReport.Add(asx)
  asx.Clear()
  With asx
    .Add("")
    .Add("")
    .Add("")
    .Add("")
    .Add("")
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  xcount = 0
  For Each xout In xoutLst
    res2 = conn.Exec("select fldencounterval,fldcurrlocat from tblencounter where flddod>=&1 and flddod<=&2 and fldadmission=&3 and fldcurrlocat in(select fldbed from tbldepartmentbed where flddept like &4)" & RepoStr, modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt2), xout, sDept)
    If res2.Available Then
      xcount = xcount + res2.Count
      $BillingReport.AddChapter(UCase(xout))

      i = 1
      For Each res2
        With asx
          .Add(CStr(i))
          .Add(res2["fldencounterval"])
          .Add(modPatient.GetPatientNameByEnc(res2["fldencounterval"], conn))
          .Add(modMedReports.GetPatientPastAgeString("tblencounter", res2["fldencounterval"]) & "/" & Left(modPatient.GetPatientSex(res2["fldencounterval"], conn), 1))
          .Add(res2["fldcurrlocat"])
        End With
        $BillingReport.Add(asx)
        asx.Clear()
        i = i + 1
      Next

    Endif
  Next

  With asx
    .Add("")
    .Add("")
    .Add("TOTAL EXITS")
    .Add("")
    .Add(xcount)
  End With
  $BillingReport.Add(asx)
  asx.Clear()
  With asx
    .Add("")
    .Add("")
    .Add("")
    .Add("")
    .Add("")
  End With
  $BillingReport.Add(asx)
  asx.Clear()

  rsx1 = conn.Exec("select fldencounterval,fldcomment from tblpattiming where fldtype=&1 and flditem=&2 and fldfirstreport=&3 and fldfirsttime>=&4 and fldfirsttime<=&5 and fldsecondsave=&6 and fldcomment<>&7", "General Services", sDept, "Bed", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt1), True, "Intra Transfer")
  If rsx1.Available Then
    $BillingReport.AddChapter("TRANSFER IN")
    i = 1
    For Each rsx1
      With asx
        .Add(CStr(i))
        .Add(rsx1["fldencounterval"])
        .Add(modPatient.GetPatientNameByEnc(rsx1["fldencounterval"], conn))
        .Add(modMedReports.GetPatientPastAgeString("tblencounter", rsx1["fldencounterval"]) & "/" & Left(modPatient.GetPatientSex(rsx1["fldencounterval"], conn), 1))
        .Add(rsx1["fldcomment"])
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Next
    With asx
      .Add("")
      .Add("")
      .Add("")
      .Add("")
      .Add("")
    End With
    $BillingReport.Add(asx)
    asx.Clear()
  Endif

  rsx2 = conn.Exec("select fldencounterval,fldsecondreport from tblpattiming where fldtype=&1 and flditem=&2 and fldfirstreport=&3 and fldsecondtime>=&4 and fldsecondtime<=&5 and fldsecondsave=&6 and fldcomment=&7", "General Services", sDept, "Bed", modDate.StartSqlDate(dt1), modDate.EndSqlDate(dt1), True, "Intra Transfer")
  If rsx2.Available Then
    $BillingReport.AddChapter("INTRA-WARD TRANSFER")
    i = 1
    For Each rsx2
      With asx
        .Add(CStr(i))
        .Add(rsx2["fldencounterval"])
        .Add(modPatient.GetPatientNameByEnc(rsx2["fldencounterval"], conn))
        .Add(modMedReports.GetPatientPastAgeString("tblencounter", rsx2["fldencounterval"]) & "/" & Left(modPatient.GetPatientSex(rsx2["fldencounterval"], conn), 1))
        .Add(rsx2["fldsecondreport"])
      End With
      $BillingReport.Add(asx)
      asx.Clear()
      i = i + 1
    Next
    With asx
      .Add("")
      .Add("")
      .Add("")
      .Add("")
      .Add("")
    End With
    $BillingReport.Add(asx)
    asx.Clear()
  Endif

  ''Trans Out

  Return $BillingReport.NewHTMLPath()

End

' Gambas module file

Public $TestMastereData As Collection
Public $TestIDFromSysConst As Collection

Public $TestDrugHypo As Collection
Public $TestdrugHyper As Collection
Public $TestSyndroBrady As Collection
Public $TestSyndroTachy As Collection

Public Sub GetTestMasterDataColl(testname As String, sCon As Connection)

  Dim res As Result
  Dim sColl As Collection

  If $TestMastereData.Exist(testname) = False Then
    res = sCon.Exec("SELECT fldcaption,fldcategory,fldsysconst,fldspecimen,fldspecmcode,fldcollection,flddetail,fldtype,fldsensitivity,fldspecificity,fldtestorder,fldcomment,fldoption,fldcritical FROM tbltest WHERE fldtestid=&1", testname)     ''
    If res.Available Then
      sColl = New Collection
      sColl.Add(res["fldcaption"], "fldcaption")
      sColl.Add(res["fldcategory"], "fldcategory")
      sColl.Add(res["fldsysconst"], "fldsysconst")
      sColl.Add(res["fldspecimen"], "fldspecimen")
      sColl.Add(res["fldspecmcode"], "fldspecmcode")
      sColl.Add(res["fldcollection"], "fldcollection")
      sColl.Add(res["flddetail"], "flddetail")
      sColl.Add(res["fldtype"], "fldtype")
      sColl.Add(res["fldsensitivity"], "fldsensitivity")
      sColl.Add(res["fldspecificity"], "fldspecificity")
      sColl.Add(res["fldtestorder"], "fldtestorder")
      sColl.Add(res["fldcomment"], "fldcomment")
      sColl.Add(res["fldoption"], "fldoption")
      sColl.Add(res["fldcritical"], "fldcritical")

      ''add to collection
      $TestMastereData.Add(sColl, testname)
    Endif
  Endif

End

Public Function GetLabTestCaption(test As String, Optional sCon As Connection) As String

  Dim xx As String
  Dim res As Result
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(test, $con)
  If $TestMastereData.Exist(test) Then
    xx = $TestMastereData[test]["fldcaption"]
  Else
    res = $con.Exec("select fldcaption from tbltest where fldtestid=&1", test)
    If res.Available Then
      If res["fldcaption"] Then
        xx = res["fldcaption"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetLabTestCategory(test As String, Optional sCon As Connection) As String

  Dim xx As String
  Dim res As Result
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(test, $con)
  If $TestMastereData.Exist(test) Then
    xx = $TestMastereData[test]["fldcategory"]
  Else
    res = $con.Exec("select fldcategory from tbltest where fldtestid=&1", test)
    If res.Available Then
      If res["fldcategory"] Then
        xx = res["fldcategory"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetLabTestType(strTest As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(strTest, $con)
  If $TestMastereData.Exist(strTest) Then
    xx = $TestMastereData[strTest]["fldtype"]
  Else
    res = $con.Exec("select fldtype from tbltest where fldtestid=&1", strTest)
    If res.Available Then
      If res["fldtype"] Then
        xx = res["fldtype"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetLabTestOptionType(strTest As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(strTest, $con)
  If $TestMastereData.Exist(strTest) Then
    xx = $TestMastereData[strTest]["fldoption"]
  Else
    res = $con.Exec("select fldoption from tbltest where fldtestid=&1", strTest)
    If res.Available Then
      If res["fldoption"] Then
        xx = res["fldoption"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetTestSysName(sTest As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(sTest, $con)
  If $TestMastereData.Exist(sTest) Then
    xx = $TestMastereData[sTest]["fldsysconst"]
  Else
    res = $con.Exec("select fldsysconst from tbltest where fldtestid=&1", sTest)
    If res.Available Then
      If res["fldsysconst"] Then
        xx = res["fldsysconst"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetTestSpecimen(testid As String, Optional sCon As Connection) As String

  Dim xx As String
  Dim res As Result
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(testid, $con)
  If $TestMastereData.Exist(testid) Then
    xx = $TestMastereData[testid]["fldspecimen"]
  Else
    res = $con.Exec("select fldspecimen from tbltest where fldtestid=&1", testid)
    If res.Available Then
      If res["fldspecimen"] Then
        xx = res["fldspecimen"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetTestSampleSuffix(sTest As String, Optional sCon As Connection) As String

  Dim res As Result
  Dim xx As String
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(sTest, $con)
  If $TestMastereData.Exist(sTest) Then
    xx = $TestMastereData[sTest]["fldspecmcode"]
  Else
    res = $con.Exec("select fldspecmcode from tbltest where fldtestid=&1", sTest)
    If res.Available Then
      If res["fldspecmcode"] Then
        xx = res["fldspecmcode"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetCritValueTest(strTest As String, Optional sCon As Connection) As Float

  Dim res As Result
  Dim xval As Float

  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(strTest, $con)
  If $TestMastereData.Exist(strTest) Then
    If $TestMastereData[strTest]["fldcritical"] Then
      xval = $TestMastereData[strTest]["fldcritical"]
    Else
      xval = 0
    Endif
  Else
    res = $con.Exec("select fldcritical from tbltest where fldtestid=&1", strTest)
    If res.Available Then
      If res["fldcritical"] Then
        xval = res["fldcritical"]
      Else
        xval = 0
      Endif
    Else
      xval = 0
    Endif
  Endif
  Return xval

End

Public Function GetLabFooterInfo(txtexam As String, Optional sCon As Connection) As String

  Dim xx As String
  Dim res As Result
  Dim $con As Connection

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(txtexam, $con)
  If $TestMastereData.Exist(txtexam) Then
    xx = $TestMastereData[txtexam]["fldcomment"]
  Else
    res = $con.Exec("select fldcomment from tbltest where fldtestid=&1", txtexam)
    If res.Available Then
      If res["fldcomment"] Then
        xx = res["fldcomment"]
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetLabTestOrder(sTest As String, Optional sCon As Connection) As Integer

  Dim res As Result
  Dim xorder As Integer
  Dim $con As Connection
  Dim xx As String[]

  If sCon Then
    $con = sCon
  Else
    $con = modDatabase.$medConn
  Endif

  GetTestMasterDataColl(sTest, $con)
  If $TestMastereData.Exist(sTest) Then
    If $TestMastereData[sTest]["fldtestorder"] Then
      xx = $TestMastereData[sTest]["fldtestorder"]
    Else
      xx = 0
    Endif
  Else
    res = $con.Exec("select fldtestorder from tbltest where fldtestid=&1", sTest)
    If res.Available Then
      If res["fldtestorder"] Then
        xorder = res["fldtestorder"]
      Else
        xorder = 0
      Endif
    Else
      xorder = 0
    Endif
  Endif
  Return xorder

End

'NOTE:------------------------------- TEST Procedures ------------------------------------------
Public Function GetTestExamEquipments(sType As String) As String[]

  Dim res As Result
  Dim res1 As Result
  Dim xxx As String[]

  res = modDatabase.$medConn.Exec("select fldmethod from tbltestmethod where fldcateg like &1", sType)
  If res.Available Then
    xxx = modControlSub.GetDirectFillresult(res)
  Else
    res1 = modDatabase.$medConn.Exec("select distinct(fldmethod) from tblpatlabtest")
    xxx = modControlSub.GetDirectFillresult(res1)
  Endif
  Return xxx

End

Public Function MethodsForLabTest(sTestName As String) As String[]

  Dim xx As String[]
  Dim res As Result

  res = modDatabase.$medConn.Exec("select distinct(fldmethod) as col from tbltestlimit where fldtestid=&1", sTestName)
  xx = modControlSub.GetDirectFillresult(res)
  Return xx

End

Public Function GetLabTestIDFromSysConst(sysCons As String) As String

  Dim res As Result
  Dim xx As String

  xx = modHelpVariable.GetCollectionValue($TestIDFromSysConst, sysCons, modBasic.$AppCacheLaboratoryConstants)
  If Not xx Then
    res = modDatabase.$medConn.Exec("select fldtestid from tbltest where fldsysconst=&1", sysCons)
    If res.Available = True Then
      res.MoveFirst
      If res["fldtestid"] Then
        xx = res["fldtestid"]
        If modBasic.$AppCacheLaboratoryConstants = "Yes" Then
          $TestIDFromSysConst.Add(xx, sysCons)
        Endif
      Else
        xx = ""
      Endif
    Else
      xx = ""
    Endif
  Endif
  Return xx

End

Public Function GetTestWithCategory(sTestList As String[]) As String[]

  Dim xx As String
  Dim xval As String[]

  xval = New String[]
  For Each xx In sTestList
    xval.Add(GetLabTestCategory(xx) & "|" & xx)
  Next
  Return xval

End

Public Function GetSubTestArray(testid As String) As String[]

  Dim res As Result
  Dim xx As String[]

  res = modDatabase.$medConn.Exec("select distinct(fldsubtest) from tbltestquali where fldtestid=&1 ORDER BY fldindex", testid)
  xx = modControlSub.GetDirectFillresult(res)

  Return xx

End

Public Function GetSubTestOption(testid As String, subtest As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldtanswertype from tbltestquali where fldtestid=&1 and fldsubtest=&2", testid, subtest)
  If res.Available Then
    If res["fldtanswertype"] Then
      xx = res["fldtanswertype"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif
  Return xx

End

Public Function GetLabQualiTestTextReference(txttest As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldanswer from tbltestoption where fldtestid=&1 and fldanswertype=&2 ORDER BY fldindex", txttest, "Text Reference")
  If res.Available = True Then
    If res["fldanswer"] Then
      xx = res["fldanswer"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetSubLatTestQualiReference(txttest As String, txtsubtest As String) As String

  Dim res As Result
  Dim xx As String

  res = modDatabase.$medConn.Exec("select fldreference from tbltestquali where fldtestid=&1 and fldsubtest=&2", txttest, txtsubtest)
  If res.Available = True Then
    If res["fldreference"] Then
      xx = res["fldreference"]
    Else
      xx = ""
    Endif
  Else
    xx = ""
  Endif

  Return xx

End

Public Function GetTestUnitWithOutAgeSex(strTest As String, strUnit As String) As String

  Dim unt As String
  Dim res As Result

  res = modDatabase.$medConn.Exec("select fldsiunit,fldmetunit from tbltestlimit where fldtestid=&1", strTest)
  res.MoveFirst
  If strUnit = "Metric" Then
    If res["fldmetunit"] Then
      unt = res["fldmetunit"]
    Else
      unt = ""
    Endif
  Else If strUnit = "SI" Then
    If res["fldsiunit"] Then
      unt = res["fldsiunit"]
    Else
      unt = ""
    Endif
  Endif

  Return unt

End

Public Function LabFieldValue(sField As String, strTest As String) As Float

  Dim res As Result
  Dim svalue As Float

  res = modDatabase.$medConn.Exec(Subst("select &1 as fldname from tbltest", sField) & " where fldtestid=&1", strTest)
  If res.Available Then
    If res["fldname"] Then
      svalue = res["fldname"]
    Else
      svalue = 0
    Endif
  Else
    svalue = 0
  Endif
  Return svalue

End
